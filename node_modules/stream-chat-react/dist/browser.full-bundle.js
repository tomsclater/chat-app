var StreamChatReact = (function (exports, React, streamChat) {
    'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
    var React__namespace = /*#__PURE__*/_interopNamespace(React);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign$2 = function() {
        __assign$2 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$2.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter$1(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$1(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || from);
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule$1(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    function getCjsExportFromNamespace (n) {
    	return n && n['default'] || n;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var loadScript = function load (src, opts, cb) {
      var head = document.head || document.getElementsByTagName('head')[0];
      var script = document.createElement('script');

      if (typeof opts === 'function') {
        cb = opts;
        opts = {};
      }

      opts = opts || {};
      cb = cb || function() {};

      script.type = opts.type || 'text/javascript';
      script.charset = opts.charset || 'utf8';
      script.async = 'async' in opts ? !!opts.async : true;
      script.src = src;

      if (opts.attrs) {
        setAttributes(script, opts.attrs);
      }

      if (opts.text) {
        script.text = '' + opts.text;
      }

      var onend = 'onload' in script ? stdOnEnd : ieOnEnd;
      onend(script, cb);

      // some good legacy browsers (firefox) fail the 'in' detection above
      // so as a fallback we always set onload
      // old IE will ignore this and new IE will set onload
      if (!script.onload) {
        stdOnEnd(script, cb);
      }

      head.appendChild(script);
    };

    function setAttributes(script, attrs) {
      for (var attr in attrs) {
        script.setAttribute(attr, attrs[attr]);
      }
    }

    function stdOnEnd (script, cb) {
      script.onload = function () {
        this.onerror = this.onload = null;
        cb(null, script);
      };
      script.onerror = function () {
        // this.onload = null here is necessary
        // because even IE9 works not like others
        this.onerror = this.onload = null;
        cb(new Error('Failed to load ' + this.src), script);
      };
    }

    function ieOnEnd (script, cb) {
      script.onreadystatechange = function () {
        if (this.readyState != 'complete' && this.readyState != 'loaded') return
        this.onreadystatechange = null;
        cb(null, script); // there is no way to catch loading errors in IE8
      };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var isMergeableObject = function isMergeableObject(value) {
    	return isNonNullObject(value)
    		&& !isSpecial(value)
    };

    function isNonNullObject(value) {
    	return !!value && typeof value === 'object'
    }

    function isSpecial(value) {
    	var stringValue = Object.prototype.toString.call(value);

    	return stringValue === '[object RegExp]'
    		|| stringValue === '[object Date]'
    		|| isReactElement(value)
    }

    // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
    var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

    function isReactElement(value) {
    	return value.$$typeof === REACT_ELEMENT_TYPE
    }

    function emptyTarget(val) {
    	return Array.isArray(val) ? [] : {}
    }

    function cloneUnlessOtherwiseSpecified(value, options) {
    	return (options.clone !== false && options.isMergeableObject(value))
    		? deepmerge(emptyTarget(value), value, options)
    		: value
    }

    function defaultArrayMerge(target, source, options) {
    	return target.concat(source).map(function(element) {
    		return cloneUnlessOtherwiseSpecified(element, options)
    	})
    }

    function getMergeFunction(key, options) {
    	if (!options.customMerge) {
    		return deepmerge
    	}
    	var customMerge = options.customMerge(key);
    	return typeof customMerge === 'function' ? customMerge : deepmerge
    }

    function getEnumerableOwnPropertySymbols(target) {
    	return Object.getOwnPropertySymbols
    		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
    			return target.propertyIsEnumerable(symbol)
    		})
    		: []
    }

    function getKeys(target) {
    	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
    }

    function propertyIsOnObject(object, property) {
    	try {
    		return property in object
    	} catch(_) {
    		return false
    	}
    }

    // Protects from prototype poisoning and unexpected merging up the prototype chain.
    function propertyIsUnsafe(target, key) {
    	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
    		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
    			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
    }

    function mergeObject(target, source, options) {
    	var destination = {};
    	if (options.isMergeableObject(target)) {
    		getKeys(target).forEach(function(key) {
    			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    		});
    	}
    	getKeys(source).forEach(function(key) {
    		if (propertyIsUnsafe(target, key)) {
    			return
    		}

    		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
    			destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    		} else {
    			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    		}
    	});
    	return destination
    }

    function deepmerge(target, source, options) {
    	options = options || {};
    	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    	options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
    	// implementations can use it. The caller may not replace it.
    	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

    	var sourceIsArray = Array.isArray(source);
    	var targetIsArray = Array.isArray(target);
    	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

    	if (!sourceAndTargetTypesMatch) {
    		return cloneUnlessOtherwiseSpecified(source, options)
    	} else if (sourceIsArray) {
    		return options.arrayMerge(target, source, options)
    	} else {
    		return mergeObject(target, source, options)
    	}
    }

    deepmerge.all = function deepmergeAll(array, options) {
    	if (!Array.isArray(array)) {
    		throw new Error('first argument should be an array')
    	}

    	return array.reduce(function(prev, next) {
    		return deepmerge(prev, next, options)
    	}, {})
    };

    var deepmerge_1 = deepmerge;

    var cjs = deepmerge_1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var utils$2 = createCommonjsModule$1(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.parseStartTime = parseStartTime;
    exports.parseEndTime = parseEndTime;
    exports.randomString = randomString;
    exports.queryString = queryString;
    exports.getSDK = getSDK;
    exports.getConfig = getConfig;
    exports.omit = omit;
    exports.callPlayer = callPlayer;
    exports.isMediaStream = isMediaStream;
    exports.isBlobUrl = isBlobUrl;
    exports.supportsWebKitPresentationMode = supportsWebKitPresentationMode;

    var _loadScript = _interopRequireDefault(loadScript);

    var _deepmerge = _interopRequireDefault(cjs);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

    function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

    function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

    var MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;
    var MATCH_END_QUERY = /[?&#]end=([0-9hms]+)/;
    var MATCH_START_STAMP = /(\d+)(h|m|s)/g;
    var MATCH_NUMERIC = /^\d+$/; // Parse YouTube URL for a start time param, ie ?t=1h14m30s
    // and return the start time in seconds

    function parseTimeParam(url, pattern) {
      if (url instanceof Array) {
        return undefined;
      }

      var match = url.match(pattern);

      if (match) {
        var stamp = match[1];

        if (stamp.match(MATCH_START_STAMP)) {
          return parseTimeString(stamp);
        }

        if (MATCH_NUMERIC.test(stamp)) {
          return parseInt(stamp);
        }
      }

      return undefined;
    }

    function parseTimeString(stamp) {
      var seconds = 0;
      var array = MATCH_START_STAMP.exec(stamp);

      while (array !== null) {
        var _array = array,
            _array2 = _slicedToArray(_array, 3),
            count = _array2[1],
            period = _array2[2];

        if (period === 'h') seconds += parseInt(count, 10) * 60 * 60;
        if (period === 'm') seconds += parseInt(count, 10) * 60;
        if (period === 's') seconds += parseInt(count, 10);
        array = MATCH_START_STAMP.exec(stamp);
      }

      return seconds;
    }

    function parseStartTime(url) {
      return parseTimeParam(url, MATCH_START_QUERY);
    }

    function parseEndTime(url) {
      return parseTimeParam(url, MATCH_END_QUERY);
    } // http://stackoverflow.com/a/38622545


    function randomString() {
      return Math.random().toString(36).substr(2, 5);
    }

    function queryString(object) {
      return Object.keys(object).map(function (key) {
        return "".concat(key, "=").concat(object[key]);
      }).join('&');
    }

    function getGlobal(key) {
      if (window[key]) {
        return window[key];
      }

      if (window.exports && window.exports[key]) {
        return window.exports[key];
      }

      if (window.module && window.module.exports && window.module.exports[key]) {
        return window.module.exports[key];
      }

      return null;
    } // Util function to load an external SDK
    // or return the SDK if it is already loaded


    var requests = {};

    function getSDK(url, sdkGlobal) {
      var sdkReady = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var isLoaded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {
        return true;
      };
      var fetchScript = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _loadScript["default"];
      var existingGlobal = getGlobal(sdkGlobal);

      if (existingGlobal && isLoaded(existingGlobal)) {
        return Promise.resolve(existingGlobal);
      }

      return new Promise(function (resolve, reject) {
        // If we are already loading the SDK, add the resolve and reject
        // functions to the existing array of requests
        if (requests[url]) {
          requests[url].push({
            resolve: resolve,
            reject: reject
          });
          return;
        }

        requests[url] = [{
          resolve: resolve,
          reject: reject
        }];

        var onLoaded = function onLoaded(sdk) {
          // When loaded, resolve all pending request promises
          requests[url].forEach(function (request) {
            return request.resolve(sdk);
          });
        };

        if (sdkReady) {
          var previousOnReady = window[sdkReady];

          window[sdkReady] = function () {
            if (previousOnReady) previousOnReady();
            onLoaded(getGlobal(sdkGlobal));
          };
        }

        fetchScript(url, function (err) {
          if (err) {
            // Loading the SDK failed – reject all requests and
            // reset the array of requests for this SDK
            requests[url].forEach(function (request) {
              return request.reject(err);
            });
            requests[url] = null;
          } else if (!sdkReady) {
            onLoaded(getGlobal(sdkGlobal));
          }
        });
      });
    }

    function getConfig(props, defaultProps) {
      return (0, _deepmerge["default"])(defaultProps.config, props.config);
    }

    function omit(object) {
      var _ref;

      for (var _len = arguments.length, arrays = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        arrays[_key - 1] = arguments[_key];
      }

      var omitKeys = (_ref = []).concat.apply(_ref, arrays);

      var output = {};
      var keys = Object.keys(object);

      for (var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++) {
        var key = _keys[_i2];

        if (omitKeys.indexOf(key) === -1) {
          output[key] = object[key];
        }
      }

      return output;
    }

    function callPlayer(method) {
      var _this$player;

      // Util method for calling a method on this.player
      // but guard against errors and console.warn instead
      if (!this.player || !this.player[method]) {
        var message = "ReactPlayer: ".concat(this.constructor.displayName, " player could not call %c").concat(method, "%c \u2013 ");

        if (!this.player) {
          message += 'The player was not available';
        } else if (!this.player[method]) {
          message += 'The method was not available';
        }

        console.warn(message, 'font-weight: bold', '');
        return null;
      }

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return (_this$player = this.player)[method].apply(_this$player, args);
    }

    function isMediaStream(url) {
      return typeof window !== 'undefined' && typeof window.MediaStream !== 'undefined' && url instanceof window.MediaStream;
    }

    function isBlobUrl(url) {
      return /^blob:/.test(url);
    }

    function supportsWebKitPresentationMode() {
      var video = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.createElement('video');
      // Check if Safari supports PiP, and is not on mobile (other than iPad)
      // iPhone safari appears to "support" PiP through the check, however PiP does not function
      var notMobile = /iPhone|iPod/.test(navigator.userAgent) === false;
      return video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function' && notMobile;
    }
    });

    unwrapExports(utils$2);
    utils$2.parseStartTime;
    utils$2.parseEndTime;
    utils$2.randomString;
    utils$2.queryString;
    utils$2.getSDK;
    utils$2.getConfig;
    utils$2.omit;
    utils$2.callPlayer;
    utils$2.isMediaStream;
    utils$2.isBlobUrl;
    utils$2.supportsWebKitPresentationMode;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var patterns = createCommonjsModule$1(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.canPlay = exports.FLV_EXTENSIONS = exports.DASH_EXTENSIONS = exports.HLS_EXTENSIONS = exports.VIDEO_EXTENSIONS = exports.AUDIO_EXTENSIONS = exports.MATCH_URL_KALTURA = exports.MATCH_URL_VIDYARD = exports.MATCH_URL_MIXCLOUD = exports.MATCH_URL_DAILYMOTION = exports.MATCH_URL_TWITCH_CHANNEL = exports.MATCH_URL_TWITCH_VIDEO = exports.MATCH_URL_WISTIA = exports.MATCH_URL_STREAMABLE = exports.MATCH_URL_FACEBOOK_WATCH = exports.MATCH_URL_FACEBOOK = exports.MATCH_URL_VIMEO = exports.MATCH_URL_SOUNDCLOUD = exports.MATCH_URL_YOUTUBE = void 0;



    function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    var MATCH_URL_YOUTUBE = /(?:youtu\.be\/|youtube(?:-nocookie)?\.com\/(?:embed\/|v\/|watch\/|watch\?v=|watch\?.+&v=|shorts\/))((\w|-){11})|youtube\.com\/playlist\?list=|youtube\.com\/user\//;
    exports.MATCH_URL_YOUTUBE = MATCH_URL_YOUTUBE;
    var MATCH_URL_SOUNDCLOUD = /(?:soundcloud\.com|snd\.sc)\/[^.]+$/;
    exports.MATCH_URL_SOUNDCLOUD = MATCH_URL_SOUNDCLOUD;
    var MATCH_URL_VIMEO = /vimeo\.com\/(?!progressive_redirect).+/;
    exports.MATCH_URL_VIMEO = MATCH_URL_VIMEO;
    var MATCH_URL_FACEBOOK = /^https?:\/\/(www\.)?facebook\.com.*\/(video(s)?|watch|story)(\.php?|\/).+$/;
    exports.MATCH_URL_FACEBOOK = MATCH_URL_FACEBOOK;
    var MATCH_URL_FACEBOOK_WATCH = /^https?:\/\/fb\.watch\/.+$/;
    exports.MATCH_URL_FACEBOOK_WATCH = MATCH_URL_FACEBOOK_WATCH;
    var MATCH_URL_STREAMABLE = /streamable\.com\/([a-z0-9]+)$/;
    exports.MATCH_URL_STREAMABLE = MATCH_URL_STREAMABLE;
    var MATCH_URL_WISTIA = /(?:wistia\.(?:com|net)|wi\.st)\/(?:medias|embed)\/(?:iframe\/)?(.*)$/;
    exports.MATCH_URL_WISTIA = MATCH_URL_WISTIA;
    var MATCH_URL_TWITCH_VIDEO = /(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/;
    exports.MATCH_URL_TWITCH_VIDEO = MATCH_URL_TWITCH_VIDEO;
    var MATCH_URL_TWITCH_CHANNEL = /(?:www\.|go\.)?twitch\.tv\/([a-zA-Z0-9_]+)($|\?)/;
    exports.MATCH_URL_TWITCH_CHANNEL = MATCH_URL_TWITCH_CHANNEL;
    var MATCH_URL_DAILYMOTION = /^(?:(?:https?):)?(?:\/\/)?(?:www\.)?(?:(?:dailymotion\.com(?:\/embed)?\/video)|dai\.ly)\/([a-zA-Z0-9]+)(?:_[\w_-]+)?$/;
    exports.MATCH_URL_DAILYMOTION = MATCH_URL_DAILYMOTION;
    var MATCH_URL_MIXCLOUD = /mixcloud\.com\/([^/]+\/[^/]+)/;
    exports.MATCH_URL_MIXCLOUD = MATCH_URL_MIXCLOUD;
    var MATCH_URL_VIDYARD = /vidyard.com\/(?:watch\/)?([a-zA-Z0-9-_]+)/;
    exports.MATCH_URL_VIDYARD = MATCH_URL_VIDYARD;
    var MATCH_URL_KALTURA = /^https?:\/\/[a-zA-Z]+\.kaltura.(com|org)\/p\/([0-9]+)\/sp\/([0-9]+)00\/embedIframeJs\/uiconf_id\/([0-9]+)\/partner_id\/([0-9]+)(.*)entry_id.([a-zA-Z0-9-_].*)$/;
    exports.MATCH_URL_KALTURA = MATCH_URL_KALTURA;
    var AUDIO_EXTENSIONS = /\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i;
    exports.AUDIO_EXTENSIONS = AUDIO_EXTENSIONS;
    var VIDEO_EXTENSIONS = /\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\d+]+)?($|\?)/i;
    exports.VIDEO_EXTENSIONS = VIDEO_EXTENSIONS;
    var HLS_EXTENSIONS = /\.(m3u8)($|\?)/i;
    exports.HLS_EXTENSIONS = HLS_EXTENSIONS;
    var DASH_EXTENSIONS = /\.(mpd)($|\?)/i;
    exports.DASH_EXTENSIONS = DASH_EXTENSIONS;
    var FLV_EXTENSIONS = /\.(flv)($|\?)/i;
    exports.FLV_EXTENSIONS = FLV_EXTENSIONS;

    var canPlayFile = function canPlayFile(url) {
      if (url instanceof Array) {
        var _iterator = _createForOfIteratorHelper(url),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var item = _step.value;

            if (typeof item === 'string' && canPlayFile(item)) {
              return true;
            }

            if (canPlayFile(item.src)) {
              return true;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return false;
      }

      if ((0, utils$2.isMediaStream)(url) || (0, utils$2.isBlobUrl)(url)) {
        return true;
      }

      return AUDIO_EXTENSIONS.test(url) || VIDEO_EXTENSIONS.test(url) || HLS_EXTENSIONS.test(url) || DASH_EXTENSIONS.test(url) || FLV_EXTENSIONS.test(url);
    };

    var canPlay = {
      youtube: function youtube(url) {
        if (url instanceof Array) {
          return url.every(function (item) {
            return MATCH_URL_YOUTUBE.test(item);
          });
        }

        return MATCH_URL_YOUTUBE.test(url);
      },
      soundcloud: function soundcloud(url) {
        return MATCH_URL_SOUNDCLOUD.test(url) && !AUDIO_EXTENSIONS.test(url);
      },
      vimeo: function vimeo(url) {
        return MATCH_URL_VIMEO.test(url) && !VIDEO_EXTENSIONS.test(url) && !HLS_EXTENSIONS.test(url);
      },
      facebook: function facebook(url) {
        return MATCH_URL_FACEBOOK.test(url) || MATCH_URL_FACEBOOK_WATCH.test(url);
      },
      streamable: function streamable(url) {
        return MATCH_URL_STREAMABLE.test(url);
      },
      wistia: function wistia(url) {
        return MATCH_URL_WISTIA.test(url);
      },
      twitch: function twitch(url) {
        return MATCH_URL_TWITCH_VIDEO.test(url) || MATCH_URL_TWITCH_CHANNEL.test(url);
      },
      dailymotion: function dailymotion(url) {
        return MATCH_URL_DAILYMOTION.test(url);
      },
      mixcloud: function mixcloud(url) {
        return MATCH_URL_MIXCLOUD.test(url);
      },
      vidyard: function vidyard(url) {
        return MATCH_URL_VIDYARD.test(url);
      },
      kaltura: function kaltura(url) {
        return MATCH_URL_KALTURA.test(url);
      },
      file: canPlayFile
    };
    exports.canPlay = canPlay;
    });

    unwrapExports(patterns);
    patterns.canPlay;
    patterns.FLV_EXTENSIONS;
    patterns.DASH_EXTENSIONS;
    patterns.HLS_EXTENSIONS;
    patterns.VIDEO_EXTENSIONS;
    patterns.AUDIO_EXTENSIONS;
    patterns.MATCH_URL_KALTURA;
    patterns.MATCH_URL_VIDYARD;
    patterns.MATCH_URL_MIXCLOUD;
    patterns.MATCH_URL_DAILYMOTION;
    patterns.MATCH_URL_TWITCH_CHANNEL;
    patterns.MATCH_URL_TWITCH_VIDEO;
    patterns.MATCH_URL_WISTIA;
    patterns.MATCH_URL_STREAMABLE;
    patterns.MATCH_URL_FACEBOOK_WATCH;
    patterns.MATCH_URL_FACEBOOK;
    patterns.MATCH_URL_VIMEO;
    patterns.MATCH_URL_SOUNDCLOUD;
    patterns.MATCH_URL_YOUTUBE;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var YouTube_1 = createCommonjsModule$1(function (module, exports) {

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _react = _interopRequireWildcard(React__default['default']);





    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

    function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

    function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var SDK_URL = 'https://www.youtube.com/iframe_api';
    var SDK_GLOBAL = 'YT';
    var SDK_GLOBAL_READY = 'onYouTubeIframeAPIReady';
    var MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;
    var MATCH_USER_UPLOADS = /user\/([a-zA-Z0-9_-]+)\/?/;
    var MATCH_NOCOOKIE = /youtube-nocookie\.com/;
    var NOCOOKIE_HOST = 'https://www.youtube-nocookie.com';

    var YouTube = /*#__PURE__*/function (_Component) {
      _inherits(YouTube, _Component);

      var _super = _createSuper(YouTube);

      function YouTube() {
        var _this;

        _classCallCheck(this, YouTube);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _defineProperty(_assertThisInitialized(_this), "callPlayer", utils$2.callPlayer);

        _defineProperty(_assertThisInitialized(_this), "parsePlaylist", function (url) {
          if (url instanceof Array) {
            return {
              listType: 'playlist',
              playlist: url.map(_this.getID).join(',')
            };
          }

          if (MATCH_PLAYLIST.test(url)) {
            var _url$match = url.match(MATCH_PLAYLIST),
                _url$match2 = _slicedToArray(_url$match, 2),
                playlistId = _url$match2[1];

            return {
              listType: 'playlist',
              list: playlistId.replace(/^UC/, 'UU')
            };
          }

          if (MATCH_USER_UPLOADS.test(url)) {
            var _url$match3 = url.match(MATCH_USER_UPLOADS),
                _url$match4 = _slicedToArray(_url$match3, 2),
                username = _url$match4[1];

            return {
              listType: 'user_uploads',
              list: username
            };
          }

          return {};
        });

        _defineProperty(_assertThisInitialized(_this), "onStateChange", function (event) {
          var data = event.data;
          var _this$props = _this.props,
              onPlay = _this$props.onPlay,
              onPause = _this$props.onPause,
              onBuffer = _this$props.onBuffer,
              onBufferEnd = _this$props.onBufferEnd,
              onEnded = _this$props.onEnded,
              onReady = _this$props.onReady,
              loop = _this$props.loop,
              _this$props$config = _this$props.config,
              playerVars = _this$props$config.playerVars,
              onUnstarted = _this$props$config.onUnstarted;
          var _window$SDK_GLOBAL$Pl = window[SDK_GLOBAL].PlayerState,
              UNSTARTED = _window$SDK_GLOBAL$Pl.UNSTARTED,
              PLAYING = _window$SDK_GLOBAL$Pl.PLAYING,
              PAUSED = _window$SDK_GLOBAL$Pl.PAUSED,
              BUFFERING = _window$SDK_GLOBAL$Pl.BUFFERING,
              ENDED = _window$SDK_GLOBAL$Pl.ENDED,
              CUED = _window$SDK_GLOBAL$Pl.CUED;
          if (data === UNSTARTED) onUnstarted();

          if (data === PLAYING) {
            onPlay();
            onBufferEnd();
          }

          if (data === PAUSED) onPause();
          if (data === BUFFERING) onBuffer();

          if (data === ENDED) {
            var isPlaylist = !!_this.callPlayer('getPlaylist'); // Only loop manually if not playing a playlist

            if (loop && !isPlaylist) {
              if (playerVars.start) {
                _this.seekTo(playerVars.start);
              } else {
                _this.play();
              }
            }

            onEnded();
          }

          if (data === CUED) onReady();
        });

        _defineProperty(_assertThisInitialized(_this), "mute", function () {
          _this.callPlayer('mute');
        });

        _defineProperty(_assertThisInitialized(_this), "unmute", function () {
          _this.callPlayer('unMute');
        });

        _defineProperty(_assertThisInitialized(_this), "ref", function (container) {
          _this.container = container;
        });

        return _this;
      }

      _createClass(YouTube, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "getID",
        value: function getID(url) {
          if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {
            return null;
          }

          return url.match(patterns.MATCH_URL_YOUTUBE)[1];
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;

          var _this$props2 = this.props,
              playing = _this$props2.playing,
              muted = _this$props2.muted,
              playsinline = _this$props2.playsinline,
              controls = _this$props2.controls,
              loop = _this$props2.loop,
              config = _this$props2.config,
              _onError = _this$props2.onError;
          var playerVars = config.playerVars,
              embedOptions = config.embedOptions;
          var id = this.getID(url);

          if (isReady) {
            if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {
              this.player.loadPlaylist(this.parsePlaylist(url));
              return;
            }

            this.player.cueVideoById({
              videoId: id,
              startSeconds: (0, utils$2.parseStartTime)(url) || playerVars.start,
              endSeconds: (0, utils$2.parseEndTime)(url) || playerVars.end
            });
            return;
          }

          (0, utils$2.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function (YT) {
            return YT.loaded;
          }).then(function (YT) {
            if (!_this2.container) return;
            _this2.player = new YT.Player(_this2.container, _objectSpread({
              width: '100%',
              height: '100%',
              videoId: id,
              playerVars: _objectSpread(_objectSpread({
                autoplay: playing ? 1 : 0,
                mute: muted ? 1 : 0,
                controls: controls ? 1 : 0,
                start: (0, utils$2.parseStartTime)(url),
                end: (0, utils$2.parseEndTime)(url),
                origin: window.location.origin,
                playsinline: playsinline ? 1 : 0
              }, _this2.parsePlaylist(url)), playerVars),
              events: {
                onReady: function onReady() {
                  if (loop) {
                    _this2.player.setLoop(true); // Enable playlist looping

                  }

                  _this2.props.onReady();
                },
                onPlaybackRateChange: function onPlaybackRateChange(event) {
                  return _this2.props.onPlaybackRateChange(event.data);
                },
                onStateChange: _this2.onStateChange,
                onError: function onError(event) {
                  return _onError(event.data);
                }
              },
              host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : undefined
            }, embedOptions));
          }, _onError);

          if (embedOptions.events) {
            console.warn('Using `embedOptions.events` will likely break things. Use ReactPlayer’s callback props instead, eg onReady, onPlay, onPause');
          }
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer('playVideo');
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer('pauseVideo');
        }
      }, {
        key: "stop",
        value: function stop() {
          if (!document.body.contains(this.callPlayer('getIframe'))) return;
          this.callPlayer('stopVideo');
        }
      }, {
        key: "seekTo",
        value: function seekTo(amount) {
          this.callPlayer('seekTo', amount);

          if (!this.props.playing) {
            this.pause();
          }
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer('setVolume', fraction * 100);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer('setPlaybackRate', rate);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer('setLoop', loop);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer('getDuration');
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer('getCurrentTime');
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.callPlayer('getVideoLoadedFraction') * this.getDuration();
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: '100%',
            height: '100%',
            display: display
          };
          return /*#__PURE__*/_react["default"].createElement("div", {
            style: style
          }, /*#__PURE__*/_react["default"].createElement("div", {
            ref: this.ref
          }));
        }
      }]);

      return YouTube;
    }(_react.Component);

    exports["default"] = YouTube;

    _defineProperty(YouTube, "displayName", 'YouTube');

    _defineProperty(YouTube, "canPlay", patterns.canPlay.youtube);
    });

    unwrapExports(YouTube_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var SoundCloud_1 = createCommonjsModule$1(function (module, exports) {

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _react = _interopRequireWildcard(React__default['default']);





    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var SDK_URL = 'https://w.soundcloud.com/player/api.js';
    var SDK_GLOBAL = 'SC';

    var SoundCloud = /*#__PURE__*/function (_Component) {
      _inherits(SoundCloud, _Component);

      var _super = _createSuper(SoundCloud);

      function SoundCloud() {
        var _this;

        _classCallCheck(this, SoundCloud);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _defineProperty(_assertThisInitialized(_this), "callPlayer", utils$2.callPlayer);

        _defineProperty(_assertThisInitialized(_this), "duration", null);

        _defineProperty(_assertThisInitialized(_this), "currentTime", null);

        _defineProperty(_assertThisInitialized(_this), "fractionLoaded", null);

        _defineProperty(_assertThisInitialized(_this), "mute", function () {
          _this.setVolume(0);
        });

        _defineProperty(_assertThisInitialized(_this), "unmute", function () {
          if (_this.props.volume !== null) {
            _this.setVolume(_this.props.volume);
          }
        });

        _defineProperty(_assertThisInitialized(_this), "ref", function (iframe) {
          _this.iframe = iframe;
        });

        return _this;
      }

      _createClass(SoundCloud, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;

          (0, utils$2.getSDK)(SDK_URL, SDK_GLOBAL).then(function (SC) {
            if (!_this2.iframe) return;
            var _SC$Widget$Events = SC.Widget.Events,
                PLAY = _SC$Widget$Events.PLAY,
                PLAY_PROGRESS = _SC$Widget$Events.PLAY_PROGRESS,
                PAUSE = _SC$Widget$Events.PAUSE,
                FINISH = _SC$Widget$Events.FINISH,
                ERROR = _SC$Widget$Events.ERROR;

            if (!isReady) {
              _this2.player = SC.Widget(_this2.iframe);

              _this2.player.bind(PLAY, _this2.props.onPlay);

              _this2.player.bind(PAUSE, function () {
                var remaining = _this2.duration - _this2.currentTime;

                if (remaining < 0.05) {
                  // Prevent onPause firing right before onEnded
                  return;
                }

                _this2.props.onPause();
              });

              _this2.player.bind(PLAY_PROGRESS, function (e) {
                _this2.currentTime = e.currentPosition / 1000;
                _this2.fractionLoaded = e.loadedProgress;
              });

              _this2.player.bind(FINISH, function () {
                return _this2.props.onEnded();
              });

              _this2.player.bind(ERROR, function (e) {
                return _this2.props.onError(e);
              });
            }

            _this2.player.load(url, _objectSpread(_objectSpread({}, _this2.props.config.options), {}, {
              callback: function callback() {
                _this2.player.getDuration(function (duration) {
                  _this2.duration = duration / 1000;

                  _this2.props.onReady();
                });
              }
            }));
          });
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer('play');
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer('pause');
        }
      }, {
        key: "stop",
        value: function stop() {// Nothing to do
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer('seekTo', seconds * 1000);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer('setVolume', fraction * 100);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.fractionLoaded * this.duration;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: '100%',
            height: '100%',
            display: display
          };
          return /*#__PURE__*/_react["default"].createElement("iframe", {
            ref: this.ref,
            src: "https://w.soundcloud.com/player/?url=".concat(encodeURIComponent(this.props.url)),
            style: style,
            frameBorder: 0,
            allow: "autoplay"
          });
        }
      }]);

      return SoundCloud;
    }(_react.Component);

    exports["default"] = SoundCloud;

    _defineProperty(SoundCloud, "displayName", 'SoundCloud');

    _defineProperty(SoundCloud, "canPlay", patterns.canPlay.soundcloud);

    _defineProperty(SoundCloud, "loopOnEnded", true);
    });

    unwrapExports(SoundCloud_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var Vimeo_1 = createCommonjsModule$1(function (module, exports) {

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _react = _interopRequireWildcard(React__default['default']);





    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var SDK_URL = 'https://player.vimeo.com/api/player.js';
    var SDK_GLOBAL = 'Vimeo';

    var Vimeo = /*#__PURE__*/function (_Component) {
      _inherits(Vimeo, _Component);

      var _super = _createSuper(Vimeo);

      function Vimeo() {
        var _this;

        _classCallCheck(this, Vimeo);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _defineProperty(_assertThisInitialized(_this), "callPlayer", utils$2.callPlayer);

        _defineProperty(_assertThisInitialized(_this), "duration", null);

        _defineProperty(_assertThisInitialized(_this), "currentTime", null);

        _defineProperty(_assertThisInitialized(_this), "secondsLoaded", null);

        _defineProperty(_assertThisInitialized(_this), "mute", function () {
          _this.setVolume(0);
        });

        _defineProperty(_assertThisInitialized(_this), "unmute", function () {
          if (_this.props.volume !== null) {
            _this.setVolume(_this.props.volume);
          }
        });

        _defineProperty(_assertThisInitialized(_this), "ref", function (container) {
          _this.container = container;
        });

        return _this;
      }

      _createClass(Vimeo, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;

          this.duration = null;
          (0, utils$2.getSDK)(SDK_URL, SDK_GLOBAL).then(function (Vimeo) {
            if (!_this2.container) return;
            var _this2$props$config = _this2.props.config,
                playerOptions = _this2$props$config.playerOptions,
                title = _this2$props$config.title;
            _this2.player = new Vimeo.Player(_this2.container, _objectSpread({
              url: url,
              autoplay: _this2.props.playing,
              muted: _this2.props.muted,
              loop: _this2.props.loop,
              playsinline: _this2.props.playsinline,
              controls: _this2.props.controls
            }, playerOptions));

            _this2.player.ready().then(function () {
              var iframe = _this2.container.querySelector('iframe');

              iframe.style.width = '100%';
              iframe.style.height = '100%';

              if (title) {
                iframe.title = title;
              }
            })["catch"](_this2.props.onError);

            _this2.player.on('loaded', function () {
              _this2.props.onReady();

              _this2.refreshDuration();
            });

            _this2.player.on('play', function () {
              _this2.props.onPlay();

              _this2.refreshDuration();
            });

            _this2.player.on('pause', _this2.props.onPause);

            _this2.player.on('seeked', function (e) {
              return _this2.props.onSeek(e.seconds);
            });

            _this2.player.on('ended', _this2.props.onEnded);

            _this2.player.on('error', _this2.props.onError);

            _this2.player.on('timeupdate', function (_ref) {
              var seconds = _ref.seconds;
              _this2.currentTime = seconds;
            });

            _this2.player.on('progress', function (_ref2) {
              var seconds = _ref2.seconds;
              _this2.secondsLoaded = seconds;
            });

            _this2.player.on('bufferstart', _this2.props.onBuffer);

            _this2.player.on('bufferend', _this2.props.onBufferEnd);
          }, this.props.onError);
        }
      }, {
        key: "refreshDuration",
        value: function refreshDuration() {
          var _this3 = this;

          this.player.getDuration().then(function (duration) {
            _this3.duration = duration;
          });
        }
      }, {
        key: "play",
        value: function play() {
          var promise = this.callPlayer('play');

          if (promise) {
            promise["catch"](this.props.onError);
          }
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer('pause');
        }
      }, {
        key: "stop",
        value: function stop() {
          this.callPlayer('unload');
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer('setCurrentTime', seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer('setVolume', fraction);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer('setLoop', loop);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer('setPlaybackRate', rate);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.secondsLoaded;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: '100%',
            height: '100%',
            overflow: 'hidden',
            display: display
          };
          return /*#__PURE__*/_react["default"].createElement("div", {
            key: this.props.url,
            ref: this.ref,
            style: style
          });
        }
      }]);

      return Vimeo;
    }(_react.Component);

    exports["default"] = Vimeo;

    _defineProperty(Vimeo, "displayName", 'Vimeo');

    _defineProperty(Vimeo, "canPlay", patterns.canPlay.vimeo);

    _defineProperty(Vimeo, "forceLoad", true);
    });

    unwrapExports(Vimeo_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var Facebook_1 = createCommonjsModule$1(function (module, exports) {

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _react = _interopRequireWildcard(React__default['default']);





    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var SDK_URL = 'https://connect.facebook.net/en_US/sdk.js';
    var SDK_GLOBAL = 'FB';
    var SDK_GLOBAL_READY = 'fbAsyncInit';
    var PLAYER_ID_PREFIX = 'facebook-player-';

    var Facebook = /*#__PURE__*/function (_Component) {
      _inherits(Facebook, _Component);

      var _super = _createSuper(Facebook);

      function Facebook() {
        var _this;

        _classCallCheck(this, Facebook);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _defineProperty(_assertThisInitialized(_this), "callPlayer", utils$2.callPlayer);

        _defineProperty(_assertThisInitialized(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, utils$2.randomString)()));

        _defineProperty(_assertThisInitialized(_this), "mute", function () {
          _this.callPlayer('mute');
        });

        _defineProperty(_assertThisInitialized(_this), "unmute", function () {
          _this.callPlayer('unmute');
        });

        return _this;
      }

      _createClass(Facebook, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;

          if (isReady) {
            (0, utils$2.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function (FB) {
              return FB.XFBML.parse();
            });
            return;
          }

          (0, utils$2.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function (FB) {
            FB.init({
              appId: _this2.props.config.appId,
              xfbml: true,
              version: _this2.props.config.version
            });
            FB.Event.subscribe('xfbml.render', function (msg) {
              // Here we know the SDK has loaded, even if onReady/onPlay
              // is not called due to a video that cannot be embedded
              _this2.props.onLoaded();
            });
            FB.Event.subscribe('xfbml.ready', function (msg) {
              if (msg.type === 'video' && msg.id === _this2.playerID) {
                _this2.player = msg.instance;

                _this2.player.subscribe('startedPlaying', _this2.props.onPlay);

                _this2.player.subscribe('paused', _this2.props.onPause);

                _this2.player.subscribe('finishedPlaying', _this2.props.onEnded);

                _this2.player.subscribe('startedBuffering', _this2.props.onBuffer);

                _this2.player.subscribe('finishedBuffering', _this2.props.onBufferEnd);

                _this2.player.subscribe('error', _this2.props.onError);

                if (_this2.props.muted) {
                  _this2.callPlayer('mute');
                } else {
                  _this2.callPlayer('unmute');
                }

                _this2.props.onReady(); // For some reason Facebook have added `visibility: hidden`
                // to the iframe when autoplay fails, so here we set it back


                document.getElementById(_this2.playerID).querySelector('iframe').style.visibility = 'visible';
              }
            });
          });
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer('play');
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer('pause');
        }
      }, {
        key: "stop",
        value: function stop() {// Nothing to do
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer('seek', seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer('setVolume', fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer('getDuration');
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer('getCurrentPosition');
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var attributes = this.props.config.attributes;
          var style = {
            width: '100%',
            height: '100%'
          };
          return /*#__PURE__*/_react["default"].createElement("div", _extends({
            style: style,
            id: this.playerID,
            className: "fb-video",
            "data-href": this.props.url,
            "data-autoplay": this.props.playing ? 'true' : 'false',
            "data-allowfullscreen": "true",
            "data-controls": this.props.controls ? 'true' : 'false'
          }, attributes));
        }
      }]);

      return Facebook;
    }(_react.Component);

    exports["default"] = Facebook;

    _defineProperty(Facebook, "displayName", 'Facebook');

    _defineProperty(Facebook, "canPlay", patterns.canPlay.facebook);

    _defineProperty(Facebook, "loopOnEnded", true);
    });

    unwrapExports(Facebook_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var Streamable_1 = createCommonjsModule$1(function (module, exports) {

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _react = _interopRequireWildcard(React__default['default']);





    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var SDK_URL = 'https://cdn.embed.ly/player-0.1.0.min.js';
    var SDK_GLOBAL = 'playerjs';

    var Streamable = /*#__PURE__*/function (_Component) {
      _inherits(Streamable, _Component);

      var _super = _createSuper(Streamable);

      function Streamable() {
        var _this;

        _classCallCheck(this, Streamable);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _defineProperty(_assertThisInitialized(_this), "callPlayer", utils$2.callPlayer);

        _defineProperty(_assertThisInitialized(_this), "duration", null);

        _defineProperty(_assertThisInitialized(_this), "currentTime", null);

        _defineProperty(_assertThisInitialized(_this), "secondsLoaded", null);

        _defineProperty(_assertThisInitialized(_this), "mute", function () {
          _this.callPlayer('mute');
        });

        _defineProperty(_assertThisInitialized(_this), "unmute", function () {
          _this.callPlayer('unmute');
        });

        _defineProperty(_assertThisInitialized(_this), "ref", function (iframe) {
          _this.iframe = iframe;
        });

        return _this;
      }

      _createClass(Streamable, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;

          (0, utils$2.getSDK)(SDK_URL, SDK_GLOBAL).then(function (playerjs) {
            if (!_this2.iframe) return;
            _this2.player = new playerjs.Player(_this2.iframe);

            _this2.player.setLoop(_this2.props.loop);

            _this2.player.on('ready', _this2.props.onReady);

            _this2.player.on('play', _this2.props.onPlay);

            _this2.player.on('pause', _this2.props.onPause);

            _this2.player.on('seeked', _this2.props.onSeek);

            _this2.player.on('ended', _this2.props.onEnded);

            _this2.player.on('error', _this2.props.onError);

            _this2.player.on('timeupdate', function (_ref) {
              var duration = _ref.duration,
                  seconds = _ref.seconds;
              _this2.duration = duration;
              _this2.currentTime = seconds;
            });

            _this2.player.on('buffered', function (_ref2) {
              var percent = _ref2.percent;

              if (_this2.duration) {
                _this2.secondsLoaded = _this2.duration * percent;
              }
            });

            if (_this2.props.muted) {
              _this2.player.mute();
            }
          }, this.props.onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer('play');
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer('pause');
        }
      }, {
        key: "stop",
        value: function stop() {// Nothing to do
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer('setCurrentTime', seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer('setVolume', fraction * 100);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer('setLoop', loop);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.secondsLoaded;
        }
      }, {
        key: "render",
        value: function render() {
          var id = this.props.url.match(patterns.MATCH_URL_STREAMABLE)[1];
          var style = {
            width: '100%',
            height: '100%'
          };
          return /*#__PURE__*/_react["default"].createElement("iframe", {
            ref: this.ref,
            src: "https://streamable.com/o/".concat(id),
            frameBorder: "0",
            scrolling: "no",
            style: style,
            allow: "encrypted-media; autoplay; fullscreen;"
          });
        }
      }]);

      return Streamable;
    }(_react.Component);

    exports["default"] = Streamable;

    _defineProperty(Streamable, "displayName", 'Streamable');

    _defineProperty(Streamable, "canPlay", patterns.canPlay.streamable);
    });

    unwrapExports(Streamable_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var Wistia_1 = createCommonjsModule$1(function (module, exports) {

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _react = _interopRequireWildcard(React__default['default']);





    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var SDK_URL = 'https://fast.wistia.com/assets/external/E-v1.js';
    var SDK_GLOBAL = 'Wistia';
    var PLAYER_ID_PREFIX = 'wistia-player-';

    var Wistia = /*#__PURE__*/function (_Component) {
      _inherits(Wistia, _Component);

      var _super = _createSuper(Wistia);

      function Wistia() {
        var _this;

        _classCallCheck(this, Wistia);

        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(_args));

        _defineProperty(_assertThisInitialized(_this), "callPlayer", utils$2.callPlayer);

        _defineProperty(_assertThisInitialized(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, utils$2.randomString)()));

        _defineProperty(_assertThisInitialized(_this), "onPlay", function () {
          var _this$props;

          return (_this$props = _this.props).onPlay.apply(_this$props, arguments);
        });

        _defineProperty(_assertThisInitialized(_this), "onPause", function () {
          var _this$props2;

          return (_this$props2 = _this.props).onPause.apply(_this$props2, arguments);
        });

        _defineProperty(_assertThisInitialized(_this), "onSeek", function () {
          var _this$props3;

          return (_this$props3 = _this.props).onSeek.apply(_this$props3, arguments);
        });

        _defineProperty(_assertThisInitialized(_this), "onEnded", function () {
          var _this$props4;

          return (_this$props4 = _this.props).onEnded.apply(_this$props4, arguments);
        });

        _defineProperty(_assertThisInitialized(_this), "onPlaybackRateChange", function () {
          var _this$props5;

          return (_this$props5 = _this.props).onPlaybackRateChange.apply(_this$props5, arguments);
        });

        _defineProperty(_assertThisInitialized(_this), "mute", function () {
          _this.callPlayer('mute');
        });

        _defineProperty(_assertThisInitialized(_this), "unmute", function () {
          _this.callPlayer('unmute');
        });

        return _this;
      }

      _createClass(Wistia, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;

          var _this$props6 = this.props,
              playing = _this$props6.playing,
              muted = _this$props6.muted,
              controls = _this$props6.controls,
              _onReady = _this$props6.onReady,
              config = _this$props6.config,
              onError = _this$props6.onError;
          (0, utils$2.getSDK)(SDK_URL, SDK_GLOBAL).then(function (Wistia) {
            if (config.customControls) {
              config.customControls.forEach(function (control) {
                return Wistia.defineControl(control);
              });
            }

            window._wq = window._wq || [];

            window._wq.push({
              id: _this2.playerID,
              options: _objectSpread({
                autoPlay: playing,
                silentAutoPlay: 'allow',
                muted: muted,
                controlsVisibleOnLoad: controls,
                fullscreenButton: controls,
                playbar: controls,
                playbackRateControl: controls,
                qualityControl: controls,
                volumeControl: controls,
                settingsControl: controls,
                smallPlayButton: controls
              }, config.options),
              onReady: function onReady(player) {
                _this2.player = player;

                _this2.unbind();

                _this2.player.bind('play', _this2.onPlay);

                _this2.player.bind('pause', _this2.onPause);

                _this2.player.bind('seek', _this2.onSeek);

                _this2.player.bind('end', _this2.onEnded);

                _this2.player.bind('playbackratechange', _this2.onPlaybackRateChange);

                _onReady();
              }
            });
          }, onError);
        }
      }, {
        key: "unbind",
        value: function unbind() {
          this.player.unbind('play', this.onPlay);
          this.player.unbind('pause', this.onPause);
          this.player.unbind('seek', this.onSeek);
          this.player.unbind('end', this.onEnded);
          this.player.unbind('playbackratechange', this.onPlaybackRateChange);
        } // Proxy methods to prevent listener leaks

      }, {
        key: "play",
        value: function play() {
          this.callPlayer('play');
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer('pause');
        }
      }, {
        key: "stop",
        value: function stop() {
          this.unbind();
          this.callPlayer('remove');
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer('time', seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer('volume', fraction);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer('playbackRate', rate);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer('duration');
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer('time');
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var url = this.props.url;
          var videoID = url && url.match(patterns.MATCH_URL_WISTIA)[1];
          var className = "wistia_embed wistia_async_".concat(videoID);
          var style = {
            width: '100%',
            height: '100%'
          };
          return /*#__PURE__*/_react["default"].createElement("div", {
            id: this.playerID,
            key: videoID,
            className: className,
            style: style
          });
        }
      }]);

      return Wistia;
    }(_react.Component);

    exports["default"] = Wistia;

    _defineProperty(Wistia, "displayName", 'Wistia');

    _defineProperty(Wistia, "canPlay", patterns.canPlay.wistia);

    _defineProperty(Wistia, "loopOnEnded", true);
    });

    unwrapExports(Wistia_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var Twitch_1 = createCommonjsModule$1(function (module, exports) {

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _react = _interopRequireWildcard(React__default['default']);





    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var SDK_URL = 'https://player.twitch.tv/js/embed/v1.js';
    var SDK_GLOBAL = 'Twitch';
    var PLAYER_ID_PREFIX = 'twitch-player-';

    var Twitch = /*#__PURE__*/function (_Component) {
      _inherits(Twitch, _Component);

      var _super = _createSuper(Twitch);

      function Twitch() {
        var _this;

        _classCallCheck(this, Twitch);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _defineProperty(_assertThisInitialized(_this), "callPlayer", utils$2.callPlayer);

        _defineProperty(_assertThisInitialized(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, utils$2.randomString)()));

        _defineProperty(_assertThisInitialized(_this), "mute", function () {
          _this.callPlayer('setMuted', true);
        });

        _defineProperty(_assertThisInitialized(_this), "unmute", function () {
          _this.callPlayer('setMuted', false);
        });

        return _this;
      }

      _createClass(Twitch, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;

          var _this$props = this.props,
              playsinline = _this$props.playsinline,
              onError = _this$props.onError,
              config = _this$props.config,
              controls = _this$props.controls;

          var isChannel = patterns.MATCH_URL_TWITCH_CHANNEL.test(url);

          var id = isChannel ? url.match(patterns.MATCH_URL_TWITCH_CHANNEL)[1] : url.match(patterns.MATCH_URL_TWITCH_VIDEO)[1];

          if (isReady) {
            if (isChannel) {
              this.player.setChannel(id);
            } else {
              this.player.setVideo('v' + id);
            }

            return;
          }

          (0, utils$2.getSDK)(SDK_URL, SDK_GLOBAL).then(function (Twitch) {
            _this2.player = new Twitch.Player(_this2.playerID, _objectSpread({
              video: isChannel ? '' : id,
              channel: isChannel ? id : '',
              height: '100%',
              width: '100%',
              playsinline: playsinline,
              autoplay: _this2.props.playing,
              muted: _this2.props.muted,
              // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859
              controls: isChannel ? true : controls,
              time: (0, utils$2.parseStartTime)(url)
            }, config.options));
            var _Twitch$Player = Twitch.Player,
                READY = _Twitch$Player.READY,
                PLAYING = _Twitch$Player.PLAYING,
                PAUSE = _Twitch$Player.PAUSE,
                ENDED = _Twitch$Player.ENDED,
                ONLINE = _Twitch$Player.ONLINE,
                OFFLINE = _Twitch$Player.OFFLINE,
                SEEK = _Twitch$Player.SEEK;

            _this2.player.addEventListener(READY, _this2.props.onReady);

            _this2.player.addEventListener(PLAYING, _this2.props.onPlay);

            _this2.player.addEventListener(PAUSE, _this2.props.onPause);

            _this2.player.addEventListener(ENDED, _this2.props.onEnded);

            _this2.player.addEventListener(SEEK, _this2.props.onSeek); // Prevent weird isLoading behaviour when streams are offline


            _this2.player.addEventListener(ONLINE, _this2.props.onLoaded);

            _this2.player.addEventListener(OFFLINE, _this2.props.onLoaded);
          }, onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer('play');
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer('pause');
        }
      }, {
        key: "stop",
        value: function stop() {
          this.callPlayer('pause');
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer('seek', seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer('setVolume', fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer('getDuration');
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer('getCurrentTime');
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var style = {
            width: '100%',
            height: '100%'
          };
          return /*#__PURE__*/_react["default"].createElement("div", {
            style: style,
            id: this.playerID
          });
        }
      }]);

      return Twitch;
    }(_react.Component);

    exports["default"] = Twitch;

    _defineProperty(Twitch, "displayName", 'Twitch');

    _defineProperty(Twitch, "canPlay", patterns.canPlay.twitch);

    _defineProperty(Twitch, "loopOnEnded", true);
    });

    unwrapExports(Twitch_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var DailyMotion_1 = createCommonjsModule$1(function (module, exports) {

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _react = _interopRequireWildcard(React__default['default']);





    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

    function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

    function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var SDK_URL = 'https://api.dmcdn.net/all.js';
    var SDK_GLOBAL = 'DM';
    var SDK_GLOBAL_READY = 'dmAsyncInit';

    var DailyMotion = /*#__PURE__*/function (_Component) {
      _inherits(DailyMotion, _Component);

      var _super = _createSuper(DailyMotion);

      function DailyMotion() {
        var _this;

        _classCallCheck(this, DailyMotion);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _defineProperty(_assertThisInitialized(_this), "callPlayer", utils$2.callPlayer);

        _defineProperty(_assertThisInitialized(_this), "onDurationChange", function () {
          var duration = _this.getDuration();

          _this.props.onDuration(duration);
        });

        _defineProperty(_assertThisInitialized(_this), "mute", function () {
          _this.callPlayer('setMuted', true);
        });

        _defineProperty(_assertThisInitialized(_this), "unmute", function () {
          _this.callPlayer('setMuted', false);
        });

        _defineProperty(_assertThisInitialized(_this), "ref", function (container) {
          _this.container = container;
        });

        return _this;
      }

      _createClass(DailyMotion, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;

          var _this$props = this.props,
              controls = _this$props.controls,
              config = _this$props.config,
              onError = _this$props.onError,
              playing = _this$props.playing;

          var _url$match = url.match(patterns.MATCH_URL_DAILYMOTION),
              _url$match2 = _slicedToArray(_url$match, 2),
              id = _url$match2[1];

          if (this.player) {
            this.player.load(id, {
              start: (0, utils$2.parseStartTime)(url),
              autoplay: playing
            });
            return;
          }

          (0, utils$2.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function (DM) {
            return DM.player;
          }).then(function (DM) {
            if (!_this2.container) return;
            var Player = DM.player;
            _this2.player = new Player(_this2.container, {
              width: '100%',
              height: '100%',
              video: id,
              params: _objectSpread({
                controls: controls,
                autoplay: _this2.props.playing,
                mute: _this2.props.muted,
                start: (0, utils$2.parseStartTime)(url),
                origin: window.location.origin
              }, config.params),
              events: {
                apiready: _this2.props.onReady,
                seeked: function seeked() {
                  return _this2.props.onSeek(_this2.player.currentTime);
                },
                video_end: _this2.props.onEnded,
                durationchange: _this2.onDurationChange,
                pause: _this2.props.onPause,
                playing: _this2.props.onPlay,
                waiting: _this2.props.onBuffer,
                error: function error(event) {
                  return onError(event);
                }
              }
            });
          }, onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer('play');
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer('pause');
        }
      }, {
        key: "stop",
        value: function stop() {// Nothing to do
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer('seek', seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer('setVolume', fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.player.duration || null;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.player.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.player.bufferedTime;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: '100%',
            height: '100%',
            display: display
          };
          return /*#__PURE__*/_react["default"].createElement("div", {
            style: style
          }, /*#__PURE__*/_react["default"].createElement("div", {
            ref: this.ref
          }));
        }
      }]);

      return DailyMotion;
    }(_react.Component);

    exports["default"] = DailyMotion;

    _defineProperty(DailyMotion, "displayName", 'DailyMotion');

    _defineProperty(DailyMotion, "canPlay", patterns.canPlay.dailymotion);

    _defineProperty(DailyMotion, "loopOnEnded", true);
    });

    unwrapExports(DailyMotion_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var Mixcloud_1 = createCommonjsModule$1(function (module, exports) {

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _react = _interopRequireWildcard(React__default['default']);





    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var SDK_URL = 'https://widget.mixcloud.com/media/js/widgetApi.js';
    var SDK_GLOBAL = 'Mixcloud';

    var Mixcloud = /*#__PURE__*/function (_Component) {
      _inherits(Mixcloud, _Component);

      var _super = _createSuper(Mixcloud);

      function Mixcloud() {
        var _this;

        _classCallCheck(this, Mixcloud);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _defineProperty(_assertThisInitialized(_this), "callPlayer", utils$2.callPlayer);

        _defineProperty(_assertThisInitialized(_this), "duration", null);

        _defineProperty(_assertThisInitialized(_this), "currentTime", null);

        _defineProperty(_assertThisInitialized(_this), "secondsLoaded", null);

        _defineProperty(_assertThisInitialized(_this), "mute", function () {// No volume support
        });

        _defineProperty(_assertThisInitialized(_this), "unmute", function () {// No volume support
        });

        _defineProperty(_assertThisInitialized(_this), "ref", function (iframe) {
          _this.iframe = iframe;
        });

        return _this;
      }

      _createClass(Mixcloud, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;

          (0, utils$2.getSDK)(SDK_URL, SDK_GLOBAL).then(function (Mixcloud) {
            _this2.player = Mixcloud.PlayerWidget(_this2.iframe);

            _this2.player.ready.then(function () {
              _this2.player.events.play.on(_this2.props.onPlay);

              _this2.player.events.pause.on(_this2.props.onPause);

              _this2.player.events.ended.on(_this2.props.onEnded);

              _this2.player.events.error.on(_this2.props.error);

              _this2.player.events.progress.on(function (seconds, duration) {
                _this2.currentTime = seconds;
                _this2.duration = duration;
              });

              _this2.props.onReady();
            });
          }, this.props.onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer('play');
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer('pause');
        }
      }, {
        key: "stop",
        value: function stop() {// Nothing to do
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer('seek', seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {// No volume support
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props,
              url = _this$props.url,
              config = _this$props.config;
          var id = url.match(patterns.MATCH_URL_MIXCLOUD)[1];
          var style = {
            width: '100%',
            height: '100%'
          };
          var query = (0, utils$2.queryString)(_objectSpread(_objectSpread({}, config.options), {}, {
            feed: "/".concat(id, "/")
          })); // We have to give the iframe a key here to prevent a
          // weird dialog appearing when loading a new track

          return /*#__PURE__*/_react["default"].createElement("iframe", {
            key: id,
            ref: this.ref,
            style: style,
            src: "https://www.mixcloud.com/widget/iframe/?".concat(query),
            frameBorder: "0"
          });
        }
      }]);

      return Mixcloud;
    }(_react.Component);

    exports["default"] = Mixcloud;

    _defineProperty(Mixcloud, "displayName", 'Mixcloud');

    _defineProperty(Mixcloud, "canPlay", patterns.canPlay.mixcloud);

    _defineProperty(Mixcloud, "loopOnEnded", true);
    });

    unwrapExports(Mixcloud_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var Vidyard_1 = createCommonjsModule$1(function (module, exports) {

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _react = _interopRequireWildcard(React__default['default']);





    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var SDK_URL = 'https://play.vidyard.com/embed/v4.js';
    var SDK_GLOBAL = 'VidyardV4';
    var SDK_GLOBAL_READY = 'onVidyardAPI';

    var Vidyard = /*#__PURE__*/function (_Component) {
      _inherits(Vidyard, _Component);

      var _super = _createSuper(Vidyard);

      function Vidyard() {
        var _this;

        _classCallCheck(this, Vidyard);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _defineProperty(_assertThisInitialized(_this), "callPlayer", utils$2.callPlayer);

        _defineProperty(_assertThisInitialized(_this), "mute", function () {
          _this.setVolume(0);
        });

        _defineProperty(_assertThisInitialized(_this), "unmute", function () {
          if (_this.props.volume !== null) {
            _this.setVolume(_this.props.volume);
          }
        });

        _defineProperty(_assertThisInitialized(_this), "ref", function (container) {
          _this.container = container;
        });

        return _this;
      }

      _createClass(Vidyard, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;

          var _this$props = this.props,
              playing = _this$props.playing,
              config = _this$props.config,
              onError = _this$props.onError,
              onDuration = _this$props.onDuration;
          var id = url && url.match(patterns.MATCH_URL_VIDYARD)[1];

          if (this.player) {
            this.stop();
          }

          (0, utils$2.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function (Vidyard) {
            if (!_this2.container) return;
            Vidyard.api.addReadyListener(function (data, player) {
              if (_this2.player) {
                return;
              }

              _this2.player = player;

              _this2.player.on('ready', _this2.props.onReady);

              _this2.player.on('play', _this2.props.onPlay);

              _this2.player.on('pause', _this2.props.onPause);

              _this2.player.on('seek', _this2.props.onSeek);

              _this2.player.on('playerComplete', _this2.props.onEnded);
            }, id);
            Vidyard.api.renderPlayer(_objectSpread({
              uuid: id,
              container: _this2.container,
              autoplay: playing ? 1 : 0
            }, config.options));
            Vidyard.api.getPlayerMetadata(id).then(function (meta) {
              _this2.duration = meta.length_in_seconds;
              onDuration(meta.length_in_seconds);
            });
          }, onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer('play');
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer('pause');
        }
      }, {
        key: "stop",
        value: function stop() {
          window.VidyardV4.api.destroyPlayer(this.player);
        }
      }, {
        key: "seekTo",
        value: function seekTo(amount) {
          this.callPlayer('seek', amount);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer('setVolume', fraction);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer('setPlaybackSpeed', rate);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer('currentTime');
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var display = this.props.display;
          var style = {
            width: '100%',
            height: '100%',
            display: display
          };
          return /*#__PURE__*/_react["default"].createElement("div", {
            style: style
          }, /*#__PURE__*/_react["default"].createElement("div", {
            ref: this.ref
          }));
        }
      }]);

      return Vidyard;
    }(_react.Component);

    exports["default"] = Vidyard;

    _defineProperty(Vidyard, "displayName", 'Vidyard');

    _defineProperty(Vidyard, "canPlay", patterns.canPlay.vidyard);
    });

    unwrapExports(Vidyard_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var Kaltura_1 = createCommonjsModule$1(function (module, exports) {

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _react = _interopRequireWildcard(React__default['default']);





    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var SDK_URL = 'https://cdn.embed.ly/player-0.1.0.min.js';
    var SDK_GLOBAL = 'playerjs';

    var Kaltura = /*#__PURE__*/function (_Component) {
      _inherits(Kaltura, _Component);

      var _super = _createSuper(Kaltura);

      function Kaltura() {
        var _this;

        _classCallCheck(this, Kaltura);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _defineProperty(_assertThisInitialized(_this), "callPlayer", utils$2.callPlayer);

        _defineProperty(_assertThisInitialized(_this), "duration", null);

        _defineProperty(_assertThisInitialized(_this), "currentTime", null);

        _defineProperty(_assertThisInitialized(_this), "secondsLoaded", null);

        _defineProperty(_assertThisInitialized(_this), "mute", function () {
          _this.callPlayer('mute');
        });

        _defineProperty(_assertThisInitialized(_this), "unmute", function () {
          _this.callPlayer('unmute');
        });

        _defineProperty(_assertThisInitialized(_this), "ref", function (iframe) {
          _this.iframe = iframe;
        });

        return _this;
      }

      _createClass(Kaltura, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;

          (0, utils$2.getSDK)(SDK_URL, SDK_GLOBAL).then(function (playerjs) {
            if (!_this2.iframe) return;
            _this2.player = new playerjs.Player(_this2.iframe);

            _this2.player.on('ready', function () {
              // An arbitrary timeout is required otherwise
              // the event listeners won’t work
              setTimeout(function () {
                _this2.player.isReady = true;

                _this2.player.setLoop(_this2.props.loop);

                if (_this2.props.muted) {
                  _this2.player.mute();
                }

                _this2.addListeners(_this2.player, _this2.props);

                _this2.props.onReady();
              }, 500);
            });
          }, this.props.onError);
        }
      }, {
        key: "addListeners",
        value: function addListeners(player, props) {
          var _this3 = this;

          player.on('play', props.onPlay);
          player.on('pause', props.onPause);
          player.on('ended', props.onEnded);
          player.on('error', props.onError);
          player.on('timeupdate', function (_ref) {
            var duration = _ref.duration,
                seconds = _ref.seconds;
            _this3.duration = duration;
            _this3.currentTime = seconds;
          });
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer('play');
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer('pause');
        }
      }, {
        key: "stop",
        value: function stop() {// Nothing to do
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer('setCurrentTime', seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer('setVolume', fraction);
        }
      }, {
        key: "setLoop",
        value: function setLoop(loop) {
          this.callPlayer('setLoop', loop);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.secondsLoaded;
        }
      }, {
        key: "render",
        value: function render() {
          var style = {
            width: '100%',
            height: '100%'
          };
          return /*#__PURE__*/_react["default"].createElement("iframe", {
            ref: this.ref,
            src: this.props.url,
            frameBorder: "0",
            scrolling: "no",
            style: style,
            allow: "encrypted-media; autoplay; fullscreen;",
            referrerPolicy: "no-referrer-when-downgrade"
          });
        }
      }]);

      return Kaltura;
    }(_react.Component);

    exports["default"] = Kaltura;

    _defineProperty(Kaltura, "displayName", 'Kaltura');

    _defineProperty(Kaltura, "canPlay", patterns.canPlay.kaltura);
    });

    unwrapExports(Kaltura_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var FilePlayer_1 = createCommonjsModule$1(function (module, exports) {

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _react = _interopRequireWildcard(React__default['default']);





    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var HAS_NAVIGATOR = typeof navigator !== 'undefined';
    var IS_IPAD_PRO = HAS_NAVIGATOR && navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1;
    var IS_IOS = HAS_NAVIGATOR && (/iPad|iPhone|iPod/.test(navigator.userAgent) || IS_IPAD_PRO) && !window.MSStream;
    var HLS_SDK_URL = 'https://cdn.jsdelivr.net/npm/hls.js@VERSION/dist/hls.min.js';
    var HLS_GLOBAL = 'Hls';
    var DASH_SDK_URL = 'https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js';
    var DASH_GLOBAL = 'dashjs';
    var FLV_SDK_URL = 'https://cdn.jsdelivr.net/npm/flv.js@VERSION/dist/flv.min.js';
    var FLV_GLOBAL = 'flvjs';
    var MATCH_DROPBOX_URL = /www\.dropbox\.com\/.+/;
    var MATCH_CLOUDFLARE_STREAM = /https:\/\/watch\.cloudflarestream\.com\/([a-z0-9]+)/;
    var REPLACE_CLOUDFLARE_STREAM = 'https://videodelivery.net/{id}/manifest/video.m3u8';

    var FilePlayer = /*#__PURE__*/function (_Component) {
      _inherits(FilePlayer, _Component);

      var _super = _createSuper(FilePlayer);

      function FilePlayer() {
        var _this;

        _classCallCheck(this, FilePlayer);

        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(_args));

        _defineProperty(_assertThisInitialized(_this), "onReady", function () {
          var _this$props;

          return (_this$props = _this.props).onReady.apply(_this$props, arguments);
        });

        _defineProperty(_assertThisInitialized(_this), "onPlay", function () {
          var _this$props2;

          return (_this$props2 = _this.props).onPlay.apply(_this$props2, arguments);
        });

        _defineProperty(_assertThisInitialized(_this), "onBuffer", function () {
          var _this$props3;

          return (_this$props3 = _this.props).onBuffer.apply(_this$props3, arguments);
        });

        _defineProperty(_assertThisInitialized(_this), "onBufferEnd", function () {
          var _this$props4;

          return (_this$props4 = _this.props).onBufferEnd.apply(_this$props4, arguments);
        });

        _defineProperty(_assertThisInitialized(_this), "onPause", function () {
          var _this$props5;

          return (_this$props5 = _this.props).onPause.apply(_this$props5, arguments);
        });

        _defineProperty(_assertThisInitialized(_this), "onEnded", function () {
          var _this$props6;

          return (_this$props6 = _this.props).onEnded.apply(_this$props6, arguments);
        });

        _defineProperty(_assertThisInitialized(_this), "onError", function () {
          var _this$props7;

          return (_this$props7 = _this.props).onError.apply(_this$props7, arguments);
        });

        _defineProperty(_assertThisInitialized(_this), "onPlayBackRateChange", function (event) {
          return _this.props.onPlaybackRateChange(event.target.playbackRate);
        });

        _defineProperty(_assertThisInitialized(_this), "onEnablePIP", function () {
          var _this$props8;

          return (_this$props8 = _this.props).onEnablePIP.apply(_this$props8, arguments);
        });

        _defineProperty(_assertThisInitialized(_this), "onDisablePIP", function (e) {
          var _this$props9 = _this.props,
              onDisablePIP = _this$props9.onDisablePIP,
              playing = _this$props9.playing;
          onDisablePIP(e);

          if (playing) {
            _this.play();
          }
        });

        _defineProperty(_assertThisInitialized(_this), "onPresentationModeChange", function (e) {
          if (_this.player && (0, utils$2.supportsWebKitPresentationMode)(_this.player)) {
            var webkitPresentationMode = _this.player.webkitPresentationMode;

            if (webkitPresentationMode === 'picture-in-picture') {
              _this.onEnablePIP(e);
            } else if (webkitPresentationMode === 'inline') {
              _this.onDisablePIP(e);
            }
          }
        });

        _defineProperty(_assertThisInitialized(_this), "onSeek", function (e) {
          _this.props.onSeek(e.target.currentTime);
        });

        _defineProperty(_assertThisInitialized(_this), "mute", function () {
          _this.player.muted = true;
        });

        _defineProperty(_assertThisInitialized(_this), "unmute", function () {
          _this.player.muted = false;
        });

        _defineProperty(_assertThisInitialized(_this), "renderSourceElement", function (source, index) {
          if (typeof source === 'string') {
            return /*#__PURE__*/_react["default"].createElement("source", {
              key: index,
              src: source
            });
          }

          return /*#__PURE__*/_react["default"].createElement("source", _extends({
            key: index
          }, source));
        });

        _defineProperty(_assertThisInitialized(_this), "renderTrack", function (track, index) {
          return /*#__PURE__*/_react["default"].createElement("track", _extends({
            key: index
          }, track));
        });

        _defineProperty(_assertThisInitialized(_this), "ref", function (player) {
          if (_this.player) {
            // Store previous player to be used by removeListeners()
            _this.prevPlayer = _this.player;
          }

          _this.player = player;
        });

        return _this;
      }

      _createClass(FilePlayer, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.props.onMount && this.props.onMount(this);
          this.addListeners(this.player);

          if (IS_IOS) {
            this.player.load();
          }
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(prevProps)) {
            this.removeListeners(this.prevPlayer, prevProps.url);
            this.addListeners(this.player);
          }

          if (this.props.url !== prevProps.url && !(0, utils$2.isMediaStream)(this.props.url)) {
            this.player.srcObject = null;
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.removeListeners(this.player);

          if (this.hls) {
            this.hls.destroy();
          }
        }
      }, {
        key: "addListeners",
        value: function addListeners(player) {
          var _this$props10 = this.props,
              url = _this$props10.url,
              playsinline = _this$props10.playsinline;
          player.addEventListener('play', this.onPlay);
          player.addEventListener('waiting', this.onBuffer);
          player.addEventListener('playing', this.onBufferEnd);
          player.addEventListener('pause', this.onPause);
          player.addEventListener('seeked', this.onSeek);
          player.addEventListener('ended', this.onEnded);
          player.addEventListener('error', this.onError);
          player.addEventListener('ratechange', this.onPlayBackRateChange);
          player.addEventListener('enterpictureinpicture', this.onEnablePIP);
          player.addEventListener('leavepictureinpicture', this.onDisablePIP);
          player.addEventListener('webkitpresentationmodechanged', this.onPresentationModeChange);

          if (!this.shouldUseHLS(url)) {
            // onReady is handled by hls.js
            player.addEventListener('canplay', this.onReady);
          }

          if (playsinline) {
            player.setAttribute('playsinline', '');
            player.setAttribute('webkit-playsinline', '');
            player.setAttribute('x5-playsinline', '');
          }
        }
      }, {
        key: "removeListeners",
        value: function removeListeners(player, url) {
          player.removeEventListener('canplay', this.onReady);
          player.removeEventListener('play', this.onPlay);
          player.removeEventListener('waiting', this.onBuffer);
          player.removeEventListener('playing', this.onBufferEnd);
          player.removeEventListener('pause', this.onPause);
          player.removeEventListener('seeked', this.onSeek);
          player.removeEventListener('ended', this.onEnded);
          player.removeEventListener('error', this.onError);
          player.removeEventListener('ratechange', this.onPlayBackRateChange);
          player.removeEventListener('enterpictureinpicture', this.onEnablePIP);
          player.removeEventListener('leavepictureinpicture', this.onDisablePIP);
          player.removeEventListener('webkitpresentationmodechanged', this.onPresentationModeChange);

          if (!this.shouldUseHLS(url)) {
            // onReady is handled by hls.js
            player.removeEventListener('canplay', this.onReady);
          }
        } // Proxy methods to prevent listener leaks

      }, {
        key: "shouldUseAudio",
        value: function shouldUseAudio(props) {
          if (props.config.forceVideo) {
            return false;
          }

          if (props.config.attributes.poster) {
            return false; // Use <video> so that poster is shown
          }

          return patterns.AUDIO_EXTENSIONS.test(props.url) || props.config.forceAudio;
        }
      }, {
        key: "shouldUseHLS",
        value: function shouldUseHLS(url) {
          if (this.props.config.forceHLS) {
            return true;
          }

          if (IS_IOS) {
            return false;
          }

          return patterns.HLS_EXTENSIONS.test(url) || MATCH_CLOUDFLARE_STREAM.test(url);
        }
      }, {
        key: "shouldUseDASH",
        value: function shouldUseDASH(url) {
          return patterns.DASH_EXTENSIONS.test(url) || this.props.config.forceDASH;
        }
      }, {
        key: "shouldUseFLV",
        value: function shouldUseFLV(url) {
          return patterns.FLV_EXTENSIONS.test(url) || this.props.config.forceFLV;
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;

          var _this$props$config = this.props.config,
              hlsVersion = _this$props$config.hlsVersion,
              hlsOptions = _this$props$config.hlsOptions,
              dashVersion = _this$props$config.dashVersion,
              flvVersion = _this$props$config.flvVersion;

          if (this.hls) {
            this.hls.destroy();
          }

          if (this.dash) {
            this.dash.reset();
          }

          if (this.shouldUseHLS(url)) {
            (0, utils$2.getSDK)(HLS_SDK_URL.replace('VERSION', hlsVersion), HLS_GLOBAL).then(function (Hls) {
              _this2.hls = new Hls(hlsOptions);

              _this2.hls.on(Hls.Events.MANIFEST_PARSED, function () {
                _this2.props.onReady();
              });

              _this2.hls.on(Hls.Events.ERROR, function (e, data) {
                _this2.props.onError(e, data, _this2.hls, Hls);
              });

              if (MATCH_CLOUDFLARE_STREAM.test(url)) {
                var id = url.match(MATCH_CLOUDFLARE_STREAM)[1];

                _this2.hls.loadSource(REPLACE_CLOUDFLARE_STREAM.replace('{id}', id));
              } else {
                _this2.hls.loadSource(url);
              }

              _this2.hls.attachMedia(_this2.player);

              _this2.props.onLoaded();
            });
          }

          if (this.shouldUseDASH(url)) {
            (0, utils$2.getSDK)(DASH_SDK_URL.replace('VERSION', dashVersion), DASH_GLOBAL).then(function (dashjs) {
              _this2.dash = dashjs.MediaPlayer().create();

              _this2.dash.initialize(_this2.player, url, _this2.props.playing);

              _this2.dash.on('error', _this2.props.onError);

              if (parseInt(dashVersion) < 3) {
                _this2.dash.getDebug().setLogToBrowserConsole(false);
              } else {
                _this2.dash.updateSettings({
                  debug: {
                    logLevel: dashjs.Debug.LOG_LEVEL_NONE
                  }
                });
              }

              _this2.props.onLoaded();
            });
          }

          if (this.shouldUseFLV(url)) {
            (0, utils$2.getSDK)(FLV_SDK_URL.replace('VERSION', flvVersion), FLV_GLOBAL).then(function (flvjs) {
              _this2.flv = flvjs.createPlayer({
                type: 'flv',
                url: url
              });

              _this2.flv.attachMediaElement(_this2.player);

              _this2.flv.on(flvjs.Events.ERROR, function (e, data) {
                _this2.props.onError(e, data, _this2.flv, flvjs);
              });

              _this2.flv.load();

              _this2.props.onLoaded();
            });
          }

          if (url instanceof Array) {
            // When setting new urls (<source>) on an already loaded video,
            // HTMLMediaElement.load() is needed to reset the media element
            // and restart the media resource. Just replacing children source
            // dom nodes is not enough
            this.player.load();
          } else if ((0, utils$2.isMediaStream)(url)) {
            try {
              this.player.srcObject = url;
            } catch (e) {
              this.player.src = window.URL.createObjectURL(url);
            }
          }
        }
      }, {
        key: "play",
        value: function play() {
          var promise = this.player.play();

          if (promise) {
            promise["catch"](this.props.onError);
          }
        }
      }, {
        key: "pause",
        value: function pause() {
          this.player.pause();
        }
      }, {
        key: "stop",
        value: function stop() {
          this.player.removeAttribute('src');

          if (this.dash) {
            this.dash.reset();
          }
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.player.currentTime = seconds;
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.player.volume = fraction;
        }
      }, {
        key: "enablePIP",
        value: function enablePIP() {
          if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {
            this.player.requestPictureInPicture();
          } else if ((0, utils$2.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== 'picture-in-picture') {
            this.player.webkitSetPresentationMode('picture-in-picture');
          }
        }
      }, {
        key: "disablePIP",
        value: function disablePIP() {
          if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {
            document.exitPictureInPicture();
          } else if ((0, utils$2.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== 'inline') {
            this.player.webkitSetPresentationMode('inline');
          }
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          try {
            this.player.playbackRate = rate;
          } catch (error) {
            this.props.onError(error);
          }
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          if (!this.player) return null;
          var _this$player = this.player,
              duration = _this$player.duration,
              seekable = _this$player.seekable; // on iOS, live streams return Infinity for the duration
          // so instead we use the end of the seekable timerange

          if (duration === Infinity && seekable.length > 0) {
            return seekable.end(seekable.length - 1);
          }

          return duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          if (!this.player) return null;
          return this.player.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          if (!this.player) return null;
          var buffered = this.player.buffered;

          if (buffered.length === 0) {
            return 0;
          }

          var end = buffered.end(buffered.length - 1);
          var duration = this.getDuration();

          if (end > duration) {
            return duration;
          }

          return end;
        }
      }, {
        key: "getSource",
        value: function getSource(url) {
          var useHLS = this.shouldUseHLS(url);
          var useDASH = this.shouldUseDASH(url);
          var useFLV = this.shouldUseFLV(url);

          if (url instanceof Array || (0, utils$2.isMediaStream)(url) || useHLS || useDASH || useFLV) {
            return undefined;
          }

          if (MATCH_DROPBOX_URL.test(url)) {
            return url.replace('www.dropbox.com', 'dl.dropboxusercontent.com');
          }

          return url;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props11 = this.props,
              url = _this$props11.url,
              playing = _this$props11.playing,
              loop = _this$props11.loop,
              controls = _this$props11.controls,
              muted = _this$props11.muted,
              config = _this$props11.config,
              width = _this$props11.width,
              height = _this$props11.height;
          var useAudio = this.shouldUseAudio(this.props);
          var Element = useAudio ? 'audio' : 'video';
          var style = {
            width: width === 'auto' ? width : '100%',
            height: height === 'auto' ? height : '100%'
          };
          return /*#__PURE__*/_react["default"].createElement(Element, _extends({
            ref: this.ref,
            src: this.getSource(url),
            style: style,
            preload: "auto",
            autoPlay: playing || undefined,
            controls: controls,
            muted: muted,
            loop: loop
          }, config.attributes), url instanceof Array && url.map(this.renderSourceElement), config.tracks.map(this.renderTrack));
        }
      }]);

      return FilePlayer;
    }(_react.Component);

    exports["default"] = FilePlayer;

    _defineProperty(FilePlayer, "displayName", 'FilePlayer');

    _defineProperty(FilePlayer, "canPlay", patterns.canPlay.file);
    });

    unwrapExports(FilePlayer_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var players = createCommonjsModule$1(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;







    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    var _default = [{
      key: 'youtube',
      name: 'YouTube',
      canPlay: patterns.canPlay.youtube,
      lazyPlayer: /*#__PURE__*/(0, React__default['default'].lazy)(function () {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(YouTube_1);
        });
      })
    }, {
      key: 'soundcloud',
      name: 'SoundCloud',
      canPlay: patterns.canPlay.soundcloud,
      lazyPlayer: /*#__PURE__*/(0, React__default['default'].lazy)(function () {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(SoundCloud_1);
        });
      })
    }, {
      key: 'vimeo',
      name: 'Vimeo',
      canPlay: patterns.canPlay.vimeo,
      lazyPlayer: /*#__PURE__*/(0, React__default['default'].lazy)(function () {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(Vimeo_1);
        });
      })
    }, {
      key: 'facebook',
      name: 'Facebook',
      canPlay: patterns.canPlay.facebook,
      lazyPlayer: /*#__PURE__*/(0, React__default['default'].lazy)(function () {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(Facebook_1);
        });
      })
    }, {
      key: 'streamable',
      name: 'Streamable',
      canPlay: patterns.canPlay.streamable,
      lazyPlayer: /*#__PURE__*/(0, React__default['default'].lazy)(function () {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(Streamable_1);
        });
      })
    }, {
      key: 'wistia',
      name: 'Wistia',
      canPlay: patterns.canPlay.wistia,
      lazyPlayer: /*#__PURE__*/(0, React__default['default'].lazy)(function () {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(Wistia_1);
        });
      })
    }, {
      key: 'twitch',
      name: 'Twitch',
      canPlay: patterns.canPlay.twitch,
      lazyPlayer: /*#__PURE__*/(0, React__default['default'].lazy)(function () {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(Twitch_1);
        });
      })
    }, {
      key: 'dailymotion',
      name: 'DailyMotion',
      canPlay: patterns.canPlay.dailymotion,
      lazyPlayer: /*#__PURE__*/(0, React__default['default'].lazy)(function () {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(DailyMotion_1);
        });
      })
    }, {
      key: 'mixcloud',
      name: 'Mixcloud',
      canPlay: patterns.canPlay.mixcloud,
      lazyPlayer: /*#__PURE__*/(0, React__default['default'].lazy)(function () {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(Mixcloud_1);
        });
      })
    }, {
      key: 'vidyard',
      name: 'Vidyard',
      canPlay: patterns.canPlay.vidyard,
      lazyPlayer: /*#__PURE__*/(0, React__default['default'].lazy)(function () {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(Vidyard_1);
        });
      })
    }, {
      key: 'kaltura',
      name: 'Kaltura',
      canPlay: patterns.canPlay.kaltura,
      lazyPlayer: /*#__PURE__*/(0, React__default['default'].lazy)(function () {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(Kaltura_1);
        });
      })
    }, {
      key: 'file',
      name: 'FilePlayer',
      canPlay: patterns.canPlay.file,
      canEnablePIP: function canEnablePIP(url) {
        return patterns.canPlay.file(url) && (document.pictureInPictureEnabled || (0, utils$2.supportsWebKitPresentationMode)()) && !patterns.AUDIO_EXTENSIONS.test(url);
      },
      lazyPlayer: /*#__PURE__*/(0, React__default['default'].lazy)(function () {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(FilePlayer_1);
        });
      })
    }];
    exports["default"] = _default;
    });

    unwrapExports(players);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function areInputsEqual(newInputs, lastInputs) {
        if (newInputs.length !== lastInputs.length) {
            return false;
        }
        for (var i = 0; i < newInputs.length; i++) {
            if (newInputs[i] !== lastInputs[i]) {
                return false;
            }
        }
        return true;
    }

    function memoizeOne(resultFn, isEqual) {
        if (isEqual === void 0) { isEqual = areInputsEqual; }
        var lastThis;
        var lastArgs = [];
        var lastResult;
        var calledOnce = false;
        function memoized() {
            var newArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newArgs[_i] = arguments[_i];
            }
            if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
                return lastResult;
            }
            lastResult = resultFn.apply(this, newArgs);
            calledOnce = true;
            lastThis = this;
            lastArgs = newArgs;
            return lastResult;
        }
        return memoized;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */

    var hasElementType = typeof Element !== 'undefined';
    var hasMap = typeof Map === 'function';
    var hasSet = typeof Set === 'function';
    var hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;

    // Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js

    function equal(a, b) {
      // START: fast-deep-equal es6/index.js 3.1.1
      if (a === b) return true;

      if (a && b && typeof a == 'object' && typeof b == 'object') {
        if (a.constructor !== b.constructor) return false;

        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0;)
            if (!equal(a[i], b[i])) return false;
          return true;
        }

        // START: Modifications:
        // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code
        //    to co-exist with es5.
        // 2. Replace `for of` with es5 compliant iteration using `for`.
        //    Basically, take:
        //
        //    ```js
        //    for (i of a.entries())
        //      if (!b.has(i[0])) return false;
        //    ```
        //
        //    ... and convert to:
        //
        //    ```js
        //    it = a.entries();
        //    while (!(i = it.next()).done)
        //      if (!b.has(i.value[0])) return false;
        //    ```
        //
        //    **Note**: `i` access switches to `i.value`.
        var it;
        if (hasMap && (a instanceof Map) && (b instanceof Map)) {
          if (a.size !== b.size) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0])) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0]))) return false;
          return true;
        }

        if (hasSet && (a instanceof Set) && (b instanceof Set)) {
          if (a.size !== b.size) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0])) return false;
          return true;
        }
        // END: Modifications

        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0;)
            if (a[i] !== b[i]) return false;
          return true;
        }

        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;

        for (i = length; i-- !== 0;)
          if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        // END: fast-deep-equal

        // START: react-fast-compare
        // custom handling for DOM elements
        if (hasElementType && a instanceof Element) return false;

        // custom handling for React/Preact
        for (i = length; i-- !== 0;) {
          if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {
            // React-specific: avoid traversing React elements' _owner
            // Preact-specific: avoid traversing Preact elements' __v and __o
            //    __v = $_original / $_vnode
            //    __o = $_owner
            // These properties contain circular references and are not needed when
            // comparing the actual elements (and not their owners)
            // .$$typeof and ._store on just reasonable markers of elements

            continue;
          }

          // all other properties should be traversed as usual
          if (!equal(a[keys[i]], b[keys[i]])) return false;
        }
        // END: react-fast-compare

        // START: fast-deep-equal
        return true;
      }

      return a !== a && b !== b;
    }
    // end fast-deep-equal

    var reactFastCompare = function isEqual(a, b) {
      try {
        return equal(a, b);
      } catch (error) {
        if (((error.message || '').match(/stack|recursion/i))) {
          // warn on circular references, don't crash
          // browsers give this different errors name and messages:
          // chrome/safari: "RangeError", "Maximum call stack size exceeded"
          // firefox: "InternalError", too much recursion"
          // edge: "Error", "Out of stack space"
          console.warn('react-fast-compare cannot handle circular refs');
          return false;
        }
        // some other error. we should definitely know about these
        throw error;
      }
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

    var ReactPropTypesSecret_1$1 = ReactPropTypesSecret$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    function emptyFunction$1() {}
    function emptyFunctionWithReset$1() {}
    emptyFunctionWithReset$1.resetWarningCache = emptyFunction$1;

    var factoryWithThrowingShims$1 = function() {
      function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret_1$1) {
          // It is still safe when called from React.
          return;
        }
        var err = new Error(
          'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
          'Use PropTypes.checkPropTypes() to call them. ' +
          'Read more at http://fb.me/use-check-prop-types'
        );
        err.name = 'Invariant Violation';
        throw err;
      }  shim.isRequired = shim;
      function getShim() {
        return shim;
      }  // Important!
      // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
      var ReactPropTypes = {
        array: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,

        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,

        checkPropTypes: emptyFunctionWithReset$1,
        resetWarningCache: emptyFunction$1
      };

      ReactPropTypes.PropTypes = ReactPropTypes;

      return ReactPropTypes;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var propTypes$1 = createCommonjsModule$1(function (module) {
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    {
      // By explicitly using `prop-types` you are opting into new production behavior.
      // http://fb.me/prop-types-in-prod
      module.exports = factoryWithThrowingShims$1();
    }
    });
    propTypes$1.array;
    propTypes$1.bool;
    propTypes$1.func;
    propTypes$1.number;
    propTypes$1.object;
    propTypes$1.string;
    propTypes$1.symbol;
    propTypes$1.any;
    propTypes$1.arrayOf;
    propTypes$1.element;
    propTypes$1.elementType;
    propTypes$1.instanceOf;
    propTypes$1.node;
    propTypes$1.objectOf;
    propTypes$1.oneOf;
    propTypes$1.oneOfType;
    propTypes$1.shape;
    propTypes$1.exact;
    propTypes$1.checkPropTypes;
    propTypes$1.resetWarningCache;
    propTypes$1.PropTypes;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var props = createCommonjsModule$1(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.defaultProps = exports.propTypes = void 0;

    var _propTypes = _interopRequireDefault(propTypes$1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    var string = _propTypes["default"].string,
        bool = _propTypes["default"].bool,
        number = _propTypes["default"].number,
        array = _propTypes["default"].array,
        oneOfType = _propTypes["default"].oneOfType,
        shape = _propTypes["default"].shape,
        object = _propTypes["default"].object,
        func = _propTypes["default"].func,
        node = _propTypes["default"].node;
    var propTypes = {
      url: oneOfType([string, array, object]),
      playing: bool,
      loop: bool,
      controls: bool,
      volume: number,
      muted: bool,
      playbackRate: number,
      width: oneOfType([string, number]),
      height: oneOfType([string, number]),
      style: object,
      progressInterval: number,
      playsinline: bool,
      pip: bool,
      stopOnUnmount: bool,
      light: oneOfType([bool, string]),
      playIcon: node,
      previewTabIndex: number,
      fallback: node,
      oEmbedUrl: string,
      wrapper: oneOfType([string, func, shape({
        render: func.isRequired
      })]),
      config: shape({
        soundcloud: shape({
          options: object
        }),
        youtube: shape({
          playerVars: object,
          embedOptions: object,
          onUnstarted: func
        }),
        facebook: shape({
          appId: string,
          version: string,
          playerId: string,
          attributes: object
        }),
        dailymotion: shape({
          params: object
        }),
        vimeo: shape({
          playerOptions: object,
          title: string
        }),
        file: shape({
          attributes: object,
          tracks: array,
          forceVideo: bool,
          forceAudio: bool,
          forceHLS: bool,
          forceDASH: bool,
          forceFLV: bool,
          hlsOptions: object,
          hlsVersion: string,
          dashVersion: string,
          flvVersion: string
        }),
        wistia: shape({
          options: object,
          playerId: string,
          customControls: array
        }),
        mixcloud: shape({
          options: object
        }),
        twitch: shape({
          options: object,
          playerId: string
        }),
        vidyard: shape({
          options: object
        })
      }),
      onReady: func,
      onStart: func,
      onPlay: func,
      onPause: func,
      onBuffer: func,
      onBufferEnd: func,
      onEnded: func,
      onError: func,
      onDuration: func,
      onSeek: func,
      onPlaybackRateChange: func,
      onProgress: func,
      onClickPreview: func,
      onEnablePIP: func,
      onDisablePIP: func
    };
    exports.propTypes = propTypes;

    var noop = function noop() {};

    var defaultProps = {
      playing: false,
      loop: false,
      controls: false,
      volume: null,
      muted: false,
      playbackRate: 1,
      width: '640px',
      height: '360px',
      style: {},
      progressInterval: 1000,
      playsinline: false,
      pip: false,
      stopOnUnmount: true,
      light: false,
      fallback: null,
      wrapper: 'div',
      previewTabIndex: 0,
      oEmbedUrl: 'https://noembed.com/embed?url={url}',
      config: {
        soundcloud: {
          options: {
            visual: true,
            // Undocumented, but makes player fill container and look better
            buying: false,
            liking: false,
            download: false,
            sharing: false,
            show_comments: false,
            show_playcount: false
          }
        },
        youtube: {
          playerVars: {
            playsinline: 1,
            showinfo: 0,
            rel: 0,
            iv_load_policy: 3,
            modestbranding: 1
          },
          embedOptions: {},
          onUnstarted: noop
        },
        facebook: {
          appId: '1309697205772819',
          version: 'v3.3',
          playerId: null,
          attributes: {}
        },
        dailymotion: {
          params: {
            api: 1,
            'endscreen-enable': false
          }
        },
        vimeo: {
          playerOptions: {
            autopause: false,
            byline: false,
            portrait: false,
            title: false
          },
          title: null
        },
        file: {
          attributes: {},
          tracks: [],
          forceVideo: false,
          forceAudio: false,
          forceHLS: false,
          forceDASH: false,
          forceFLV: false,
          hlsOptions: {},
          hlsVersion: '1.1.4',
          dashVersion: '3.1.3',
          flvVersion: '1.5.0'
        },
        wistia: {
          options: {},
          playerId: null,
          customControls: null
        },
        mixcloud: {
          options: {
            hide_cover: 1
          }
        },
        twitch: {
          options: {},
          playerId: null
        },
        vidyard: {
          options: {}
        }
      },
      onReady: noop,
      onStart: noop,
      onPlay: noop,
      onPause: noop,
      onBuffer: noop,
      onBufferEnd: noop,
      onEnded: noop,
      onError: noop,
      onDuration: noop,
      onSeek: noop,
      onPlaybackRateChange: noop,
      onProgress: noop,
      onClickPreview: noop,
      onEnablePIP: noop,
      onDisablePIP: noop
    };
    exports.defaultProps = defaultProps;
    });

    unwrapExports(props);
    props.defaultProps;
    props.propTypes;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var Player_1 = createCommonjsModule$1(function (module, exports) {

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _react = _interopRequireWildcard(React__default['default']);

    var _reactFastCompare = _interopRequireDefault(reactFastCompare);





    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var SEEK_ON_PLAY_EXPIRY = 5000;

    var Player = /*#__PURE__*/function (_Component) {
      _inherits(Player, _Component);

      var _super = _createSuper(Player);

      function Player() {
        var _this;

        _classCallCheck(this, Player);

        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(_args));

        _defineProperty(_assertThisInitialized(_this), "mounted", false);

        _defineProperty(_assertThisInitialized(_this), "isReady", false);

        _defineProperty(_assertThisInitialized(_this), "isPlaying", false);

        _defineProperty(_assertThisInitialized(_this), "isLoading", true);

        _defineProperty(_assertThisInitialized(_this), "loadOnReady", null);

        _defineProperty(_assertThisInitialized(_this), "startOnPlay", true);

        _defineProperty(_assertThisInitialized(_this), "seekOnPlay", null);

        _defineProperty(_assertThisInitialized(_this), "onDurationCalled", false);

        _defineProperty(_assertThisInitialized(_this), "handlePlayerMount", function (player) {
          if (_this.player) return; // Prevent loading twice in strict mode

          _this.player = player;

          _this.player.load(_this.props.url);

          _this.progress();
        });

        _defineProperty(_assertThisInitialized(_this), "getInternalPlayer", function (key) {
          if (!_this.player) return null;
          return _this.player[key];
        });

        _defineProperty(_assertThisInitialized(_this), "progress", function () {
          if (_this.props.url && _this.player && _this.isReady) {
            var playedSeconds = _this.getCurrentTime() || 0;

            var loadedSeconds = _this.getSecondsLoaded();

            var duration = _this.getDuration();

            if (duration) {
              var progress = {
                playedSeconds: playedSeconds,
                played: playedSeconds / duration
              };

              if (loadedSeconds !== null) {
                progress.loadedSeconds = loadedSeconds;
                progress.loaded = loadedSeconds / duration;
              } // Only call onProgress if values have changed


              if (progress.playedSeconds !== _this.prevPlayed || progress.loadedSeconds !== _this.prevLoaded) {
                _this.props.onProgress(progress);
              }

              _this.prevPlayed = progress.playedSeconds;
              _this.prevLoaded = progress.loadedSeconds;
            }
          }

          _this.progressTimeout = setTimeout(_this.progress, _this.props.progressFrequency || _this.props.progressInterval);
        });

        _defineProperty(_assertThisInitialized(_this), "handleReady", function () {
          if (!_this.mounted) return;
          _this.isReady = true;
          _this.isLoading = false;
          var _this$props = _this.props,
              onReady = _this$props.onReady,
              playing = _this$props.playing,
              volume = _this$props.volume,
              muted = _this$props.muted;
          onReady();

          if (!muted && volume !== null) {
            _this.player.setVolume(volume);
          }

          if (_this.loadOnReady) {
            _this.player.load(_this.loadOnReady, true);

            _this.loadOnReady = null;
          } else if (playing) {
            _this.player.play();
          }

          _this.handleDurationCheck();
        });

        _defineProperty(_assertThisInitialized(_this), "handlePlay", function () {
          _this.isPlaying = true;
          _this.isLoading = false;
          var _this$props2 = _this.props,
              onStart = _this$props2.onStart,
              onPlay = _this$props2.onPlay,
              playbackRate = _this$props2.playbackRate;

          if (_this.startOnPlay) {
            if (_this.player.setPlaybackRate && playbackRate !== 1) {
              _this.player.setPlaybackRate(playbackRate);
            }

            onStart();
            _this.startOnPlay = false;
          }

          onPlay();

          if (_this.seekOnPlay) {
            _this.seekTo(_this.seekOnPlay);

            _this.seekOnPlay = null;
          }

          _this.handleDurationCheck();
        });

        _defineProperty(_assertThisInitialized(_this), "handlePause", function (e) {
          _this.isPlaying = false;

          if (!_this.isLoading) {
            _this.props.onPause(e);
          }
        });

        _defineProperty(_assertThisInitialized(_this), "handleEnded", function () {
          var _this$props3 = _this.props,
              activePlayer = _this$props3.activePlayer,
              loop = _this$props3.loop,
              onEnded = _this$props3.onEnded;

          if (activePlayer.loopOnEnded && loop) {
            _this.seekTo(0);
          }

          if (!loop) {
            _this.isPlaying = false;
            onEnded();
          }
        });

        _defineProperty(_assertThisInitialized(_this), "handleError", function () {
          var _this$props4;

          _this.isLoading = false;

          (_this$props4 = _this.props).onError.apply(_this$props4, arguments);
        });

        _defineProperty(_assertThisInitialized(_this), "handleDurationCheck", function () {
          clearTimeout(_this.durationCheckTimeout);

          var duration = _this.getDuration();

          if (duration) {
            if (!_this.onDurationCalled) {
              _this.props.onDuration(duration);

              _this.onDurationCalled = true;
            }
          } else {
            _this.durationCheckTimeout = setTimeout(_this.handleDurationCheck, 100);
          }
        });

        _defineProperty(_assertThisInitialized(_this), "handleLoaded", function () {
          // Sometimes we know loading has stopped but onReady/onPlay are never called
          // so this provides a way for players to avoid getting stuck
          _this.isLoading = false;
        });

        return _this;
      }

      _createClass(Player, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.mounted = true;
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          clearTimeout(this.progressTimeout);
          clearTimeout(this.durationCheckTimeout);

          if (this.isReady && this.props.stopOnUnmount) {
            this.player.stop();

            if (this.player.disablePIP) {
              this.player.disablePIP();
            }
          }

          this.mounted = false;
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this2 = this;

          // If there isn’t a player available, don’t do anything
          if (!this.player) {
            return;
          } // Invoke player methods based on changed props


          var _this$props5 = this.props,
              url = _this$props5.url,
              playing = _this$props5.playing,
              volume = _this$props5.volume,
              muted = _this$props5.muted,
              playbackRate = _this$props5.playbackRate,
              pip = _this$props5.pip,
              loop = _this$props5.loop,
              activePlayer = _this$props5.activePlayer,
              disableDeferredLoading = _this$props5.disableDeferredLoading;

          if (!(0, _reactFastCompare["default"])(prevProps.url, url)) {
            if (this.isLoading && !activePlayer.forceLoad && !disableDeferredLoading && !(0, utils$2.isMediaStream)(url)) {
              console.warn("ReactPlayer: the attempt to load ".concat(url, " is being deferred until the player has loaded"));
              this.loadOnReady = url;
              return;
            }

            this.isLoading = true;
            this.startOnPlay = true;
            this.onDurationCalled = false;
            this.player.load(url, this.isReady);
          }

          if (!prevProps.playing && playing && !this.isPlaying) {
            this.player.play();
          }

          if (prevProps.playing && !playing && this.isPlaying) {
            this.player.pause();
          }

          if (!prevProps.pip && pip && this.player.enablePIP) {
            this.player.enablePIP();
          }

          if (prevProps.pip && !pip && this.player.disablePIP) {
            this.player.disablePIP();
          }

          if (prevProps.volume !== volume && volume !== null) {
            this.player.setVolume(volume);
          }

          if (prevProps.muted !== muted) {
            if (muted) {
              this.player.mute();
            } else {
              this.player.unmute();

              if (volume !== null) {
                // Set volume next tick to fix a bug with DailyMotion
                setTimeout(function () {
                  return _this2.player.setVolume(volume);
                });
              }
            }
          }

          if (prevProps.playbackRate !== playbackRate && this.player.setPlaybackRate) {
            this.player.setPlaybackRate(playbackRate);
          }

          if (prevProps.loop !== loop && this.player.setLoop) {
            this.player.setLoop(loop);
          }
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          if (!this.isReady) return null;
          return this.player.getDuration();
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          if (!this.isReady) return null;
          return this.player.getCurrentTime();
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          if (!this.isReady) return null;
          return this.player.getSecondsLoaded();
        }
      }, {
        key: "seekTo",
        value: function seekTo(amount, type) {
          var _this3 = this;

          // When seeking before player is ready, store value and seek later
          if (!this.isReady) {
            if (amount !== 0) {
              this.seekOnPlay = amount;
              setTimeout(function () {
                _this3.seekOnPlay = null;
              }, SEEK_ON_PLAY_EXPIRY);
            }

            return;
          }

          var isFraction = !type ? amount > 0 && amount < 1 : type === 'fraction';

          if (isFraction) {
            // Convert fraction to seconds based on duration
            var duration = this.player.getDuration();

            if (!duration) {
              console.warn('ReactPlayer: could not seek using fraction – duration not yet available');
              return;
            }

            this.player.seekTo(duration * amount);
            return;
          }

          this.player.seekTo(amount);
        }
      }, {
        key: "render",
        value: function render() {
          var Player = this.props.activePlayer;

          if (!Player) {
            return null;
          }

          return /*#__PURE__*/_react["default"].createElement(Player, _extends({}, this.props, {
            onMount: this.handlePlayerMount,
            onReady: this.handleReady,
            onPlay: this.handlePlay,
            onPause: this.handlePause,
            onEnded: this.handleEnded,
            onLoaded: this.handleLoaded,
            onError: this.handleError
          }));
        }
      }]);

      return Player;
    }(_react.Component);

    exports["default"] = Player;

    _defineProperty(Player, "displayName", 'Player');

    _defineProperty(Player, "propTypes", props.propTypes);

    _defineProperty(Player, "defaultProps", props.defaultProps);
    });

    unwrapExports(Player_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var Preview_1 = createCommonjsModule$1(function (module, exports) {

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _react = _interopRequireWildcard(React__default['default']);

    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var ICON_SIZE = '64px';
    var cache = {};

    var Preview = /*#__PURE__*/function (_Component) {
      _inherits(Preview, _Component);

      var _super = _createSuper(Preview);

      function Preview() {
        var _this;

        _classCallCheck(this, Preview);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _defineProperty(_assertThisInitialized(_this), "mounted", false);

        _defineProperty(_assertThisInitialized(_this), "state", {
          image: null
        });

        _defineProperty(_assertThisInitialized(_this), "handleKeyPress", function (e) {
          if (e.key === 'Enter' || e.key === ' ') {
            _this.props.onClick();
          }
        });

        return _this;
      }

      _createClass(Preview, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.mounted = true;
          this.fetchImage(this.props);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this$props = this.props,
              url = _this$props.url,
              light = _this$props.light;

          if (prevProps.url !== url || prevProps.light !== light) {
            this.fetchImage(this.props);
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.mounted = false;
        }
      }, {
        key: "fetchImage",
        value: function fetchImage(_ref) {
          var _this2 = this;

          var url = _ref.url,
              light = _ref.light,
              oEmbedUrl = _ref.oEmbedUrl;

          if (typeof light === 'string') {
            this.setState({
              image: light
            });
            return;
          }

          if (cache[url]) {
            this.setState({
              image: cache[url]
            });
            return;
          }

          this.setState({
            image: null
          });
          return window.fetch(oEmbedUrl.replace('{url}', url)).then(function (response) {
            return response.json();
          }).then(function (data) {
            if (data.thumbnail_url && _this2.mounted) {
              var image = data.thumbnail_url.replace('height=100', 'height=480');

              _this2.setState({
                image: image
              });

              cache[url] = image;
            }
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props2 = this.props,
              onClick = _this$props2.onClick,
              playIcon = _this$props2.playIcon,
              previewTabIndex = _this$props2.previewTabIndex;
          var image = this.state.image;
          var flexCenter = {
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          };
          var styles = {
            preview: _objectSpread({
              width: '100%',
              height: '100%',
              backgroundImage: image ? "url(".concat(image, ")") : undefined,
              backgroundSize: 'cover',
              backgroundPosition: 'center',
              cursor: 'pointer'
            }, flexCenter),
            shadow: _objectSpread({
              background: 'radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)',
              borderRadius: ICON_SIZE,
              width: ICON_SIZE,
              height: ICON_SIZE
            }, flexCenter),
            playIcon: {
              borderStyle: 'solid',
              borderWidth: '16px 0 16px 26px',
              borderColor: 'transparent transparent transparent white',
              marginLeft: '7px'
            }
          };

          var defaultPlayIcon = /*#__PURE__*/_react["default"].createElement("div", {
            style: styles.shadow,
            className: "react-player__shadow"
          }, /*#__PURE__*/_react["default"].createElement("div", {
            style: styles.playIcon,
            className: "react-player__play-icon"
          }));

          return /*#__PURE__*/_react["default"].createElement("div", {
            style: styles.preview,
            className: "react-player__preview",
            onClick: onClick,
            tabIndex: previewTabIndex,
            onKeyPress: this.handleKeyPress
          }, playIcon || defaultPlayIcon);
        }
      }]);

      return Preview;
    }(_react.Component);

    exports["default"] = Preview;
    });

    unwrapExports(Preview_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var ReactPlayer$1 = createCommonjsModule$1(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.createReactPlayer = void 0;

    var _react = _interopRequireWildcard(React__default['default']);

    var _deepmerge = _interopRequireDefault(cjs);

    var _memoizeOne = _interopRequireDefault(memoizeOne);

    var _reactFastCompare = _interopRequireDefault(reactFastCompare);





    var _Player3 = _interopRequireDefault(Player_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

    function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

    function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

    function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    var Preview = /*#__PURE__*/(0, _react.lazy)(function () {
      return Promise.resolve().then(function () {
        return _interopRequireWildcard(Preview_1);
      });
    });
    var IS_BROWSER = typeof window !== 'undefined' && window.document;
    var IS_GLOBAL = typeof commonjsGlobal !== 'undefined' && commonjsGlobal.window && commonjsGlobal.window.document;
    var SUPPORTED_PROPS = Object.keys(props.propTypes); // Return null when rendering on the server
    // as Suspense is not supported yet

    var UniversalSuspense = IS_BROWSER || IS_GLOBAL ? _react.Suspense : function () {
      return null;
    };
    var customPlayers = [];

    var createReactPlayer = function createReactPlayer(players, fallback) {
      var _class, _temp;

      return _temp = _class = /*#__PURE__*/function (_Component) {
        _inherits(ReactPlayer, _Component);

        var _super = _createSuper(ReactPlayer);

        function ReactPlayer() {
          var _this;

          _classCallCheck(this, ReactPlayer);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _defineProperty(_assertThisInitialized(_this), "state", {
            showPreview: !!_this.props.light
          });

          _defineProperty(_assertThisInitialized(_this), "references", {
            wrapper: function wrapper(_wrapper) {
              _this.wrapper = _wrapper;
            },
            player: function player(_player) {
              _this.player = _player;
            }
          });

          _defineProperty(_assertThisInitialized(_this), "handleClickPreview", function (e) {
            _this.setState({
              showPreview: false
            });

            _this.props.onClickPreview(e);
          });

          _defineProperty(_assertThisInitialized(_this), "showPreview", function () {
            _this.setState({
              showPreview: true
            });
          });

          _defineProperty(_assertThisInitialized(_this), "getDuration", function () {
            if (!_this.player) return null;
            return _this.player.getDuration();
          });

          _defineProperty(_assertThisInitialized(_this), "getCurrentTime", function () {
            if (!_this.player) return null;
            return _this.player.getCurrentTime();
          });

          _defineProperty(_assertThisInitialized(_this), "getSecondsLoaded", function () {
            if (!_this.player) return null;
            return _this.player.getSecondsLoaded();
          });

          _defineProperty(_assertThisInitialized(_this), "getInternalPlayer", function () {
            var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'player';
            if (!_this.player) return null;
            return _this.player.getInternalPlayer(key);
          });

          _defineProperty(_assertThisInitialized(_this), "seekTo", function (fraction, type) {
            if (!_this.player) return null;

            _this.player.seekTo(fraction, type);
          });

          _defineProperty(_assertThisInitialized(_this), "handleReady", function () {
            _this.props.onReady(_assertThisInitialized(_this));
          });

          _defineProperty(_assertThisInitialized(_this), "getActivePlayer", (0, _memoizeOne["default"])(function (url) {
            for (var _i = 0, _arr = [].concat(customPlayers, _toConsumableArray(players)); _i < _arr.length; _i++) {
              var player = _arr[_i];

              if (player.canPlay(url)) {
                return player;
              }
            }

            if (fallback) {
              return fallback;
            }

            return null;
          }));

          _defineProperty(_assertThisInitialized(_this), "getConfig", (0, _memoizeOne["default"])(function (url, key) {
            var config = _this.props.config;
            return _deepmerge["default"].all([props.defaultProps.config, props.defaultProps.config[key] || {}, config, config[key] || {}]);
          }));

          _defineProperty(_assertThisInitialized(_this), "getAttributes", (0, _memoizeOne["default"])(function (url) {
            return (0, utils$2.omit)(_this.props, SUPPORTED_PROPS);
          }));

          _defineProperty(_assertThisInitialized(_this), "renderActivePlayer", function (url) {
            if (!url) return null;

            var player = _this.getActivePlayer(url);

            if (!player) return null;

            var config = _this.getConfig(url, player.key);

            return /*#__PURE__*/_react["default"].createElement(_Player3["default"], _extends({}, _this.props, {
              key: player.key,
              ref: _this.references.player,
              config: config,
              activePlayer: player.lazyPlayer || player,
              onReady: _this.handleReady
            }));
          });

          return _this;
        }

        _createClass(ReactPlayer, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            return !(0, _reactFastCompare["default"])(this.props, nextProps) || !(0, _reactFastCompare["default"])(this.state, nextState);
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            var light = this.props.light;

            if (!prevProps.light && light) {
              this.setState({
                showPreview: true
              });
            }

            if (prevProps.light && !light) {
              this.setState({
                showPreview: false
              });
            }
          }
        }, {
          key: "renderPreview",
          value: function renderPreview(url) {
            if (!url) return null;
            var _this$props = this.props,
                light = _this$props.light,
                playIcon = _this$props.playIcon,
                previewTabIndex = _this$props.previewTabIndex,
                oEmbedUrl = _this$props.oEmbedUrl;
            return /*#__PURE__*/_react["default"].createElement(Preview, {
              url: url,
              light: light,
              playIcon: playIcon,
              previewTabIndex: previewTabIndex,
              oEmbedUrl: oEmbedUrl,
              onClick: this.handleClickPreview
            });
          }
        }, {
          key: "render",
          value: function render() {
            var _this$props2 = this.props,
                url = _this$props2.url,
                style = _this$props2.style,
                width = _this$props2.width,
                height = _this$props2.height,
                fallback = _this$props2.fallback,
                Wrapper = _this$props2.wrapper;
            var showPreview = this.state.showPreview;
            var attributes = this.getAttributes(url);
            return /*#__PURE__*/_react["default"].createElement(Wrapper, _extends({
              ref: this.references.wrapper,
              style: _objectSpread(_objectSpread({}, style), {}, {
                width: width,
                height: height
              })
            }, attributes), /*#__PURE__*/_react["default"].createElement(UniversalSuspense, {
              fallback: fallback
            }, showPreview ? this.renderPreview(url) : this.renderActivePlayer(url)));
          }
        }]);

        return ReactPlayer;
      }(_react.Component), _defineProperty(_class, "displayName", 'ReactPlayer'), _defineProperty(_class, "propTypes", props.propTypes), _defineProperty(_class, "defaultProps", props.defaultProps), _defineProperty(_class, "addCustomPlayer", function (player) {
        customPlayers.push(player);
      }), _defineProperty(_class, "removeCustomPlayers", function () {
        customPlayers.length = 0;
      }), _defineProperty(_class, "canPlay", function (url) {
        for (var _i2 = 0, _arr2 = [].concat(customPlayers, _toConsumableArray(players)); _i2 < _arr2.length; _i2++) {
          var _Player = _arr2[_i2];

          if (_Player.canPlay(url)) {
            return true;
          }
        }

        return false;
      }), _defineProperty(_class, "canEnablePIP", function (url) {
        for (var _i3 = 0, _arr3 = [].concat(customPlayers, _toConsumableArray(players)); _i3 < _arr3.length; _i3++) {
          var _Player2 = _arr3[_i3];

          if (_Player2.canEnablePIP && _Player2.canEnablePIP(url)) {
            return true;
          }
        }

        return false;
      }), _temp;
    };

    exports.createReactPlayer = createReactPlayer;
    });

    unwrapExports(ReactPlayer$1);
    ReactPlayer$1.createReactPlayer;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var lib$8 = createCommonjsModule$1(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _players = _interopRequireDefault(players);



    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    // Fall back to FilePlayer if nothing else can play the URL
    var fallback = _players["default"][_players["default"].length - 1];

    var _default = (0, ReactPlayer$1.createReactPlayer)(_players["default"], fallback);

    exports["default"] = _default;
    });

    var ReactPlayer = unwrapExports(lib$8);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};let nanoid = (size = 21) =>
      crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
        byte &= 63;
        if (byte < 36) {
          id += byte.toString(36);
        } else if (byte < 62) {
          id += (byte - 26).toString(36).toUpperCase();
        } else if (byte > 62) {
          id += '-';
        } else {
          id += '_';
        }
        return id
      }, '');

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedAttachmentActions = function (props) {
        var actionHandler = props.actionHandler, actions = props.actions, id = props.id, text = props.text;
        var handleActionClick = function (event, name, value) {
            if (actionHandler) {
                actionHandler(name, value, event);
            }
        };
        return (React__default['default'].createElement("div", { className: 'str-chat__message-attachment-actions' },
            React__default['default'].createElement("div", { className: 'str-chat__message-attachment-actions-form' },
                React__default['default'].createElement("span", { key: 0 }, text),
                actions.map(function (action) { return (React__default['default'].createElement("button", { className: "str-chat__message-attachment-actions-button str-chat__message-attachment-actions-button--" + action.style, "data-testid": "" + action.name, "data-value": action.value, key: id + "-" + action.value, onClick: function (event) { return handleActionClick(event, action.name, action.value); } }, action.text)); }))));
    };
    /**
     * A component for rendering the actions you can take on an attachment.
     */
    var AttachmentActions = React__default['default'].memo(UnMemoizedAttachmentActions);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var progressUpdateInterval = 500;
    var UnMemoizedAudio = function (props) {
        var og = props.og;
        var _a = React.useState(false), isPlaying = _a[0], setIsPlaying = _a[1];
        var _b = React.useState(0), progress = _b[0], setProgress = _b[1];
        var audioRef = React.useRef(null);
        var updateProgress = React.useCallback(function () {
            if (audioRef.current !== null) {
                var position = audioRef.current.currentTime;
                var duration = audioRef.current.duration;
                var currentProgress = (100 / duration) * position;
                setProgress(currentProgress);
                if (position === duration) {
                    setIsPlaying(false);
                }
            }
        }, [audioRef]);
        React.useEffect(function () {
            if (audioRef.current !== null) {
                if (isPlaying) {
                    audioRef.current.play();
                    var interval_1 = setInterval(updateProgress, progressUpdateInterval);
                    return function () { return clearInterval(interval_1); };
                }
                audioRef.current.pause();
            }
            return;
        }, [isPlaying, updateProgress]);
        var asset_url = og.asset_url, description = og.description, image_url = og.image_url, text = og.text, title = og.title;
        return (React__default['default'].createElement("div", { className: 'str-chat__audio' },
            React__default['default'].createElement("div", { className: 'str-chat__audio__wrapper' },
                React__default['default'].createElement("audio", { ref: audioRef },
                    React__default['default'].createElement("source", { "data-testid": 'audio-source', src: asset_url, type: 'audio/mp3' })),
                React__default['default'].createElement("div", { className: 'str-chat__audio__image' },
                    React__default['default'].createElement("div", { className: 'str-chat__audio__image--overlay' }, !isPlaying ? (React__default['default'].createElement("button", { className: 'str-chat__audio__image--button', "data-testid": 'play-audio', onClick: function () { return setIsPlaying(true); } },
                        React__default['default'].createElement("svg", { height: '40', viewBox: '0 0 64 64', width: '40', xmlns: 'http://www.w3.org/2000/svg' },
                            React__default['default'].createElement("path", { d: 'M32 58c14.36 0 26-11.64 26-26S46.36 6 32 6 6 17.64 6 32s11.64 26 26 26zm0 6C14.327 64 0 49.673 0 32 0 14.327 14.327 0 32 0c17.673 0 32 14.327 32 32 0 17.673-14.327 32-32 32zm13.237-28.412L26.135 45.625a3.27 3.27 0 0 1-4.426-1.4 3.319 3.319 0 0 1-.372-1.47L21 23.36c-.032-1.823 1.41-3.327 3.222-3.358a3.263 3.263 0 0 1 1.473.322l19.438 9.36a3.311 3.311 0 0 1 .103 5.905z', fillRule: 'nonzero' })))) : (React__default['default'].createElement("button", { className: 'str-chat__audio__image--button', "data-testid": 'pause-audio', onClick: function () { return setIsPlaying(false); } },
                        React__default['default'].createElement("svg", { height: '40', viewBox: '0 0 64 64', width: '40', xmlns: 'http://www.w3.org/2000/svg' },
                            React__default['default'].createElement("path", { d: 'M32 58.215c14.478 0 26.215-11.737 26.215-26.215S46.478 5.785 32 5.785 5.785 17.522 5.785 32 17.522 58.215 32 58.215zM32 64C14.327 64 0 49.673 0 32 0 14.327 14.327 0 32 0c17.673 0 32 14.327 32 32 0 17.673-14.327 32-32 32zm-7.412-45.56h2.892a2.17 2.17 0 0 1 2.17 2.17v23.865a2.17 2.17 0 0 1-2.17 2.17h-2.892a2.17 2.17 0 0 1-2.17-2.17V20.61a2.17 2.17 0 0 1 2.17-2.17zm12.293 0h2.893a2.17 2.17 0 0 1 2.17 2.17v23.865a2.17 2.17 0 0 1-2.17 2.17h-2.893a2.17 2.17 0 0 1-2.17-2.17V20.61a2.17 2.17 0 0 1 2.17-2.17z', fillRule: 'nonzero' }))))),
                    image_url && React__default['default'].createElement("img", { alt: "" + description, src: image_url })),
                React__default['default'].createElement("div", { className: 'str-chat__audio__content' },
                    React__default['default'].createElement("span", { className: 'str-chat__audio__content--title' },
                        React__default['default'].createElement("strong", null, title)),
                    React__default['default'].createElement("span", { className: 'str-chat__audio__content--subtitle' }, text),
                    React__default['default'].createElement("div", { className: 'str-chat__audio__content--progress' },
                        React__default['default'].createElement("div", { "data-testid": 'audio-progress', style: { width: progress + "%" } }))))));
    };
    /**
     * Audio attachment with play/pause button and progress bar
     */
    var Audio = React__default['default'].memo(UnMemoizedAudio);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var dist$1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sanitizeUrl = void 0;
    var invalidProtocolRegex = /^([^\w]*)(javascript|data|vbscript)/im;
    var htmlEntitiesRegex = /&#(\w+)(^\w|;)?/g;
    var ctrlCharactersRegex = /[\u0000-\u001F\u007F-\u009F\u2000-\u200D\uFEFF]/gim;
    var urlSchemeRegex = /^([^:]+):/gm;
    var relativeFirstCharacters = [".", "/"];
    function isRelativeUrlWithoutProtocol(url) {
        return relativeFirstCharacters.indexOf(url[0]) > -1;
    }
    // adapted from https://stackoverflow.com/a/29824550/2601552
    function decodeHtmlCharacters(str) {
        return str.replace(htmlEntitiesRegex, function (match, dec) {
            return String.fromCharCode(dec);
        });
    }
    function sanitizeUrl(url) {
        var sanitizedUrl = decodeHtmlCharacters(url || "")
            .replace(ctrlCharactersRegex, "")
            .trim();
        if (!sanitizedUrl) {
            return "about:blank";
        }
        if (isRelativeUrlWithoutProtocol(sanitizedUrl)) {
            return sanitizedUrl;
        }
        var urlSchemeParseResults = sanitizedUrl.match(urlSchemeRegex);
        if (!urlSchemeParseResults) {
            return sanitizedUrl;
        }
        var urlScheme = urlSchemeParseResults[0];
        if (invalidProtocolRegex.test(urlScheme)) {
            return "about:blank";
        }
        return sanitizedUrl;
    }
    exports.sanitizeUrl = sanitizeUrl;
    });

    unwrapExports(dist$1);
    var dist_1 = dist$1.sanitizeUrl;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedSafeAnchor = function (props) {
        var children = props.children, className = props.className, download = props.download, href = props.href, rel = props.rel, target = props.target;
        if (!href)
            return null;
        var sanitized = dist_1(href);
        return (React__default['default'].createElement("a", { "aria-label": 'Attachment', className: className, download: download, href: sanitized, rel: rel, target: target }, children));
    };
    var SafeAnchor = React__default['default'].memo(UnMemoizedSafeAnchor);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// export { default as SafeAnchor } from './SafeAnchor';

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var dayjs_min = createCommonjsModule$1(function (module, exports) {
    !function(t,e){module.exports=e();}(commonjsGlobal,function(){var t="millisecond",e="second",n="minute",r="hour",i="day",s="week",u="month",a="quarter",o="year",f="date",h=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,c=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,d={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},$=function(t,e,n){var r=String(t);return !r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},l={s:$,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return (e<=0?"+":"-")+$(r,2,"0")+":"+$(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return -t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,u),s=n-i<0,a=e.clone().add(r+(s?-1:1),u);return +(-(r+(n-i)/(s?i-a:a-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(h){return {M:u,y:o,w:s,d:i,D:f,h:r,m:n,s:e,ms:t,Q:a}[h]||String(h||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},y="en",M={};M[y]=d;var m=function(t){return t instanceof S},D=function(t,e,n){var r;if(!t)return y;if("string"==typeof t)M[t]&&(r=t),e&&(M[t]=e,r=t);else {var i=t.name;M[i]=t,r=i;}return !n&&r&&(y=r),r||!n&&y},v=function(t,e){if(m(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new S(n)},g=l;g.l=D,g.i=m,g.w=function(t,e){return v(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var S=function(){function d(t){this.$L=D(t.locale,null,!0),this.parse(t);}var $=d.prototype;return $.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(g.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match(h);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init();},$.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds();},$.$utils=function(){return g},$.isValid=function(){return !("Invalid Date"===this.$d.toString())},$.isSame=function(t,e){var n=v(t);return this.startOf(e)<=n&&n<=this.endOf(e)},$.isAfter=function(t,e){return v(t)<this.startOf(e)},$.isBefore=function(t,e){return this.endOf(e)<v(t)},$.$g=function(t,e,n){return g.u(t)?this[e]:this.set(n,t)},$.unix=function(){return Math.floor(this.valueOf()/1e3)},$.valueOf=function(){return this.$d.getTime()},$.startOf=function(t,a){var h=this,c=!!g.u(a)||a,d=g.p(t),$=function(t,e){var n=g.w(h.$u?Date.UTC(h.$y,e,t):new Date(h.$y,e,t),h);return c?n:n.endOf(i)},l=function(t,e){return g.w(h.toDate()[t].apply(h.toDate("s"),(c?[0,0,0,0]:[23,59,59,999]).slice(e)),h)},y=this.$W,M=this.$M,m=this.$D,D="set"+(this.$u?"UTC":"");switch(d){case o:return c?$(1,0):$(31,11);case u:return c?$(1,M):$(0,M+1);case s:var v=this.$locale().weekStart||0,S=(y<v?y+7:y)-v;return $(c?m-S:m+(6-S),M);case i:case f:return l(D+"Hours",0);case r:return l(D+"Minutes",1);case n:return l(D+"Seconds",2);case e:return l(D+"Milliseconds",3);default:return this.clone()}},$.endOf=function(t){return this.startOf(t,!1)},$.$set=function(s,a){var h,c=g.p(s),d="set"+(this.$u?"UTC":""),$=(h={},h[i]=d+"Date",h[f]=d+"Date",h[u]=d+"Month",h[o]=d+"FullYear",h[r]=d+"Hours",h[n]=d+"Minutes",h[e]=d+"Seconds",h[t]=d+"Milliseconds",h)[c],l=c===i?this.$D+(a-this.$W):a;if(c===u||c===o){var y=this.clone().set(f,1);y.$d[$](l),y.init(),this.$d=y.set(f,Math.min(this.$D,y.daysInMonth())).$d;}else $&&this.$d[$](l);return this.init(),this},$.set=function(t,e){return this.clone().$set(t,e)},$.get=function(t){return this[g.p(t)]()},$.add=function(t,a){var f,h=this;t=Number(t);var c=g.p(a),d=function(e){var n=v(h);return g.w(n.date(n.date()+Math.round(e*t)),h)};if(c===u)return this.set(u,this.$M+t);if(c===o)return this.set(o,this.$y+t);if(c===i)return d(1);if(c===s)return d(7);var $=(f={},f[n]=6e4,f[r]=36e5,f[e]=1e3,f)[c]||1,l=this.$d.getTime()+t*$;return g.w(l,this)},$.subtract=function(t,e){return this.add(-1*t,e)},$.format=function(t){var e=this;if(!this.isValid())return "Invalid Date";var n=t||"YYYY-MM-DDTHH:mm:ssZ",r=g.z(this),i=this.$locale(),s=this.$H,u=this.$m,a=this.$M,o=i.weekdays,f=i.months,h=function(t,r,i,s){return t&&(t[r]||t(e,n))||i[r].substr(0,s)},d=function(t){return g.s(s%12||12,t,"0")},$=i.meridiem||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r},l={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:g.s(a+1,2,"0"),MMM:h(i.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:g.s(this.$D,2,"0"),d:String(this.$W),dd:h(i.weekdaysMin,this.$W,o,2),ddd:h(i.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:g.s(s,2,"0"),h:d(1),hh:d(2),a:$(s,u,!0),A:$(s,u,!1),m:String(u),mm:g.s(u,2,"0"),s:String(this.$s),ss:g.s(this.$s,2,"0"),SSS:g.s(this.$ms,3,"0"),Z:r};return n.replace(c,function(t,e){return e||l[t]||r.replace(":","")})},$.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},$.diff=function(t,f,h){var c,d=g.p(f),$=v(t),l=6e4*($.utcOffset()-this.utcOffset()),y=this-$,M=g.m(this,$);return M=(c={},c[o]=M/12,c[u]=M,c[a]=M/3,c[s]=(y-l)/6048e5,c[i]=(y-l)/864e5,c[r]=y/36e5,c[n]=y/6e4,c[e]=y/1e3,c)[d]||y,h?M:g.a(M)},$.daysInMonth=function(){return this.endOf(u).$D},$.$locale=function(){return M[this.$L]},$.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=D(t,e,!0);return r&&(n.$L=r),n},$.clone=function(){return g.w(this.$d,this)},$.toDate=function(){return new Date(this.valueOf())},$.toJSON=function(){return this.isValid()?this.toISOString():null},$.toISOString=function(){return this.$d.toISOString()},$.toString=function(){return this.$d.toUTCString()},d}(),p=S.prototype;return v.prototype=p,[["$ms",t],["$s",e],["$m",n],["$H",r],["$W",i],["$M",u],["$y",o],["$D",f]].forEach(function(t){p[t[1]]=function(e){return this.$g(e,t[0],t[1])};}),v.extend=function(t,e){return t.$i||(t(e,S,v),t.$i=!0),v},v.locale=D,v.isDayjs=m,v.unix=function(t){return v(1e3*t)},v.en=M[y],v.Ls=M,v.p={},v});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var calendar = createCommonjsModule$1(function (module, exports) {
    !function(e,t){module.exports=t();}(commonjsGlobal,function(){return function(e,t,a){var n="h:mm A",d={lastDay:"[Yesterday at] "+n,sameDay:"[Today at] "+n,nextDay:"[Tomorrow at] "+n,nextWeek:"dddd [at] "+n,lastWeek:"[Last] dddd [at] "+n,sameElse:"MM/DD/YYYY"};t.prototype.calendar=function(e,t){var n=t||this.$locale().calendar||d,s=a(e||void 0).startOf("d"),o=this.diff(s,"d",!0),i=o<-6?"sameElse":o<-1?"lastWeek":o<0?"lastDay":o<1?"sameDay":o<2?"nextDay":o<7?"nextWeek":"sameElse",f=n[i]||d[i];return "function"==typeof f?f.call(this,a()):this.format(f)};}});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var localizedFormat = createCommonjsModule$1(function (module, exports) {
    !function(e,t){module.exports=t();}(commonjsGlobal,function(){var e={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};return function(t,n,o){var r=n.prototype,M=r.format;o.en.formats=e,r.format=function(t){void 0===t&&(t="YYYY-MM-DDTHH:mm:ssZ");var n=this.$locale().formats,o=function(t,n){return t.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,function(t,o,r){var M=r&&r.toUpperCase();return o||n[r]||e[r]||n[M].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,function(e,t,n){return t||n.slice(1)})})}(t,void 0===n?{}:n);return M.call(this,o)};}});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var getDisplayName = function (Component) {
        return Component.displayName || Component.name || 'Component';
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$b="Stornieren";var Close$b="Schließen";var Delete$b="Löschen";var Delivered$b="Zugestellt";var Flag$b="Meldung";var Menu$b="Menü";var Mute$b="Stumm schalten";var New$b="Neu";var Pin$b="Pin";var Reply$b="Antworten";var Search$b="Suche";var Send$b="Senden";var Thread$c="Thread";var Unmute$b="Stummschaltung aufheben";var Unpin$b="Pin entfernen";var live$b="live";var replyCount_one$b="1 Antwort";var replyCount_other$b="{{ count }} Antworten";var deTranslations = {"Attach files":"Dateien anhängen",Cancel:Cancel$b,"Channel Missing":"Kanal fehlt",Close:Close$b,"Close emoji picker":"Emoji-Picker schließen","Commands matching":"Übereinstimmende Befehle","Connection failure, reconnecting now...":"Verbindungsfehler, Wiederherstellung der Verbindung...",Delete:Delete$b,Delivered:Delivered$b,"Edit Message":"Nachricht bearbeiten","Edit message request failed":"Anfrage zum Bearbeiten der Nachricht fehlgeschlagen","Emoji matching":"Emoji passend","Empty message...":"Leere Nachricht...","Error adding flag":"Fehler beim Hinzufügen des Flags","Error connecting to chat, refresh the page to try again.":"Verbindungsfehler zum Chat, Aktualisiere die Seite um es erneut zu versuchen.","Error deleting message":"Fehler beim Löschen der Nachricht","Error muting a user ...":"Fehler beim Stummschalten eines Nutzers.","Error pinning message":"Fehler beim Pinnen der Nachricht","Error removing message pin":"Fehler beim Entfernen der gepinnten Nachricht","Error unmuting a user ...":"Stummschaltung des Nutzers fehlgeschlagen ...","Error uploading file":"Fehler beim Hochladen der Datei","Error uploading image":"Hochladen des Bildes fehlgeschlagen","Error · Unsent":"Fehler nicht gesendet","Error: {{ errorMessage }}":"Fehler: {{ errorMessage }}",Flag:Flag$b,"Latest Messages":"Neueste Nachrichten",Menu:Menu$b,"Message Failed · Click to try again":"Nachricht fehlgeschlagen · Klicken, um es erneut zu versuchen","Message Failed · Unauthorized":"Nachricht fehlgeschlagen · Nicht autorisiert","Message deleted":"Nachricht gelöscht","Message has been successfully flagged":"Nachricht wurde erfolgreich gemeldet","Message pinned":"Nachricht gepinnt",Mute:Mute$b,New:New$b,"New Messages!":"Neue Nachrichten!","No results found":"keine Ergebnisse gefunden","Nothing yet...":"Noch nichts...","Only visible to you":"Nur für Sie sichtbar","Open emoji picker":"Emoji-Picker öffnen","People matching":"Passende Personen","Pick your emoji":"Emoji wählen",Pin:Pin$b,"Pinned by":"Gepinnt von",Reply:Reply$b,"Reply to Message":"Auf Nachricht antworten",Search:Search$b,"Searching...":"Suchen...",Send:Send$b,"Send message request failed":"Senden der Nachrichtenanfrage fehlgeschlagen","Sending...":"Senden...","Slow Mode ON":"Slow-Mode EIN","Start of a new thread":"Einen neuen Thread beginnen","This message was deleted...":"Diese Nachricht wurde gelöscht...",Thread:Thread$c,"Type your message":"Nachricht eingeben",Unmute:Unmute$b,Unpin:Unpin$b,"Upload type: \"{{ type }}\" is not allowed":"Upload-Typ: \"{{ type }}\" ist nicht erlaubt","Wait until all attachments have uploaded":"Bitte warten, bis alle Anhänge hochgeladen wurden","You have no channels currently":"Du hast momentan noch keinen Channels","You've reached the maximum number of files":"Die maximale Dateianzahl ist erreicht",live:live$b,replyCount_one:replyCount_one$b,replyCount_other:replyCount_other$b,"this content could not be displayed":"Dieser Inhalt konnte nicht angezeigt werden","{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} und {{moreCount}} Mehr","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} und {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} und {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} mehr","{{ memberCount }} members":"{{ memberCount }} Mitglieder","{{ user }} has been muted":"{{ user }} wurde stummgeschaltet","{{ user }} has been unmuted":"{{ user }} wurde nicht stummgeschaltet","{{ watcherCount }} online":"{{ watcherCount }} online","🏙 Attachment...":"🏙 Anhang..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$a="Cancel";var Close$a="Close";var Delete$a="Delete";var Delivered$a="Delivered";var Flag$a="Flag";var Menu$a="Menu";var Mute$a="Mute";var New$a="New";var Pin$a="Pin";var Reply$a="Reply";var Search$a="Search";var Send$a="Send";var Thread$b="Thread";var Unmute$a="Unmute";var Unpin$a="Unpin";var live$a="live";var replyCount_one$a="1 reply";var replyCount_other$a="{{ count }} replies";var enTranslations = {"Attach files":"Attach files",Cancel:Cancel$a,"Channel Missing":"Channel Missing",Close:Close$a,"Close emoji picker":"Close emoji picker","Commands matching":"Commands matching","Connection failure, reconnecting now...":"Connection failure, reconnecting now...",Delete:Delete$a,Delivered:Delivered$a,"Edit Message":"Edit Message","Edit message request failed":"Edit message request failed","Emoji matching":"Emoji matching","Empty message...":"Empty message...","Error adding flag":"Error adding flag","Error connecting to chat, refresh the page to try again.":"Error connecting to chat, refresh the page to try again.","Error deleting message":"Error deleting message","Error muting a user ...":"Error muting a user ...","Error pinning message":"Error pinning message","Error removing message pin":"Error removing message pin","Error unmuting a user ...":"Error unmuting a user ...","Error uploading file":"Error uploading file","Error uploading image":"Error uploading image","Error · Unsent":"Error · Unsent","Error: {{ errorMessage }}":"Error: {{ errorMessage }}",Flag:Flag$a,"Latest Messages":"Latest Messages",Menu:Menu$a,"Message Failed · Click to try again":"Message Failed · Click to try again","Message Failed · Unauthorized":"Message Failed · Unauthorized","Message deleted":"Message deleted","Message has been successfully flagged":"Message has been successfully flagged","Message pinned":"Message pinned",Mute:Mute$a,New:New$a,"New Messages!":"New Messages!","No results found":"No results found","Nothing yet...":"Nothing yet...","Only visible to you":"Only visible to you","Open emoji picker":"Open emoji picker","People matching":"People matching","Pick your emoji":"Pick your emoji",Pin:Pin$a,"Pinned by":"Pinned by",Reply:Reply$a,"Reply to Message":"Reply to Message",Search:Search$a,"Searching...":"Searching...",Send:Send$a,"Send message request failed":"Send message request failed","Sending...":"Sending...","Slow Mode ON":"Slow Mode ON","Start of a new thread":"Start of a new thread","This message was deleted...":"This message was deleted...",Thread:Thread$b,"Type your message":"Type your message",Unmute:Unmute$a,Unpin:Unpin$a,"Upload type: \"{{ type }}\" is not allowed":"Upload type: \"{{ type }}\" is not allowed","Wait until all attachments have uploaded":"Wait until all attachments have uploaded","You have no channels currently":"You have no channels currently","You've reached the maximum number of files":"You've reached the maximum number of files",live:live$a,replyCount_one:replyCount_one$a,replyCount_other:replyCount_other$a,"this content could not be displayed":"this content could not be displayed","{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} and {{ moreCount }} more","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }}, and {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} and {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} more","{{ memberCount }} members":"{{ memberCount }} members","{{ user }} has been muted":"{{ user }} has been muted","{{ user }} has been unmuted":"{{ user }} has been unmuted","{{ watcherCount }} online":"{{ watcherCount }} online","🏙 Attachment...":"🏙 Attachment..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$9="Cancelar";var Close$9="Cerca";var Delete$9="Borrar";var Delivered$9="Entregado";var Flag$9="Bandera";var Menu$9="Menú";var Mute$9="Mudo";var New$9="Nuevo";var Pin$9="Alfiler";var Reply$9="Respuesta";var Search$9="Buscar";var Send$9="Enviar";var Thread$a="Hilo";var Unmute$9="Activar sonido";var Unpin$9="Desprender";var live$9="En Vivo";var replyCount_many$4="{{ count }} respuestas";var replyCount_one$9="1 respuesta";var replyCount_other$9="{{ count }} respuestas";var esTranslations = {"Attach files":"Adjuntar archivos",Cancel:Cancel$9,"Channel Missing":"Falta canal",Close:Close$9,"Close emoji picker":"Cerrar el selector de emojis","Commands matching":"Coincidencia de comandos","Connection failure, reconnecting now...":"Fallo de conexión, reconectando ahora ...",Delete:Delete$9,Delivered:Delivered$9,"Edit Message":"Editar mensaje","Edit message request failed":"Error al editar la solicitud de mensaje","Emoji matching":"Coincidencia de emoji","Empty message...":"Mensaje vacío ...","Error adding flag":"Error al agregar la bandera","Error connecting to chat, refresh the page to try again.":"Error al conectarse al chat, actualice la página para volver a intentarlo.","Error deleting message":"Error al eliminar el mensaje","Error muting a user ...":"Error al silenciar a un usuario ...","Error pinning message":"Mensaje de error al fijar","Error removing message pin":"Error al quitar el pin del mensaje","Error unmuting a user ...":"Error al activar el silencio de un usuario ...","Error uploading file":"Error al cargar el archivo","Error uploading image":"Error subiendo imagen","Error · Unsent":"Error · No enviado","Error: {{ errorMessage }}":"Error: {{ errorMessage }}",Flag:Flag$9,"Latest Messages":"Últimos mensajes",Menu:Menu$9,"Message Failed · Click to try again":"Mensaje fallido · Haga clic para volver a intentarlo","Message Failed · Unauthorized":"Mensaje fallido · No autorizado","Message deleted":"Mensaje borrado","Message has been successfully flagged":"El mensaje se marcó correctamente","Message pinned":"Mensaje fijado",Mute:Mute$9,New:New$9,"New Messages!":"¡Nuevos mensajes!","No results found":"No se han encontrado resultados","Nothing yet...":"Nada aún...","Only visible to you":"Solo visible para ti","Open emoji picker":"Selector de emoji abierto","People matching":"Personas que coinciden","Pick your emoji":"Elige tu emoji",Pin:Pin$9,"Pinned by":"Fijado por",Reply:Reply$9,"Reply to Message":"Responder al mensaje",Search:Search$9,"Searching...":"Buscando...",Send:Send$9,"Send message request failed":"Error al enviar la solicitud de mensaje","Sending...":"Enviando...","Slow Mode ON":"Modo lento activado","Start of a new thread":"Inicio de un nuevo hilo","This message was deleted...":"Este mensaje fue eliminado ...",Thread:Thread$a,"Type your message":"Escribe tu mensaje",Unmute:Unmute$9,Unpin:Unpin$9,"Upload type: \"{{ type }}\" is not allowed":"Tipo de carga: \"{{ type }}\" no está permitido","Wait until all attachments have uploaded":"Espere hasta que se hayan cargado todos los archivos adjuntos","You have no channels currently":"Actualmente no tienes canales","You've reached the maximum number of files":"Has alcanzado el número máximo de archivos",live:live$9,replyCount_many:replyCount_many$4,replyCount_one:replyCount_one$9,replyCount_other:replyCount_other$9,"this content could not be displayed":"este contenido no se pudo mostrar","{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} y {{ moreCount }} más","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} y {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} y {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} más","{{ memberCount }} members":"{{ memberCount }} miembros","{{ user }} has been muted":"{{ user }} ha sido silenciado","{{ user }} has been unmuted":"{{ user }} se ha desactivado","{{ watcherCount }} online":"{{ watcherCount }} en línea","🏙 Attachment...":"🏙 Adjunto..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$8="Annuler";var Close$8="Fermer";var Delete$8="Supprimer";var Delivered$8="Publié";var Flag$8="Signaler";var Menu$8="Menu";var Mute$8="Muet";var New$8="Nouveaux";var Pin$8="Épingle";var Reply$8="Réponse";var Search$8="Rechercher";var Send$8="Envoyer";var Thread$9="Fil de discussion";var Unmute$8="Désactiver muet";var Unpin$8="Détacher";var live$8="en direct";var replyCount_many$3="{{ count }} réponses";var replyCount_one$8="1 réponse";var replyCount_other$8="{{ count }} réponses";var frTranslations = {"Attach files":"Pièces jointes",Cancel:Cancel$8,"Channel Missing":"Canal Manquant",Close:Close$8,"Close emoji picker":"Fermer le sélecteur d'emojis","Commands matching":"Correspondance des commandes","Connection failure, reconnecting now...":"Échec de la connexion, reconnexion en cours...",Delete:Delete$8,Delivered:Delivered$8,"Edit Message":"Éditer un message","Edit message request failed":"Échec de la demande de modification du message","Emoji matching":"Correspondance emoji","Empty message...":"Message vide...","Error adding flag":"Erreur lors de l'ajout du drapeau","Error connecting to chat, refresh the page to try again.":"Erreur de connexion au chat, rafraîchissez la page pour réessayer.","Error deleting message":"Erreur lors de la suppression du message","Error muting a user ...":"Erreur de mise en sourdine d'un utilisateur ...","Error pinning message":"Erreur d'épinglage du message","Error removing message pin":"Erreur lors de la suppression du code PIN du message","Error unmuting a user ...":"Erreur de désactivation de la fonction sourdine pour un utilisateur ...","Error uploading file":"Erreur lors du téléchargement du fichier","Error uploading image":"Erreur lors de l'envoi de l'image","Error · Unsent":"Erreur - Non envoyé","Error: {{ errorMessage }}":"Erreur : {{ errorMessage }}",Flag:Flag$8,"Latest Messages":"Derniers messages",Menu:Menu$8,"Message Failed · Click to try again":"Échec de l'envoi du message - Cliquez pour réessayer","Message Failed · Unauthorized":"Échec de l'envoi du message - Non autorisé","Message deleted":"Message supprimé","Message has been successfully flagged":"Le message a été signalé avec succès","Message pinned":"Message épinglé",Mute:Mute$8,New:New$8,"New Messages!":"Nouveaux Messages!","No results found":"Aucun résultat trouvé","Nothing yet...":"Aucun message...","Only visible to you":"Visible uniquement pour vous","Open emoji picker":"Ouvrez le sélecteur d'emoji","People matching":"Correspondance de personnes","Pick your emoji":"Choisissez votre emoji",Pin:Pin$8,"Pinned by":"Épinglé par",Reply:Reply$8,"Reply to Message":"Répondre au message",Search:Search$8,"Searching...":"Recherche...",Send:Send$8,"Send message request failed":"Échec de la demande d'envoi de message","Sending...":"Envoi en cours...","Slow Mode ON":"Mode lent activé","Start of a new thread":"Début d'un nouveau fil de discussion","This message was deleted...":"Ce message a été supprimé...",Thread:Thread$9,"Type your message":"Saisissez votre message",Unmute:Unmute$8,Unpin:Unpin$8,"Upload type: \"{{ type }}\" is not allowed":"Le type de téléchargement: \"{{ type }}\" n'est pas autorisé","Wait until all attachments have uploaded":"Attendez que toutes les pièces jointes soient téléchargées","You have no channels currently":"Vous n'avez actuellement aucun canal","You've reached the maximum number of files":"Vous avez atteint le nombre maximum de fichiers",live:live$8,replyCount_many:replyCount_many$3,replyCount_one:replyCount_one$8,replyCount_other:replyCount_other$8,"this content could not be displayed":"ce contenu n'a pu être affiché","{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} et {{ moreCount }} autres","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} et {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} et {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} supplémentaires","{{ memberCount }} members":"{{ memberCount }} membres","{{ user }} has been muted":"{{ user }} a été mis en sourdine","{{ user }} has been unmuted":"{{ user }} n'est plus en sourdine","{{ watcherCount }} online":"{{ watcherCount }} en ligne","🏙 Attachment...":"🏙 Pièce jointe..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$7="रद्द करें";var Close$7="बंद करे";var Delete$7="डिलीट";var Delivered$7="पहुंच गया";var Flag$7="फ्लैग करे";var Menu$7="मेन्यू";var Mute$7="म्यूट करे";var New$7="नए";var Pin$7="पिन";var Reply$7="जवाब दे दो";var Search$7="खोज";var Send$7="भेजे";var Thread$8="रिप्लाई थ्रेड";var Unmute$7="अनम्यूट";var Unpin$7="अनपिन";var live$7="लाइव";var replyCount_one$7="1 रिप्लाई";var replyCount_other$7="{{ count }} रिप्लाई";var hiTranslations = {"Attach files":"फाइल्स अटैच करे",Cancel:Cancel$7,"Channel Missing":"चैनल उपलब्ध नहीं है",Close:Close$7,"Close emoji picker":"इमोजी पिकर बंद करें","Commands matching":"मेल खाती है","Connection failure, reconnecting now...":"कनेक्शन विफल रहा, अब पुनः कनेक्ट हो रहा है ...",Delete:Delete$7,Delivered:Delivered$7,"Edit Message":"मैसेज में बदलाव करे","Edit message request failed":"संदेश संपादित करने का अनुरोध विफल रहा","Emoji matching":"इमोजी मिलान","Empty message...":"खाली संदेश ...","Error adding flag":"ध्वज जोड़ने में त्रुटि","Error connecting to chat, refresh the page to try again.":"चैट से कनेक्ट करने में त्रुटि, पेज को रिफ्रेश करें","Error deleting message":"संदेश हटाने में त्रुटि","Error muting a user ...":"यूजर को म्यूट करने का प्रयास फेल हुआ","Error pinning message":"संदेश को पिन करने में त्रुटि","Error removing message pin":"संदेश पिन निकालने में त्रुटि","Error unmuting a user ...":"यूजर को अनम्यूट करने का प्रयास फेल हुआ","Error uploading file":"फ़ाइल अपलोड करने में त्रुटि","Error uploading image":"छवि अपलोड करने में त्रुटि","Error · Unsent":"फेल","Error: {{ errorMessage }}":"फेल: {{ errorMessage }}",Flag:Flag$7,"Latest Messages":"नवीनतम संदेश",Menu:Menu$7,"Message Failed · Click to try again":"मैसेज फ़ैल - पुनः कोशिश करें","Message Failed · Unauthorized":"मैसेज फ़ैल - अनधिकृत","Message deleted":"मैसेज हटा दिया गया","Message has been successfully flagged":"मैसेज को फ्लैग कर दिया गया है","Message pinned":"संदेश पिन किया गया",Mute:Mute$7,New:New$7,"New Messages!":"नए मैसेज!","No results found":"कोई परिणाम नहीं मिला","Nothing yet...":"कोई मैसेज नहीं है","Only visible to you":"सिर्फ आपको दिखाई दे रहा है","Open emoji picker":"इमोजी पिकर खोलिये","People matching":"मेल खाते लोग","Pick your emoji":"इमोजी चूस करे",Pin:Pin$7,"Pinned by":"द्वारा पिन किया गया",Reply:Reply$7,"Reply to Message":"संदेश का जवाब दें",Search:Search$7,"Searching...":"खोज कर...",Send:Send$7,"Send message request failed":"संदेश भेजने का अनुरोध विफल रहा","Sending...":"भेजा जा रहा है","Slow Mode ON":"स्लो मोड ऑन","Start of a new thread":"एक नए थ्रेड की शुरुआत","This message was deleted...":"मैसेज हटा दिया गया",Thread:Thread$8,"Type your message":"अपना मैसेज लिखे",Unmute:Unmute$7,Unpin:Unpin$7,"Upload type: \"{{ type }}\" is not allowed":"अपलोड प्रकार: \"{{ type }}\" की अनुमति नहीं है","Wait until all attachments have uploaded":"सभी अटैचमेंट अपलोड होने तक प्रतीक्षा करें","You have no channels currently":"आपके पास कोई चैनल नहीं है","You've reached the maximum number of files":"आप अधिकतम फ़ाइलों तक पहुँच गए हैं",live:live$7,replyCount_one:replyCount_one$7,replyCount_other:replyCount_other$7,"this content could not be displayed":"यह कॉन्टेंट लोड नहीं हो पाया","{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} और {{ moreCount }} और","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} और {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} और {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} और","{{ memberCount }} members":"{{ memberCount }} मेंबर्स","{{ user }} has been muted":"{{ user }} को म्यूट कर दिया गया है","{{ user }} has been unmuted":"{{ user }} को अनम्यूट कर दिया गया है","{{ watcherCount }} online":"{{ watcherCount }} online","🏙 Attachment...":"🏙 अटैचमेंट"};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$6="Annulla";var Close$6="Chiudi";var Delete$6="Cancella";var Delivered$6="Consegnato";var Flag$6="Segnala";var Menu$6="Menù";var Mute$6="Silenzia";var New$6="Nuovo";var Pin$6="Pin";var Reply$6="Rispondere";var Search$6="Ricerca";var Send$6="Invia";var Thread$7="Thread";var Unmute$6="Riattiva le notifiche";var Unpin$6="Sblocca";var live$6="live";var replyCount_many$2="{{ count }} risposte";var replyCount_one$6="Una risposta";var replyCount_other$6="{{ count }} risposte";var itTranslations = {"Attach files":"Allega file",Cancel:Cancel$6,"Channel Missing":"Il canale non esiste",Close:Close$6,"Close emoji picker":"Chiudi il selettore di emoji","Commands matching":"Comandi corrispondenti","Connection failure, reconnecting now...":"Connessione fallitta, riconnessione in corso...",Delete:Delete$6,Delivered:Delivered$6,"Edit Message":"Modifica messaggio","Edit message request failed":"Richiesta di modifica del messaggio non riuscita","Emoji matching":"Abbinamento emoji","Empty message...":"Message vuoto...","Error adding flag":"Errore durante l'aggiunta del flag","Error connecting to chat, refresh the page to try again.":"Errore di connessione alla chat, aggiorna la pagina per riprovare","Error deleting message":"Errore durante l'eliminazione del messaggio","Error muting a user ...":"Errore silenziando un utente ...","Error pinning message":"Errore durante il blocco del messaggio","Error removing message pin":"Errore durante la rimozione del PIN del messaggio","Error unmuting a user ...":"Errore riattivando le notifiche per l'utente ...","Error uploading file":"Errore durante il caricamento del file","Error uploading image":"Errore durante il caricamento dell'immagine","Error · Unsent":"Errore · Non inviato","Error: {{ errorMessage }}":"Errore: {{ errorMessage }}",Flag:Flag$6,"Latest Messages":"Ultimi messaggi",Menu:Menu$6,"Message Failed · Click to try again":"Invio messaggio fallito · Clicca per riprovare","Message Failed · Unauthorized":"Invio messaggio fallito · Non autorizzato","Message deleted":"Messaggio cancellato","Message has been successfully flagged":"Il messaggio é stato segnalato con successo","Message pinned":"Messaggio bloccato",Mute:Mute$6,New:New$6,"New Messages!":"Nuovo messaggio!","No results found":"Nessun risultato trovato","Nothing yet...":"Ancora niente...","Only visible to you":"Visibile soltanto da te","Open emoji picker":"Apri il selettore dellle emoji","People matching":"Persone che corrispondono","Pick your emoji":"Scegli la tua emoji",Pin:Pin$6,"Pinned by":"Appuntato da",Reply:Reply$6,"Reply to Message":"Rispondi al messaggio",Search:Search$6,"Searching...":"Ricerca in corso ...",Send:Send$6,"Send message request failed":"Invia messaggio di richiesta non riuscito","Sending...":"Invio in corso...","Slow Mode ON":"Modalità lenta attivata","Start of a new thread":"Inizia un nuovo thread","This message was deleted...":"Questo messaggio é stato cancellato",Thread:Thread$7,"Type your message":"Scrivi il tuo messaggio",Unmute:Unmute$6,Unpin:Unpin$6,"Upload type: \"{{ type }}\" is not allowed":"Tipo di caricamento: \"{{ type }}\" non è consentito","Wait until all attachments have uploaded":"Attendi il caricamento di tutti gli allegati","You have no channels currently":"Al momento non sono presenti canali","You've reached the maximum number of files":"Hai raggiunto il numero massimo di file",live:live$6,replyCount_many:replyCount_many$2,replyCount_one:replyCount_one$6,replyCount_other:replyCount_other$6,"this content could not be displayed":"questo contenuto non puó essere mostrato","{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} e altri {{ moreCount }}","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} e {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} e {{ secondUser }}","{{ imageCount }} more":"+ {{ imageCount }}","{{ memberCount }} members":"{{ memberCount }} membri","{{ user }} has been muted":"{{ user }} é stato silenziato","{{ user }} has been unmuted":"Notifiche riattivate per {{ user }}","{{ watcherCount }} online":"{{ watcherCount }} online","🏙 Attachment...":"🏙 Allegato..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$5="キャンセル";var Close$5="閉める";var Delete$5="消去";var Delivered$5="配信しました";var Flag$5="フラグ";var Menu$5="メニュー";var Mute$5="無音";var New$5="新しい";var Pin$5="ピン";var Reply$5="返事";var Search$5="探す";var Send$5="送信";var Thread$6="スレッド";var Unmute$5="無音を解除する";var Unpin$5="ピンを解除する";var live$5="ライブ";var replyCount_one$5="1件の返信";var replyCount_other$5="{{ count }} 返信";var jaTranslations = {"Attach files":"ファイルを添付する",Cancel:Cancel$5,"Channel Missing":"チャネルがありません",Close:Close$5,"Close emoji picker":"絵文字ピッカーを閉める","Commands matching":"一致するコマンド","Connection failure, reconnecting now...":"接続が失敗しました。再接続中...",Delete:Delete$5,Delivered:Delivered$5,"Edit Message":"メッセージを編集","Edit message request failed":"メッセージの編集要求が失敗しました","Emoji matching":"絵文字マッチング","Empty message...":"空のメッセージ...","Error adding flag":"フラグを追加のエラーが発生しました","Error connecting to chat, refresh the page to try again.":"チャットへの接続ができませんでした。ページを更新してください。","Error deleting message":"メッセージを削除するエラーが発生しました","Error muting a user ...":"ユーザーを無音するエラーが発生しました...","Error pinning message":"メッセージをピンのエラーが発生しました","Error removing message pin":"メッセージのピンを削除のエラーが発生しました","Error unmuting a user ...":"ユーザーの無音解除のエラーが発生しました...","Error uploading file":"ファイルをアップロードのエラーが発生しました","Error uploading image":"画像をアップロードのエラーが発生しました","Error · Unsent":"エラー・未送信","Error: {{ errorMessage }}":"エラー: {{ errorMessage }}",Flag:Flag$5,"Latest Messages":"最新のメッセージ",Menu:Menu$5,"Message Failed · Click to try again":"メッセージが失敗しました · クリックして再試行してください","Message Failed · Unauthorized":"メッセージが失敗しました · 許可されていません","Message deleted":"メッセージが削除されました","Message has been successfully flagged":"メッセージに正常にフラグが付けられました","Message pinned":"メッセージにピンが付けられました",Mute:Mute$5,New:New$5,"New Messages!":"新しいメッセージ!","No results found":"結果が見つかりません","Nothing yet...":"まだ何もありません...","Only visible to you":"あなただけに見える","Open emoji picker":"絵文字ピッカーを開く","People matching":"一致する人","Pick your emoji":"絵文字を選んでください",Pin:Pin$5,"Pinned by":"ピンした方",Reply:Reply$5,"Reply to Message":"メッセージに返信",Search:Search$5,"Searching...":"検索中...",Send:Send$5,"Send message request failed":"メッセージ送信リクエストが失敗しました","Sending...":"送信中...","Slow Mode ON":"スローモードオン","Start of a new thread":"新しいスレッドの開始","This message was deleted...":"このメッセージは削除されました...",Thread:Thread$6,"Type your message":"メッセージを入力してください",Unmute:Unmute$5,Unpin:Unpin$5,"Upload type: \"{{ type }}\" is not allowed":"アップロードタイプ：\"{{ type }}\"は許可されていません","Wait until all attachments have uploaded":"すべての添付ファイルがアップロードされるまでお待ちください","You have no channels currently":"現在チャンネルはありません","You've reached the maximum number of files":"ファイルの最大数に達しました",live:live$5,replyCount_one:replyCount_one$5,replyCount_other:replyCount_other$5,"this content could not be displayed":"このコンテンツは表示できませんでした","{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} と {{ moreCount }} 他人","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} と {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} と {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} イメージ","{{ memberCount }} members":"{{ memberCount }} メンバー","{{ user }} has been muted":"{{ user }} 無音されています","{{ user }} has been unmuted":"{{ user }} 無音されていません","{{ watcherCount }} online":"{{ watcherCount }} オンライン","🏙 Attachment...":"🏙 アタッチメント..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$4="취소";var Close$4="닫기";var Delete$4="삭제";var Delivered$4="배달됨";var Flag$4="플래그";var Menu$4="메뉴";var Mute$4="무음";var New$4="새로운";var Pin$4="핀";var Reply$4="답장";var Search$4="찾다";var Send$4="보내다";var Thread$5="스레드";var Unmute$4="음소거 해제";var Unpin$4="핀 해제";var live$4="라이브";var replyCount_one$4="답장 1개";var replyCount_other$4="{{ count }} 답장";var koTranslations = {"Attach files":"파일 첨부",Cancel:Cancel$4,"Channel Missing":"채널 누락",Close:Close$4,"Close emoji picker":"이모티콘 선택기 닫기","Commands matching":"일치하는 명령","Connection failure, reconnecting now...":"연결 실패, 지금 다시 연결 중...",Delete:Delete$4,Delivered:Delivered$4,"Edit Message":"메시지 수정","Edit message request failed":"메시지 수정 요청 실패","Emoji matching":"이모티콘 매칭","Empty message...":"빈 메시지...","Error adding flag":"플래그를 추가하는 동안 오류가 발생했습니다.","Error connecting to chat, refresh the page to try again.":"채팅에 연결하는 동안 오류가 발생했습니다. 페이지를 새로고침하여 다시 시도하세요.","Error deleting message":"메시지를 삭제하는 중에 오류가 발생했습니다.","Error muting a user ...":"사용자를 음소거하는 중에 오류가 발생했습니다...","Error pinning message":"메시지를 핀하는 중에 오류가 발생했습니다.","Error removing message pin":"메시지 핀을 제거하는 중에 오류가 발생했습니다.","Error unmuting a user ...":"사용자 음소거 해제 중 오류 발생...","Error uploading file":"파일 업로드 오류","Error uploading image":"이미지를 업로드하는 동안 오류가 발생했습니다.","Error · Unsent":"오류 · 전송되지 않음","Error: {{ errorMessage }}":"오류: {{ errorMessage }}",Flag:Flag$4,"Latest Messages":"최신 메시지",Menu:Menu$4,"Message Failed · Click to try again":"메시지 실패 · 다시 시도하려면 클릭하세요.","Message Failed · Unauthorized":"메시지 실패 · 승인되지 않음","Message deleted":"메시지가 삭제되었습니다.","Message has been successfully flagged":"메시지에 플래그가 지정되었습니다.","Message pinned":"메시지 핀했습니다",Mute:Mute$4,New:New$4,"New Messages!":"새 메시지!","No results found":"검색 결과가 없습니다","Nothing yet...":"아직 아무것도...","Only visible to you":"당신만 볼 수 있습니다","Open emoji picker":"이모티콘 선택기 열기","People matching":"일치하는 사람","Pick your emoji":"이모티콘 선택",Pin:Pin$4,"Pinned by":"핀했던 분:",Reply:Reply$4,"Reply to Message":"메시지에 답장",Search:Search$4,"Searching...":"수색...",Send:Send$4,"Send message request failed":"메시지 보내기 요청 실패","Sending...":"배상중...","Slow Mode ON":"슬로우 모드 켜짐","Start of a new thread":"새 스레드의 시작","This message was deleted...":"이 메시지는 삭제되었습니다...",Thread:Thread$5,"Type your message":"메시지 입력",Unmute:Unmute$4,Unpin:Unpin$4,"Upload type: \"{{ type }}\" is not allowed":"업로드 유형: \"{{ type }}\"은(는) 허용되지 않습니다.","Wait until all attachments have uploaded":"모든 첨부 파일이 업로드될 때까지 기다립니다.","You have no channels currently":"현재 채널이 없습니다.","You've reached the maximum number of files":"최대 파일 수에 도달했습니다.",live:live$4,replyCount_one:replyCount_one$4,replyCount_other:replyCount_other$4,"this content could not be displayed":"이 콘텐츠를 표시할 수 없습니다","{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} 그리고 {{ moreCount }}명 더","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} 그리고 {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} 그리고 {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }}개 더","{{ memberCount }} members":"{{ memberCount }}명","{{ user }} has been muted":"{{ user }} 음소거되었습니다","{{ user }} has been unmuted":"{{ user }} 음소거가 해제되었습니다","{{ watcherCount }} online":"{{ watcherCount }} 온라인","🏙 Attachment...":"🏙 부착..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$3="Annuleer";var Close$3="Sluit";var Delete$3="Verwijder";var Delivered$3="Afgeleverd";var Flag$3="Markeer";var Menu$3="Menu";var Mute$3="Mute";var New$3="Nieuwe";var Pin$3="Pin";var Reply$3="Antwoord";var Search$3="Zoeken";var Send$3="Verstuur";var Thread$4="Draadje";var Unmute$3="Unmute";var Unpin$3="Losmaken";var live$3="live";var replyCount_one$3="1 antwoord";var replyCount_other$3="{{ count }} antwoorden";var nlTranslations = {"Attach files":"Bijlage toevoegen",Cancel:Cancel$3,"Channel Missing":"Kanaal niet gevonden",Close:Close$3,"Close emoji picker":"Sluit de emoji-kiezer","Commands matching":"Bijpassende opdrachten","Connection failure, reconnecting now...":"Probleem met de verbinding, opnieuw verbinding maken...",Delete:Delete$3,Delivered:Delivered$3,"Edit Message":"Pas bericht aan","Edit message request failed":"Verzoek om bericht bewerken mislukt","Emoji matching":"Emoji-overeenkomsten","Empty message...":"Leeg bericht...","Error adding flag":"Fout bij toevoegen van vlag","Error connecting to chat, refresh the page to try again.":"Fout bij het verbinden, ververs de pagina om nogmaals te proberen","Error deleting message":"Fout bij verwijderen van bericht","Error muting a user ...":"Fout bij het muten van de gebruiker","Error pinning message":"Fout bij vastzetten van bericht","Error removing message pin":"Fout bij verwijderen van berichtpin","Error unmuting a user ...":"Fout bij het unmuten van de gebruiker","Error uploading file":"Fout bij uploaden bestand","Error uploading image":"Fout bij uploaden afbeelding","Error · Unsent":"Error: · niet verzonden","Error: {{ errorMessage }}":"Error: {{ errorMessage }}",Flag:Flag$3,"Latest Messages":"Laatste berichten",Menu:Menu$3,"Message Failed · Click to try again":"Bericht mislukt, klik om het nogmaals te proberen","Message Failed · Unauthorized":"Bericht mislukt, ongeautoriseerd","Message deleted":"Bericht verwijderd","Message has been successfully flagged":"Bericht is succesvol gemarkeerd","Message pinned":"Bericht vastgezet",Mute:Mute$3,New:New$3,"New Messages!":"Nieuwe Berichten!","No results found":"Geen resultaten gevonden","Nothing yet...":"Nog niets ...","Only visible to you":"Alleen zichtbaar voor jou","Open emoji picker":"Open emojipicker","People matching":"Mensen die matchen","Pick your emoji":"Kies je emoji",Pin:Pin$3,"Pinned by":"Vastgemaakt door",Reply:Reply$3,"Reply to Message":"Antwoord op bericht",Search:Search$3,"Searching...":"Zoeken...",Send:Send$3,"Send message request failed":"Verzoek om bericht te verzenden mislukt","Sending...":"Aan het verzenden...","Slow Mode ON":"Langzame modus aan","Start of a new thread":"Begin van een nieuwe draadje","This message was deleted...":"Dit bericht was verwijderd",Thread:Thread$4,"Type your message":"Type je bericht",Unmute:Unmute$3,Unpin:Unpin$3,"Upload type: \"{{ type }}\" is not allowed":"Uploadtype: \"{{ type }}\" is niet toegestaan","Wait until all attachments have uploaded":"Wacht tot alle bijlagen zijn geüpload","You have no channels currently":"Er zijn geen chats beschikbaar","You've reached the maximum number of files":"Je hebt het maximale aantal bestanden bereikt",live:live$3,replyCount_one:replyCount_one$3,replyCount_other:replyCount_other$3,"this content could not be displayed":"Deze inhoud kan niet weergegeven worden","{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} en {{ moreCount }} meer","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} en {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} en {{ secondUser }}","{{ imageCount }} more":"+{{ imageCount }}","{{ memberCount }} members":"{{ memberCount }} deelnemers","{{ user }} has been muted":"{{ user }} is muted","{{ user }} has been unmuted":"{{ user }} is unmuted","{{ watcherCount }} online":"{{ watcherCount }} online","🏙 Attachment...":"🏙 Bijlage..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$2="Cancelar";var Close$2="Fechar";var Delete$2="Excluir";var Delivered$2="Entregue";var Flag$2="Reportar";var Menu$2="Menu";var Mute$2="Mudo";var New$2="Novo";var Pin$2="Fixar";var Reply$2="Responder";var Search$2="Procurar";var Send$2="Enviar";var Thread$3="Fio";var Unmute$2="Ativar som";var Unpin$2="Liberar";var live$2="ao vivo";var replyCount_many$1="{{ count }} respostas";var replyCount_one$2="1 resposta";var replyCount_other$2="{{ count }} respostas";var ptTranslations = {"Attach files":"Anexar arquivos",Cancel:Cancel$2,"Channel Missing":"Canal ausente",Close:Close$2,"Close emoji picker":"Fechar seletor de emoji","Commands matching":"Comandos correspondentes","Connection failure, reconnecting now...":"Falha de conexão, reconectando agora...",Delete:Delete$2,Delivered:Delivered$2,"Edit Message":"Editar Mensagem","Edit message request failed":"O pedido de edição da mensagem falhou","Emoji matching":"Emoji correspondente","Empty message...":"Mensagem vazia...","Error adding flag":"Erro ao reportar","Error connecting to chat, refresh the page to try again.":"Erro ao conectar ao bate-papo, atualize a página para tentar novamente.","Error deleting message":"Erro ao deletar mensagem","Error muting a user ...":"Erro ao silenciar um usuário...","Error pinning message":"Erro ao fixar mensagem","Error removing message pin":"Erro ao remover o PIN da mensagem","Error unmuting a user ...":"Erro ao ativar o som de um usuário...","Error uploading file":"Erro ao enviar arquivo","Error uploading image":"Erro ao carregar a imagem","Error · Unsent":"Erro · Não enviado","Error: {{ errorMessage }}":"Erro: {{ errorMessage }}",Flag:Flag$2,"Latest Messages":"Mensagens mais recentes",Menu:Menu$2,"Message Failed · Click to try again":"A mensagem falhou · Clique para tentar novamente","Message Failed · Unauthorized":"A mensagem falhou · não autorizado","Message deleted":"Mensagem apagada","Message has been successfully flagged":"A mensagem foi reportada com sucesso","Message pinned":"Mensagem fixada",Mute:Mute$2,New:New$2,"New Messages!":"Novas mensagens!","No results found":"Nenhum resultado encontrado","Nothing yet...":"Nada ainda...","Only visible to you":"Visível apenas para você","Open emoji picker":"Abrir seletor de emoji","People matching":"Pessoas correspondentes","Pick your emoji":"Escolha o seu emoji",Pin:Pin$2,"Pinned by":"Fixado por",Reply:Reply$2,"Reply to Message":"Responder a mensagem",Search:Search$2,"Searching...":"Procurando...",Send:Send$2,"Send message request failed":"O pedido de envio de mensagem falhou","Sending...":"Enviando...","Slow Mode ON":"Modo lento LIGADO","Start of a new thread":"Início de um novo tópico","This message was deleted...":"Esta mensagem foi excluída...",Thread:Thread$3,"Type your message":"Digite sua mensagem",Unmute:Unmute$2,Unpin:Unpin$2,"Upload type: \"{{ type }}\" is not allowed":"Tipo de upload: \"{{ type }}\" não é permitido","Wait until all attachments have uploaded":"Espere até que todos os anexos tenham sido carregados","You have no channels currently":"Você não tem canais atualmente","You've reached the maximum number of files":"Você atingiu o número máximo de arquivos",live:live$2,replyCount_many:replyCount_many$1,replyCount_one:replyCount_one$2,replyCount_other:replyCount_other$2,"this content could not be displayed":"este conteúdo não pôde ser exibido","{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} e mais {{ moreCount }}","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} e {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} e {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} mais","{{ memberCount }} members":"{{ memberCount }} membros","{{ user }} has been muted":"{{ user }} foi silenciado","{{ user }} has been unmuted":"{{ user }} foi reativado","{{ watcherCount }} online":"{{ watcherCount }} online","🏙 Attachment...":"🏙 Anexo..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$1="Отмена";var Close$1="Закрыть";var Delete$1="Удалить";var Delivered$1="Отправлено";var Flag$1="Пожаловаться";var Menu$1="Меню";var Mute$1="Отключить уведомления";var New$1="Новые";var Pin$1="Штырь";var Reply$1="Отвечать";var Search$1="Поиск";var Send$1="Отправить";var Thread$2="Ветка";var Unmute$1="Включить уведомления";var Unpin$1="Открепить";var live$1="В прямом эфире";var replyCount_few="{{ count }} ответов";var replyCount_many="{{ count }} ответов";var replyCount_one$1="1 ответ";var replyCount_other$1="{{ count }} ответов";var ruTranslations = {"Attach files":"Прикрепить файлы",Cancel:Cancel$1,"Channel Missing":"Канал не найден",Close:Close$1,"Close emoji picker":"Закрыть окно выбора смайлов","Commands matching":"Соответствие команд","Connection failure, reconnecting now...":"Ошибка соединения, переподключение...",Delete:Delete$1,Delivered:Delivered$1,"Edit Message":"Редактировать сообщение","Edit message request failed":"Не удалось изменить запрос сообщения","Emoji matching":"Соответствие эмодзи","Empty message...":"Пустое сообщение...","Error adding flag":"Ошибка добавления флага","Error connecting to chat, refresh the page to try again.":"Ошибка подключения к чату, обновите страницу чтобы попробовать снова.","Error deleting message":"Ошибка при удалении сообщения","Error muting a user ...":"Ошибка отключения уведомлений от пользователя...","Error pinning message":"Сообщение об ошибке при закреплении","Error removing message pin":"Ошибка при удалении булавки сообщения","Error unmuting a user ...":"Ошибка включения уведомлений...","Error uploading file":"Ошибка при загрузке файла","Error uploading image":"Ошибка загрузки изображения","Error · Unsent":"Ошибка · Не отправлено","Error: {{ errorMessage }}":"Ошибка: {{ errorMessage }}",Flag:Flag$1,"Latest Messages":"Последние сообщения",Menu:Menu$1,"Message Failed · Click to try again":"Ошибка отправки сообщения · Нажмите чтобы повторить","Message Failed · Unauthorized":"Ошибка отправки сообщения · Неавторизованный","Message deleted":"Сообщение удалено","Message has been successfully flagged":"Жалоба на сообщение была принята","Message pinned":"Сообщение закреплено",Mute:Mute$1,New:New$1,"New Messages!":"Новые сообщения!","No results found":"результаты не найдены","Nothing yet...":"Пока ничего нет...","Only visible to you":"Только видно для вас","Open emoji picker":"Выбрать emoji","People matching":"Соответствующие люди","Pick your emoji":"Выберите свой emoji",Pin:Pin$1,"Pinned by":"Закреплено",Reply:Reply$1,"Reply to Message":"Ответить на сообщение",Search:Search$1,"Searching...":"Ищем...",Send:Send$1,"Send message request failed":"Не удалось отправить запрос на отправку сообщения","Sending...":"Отправка...","Slow Mode ON":"Медленный режим включен","Start of a new thread":"Начало новой ветки","This message was deleted...":"Сообщение было удалено...",Thread:Thread$2,"Type your message":"Ваше сообщение",Unmute:Unmute$1,Unpin:Unpin$1,"Upload type: \"{{ type }}\" is not allowed":"Тип загрузки: \"{{ type }}\" не разрешен","Wait until all attachments have uploaded":"Подождите, пока все вложения загрузятся","You have no channels currently":"У вас нет каналов в данный момент","You've reached the maximum number of files":"Вы достигли максимального количества файлов",live:live$1,replyCount_few:replyCount_few,replyCount_many:replyCount_many,replyCount_one:replyCount_one$1,replyCount_other:replyCount_other$1,"this content could not be displayed":"Этот контент не может быть отображен в данный момент","{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} и {{ moreCount }} еще","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} и {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} и {{ secondUser }}","{{ imageCount }} more":"Ещё {{ imageCount }}","{{ memberCount }} members":"{{ memberCount }} члены","{{ user }} has been muted":"Вы отписались от уведомлений от {{ user }}","{{ user }} has been unmuted":"Уведомления от {{ user }} были включены","{{ watcherCount }} online":"{{ watcherCount }} в сети","🏙 Attachment...":"🏙 Вложение..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel="İptal";var Close="Kapat";var Delete="Sil";var Delivered="İletildi";var Flag="Bayrak";var Menu="Menü";var Mute="Sessiz";var New="Yeni";var Pin="Toplu iğne";var Reply="Cevapla";var Search="Arama";var Send="Gönder";var Thread$1="Konu";var Unmute="Sesini aç";var Unpin="Sabitlemeyi kaldır";var live="canlı";var replyCount_one="1 cevap";var replyCount_other="{{ count }} cevaplar";var trTranslations = {"Attach files":"Dosya ekle",Cancel:Cancel,"Channel Missing":"Kanal bulunamıyor",Close:Close,"Close emoji picker":"Emoji seçiciyi kapat","Commands matching":"Eşleşen komutlar","Connection failure, reconnecting now...":"Bağlantı hatası, tekrar bağlanılıyor...",Delete:Delete,Delivered:Delivered,"Edit Message":"Mesajı Düzenle","Edit message request failed":"Mesaj düzenleme isteği başarısız oldu","Emoji matching":"Emoji eşleştirme","Empty message...":"Boş mesaj...","Error adding flag":"Bayrak eklenirken hata oluştu","Error connecting to chat, refresh the page to try again.":"Bağlantı hatası, sayfayı yenileyip tekrar deneyin.","Error deleting message":"Mesaj silinirken hata oluştu","Error muting a user ...":"Kullanıcıyı sessize alırken hata oluştu ...","Error pinning message":"Mesaj sabitlenirken hata oluştu","Error removing message pin":"Mesaj PIN'i kaldırılırken hata oluştu","Error unmuting a user ...":"Kullanıcının sesini açarken hata oluştu ...","Error uploading file":"Dosya yüklenirken hata oluştu","Error uploading image":"Resmi yüklerken hata","Error · Unsent":"Hata · Gönderilemedi","Error: {{ errorMessage }}":"Hata: {{ errorMessage }}",Flag:Flag,"Latest Messages":"Son Mesajlar",Menu:Menu,"Message Failed · Click to try again":"Mesaj Başarısız · Tekrar denemek için tıklayın","Message Failed · Unauthorized":"Mesaj Başarısız · Yetkisiz","Message deleted":"Mesaj silindi","Message has been successfully flagged":"Mesaj başarıyla bayraklandı","Message pinned":"Mesaj sabitlendi",Mute:Mute,New:New,"New Messages!":"Yeni Mesajlar!","No results found":"Sonuç bulunamadı","Nothing yet...":"Şimdilik hiçbir şey...","Only visible to you":"Sadece size görünür","Open emoji picker":"Emoji klavyesini aç","People matching":"Eşleşen kişiler","Pick your emoji":"Emoji seçin",Pin:Pin,"Pinned by":"Sabitleyen",Reply:Reply,"Reply to Message":"Mesajı Cevapla",Search:Search,"Searching...":"Aranıyor...",Send:Send,"Send message request failed":"Mesaj gönderme isteği başarısız oldu","Sending...":"Gönderiliyor...","Slow Mode ON":"Yavaş Mod Açık","Start of a new thread":"Yeni konunun başı","This message was deleted...":"Bu mesaj silindi",Thread:Thread$1,"Type your message":"Mesajınızı yazın",Unmute:Unmute,Unpin:Unpin,"Upload type: \"{{ type }}\" is not allowed":"Yükleme türü: \"{{ type }}\" izin verilmez","Wait until all attachments have uploaded":"Tüm ekler yüklenene kadar bekleyin","You have no channels currently":"Henüz kanalınız yok","You've reached the maximum number of files":"Maksimum dosya sayısına ulaştınız",live:live,replyCount_one:replyCount_one,replyCount_other:replyCount_other,"this content could not be displayed":"bu içerik gösterilemiyor","{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} ve {{ moreCount }} daha","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }}, ve {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} ve {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} adet daha","{{ memberCount }} members":"{{ memberCount }} üyeler","{{ user }} has been muted":"{{ user }} sessize alındı","{{ user }} has been unmuted":"{{ user }} sesi açıldı","{{ watcherCount }} online":"{{ watcherCount }} çevrimiçi","🏙 Attachment...":"🏙 Ek..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _typeof$1(obj) {
      "@babel/helpers - typeof";

      return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof$1(obj);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _classCallCheck$1(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass$1(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _assertThisInitialized$1(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

      return _setPrototypeOf(o, p);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _inherits$1(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _possibleConstructorReturn$1(self, call) {
      if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return _assertThisInitialized$1(self);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _getPrototypeOf$1(o) {
      _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf$1(o);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _defineProperty$3(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _arrayWithHoles$2(arr) {
      if (Array.isArray(arr)) return arr;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _iterableToArray$1(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _arrayLikeToArray$3(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _unsupportedIterableToArray$3(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$3(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _nonIterableRest$2() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _toArray(arr) {
      return _arrayWithHoles$2(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$3(arr) || _nonIterableRest$2();
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var consoleLogger = {
      type: 'logger',
      log: function log(args) {
        this.output('log', args);
      },
      warn: function warn(args) {
        this.output('warn', args);
      },
      error: function error(args) {
        this.output('error', args);
      },
      output: function output(type, args) {
        if (console && console[type]) console[type].apply(console, args);
      }
    };

    var Logger = function () {
      function Logger(concreteLogger) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck$1(this, Logger);

        this.init(concreteLogger, options);
      }

      _createClass$1(Logger, [{
        key: "init",
        value: function init(concreteLogger) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          this.prefix = options.prefix || 'i18next:';
          this.logger = concreteLogger || consoleLogger;
          this.options = options;
          this.debug = options.debug;
        }
      }, {
        key: "setDebug",
        value: function setDebug(bool) {
          this.debug = bool;
        }
      }, {
        key: "log",
        value: function log() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return this.forward(args, 'log', '', true);
        }
      }, {
        key: "warn",
        value: function warn() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return this.forward(args, 'warn', '', true);
        }
      }, {
        key: "error",
        value: function error() {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          return this.forward(args, 'error', '');
        }
      }, {
        key: "deprecate",
        value: function deprecate() {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }

          return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
        }
      }, {
        key: "forward",
        value: function forward(args, lvl, prefix, debugOnly) {
          if (debugOnly && !this.debug) return null;
          if (typeof args[0] === 'string') args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
          return this.logger[lvl](args);
        }
      }, {
        key: "create",
        value: function create(moduleName) {
          return new Logger(this.logger, _objectSpread$4(_objectSpread$4({}, {
            prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
          }), this.options));
        }
      }]);

      return Logger;
    }();

    var baseLogger = new Logger();

    var EventEmitter = function () {
      function EventEmitter() {
        _classCallCheck$1(this, EventEmitter);

        this.observers = {};
      }

      _createClass$1(EventEmitter, [{
        key: "on",
        value: function on(events, listener) {
          var _this = this;

          events.split(' ').forEach(function (event) {
            _this.observers[event] = _this.observers[event] || [];

            _this.observers[event].push(listener);
          });
          return this;
        }
      }, {
        key: "off",
        value: function off(event, listener) {
          if (!this.observers[event]) return;

          if (!listener) {
            delete this.observers[event];
            return;
          }

          this.observers[event] = this.observers[event].filter(function (l) {
            return l !== listener;
          });
        }
      }, {
        key: "emit",
        value: function emit(event) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          if (this.observers[event]) {
            var cloned = [].concat(this.observers[event]);
            cloned.forEach(function (observer) {
              observer.apply(void 0, args);
            });
          }

          if (this.observers['*']) {
            var _cloned = [].concat(this.observers['*']);

            _cloned.forEach(function (observer) {
              observer.apply(observer, [event].concat(args));
            });
          }
        }
      }]);

      return EventEmitter;
    }();

    function defer() {
      var res;
      var rej;
      var promise = new Promise(function (resolve, reject) {
        res = resolve;
        rej = reject;
      });
      promise.resolve = res;
      promise.reject = rej;
      return promise;
    }
    function makeString(object) {
      if (object == null) return '';
      return '' + object;
    }
    function copy$3(a, s, t) {
      a.forEach(function (m) {
        if (s[m]) t[m] = s[m];
      });
    }

    function getLastOfPath(object, path, Empty) {
      function cleanKey(key) {
        return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
      }

      function canNotTraverseDeeper() {
        return !object || typeof object === 'string';
      }

      var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');

      while (stack.length > 1) {
        if (canNotTraverseDeeper()) return {};
        var key = cleanKey(stack.shift());
        if (!object[key] && Empty) object[key] = new Empty();

        if (Object.prototype.hasOwnProperty.call(object, key)) {
          object = object[key];
        } else {
          object = {};
        }
      }

      if (canNotTraverseDeeper()) return {};
      return {
        obj: object,
        k: cleanKey(stack.shift())
      };
    }

    function setPath$1(object, path, newValue) {
      var _getLastOfPath = getLastOfPath(object, path, Object),
          obj = _getLastOfPath.obj,
          k = _getLastOfPath.k;

      obj[k] = newValue;
    }
    function pushPath(object, path, newValue, concat) {
      var _getLastOfPath2 = getLastOfPath(object, path, Object),
          obj = _getLastOfPath2.obj,
          k = _getLastOfPath2.k;

      obj[k] = obj[k] || [];
      if (concat) obj[k] = obj[k].concat(newValue);
      if (!concat) obj[k].push(newValue);
    }
    function getPath$1(object, path) {
      var _getLastOfPath3 = getLastOfPath(object, path),
          obj = _getLastOfPath3.obj,
          k = _getLastOfPath3.k;

      if (!obj) return undefined;
      return obj[k];
    }
    function getPathWithDefaults(data, defaultData, key) {
      var value = getPath$1(data, key);

      if (value !== undefined) {
        return value;
      }

      return getPath$1(defaultData, key);
    }
    function deepExtend(target, source, overwrite) {
      for (var prop in source) {
        if (prop !== '__proto__' && prop !== 'constructor') {
          if (prop in target) {
            if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
              if (overwrite) target[prop] = source[prop];
            } else {
              deepExtend(target[prop], source[prop], overwrite);
            }
          } else {
            target[prop] = source[prop];
          }
        }
      }

      return target;
    }
    function regexEscape(str) {
      return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
    }
    var _entityMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;',
      '/': '&#x2F;'
    };
    function escape(data) {
      if (typeof data === 'string') {
        return data.replace(/[&<>"'\/]/g, function (s) {
          return _entityMap[s];
        });
      }

      return data;
    }
    var isIE10 = typeof window !== 'undefined' && window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('MSIE') > -1;
    var chars = [' ', ',', '?', '!', ';'];
    function looksLikeObjectPath(key, nsSeparator, keySeparator) {
      nsSeparator = nsSeparator || '';
      keySeparator = keySeparator || '';
      var possibleChars = chars.filter(function (c) {
        return nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0;
      });
      if (possibleChars.length === 0) return true;
      var r = new RegExp("(".concat(possibleChars.map(function (c) {
        return c === '?' ? '\\?' : c;
      }).join('|'), ")"));
      var matched = !r.test(key);

      if (!matched) {
        var ki = key.indexOf(keySeparator);

        if (ki > 0 && !r.test(key.substring(0, ki))) {
          matched = true;
        }
      }

      return matched;
    }

    function ownKeys$1$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$1$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1$1(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }

    function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

    function deepFind(obj, path) {
      var keySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';
      if (!obj) return undefined;
      if (obj[path]) return obj[path];
      var paths = path.split(keySeparator);
      var current = obj;

      for (var i = 0; i < paths.length; ++i) {
        if (!current) return undefined;

        if (typeof current[paths[i]] === 'string' && i + 1 < paths.length) {
          return undefined;
        }

        if (current[paths[i]] === undefined) {
          var j = 2;
          var p = paths.slice(i, i + j).join(keySeparator);
          var mix = current[p];

          while (mix === undefined && paths.length > i + j) {
            j++;
            p = paths.slice(i, i + j).join(keySeparator);
            mix = current[p];
          }

          if (mix === undefined) return undefined;

          if (path.endsWith(p)) {
            if (typeof mix === 'string') return mix;
            if (p && typeof mix[p] === 'string') return mix[p];
          }

          var joinedPath = paths.slice(i + j).join(keySeparator);
          if (joinedPath) return deepFind(mix, joinedPath, keySeparator);
          return undefined;
        }

        current = current[paths[i]];
      }

      return current;
    }

    var ResourceStore = function (_EventEmitter) {
      _inherits$1(ResourceStore, _EventEmitter);

      var _super = _createSuper$1(ResourceStore);

      function ResourceStore(data) {
        var _this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
          ns: ['translation'],
          defaultNS: 'translation'
        };

        _classCallCheck$1(this, ResourceStore);

        _this = _super.call(this);

        if (isIE10) {
          EventEmitter.call(_assertThisInitialized$1(_this));
        }

        _this.data = data || {};
        _this.options = options;

        if (_this.options.keySeparator === undefined) {
          _this.options.keySeparator = '.';
        }

        if (_this.options.ignoreJSONStructure === undefined) {
          _this.options.ignoreJSONStructure = true;
        }

        return _this;
      }

      _createClass$1(ResourceStore, [{
        key: "addNamespaces",
        value: function addNamespaces(ns) {
          if (this.options.ns.indexOf(ns) < 0) {
            this.options.ns.push(ns);
          }
        }
      }, {
        key: "removeNamespaces",
        value: function removeNamespaces(ns) {
          var index = this.options.ns.indexOf(ns);

          if (index > -1) {
            this.options.ns.splice(index, 1);
          }
        }
      }, {
        key: "getResource",
        value: function getResource(lng, ns, key) {
          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
          var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
          var ignoreJSONStructure = options.ignoreJSONStructure !== undefined ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
          var path = [lng, ns];
          if (key && typeof key !== 'string') path = path.concat(key);
          if (key && typeof key === 'string') path = path.concat(keySeparator ? key.split(keySeparator) : key);

          if (lng.indexOf('.') > -1) {
            path = lng.split('.');
          }

          var result = getPath$1(this.data, path);
          if (result || !ignoreJSONStructure || typeof key !== 'string') return result;
          return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
        }
      }, {
        key: "addResource",
        value: function addResource(lng, ns, key, value) {
          var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
            silent: false
          };
          var keySeparator = this.options.keySeparator;
          if (keySeparator === undefined) keySeparator = '.';
          var path = [lng, ns];
          if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);

          if (lng.indexOf('.') > -1) {
            path = lng.split('.');
            value = ns;
            ns = path[1];
          }

          this.addNamespaces(ns);
          setPath$1(this.data, path, value);
          if (!options.silent) this.emit('added', lng, ns, key, value);
        }
      }, {
        key: "addResources",
        value: function addResources(lng, ns, resources) {
          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
            silent: false
          };

          for (var m in resources) {
            if (typeof resources[m] === 'string' || Object.prototype.toString.apply(resources[m]) === '[object Array]') this.addResource(lng, ns, m, resources[m], {
              silent: true
            });
          }

          if (!options.silent) this.emit('added', lng, ns, resources);
        }
      }, {
        key: "addResourceBundle",
        value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
          var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
            silent: false
          };
          var path = [lng, ns];

          if (lng.indexOf('.') > -1) {
            path = lng.split('.');
            deep = resources;
            resources = ns;
            ns = path[1];
          }

          this.addNamespaces(ns);
          var pack = getPath$1(this.data, path) || {};

          if (deep) {
            deepExtend(pack, resources, overwrite);
          } else {
            pack = _objectSpread$1$1(_objectSpread$1$1({}, pack), resources);
          }

          setPath$1(this.data, path, pack);
          if (!options.silent) this.emit('added', lng, ns, resources);
        }
      }, {
        key: "removeResourceBundle",
        value: function removeResourceBundle(lng, ns) {
          if (this.hasResourceBundle(lng, ns)) {
            delete this.data[lng][ns];
          }

          this.removeNamespaces(ns);
          this.emit('removed', lng, ns);
        }
      }, {
        key: "hasResourceBundle",
        value: function hasResourceBundle(lng, ns) {
          return this.getResource(lng, ns) !== undefined;
        }
      }, {
        key: "getResourceBundle",
        value: function getResourceBundle(lng, ns) {
          if (!ns) ns = this.options.defaultNS;
          if (this.options.compatibilityAPI === 'v1') return _objectSpread$1$1(_objectSpread$1$1({}, {}), this.getResource(lng, ns));
          return this.getResource(lng, ns);
        }
      }, {
        key: "getDataByLanguage",
        value: function getDataByLanguage(lng) {
          return this.data[lng];
        }
      }, {
        key: "hasLanguageSomeTranslations",
        value: function hasLanguageSomeTranslations(lng) {
          var data = this.getDataByLanguage(lng);
          var n = data && Object.keys(data) || [];
          return !!n.find(function (v) {
            return data[v] && Object.keys(data[v]).length > 0;
          });
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          return this.data;
        }
      }]);

      return ResourceStore;
    }(EventEmitter);

    var postProcessor = {
      processors: {},
      addPostProcessor: function addPostProcessor(module) {
        this.processors[module.name] = module;
      },
      handle: function handle(processors, value, key, options, translator) {
        var _this = this;

        processors.forEach(function (processor) {
          if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options, translator);
        });
        return value;
      }
    };

    function ownKeys$2$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$2$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2$1(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _createSuper$1$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1$1(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }

    function _isNativeReflectConstruct$1$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
    var checkedLoadedFor = {};

    var Translator = function (_EventEmitter) {
      _inherits$1(Translator, _EventEmitter);

      var _super = _createSuper$1$1(Translator);

      function Translator(services) {
        var _this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck$1(this, Translator);

        _this = _super.call(this);

        if (isIE10) {
          EventEmitter.call(_assertThisInitialized$1(_this));
        }

        copy$3(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector', 'i18nFormat', 'utils'], services, _assertThisInitialized$1(_this));
        _this.options = options;

        if (_this.options.keySeparator === undefined) {
          _this.options.keySeparator = '.';
        }

        _this.logger = baseLogger.create('translator');
        return _this;
      }

      _createClass$1(Translator, [{
        key: "changeLanguage",
        value: function changeLanguage(lng) {
          if (lng) this.language = lng;
        }
      }, {
        key: "exists",
        value: function exists(key) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
            interpolation: {}
          };

          if (key === undefined || key === null) {
            return false;
          }

          var resolved = this.resolve(key, options);
          return resolved && resolved.res !== undefined;
        }
      }, {
        key: "extractFromKey",
        value: function extractFromKey(key, options) {
          var nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
          if (nsSeparator === undefined) nsSeparator = ':';
          var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
          var namespaces = options.ns || this.options.defaultNS || [];
          var wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
          var seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);

          if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
            var m = key.match(this.interpolator.nestingRegexp);

            if (m && m.length > 0) {
              return {
                key: key,
                namespaces: namespaces
              };
            }

            var parts = key.split(nsSeparator);
            if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
            key = parts.join(keySeparator);
          }

          if (typeof namespaces === 'string') namespaces = [namespaces];
          return {
            key: key,
            namespaces: namespaces
          };
        }
      }, {
        key: "translate",
        value: function translate(keys, options, lastKey) {
          var _this2 = this;

          if (_typeof$1(options) !== 'object' && this.options.overloadTranslationOptionHandler) {
            options = this.options.overloadTranslationOptionHandler(arguments);
          }

          if (!options) options = {};
          if (keys === undefined || keys === null) return '';
          if (!Array.isArray(keys)) keys = [String(keys)];
          var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;

          var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options),
              key = _this$extractFromKey.key,
              namespaces = _this$extractFromKey.namespaces;

          var namespace = namespaces[namespaces.length - 1];
          var lng = options.lng || this.language;
          var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;

          if (lng && lng.toLowerCase() === 'cimode') {
            if (appendNamespaceToCIMode) {
              var nsSeparator = options.nsSeparator || this.options.nsSeparator;
              return namespace + nsSeparator + key;
            }

            return key;
          }

          var resolved = this.resolve(keys, options);
          var res = resolved && resolved.res;
          var resUsedKey = resolved && resolved.usedKey || key;
          var resExactUsedKey = resolved && resolved.exactUsedKey || key;
          var resType = Object.prototype.toString.apply(res);
          var noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
          var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
          var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
          var handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';

          if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === 'string' && resType === '[object Array]')) {
            if (!options.returnObjects && !this.options.returnObjects) {
              if (!this.options.returnedObjectHandler) {
                this.logger.warn('accessing an object - but returnObjects options is not enabled!');
              }

              return this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpread$2$1(_objectSpread$2$1({}, options), {}, {
                ns: namespaces
              })) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
            }

            if (keySeparator) {
              var resTypeIsArray = resType === '[object Array]';
              var copy = resTypeIsArray ? [] : {};
              var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;

              for (var m in res) {
                if (Object.prototype.hasOwnProperty.call(res, m)) {
                  var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
                  copy[m] = this.translate(deepKey, _objectSpread$2$1(_objectSpread$2$1({}, options), {
                    joinArrays: false,
                    ns: namespaces
                  }));
                  if (copy[m] === deepKey) copy[m] = res[m];
                }
              }

              res = copy;
            }
          } else if (handleAsObjectInI18nFormat && typeof joinArrays === 'string' && resType === '[object Array]') {
            res = res.join(joinArrays);
            if (res) res = this.extendTranslation(res, keys, options, lastKey);
          } else {
            var usedDefault = false;
            var usedKey = false;
            var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
            var hasDefaultValue = Translator.hasDefaultValue(options);
            var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : '';
            var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;

            if (!this.isValidLookup(res) && hasDefaultValue) {
              usedDefault = true;
              res = defaultValue;
            }

            if (!this.isValidLookup(res)) {
              usedKey = true;
              res = key;
            }

            var missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
            var resForMissing = missingKeyNoValueFallbackToKey && usedKey ? undefined : res;
            var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;

            if (usedKey || usedDefault || updateMissing) {
              this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? defaultValue : res);

              if (keySeparator) {
                var fk = this.resolve(key, _objectSpread$2$1(_objectSpread$2$1({}, options), {}, {
                  keySeparator: false
                }));
                if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
              }

              var lngs = [];
              var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);

              if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
                for (var i = 0; i < fallbackLngs.length; i++) {
                  lngs.push(fallbackLngs[i]);
                }
              } else if (this.options.saveMissingTo === 'all') {
                lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
              } else {
                lngs.push(options.lng || this.language);
              }

              var send = function send(l, k, specificDefaultValue) {
                var defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;

                if (_this2.options.missingKeyHandler) {
                  _this2.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);
                } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
                  _this2.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);
                }

                _this2.emit('missingKey', l, namespace, k, res);
              };

              if (this.options.saveMissing) {
                if (this.options.saveMissingPlurals && needsPluralHandling) {
                  lngs.forEach(function (language) {
                    _this2.pluralResolver.getSuffixes(language, options).forEach(function (suffix) {
                      send([language], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);
                    });
                  });
                } else {
                  send(lngs, key, defaultValue);
                }
              }
            }

            res = this.extendTranslation(res, keys, options, resolved, lastKey);
            if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);

            if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
              if (this.options.compatibilityAPI !== 'v1') {
                res = this.options.parseMissingKeyHandler(key, usedDefault ? res : undefined);
              } else {
                res = this.options.parseMissingKeyHandler(res);
              }
            }
          }

          return res;
        }
      }, {
        key: "extendTranslation",
        value: function extendTranslation(res, key, options, resolved, lastKey) {
          var _this3 = this;

          if (this.i18nFormat && this.i18nFormat.parse) {
            res = this.i18nFormat.parse(res, options, resolved.usedLng, resolved.usedNS, resolved.usedKey, {
              resolved: resolved
            });
          } else if (!options.skipInterpolation) {
            if (options.interpolation) this.interpolator.init(_objectSpread$2$1(_objectSpread$2$1({}, options), {
              interpolation: _objectSpread$2$1(_objectSpread$2$1({}, this.options.interpolation), options.interpolation)
            }));
            var skipOnVariables = typeof res === 'string' && (options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
            var nestBef;

            if (skipOnVariables) {
              var nb = res.match(this.interpolator.nestingRegexp);
              nestBef = nb && nb.length;
            }

            var data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
            if (this.options.interpolation.defaultVariables) data = _objectSpread$2$1(_objectSpread$2$1({}, this.options.interpolation.defaultVariables), data);
            res = this.interpolator.interpolate(res, data, options.lng || this.language, options);

            if (skipOnVariables) {
              var na = res.match(this.interpolator.nestingRegexp);
              var nestAft = na && na.length;
              if (nestBef < nestAft) options.nest = false;
            }

            if (options.nest !== false) res = this.interpolator.nest(res, function () {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              if (lastKey && lastKey[0] === args[0] && !options.context) {
                _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));

                return null;
              }

              return _this3.translate.apply(_this3, args.concat([key]));
            }, options);
            if (options.interpolation) this.interpolator.reset();
          }

          var postProcess = options.postProcess || this.options.postProcess;
          var postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;

          if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
            res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread$2$1({
              i18nResolved: resolved
            }, options) : options, this);
          }

          return res;
        }
      }, {
        key: "resolve",
        value: function resolve(keys) {
          var _this4 = this;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var found;
          var usedKey;
          var exactUsedKey;
          var usedLng;
          var usedNS;
          if (typeof keys === 'string') keys = [keys];
          keys.forEach(function (k) {
            if (_this4.isValidLookup(found)) return;

            var extracted = _this4.extractFromKey(k, options);

            var key = extracted.key;
            usedKey = key;
            var namespaces = extracted.namespaces;
            if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);
            var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';

            var needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && _this4.pluralResolver.shouldUseIntlApi();

            var needsContextHandling = options.context !== undefined && (typeof options.context === 'string' || typeof options.context === 'number') && options.context !== '';
            var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
            namespaces.forEach(function (ns) {
              if (_this4.isValidLookup(found)) return;
              usedNS = ns;

              if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
                checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;

                _this4.logger.warn("key \"".concat(usedKey, "\" for languages \"").concat(codes.join(', '), "\" won't get resolved as namespace \"").concat(usedNS, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
              }

              codes.forEach(function (code) {
                if (_this4.isValidLookup(found)) return;
                usedLng = code;
                var finalKeys = [key];

                if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
                  _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
                } else {
                  var pluralSuffix;
                  if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count, options);
                  var zeroSuffix = '_zero';

                  if (needsPluralHandling) {
                    finalKeys.push(key + pluralSuffix);

                    if (needsZeroSuffixLookup) {
                      finalKeys.push(key + zeroSuffix);
                    }
                  }

                  if (needsContextHandling) {
                    var contextKey = "".concat(key).concat(_this4.options.contextSeparator).concat(options.context);
                    finalKeys.push(contextKey);

                    if (needsPluralHandling) {
                      finalKeys.push(contextKey + pluralSuffix);

                      if (needsZeroSuffixLookup) {
                        finalKeys.push(contextKey + zeroSuffix);
                      }
                    }
                  }
                }

                var possibleKey;

                while (possibleKey = finalKeys.pop()) {
                  if (!_this4.isValidLookup(found)) {
                    exactUsedKey = possibleKey;
                    found = _this4.getResource(code, ns, possibleKey, options);
                  }
                }
              });
            });
          });
          return {
            res: found,
            usedKey: usedKey,
            exactUsedKey: exactUsedKey,
            usedLng: usedLng,
            usedNS: usedNS
          };
        }
      }, {
        key: "isValidLookup",
        value: function isValidLookup(res) {
          return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
        }
      }, {
        key: "getResource",
        value: function getResource(code, ns, key) {
          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
          if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
          return this.resourceStore.getResource(code, ns, key, options);
        }
      }], [{
        key: "hasDefaultValue",
        value: function hasDefaultValue(options) {
          var prefix = 'defaultValue';

          for (var option in options) {
            if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {
              return true;
            }
          }

          return false;
        }
      }]);

      return Translator;
    }(EventEmitter);

    function capitalize$1(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    }

    var LanguageUtil = function () {
      function LanguageUtil(options) {
        _classCallCheck$1(this, LanguageUtil);

        this.options = options;
        this.supportedLngs = this.options.supportedLngs || false;
        this.logger = baseLogger.create('languageUtils');
      }

      _createClass$1(LanguageUtil, [{
        key: "getScriptPartFromCode",
        value: function getScriptPartFromCode(code) {
          if (!code || code.indexOf('-') < 0) return null;
          var p = code.split('-');
          if (p.length === 2) return null;
          p.pop();
          if (p[p.length - 1].toLowerCase() === 'x') return null;
          return this.formatLanguageCode(p.join('-'));
        }
      }, {
        key: "getLanguagePartFromCode",
        value: function getLanguagePartFromCode(code) {
          if (!code || code.indexOf('-') < 0) return code;
          var p = code.split('-');
          return this.formatLanguageCode(p[0]);
        }
      }, {
        key: "formatLanguageCode",
        value: function formatLanguageCode(code) {
          if (typeof code === 'string' && code.indexOf('-') > -1) {
            var specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];
            var p = code.split('-');

            if (this.options.lowerCaseLng) {
              p = p.map(function (part) {
                return part.toLowerCase();
              });
            } else if (p.length === 2) {
              p[0] = p[0].toLowerCase();
              p[1] = p[1].toUpperCase();
              if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize$1(p[1].toLowerCase());
            } else if (p.length === 3) {
              p[0] = p[0].toLowerCase();
              if (p[1].length === 2) p[1] = p[1].toUpperCase();
              if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
              if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize$1(p[1].toLowerCase());
              if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize$1(p[2].toLowerCase());
            }

            return p.join('-');
          }

          return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
        }
      }, {
        key: "isSupportedCode",
        value: function isSupportedCode(code) {
          if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
            code = this.getLanguagePartFromCode(code);
          }

          return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
        }
      }, {
        key: "getBestMatchFromCodes",
        value: function getBestMatchFromCodes(codes) {
          var _this = this;

          if (!codes) return null;
          var found;
          codes.forEach(function (code) {
            if (found) return;

            var cleanedLng = _this.formatLanguageCode(code);

            if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;
          });

          if (!found && this.options.supportedLngs) {
            codes.forEach(function (code) {
              if (found) return;

              var lngOnly = _this.getLanguagePartFromCode(code);

              if (_this.isSupportedCode(lngOnly)) return found = lngOnly;
              found = _this.options.supportedLngs.find(function (supportedLng) {
                if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
              });
            });
          }

          if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
          return found;
        }
      }, {
        key: "getFallbackCodes",
        value: function getFallbackCodes(fallbacks, code) {
          if (!fallbacks) return [];
          if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
          if (typeof fallbacks === 'string') fallbacks = [fallbacks];
          if (Object.prototype.toString.apply(fallbacks) === '[object Array]') return fallbacks;
          if (!code) return fallbacks["default"] || [];
          var found = fallbacks[code];
          if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
          if (!found) found = fallbacks[this.formatLanguageCode(code)];
          if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
          if (!found) found = fallbacks["default"];
          return found || [];
        }
      }, {
        key: "toResolveHierarchy",
        value: function toResolveHierarchy(code, fallbackCode) {
          var _this2 = this;

          var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
          var codes = [];

          var addCode = function addCode(c) {
            if (!c) return;

            if (_this2.isSupportedCode(c)) {
              codes.push(c);
            } else {
              _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
            }
          };

          if (typeof code === 'string' && code.indexOf('-') > -1) {
            if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
            if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
            if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
          } else if (typeof code === 'string') {
            addCode(this.formatLanguageCode(code));
          }

          fallbackCodes.forEach(function (fc) {
            if (codes.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));
          });
          return codes;
        }
      }]);

      return LanguageUtil;
    }();

    var sets = [{
      lngs: ['ach', 'ak', 'am', 'arn', 'br', 'fil', 'gun', 'ln', 'mfe', 'mg', 'mi', 'oc', 'pt', 'pt-BR', 'tg', 'tl', 'ti', 'tr', 'uz', 'wa'],
      nr: [1, 2],
      fc: 1
    }, {
      lngs: ['af', 'an', 'ast', 'az', 'bg', 'bn', 'ca', 'da', 'de', 'dev', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fi', 'fo', 'fur', 'fy', 'gl', 'gu', 'ha', 'hi', 'hu', 'hy', 'ia', 'it', 'kk', 'kn', 'ku', 'lb', 'mai', 'ml', 'mn', 'mr', 'nah', 'nap', 'nb', 'ne', 'nl', 'nn', 'no', 'nso', 'pa', 'pap', 'pms', 'ps', 'pt-PT', 'rm', 'sco', 'se', 'si', 'so', 'son', 'sq', 'sv', 'sw', 'ta', 'te', 'tk', 'ur', 'yo'],
      nr: [1, 2],
      fc: 2
    }, {
      lngs: ['ay', 'bo', 'cgg', 'fa', 'ht', 'id', 'ja', 'jbo', 'ka', 'km', 'ko', 'ky', 'lo', 'ms', 'sah', 'su', 'th', 'tt', 'ug', 'vi', 'wo', 'zh'],
      nr: [1],
      fc: 3
    }, {
      lngs: ['be', 'bs', 'cnr', 'dz', 'hr', 'ru', 'sr', 'uk'],
      nr: [1, 2, 5],
      fc: 4
    }, {
      lngs: ['ar'],
      nr: [0, 1, 2, 3, 11, 100],
      fc: 5
    }, {
      lngs: ['cs', 'sk'],
      nr: [1, 2, 5],
      fc: 6
    }, {
      lngs: ['csb', 'pl'],
      nr: [1, 2, 5],
      fc: 7
    }, {
      lngs: ['cy'],
      nr: [1, 2, 3, 8],
      fc: 8
    }, {
      lngs: ['fr'],
      nr: [1, 2],
      fc: 9
    }, {
      lngs: ['ga'],
      nr: [1, 2, 3, 7, 11],
      fc: 10
    }, {
      lngs: ['gd'],
      nr: [1, 2, 3, 20],
      fc: 11
    }, {
      lngs: ['is'],
      nr: [1, 2],
      fc: 12
    }, {
      lngs: ['jv'],
      nr: [0, 1],
      fc: 13
    }, {
      lngs: ['kw'],
      nr: [1, 2, 3, 4],
      fc: 14
    }, {
      lngs: ['lt'],
      nr: [1, 2, 10],
      fc: 15
    }, {
      lngs: ['lv'],
      nr: [1, 2, 0],
      fc: 16
    }, {
      lngs: ['mk'],
      nr: [1, 2],
      fc: 17
    }, {
      lngs: ['mnk'],
      nr: [0, 1, 2],
      fc: 18
    }, {
      lngs: ['mt'],
      nr: [1, 2, 11, 20],
      fc: 19
    }, {
      lngs: ['or'],
      nr: [2, 1],
      fc: 2
    }, {
      lngs: ['ro'],
      nr: [1, 2, 20],
      fc: 20
    }, {
      lngs: ['sl'],
      nr: [5, 1, 2, 3],
      fc: 21
    }, {
      lngs: ['he', 'iw'],
      nr: [1, 2, 20, 21],
      fc: 22
    }];
    var _rulesPluralsTypes = {
      1: function _(n) {
        return Number(n > 1);
      },
      2: function _(n) {
        return Number(n != 1);
      },
      3: function _(n) {
        return 0;
      },
      4: function _(n) {
        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
      },
      5: function _(n) {
        return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
      },
      6: function _(n) {
        return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
      },
      7: function _(n) {
        return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
      },
      8: function _(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
      },
      9: function _(n) {
        return Number(n >= 2);
      },
      10: function _(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
      },
      11: function _(n) {
        return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
      },
      12: function _(n) {
        return Number(n % 10 != 1 || n % 100 == 11);
      },
      13: function _(n) {
        return Number(n !== 0);
      },
      14: function _(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
      },
      15: function _(n) {
        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
      },
      16: function _(n) {
        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
      },
      17: function _(n) {
        return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
      },
      18: function _(n) {
        return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
      },
      19: function _(n) {
        return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
      },
      20: function _(n) {
        return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
      },
      21: function _(n) {
        return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
      },
      22: function _(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
      }
    };
    var deprecatedJsonVersions = ['v1', 'v2', 'v3'];
    var suffixesOrder = {
      zero: 0,
      one: 1,
      two: 2,
      few: 3,
      many: 4,
      other: 5
    };

    function createRules() {
      var rules = {};
      sets.forEach(function (set) {
        set.lngs.forEach(function (l) {
          rules[l] = {
            numbers: set.nr,
            plurals: _rulesPluralsTypes[set.fc]
          };
        });
      });
      return rules;
    }

    var PluralResolver = function () {
      function PluralResolver(languageUtils) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck$1(this, PluralResolver);

        this.languageUtils = languageUtils;
        this.options = options;
        this.logger = baseLogger.create('pluralResolver');

        if ((!this.options.compatibilityJSON || this.options.compatibilityJSON === 'v4') && (typeof Intl === 'undefined' || !Intl.PluralRules)) {
          this.options.compatibilityJSON = 'v3';
          this.logger.error('Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.');
        }

        this.rules = createRules();
      }

      _createClass$1(PluralResolver, [{
        key: "addRule",
        value: function addRule(lng, obj) {
          this.rules[lng] = obj;
        }
      }, {
        key: "getRule",
        value: function getRule(code) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          if (this.shouldUseIntlApi()) {
            try {
              return new Intl.PluralRules(code, {
                type: options.ordinal ? 'ordinal' : 'cardinal'
              });
            } catch (_unused) {
              return;
            }
          }

          return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
        }
      }, {
        key: "needsPlural",
        value: function needsPlural(code) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var rule = this.getRule(code, options);

          if (this.shouldUseIntlApi()) {
            return rule && rule.resolvedOptions().pluralCategories.length > 1;
          }

          return rule && rule.numbers.length > 1;
        }
      }, {
        key: "getPluralFormsOfKey",
        value: function getPluralFormsOfKey(code, key) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          return this.getSuffixes(code, options).map(function (suffix) {
            return "".concat(key).concat(suffix);
          });
        }
      }, {
        key: "getSuffixes",
        value: function getSuffixes(code) {
          var _this = this;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var rule = this.getRule(code, options);

          if (!rule) {
            return [];
          }

          if (this.shouldUseIntlApi()) {
            return rule.resolvedOptions().pluralCategories.sort(function (pluralCategory1, pluralCategory2) {
              return suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2];
            }).map(function (pluralCategory) {
              return "".concat(_this.options.prepend).concat(pluralCategory);
            });
          }

          return rule.numbers.map(function (number) {
            return _this.getSuffix(code, number, options);
          });
        }
      }, {
        key: "getSuffix",
        value: function getSuffix(code, count) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var rule = this.getRule(code, options);

          if (rule) {
            if (this.shouldUseIntlApi()) {
              return "".concat(this.options.prepend).concat(rule.select(count));
            }

            return this.getSuffixRetroCompatible(rule, count);
          }

          this.logger.warn("no plural rule found for: ".concat(code));
          return '';
        }
      }, {
        key: "getSuffixRetroCompatible",
        value: function getSuffixRetroCompatible(rule, count) {
          var _this2 = this;

          var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
          var suffix = rule.numbers[idx];

          if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
            if (suffix === 2) {
              suffix = 'plural';
            } else if (suffix === 1) {
              suffix = '';
            }
          }

          var returnSuffix = function returnSuffix() {
            return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
          };

          if (this.options.compatibilityJSON === 'v1') {
            if (suffix === 1) return '';
            if (typeof suffix === 'number') return "_plural_".concat(suffix.toString());
            return returnSuffix();
          } else if (this.options.compatibilityJSON === 'v2') {
            return returnSuffix();
          } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
            return returnSuffix();
          }

          return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
        }
      }, {
        key: "shouldUseIntlApi",
        value: function shouldUseIntlApi() {
          return !deprecatedJsonVersions.includes(this.options.compatibilityJSON);
        }
      }]);

      return PluralResolver;
    }();

    function ownKeys$3$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$3$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3$1(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var Interpolator = function () {
      function Interpolator() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck$1(this, Interpolator);

        this.logger = baseLogger.create('interpolator');
        this.options = options;

        this.format = options.interpolation && options.interpolation.format || function (value) {
          return value;
        };

        this.init(options);
      }

      _createClass$1(Interpolator, [{
        key: "init",
        value: function init() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          if (!options.interpolation) options.interpolation = {
            escapeValue: true
          };
          var iOpts = options.interpolation;
          this.escape = iOpts.escape !== undefined ? iOpts.escape : escape;
          this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
          this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;
          this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';
          this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';
          this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
          this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
          this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';
          this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape('$t(');
          this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(')');
          this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ',';
          this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;
          this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;
          this.resetRegExp();
        }
      }, {
        key: "reset",
        value: function reset() {
          if (this.options) this.init(this.options);
        }
      }, {
        key: "resetRegExp",
        value: function resetRegExp() {
          var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
          this.regexp = new RegExp(regexpStr, 'g');
          var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
          this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
          var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
          this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
        }
      }, {
        key: "interpolate",
        value: function interpolate(str, data, lng, options) {
          var _this = this;

          var match;
          var value;
          var replaces;
          var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};

          function regexSafe(val) {
            return val.replace(/\$/g, '$$$$');
          }

          var handleFormat = function handleFormat(key) {
            if (key.indexOf(_this.formatSeparator) < 0) {
              var path = getPathWithDefaults(data, defaultData, key);
              return _this.alwaysFormat ? _this.format(path, undefined, lng, _objectSpread$3$1(_objectSpread$3$1(_objectSpread$3$1({}, options), data), {}, {
                interpolationkey: key
              })) : path;
            }

            var p = key.split(_this.formatSeparator);
            var k = p.shift().trim();
            var f = p.join(_this.formatSeparator).trim();
            return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, _objectSpread$3$1(_objectSpread$3$1(_objectSpread$3$1({}, options), data), {}, {
              interpolationkey: k
            }));
          };

          this.resetRegExp();
          var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
          var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
          var todos = [{
            regex: this.regexpUnescape,
            safeValue: function safeValue(val) {
              return regexSafe(val);
            }
          }, {
            regex: this.regexp,
            safeValue: function safeValue(val) {
              return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
            }
          }];
          todos.forEach(function (todo) {
            replaces = 0;

            while (match = todo.regex.exec(str)) {
              var matchedVar = match[1].trim();
              value = handleFormat(matchedVar);

              if (value === undefined) {
                if (typeof missingInterpolationHandler === 'function') {
                  var temp = missingInterpolationHandler(str, match, options);
                  value = typeof temp === 'string' ? temp : '';
                } else if (options && options.hasOwnProperty(matchedVar)) {
                  value = '';
                } else if (skipOnVariables) {
                  value = match[0];
                  continue;
                } else {
                  _this.logger.warn("missed to pass in variable ".concat(matchedVar, " for interpolating ").concat(str));

                  value = '';
                }
              } else if (typeof value !== 'string' && !_this.useRawValueToEscape) {
                value = makeString(value);
              }

              var safeValue = todo.safeValue(value);
              str = str.replace(match[0], safeValue);

              if (skipOnVariables) {
                todo.regex.lastIndex += safeValue.length;
                todo.regex.lastIndex -= match[0].length;
              } else {
                todo.regex.lastIndex = 0;
              }

              replaces++;

              if (replaces >= _this.maxReplaces) {
                break;
              }
            }
          });
          return str;
        }
      }, {
        key: "nest",
        value: function nest(str, fc) {
          var _this2 = this;

          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var match;
          var value;

          var clonedOptions = _objectSpread$3$1({}, options);

          clonedOptions.applyPostProcessor = false;
          delete clonedOptions.defaultValue;

          function handleHasOptions(key, inheritedOptions) {
            var sep = this.nestingOptionsSeparator;
            if (key.indexOf(sep) < 0) return key;
            var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
            var optionsString = "{".concat(c[1]);
            key = c[0];
            optionsString = this.interpolate(optionsString, clonedOptions);
            optionsString = optionsString.replace(/'/g, '"');

            try {
              clonedOptions = JSON.parse(optionsString);
              if (inheritedOptions) clonedOptions = _objectSpread$3$1(_objectSpread$3$1({}, inheritedOptions), clonedOptions);
            } catch (e) {
              this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
              return "".concat(key).concat(sep).concat(optionsString);
            }

            delete clonedOptions.defaultValue;
            return key;
          }

          while (match = this.nestingRegexp.exec(str)) {
            var formatters = [];
            var doReduce = false;

            if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
              var r = match[1].split(this.formatSeparator).map(function (elem) {
                return elem.trim();
              });
              match[1] = r.shift();
              formatters = r;
              doReduce = true;
            }

            value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
            if (value && match[0] === str && typeof value !== 'string') return value;
            if (typeof value !== 'string') value = makeString(value);

            if (!value) {
              this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
              value = '';
            }

            if (doReduce) {
              value = formatters.reduce(function (v, f) {
                return _this2.format(v, f, options.lng, _objectSpread$3$1(_objectSpread$3$1({}, options), {}, {
                  interpolationkey: match[1].trim()
                }));
              }, value.trim());
            }

            str = str.replace(match[0], value);
            this.regexp.lastIndex = 0;
          }

          return str;
        }
      }]);

      return Interpolator;
    }();

    function ownKeys$4$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$4$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4$1(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function parseFormatStr(formatStr) {
      var formatName = formatStr.toLowerCase().trim();
      var formatOptions = {};

      if (formatStr.indexOf('(') > -1) {
        var p = formatStr.split('(');
        formatName = p[0].toLowerCase().trim();
        var optStr = p[1].substring(0, p[1].length - 1);

        if (formatName === 'currency' && optStr.indexOf(':') < 0) {
          if (!formatOptions.currency) formatOptions.currency = optStr.trim();
        } else if (formatName === 'relativetime' && optStr.indexOf(':') < 0) {
          if (!formatOptions.range) formatOptions.range = optStr.trim();
        } else {
          var opts = optStr.split(';');
          opts.forEach(function (opt) {
            if (!opt) return;

            var _opt$split = opt.split(':'),
                _opt$split2 = _toArray(_opt$split),
                key = _opt$split2[0],
                rest = _opt$split2.slice(1);

            var val = rest.join(':');
            if (!formatOptions[key.trim()]) formatOptions[key.trim()] = val.trim();
            if (val.trim() === 'false') formatOptions[key.trim()] = false;
            if (val.trim() === 'true') formatOptions[key.trim()] = true;
            if (!isNaN(val.trim())) formatOptions[key.trim()] = parseInt(val.trim(), 10);
          });
        }
      }

      return {
        formatName: formatName,
        formatOptions: formatOptions
      };
    }

    var Formatter = function () {
      function Formatter() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck$1(this, Formatter);

        this.logger = baseLogger.create('formatter');
        this.options = options;
        this.formats = {
          number: function number(val, lng, options) {
            return new Intl.NumberFormat(lng, options).format(val);
          },
          currency: function currency(val, lng, options) {
            return new Intl.NumberFormat(lng, _objectSpread$4$1(_objectSpread$4$1({}, options), {}, {
              style: 'currency'
            })).format(val);
          },
          datetime: function datetime(val, lng, options) {
            return new Intl.DateTimeFormat(lng, _objectSpread$4$1({}, options)).format(val);
          },
          relativetime: function relativetime(val, lng, options) {
            return new Intl.RelativeTimeFormat(lng, _objectSpread$4$1({}, options)).format(val, options.range || 'day');
          },
          list: function list(val, lng, options) {
            return new Intl.ListFormat(lng, _objectSpread$4$1({}, options)).format(val);
          }
        };
        this.init(options);
      }

      _createClass$1(Formatter, [{
        key: "init",
        value: function init(services) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
            interpolation: {}
          };
          var iOpts = options.interpolation;
          this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
        }
      }, {
        key: "add",
        value: function add(name, fc) {
          this.formats[name.toLowerCase().trim()] = fc;
        }
      }, {
        key: "format",
        value: function format(value, _format, lng, options) {
          var _this = this;

          var formats = _format.split(this.formatSeparator);

          var result = formats.reduce(function (mem, f) {
            var _parseFormatStr = parseFormatStr(f),
                formatName = _parseFormatStr.formatName,
                formatOptions = _parseFormatStr.formatOptions;

            if (_this.formats[formatName]) {
              var formatted = mem;

              try {
                var valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
                var l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
                formatted = _this.formats[formatName](mem, l, _objectSpread$4$1(_objectSpread$4$1(_objectSpread$4$1({}, formatOptions), options), valOptions));
              } catch (error) {
                _this.logger.warn(error);
              }

              return formatted;
            } else {
              _this.logger.warn("there was no format function for ".concat(formatName));
            }

            return mem;
          }, value);
          return result;
        }
      }]);

      return Formatter;
    }();

    function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }

    function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

    function remove(arr, what) {
      var found = arr.indexOf(what);

      while (found !== -1) {
        arr.splice(found, 1);
        found = arr.indexOf(what);
      }
    }

    var Connector = function (_EventEmitter) {
      _inherits$1(Connector, _EventEmitter);

      var _super = _createSuper$2(Connector);

      function Connector(backend, store, services) {
        var _this;

        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

        _classCallCheck$1(this, Connector);

        _this = _super.call(this);

        if (isIE10) {
          EventEmitter.call(_assertThisInitialized$1(_this));
        }

        _this.backend = backend;
        _this.store = store;
        _this.services = services;
        _this.languageUtils = services.languageUtils;
        _this.options = options;
        _this.logger = baseLogger.create('backendConnector');
        _this.state = {};
        _this.queue = [];

        if (_this.backend && _this.backend.init) {
          _this.backend.init(services, options.backend, options);
        }

        return _this;
      }

      _createClass$1(Connector, [{
        key: "queueLoad",
        value: function queueLoad(languages, namespaces, options, callback) {
          var _this2 = this;

          var toLoad = [];
          var pending = [];
          var toLoadLanguages = [];
          var toLoadNamespaces = [];
          languages.forEach(function (lng) {
            var hasAllNamespaces = true;
            namespaces.forEach(function (ns) {
              var name = "".concat(lng, "|").concat(ns);

              if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
                _this2.state[name] = 2;
              } else if (_this2.state[name] < 0) ; else if (_this2.state[name] === 1) {
                if (pending.indexOf(name) < 0) pending.push(name);
              } else {
                _this2.state[name] = 1;
                hasAllNamespaces = false;
                if (pending.indexOf(name) < 0) pending.push(name);
                if (toLoad.indexOf(name) < 0) toLoad.push(name);
                if (toLoadNamespaces.indexOf(ns) < 0) toLoadNamespaces.push(ns);
              }
            });
            if (!hasAllNamespaces) toLoadLanguages.push(lng);
          });

          if (toLoad.length || pending.length) {
            this.queue.push({
              pending: pending,
              loaded: {},
              errors: [],
              callback: callback
            });
          }

          return {
            toLoad: toLoad,
            pending: pending,
            toLoadLanguages: toLoadLanguages,
            toLoadNamespaces: toLoadNamespaces
          };
        }
      }, {
        key: "loaded",
        value: function loaded(name, err, data) {
          var s = name.split('|');
          var lng = s[0];
          var ns = s[1];
          if (err) this.emit('failedLoading', lng, ns, err);

          if (data) {
            this.store.addResourceBundle(lng, ns, data);
          }

          this.state[name] = err ? -1 : 2;
          var loaded = {};
          this.queue.forEach(function (q) {
            pushPath(q.loaded, [lng], ns);
            remove(q.pending, name);
            if (err) q.errors.push(err);

            if (q.pending.length === 0 && !q.done) {
              Object.keys(q.loaded).forEach(function (l) {
                if (!loaded[l]) loaded[l] = [];

                if (q.loaded[l].length) {
                  q.loaded[l].forEach(function (ns) {
                    if (loaded[l].indexOf(ns) < 0) loaded[l].push(ns);
                  });
                }
              });
              q.done = true;

              if (q.errors.length) {
                q.callback(q.errors);
              } else {
                q.callback();
              }
            }
          });
          this.emit('loaded', loaded);
          this.queue = this.queue.filter(function (q) {
            return !q.done;
          });
        }
      }, {
        key: "read",
        value: function read(lng, ns, fcName) {
          var _this3 = this;

          var tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
          var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 350;
          var callback = arguments.length > 5 ? arguments[5] : undefined;
          if (!lng.length) return callback(null, {});
          return this.backend[fcName](lng, ns, function (err, data) {
            if (err && data && tried < 5) {
              setTimeout(function () {
                _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
              }, wait);
              return;
            }

            callback(err, data);
          });
        }
      }, {
        key: "prepareLoading",
        value: function prepareLoading(languages, namespaces) {
          var _this4 = this;

          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var callback = arguments.length > 3 ? arguments[3] : undefined;

          if (!this.backend) {
            this.logger.warn('No backend was added via i18next.use. Will not load resources.');
            return callback && callback();
          }

          if (typeof languages === 'string') languages = this.languageUtils.toResolveHierarchy(languages);
          if (typeof namespaces === 'string') namespaces = [namespaces];
          var toLoad = this.queueLoad(languages, namespaces, options, callback);

          if (!toLoad.toLoad.length) {
            if (!toLoad.pending.length) callback();
            return null;
          }

          toLoad.toLoad.forEach(function (name) {
            _this4.loadOne(name);
          });
        }
      }, {
        key: "load",
        value: function load(languages, namespaces, callback) {
          this.prepareLoading(languages, namespaces, {}, callback);
        }
      }, {
        key: "reload",
        value: function reload(languages, namespaces, callback) {
          this.prepareLoading(languages, namespaces, {
            reload: true
          }, callback);
        }
      }, {
        key: "loadOne",
        value: function loadOne(name) {
          var _this5 = this;

          var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
          var s = name.split('|');
          var lng = s[0];
          var ns = s[1];
          this.read(lng, ns, 'read', undefined, undefined, function (err, data) {
            if (err) _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
            if (!err && data) _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);

            _this5.loaded(name, err, data);
          });
        }
      }, {
        key: "saveMissing",
        value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
          var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

          if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
            this.logger.warn("did not save key \"".concat(key, "\" as the namespace \"").concat(namespace, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
            return;
          }

          if (key === undefined || key === null || key === '') return;

          if (this.backend && this.backend.create) {
            this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpread$5(_objectSpread$5({}, options), {}, {
              isUpdate: isUpdate
            }));
          }

          if (!languages || !languages[0]) return;
          this.store.addResource(languages[0], namespace, key, fallbackValue);
        }
      }]);

      return Connector;
    }(EventEmitter);

    function get() {
      return {
        debug: false,
        initImmediate: true,
        ns: ['translation'],
        defaultNS: ['translation'],
        fallbackLng: ['dev'],
        fallbackNS: false,
        supportedLngs: false,
        nonExplicitSupportedLngs: false,
        load: 'all',
        preload: false,
        simplifyPluralSuffix: true,
        keySeparator: '.',
        nsSeparator: ':',
        pluralSeparator: '_',
        contextSeparator: '_',
        partialBundledLanguages: false,
        saveMissing: false,
        updateMissing: false,
        saveMissingTo: 'fallback',
        saveMissingPlurals: true,
        missingKeyHandler: false,
        missingInterpolationHandler: false,
        postProcess: false,
        postProcessPassResolved: false,
        returnNull: true,
        returnEmptyString: true,
        returnObjects: false,
        joinArrays: false,
        returnedObjectHandler: false,
        parseMissingKeyHandler: false,
        appendNamespaceToMissingKey: false,
        appendNamespaceToCIMode: false,
        overloadTranslationOptionHandler: function handle(args) {
          var ret = {};
          if (_typeof$1(args[1]) === 'object') ret = args[1];
          if (typeof args[1] === 'string') ret.defaultValue = args[1];
          if (typeof args[2] === 'string') ret.tDescription = args[2];

          if (_typeof$1(args[2]) === 'object' || _typeof$1(args[3]) === 'object') {
            var options = args[3] || args[2];
            Object.keys(options).forEach(function (key) {
              ret[key] = options[key];
            });
          }

          return ret;
        },
        interpolation: {
          escapeValue: true,
          format: function format(value, _format, lng, options) {
            return value;
          },
          prefix: '{{',
          suffix: '}}',
          formatSeparator: ',',
          unescapePrefix: '-',
          nestingPrefix: '$t(',
          nestingSuffix: ')',
          nestingOptionsSeparator: ',',
          maxReplaces: 1000,
          skipOnVariables: true
        }
      };
    }
    function transformOptions(options) {
      if (typeof options.ns === 'string') options.ns = [options.ns];
      if (typeof options.fallbackLng === 'string') options.fallbackLng = [options.fallbackLng];
      if (typeof options.fallbackNS === 'string') options.fallbackNS = [options.fallbackNS];

      if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {
        options.supportedLngs = options.supportedLngs.concat(['cimode']);
      }

      return options;
    }

    function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }

    function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

    function noop$4() {}

    function bindMemberFunctions(inst) {
      var mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
      mems.forEach(function (mem) {
        if (typeof inst[mem] === 'function') {
          inst[mem] = inst[mem].bind(inst);
        }
      });
    }

    var I18n = function (_EventEmitter) {
      _inherits$1(I18n, _EventEmitter);

      var _super = _createSuper$3(I18n);

      function I18n() {
        var _this;

        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var callback = arguments.length > 1 ? arguments[1] : undefined;

        _classCallCheck$1(this, I18n);

        _this = _super.call(this);

        if (isIE10) {
          EventEmitter.call(_assertThisInitialized$1(_this));
        }

        _this.options = transformOptions(options);
        _this.services = {};
        _this.logger = baseLogger;
        _this.modules = {
          external: []
        };
        bindMemberFunctions(_assertThisInitialized$1(_this));

        if (callback && !_this.isInitialized && !options.isClone) {
          if (!_this.options.initImmediate) {
            _this.init(options, callback);

            return _possibleConstructorReturn$1(_this, _assertThisInitialized$1(_this));
          }

          setTimeout(function () {
            _this.init(options, callback);
          }, 0);
        }

        return _this;
      }

      _createClass$1(I18n, [{
        key: "init",
        value: function init() {
          var _this2 = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var callback = arguments.length > 1 ? arguments[1] : undefined;

          if (typeof options === 'function') {
            callback = options;
            options = {};
          }

          if (!options.defaultNS && options.ns) {
            if (typeof options.ns === 'string') {
              options.defaultNS = options.ns;
            } else if (options.ns.indexOf('translation') < 0) {
              options.defaultNS = options.ns[0];
            }
          }

          var defOpts = get();
          this.options = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, defOpts), this.options), transformOptions(options));

          if (this.options.compatibilityAPI !== 'v1') {
            this.options.interpolation = _objectSpread$6(_objectSpread$6({}, defOpts.interpolation), this.options.interpolation);
          }

          if (options.keySeparator !== undefined) {
            this.options.userDefinedKeySeparator = options.keySeparator;
          }

          if (options.nsSeparator !== undefined) {
            this.options.userDefinedNsSeparator = options.nsSeparator;
          }

          function createClassOnDemand(ClassOrObject) {
            if (!ClassOrObject) return null;
            if (typeof ClassOrObject === 'function') return new ClassOrObject();
            return ClassOrObject;
          }

          if (!this.options.isClone) {
            if (this.modules.logger) {
              baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
            } else {
              baseLogger.init(null, this.options);
            }

            var formatter;

            if (this.modules.formatter) {
              formatter = this.modules.formatter;
            } else if (typeof Intl !== 'undefined') {
              formatter = Formatter;
            }

            var lu = new LanguageUtil(this.options);
            this.store = new ResourceStore(this.options.resources, this.options);
            var s = this.services;
            s.logger = baseLogger;
            s.resourceStore = this.store;
            s.languageUtils = lu;
            s.pluralResolver = new PluralResolver(lu, {
              prepend: this.options.pluralSeparator,
              compatibilityJSON: this.options.compatibilityJSON,
              simplifyPluralSuffix: this.options.simplifyPluralSuffix
            });

            if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
              s.formatter = createClassOnDemand(formatter);
              s.formatter.init(s, this.options);
              this.options.interpolation.format = s.formatter.format.bind(s.formatter);
            }

            s.interpolator = new Interpolator(this.options);
            s.utils = {
              hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
            };
            s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
            s.backendConnector.on('*', function (event) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }

              _this2.emit.apply(_this2, [event].concat(args));
            });

            if (this.modules.languageDetector) {
              s.languageDetector = createClassOnDemand(this.modules.languageDetector);
              s.languageDetector.init(s, this.options.detection, this.options);
            }

            if (this.modules.i18nFormat) {
              s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
              if (s.i18nFormat.init) s.i18nFormat.init(this);
            }

            this.translator = new Translator(this.services, this.options);
            this.translator.on('*', function (event) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }

              _this2.emit.apply(_this2, [event].concat(args));
            });
            this.modules.external.forEach(function (m) {
              if (m.init) m.init(_this2);
            });
          }

          this.format = this.options.interpolation.format;
          if (!callback) callback = noop$4;

          if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
            var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
            if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
          }

          if (!this.services.languageDetector && !this.options.lng) {
            this.logger.warn('init: no languageDetector is used and no lng is defined');
          }

          var storeApi = ['getResource', 'hasResourceBundle', 'getResourceBundle', 'getDataByLanguage'];
          storeApi.forEach(function (fcName) {
            _this2[fcName] = function () {
              var _this2$store;

              return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
            };
          });
          var storeApiChained = ['addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle'];
          storeApiChained.forEach(function (fcName) {
            _this2[fcName] = function () {
              var _this2$store2;

              (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);

              return _this2;
            };
          });
          var deferred = defer();

          var load = function load() {
            var finish = function finish(err, t) {
              if (_this2.isInitialized && !_this2.initializedStoreOnce) _this2.logger.warn('init: i18next is already initialized. You should call init just once!');
              _this2.isInitialized = true;
              if (!_this2.options.isClone) _this2.logger.log('initialized', _this2.options);

              _this2.emit('initialized', _this2.options);

              deferred.resolve(t);
              callback(err, t);
            };

            if (_this2.languages && _this2.options.compatibilityAPI !== 'v1' && !_this2.isInitialized) return finish(null, _this2.t.bind(_this2));

            _this2.changeLanguage(_this2.options.lng, finish);
          };

          if (this.options.resources || !this.options.initImmediate) {
            load();
          } else {
            setTimeout(load, 0);
          }

          return deferred;
        }
      }, {
        key: "loadResources",
        value: function loadResources(language) {
          var _this3 = this;

          var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$4;
          var usedCallback = callback;
          var usedLng = typeof language === 'string' ? language : this.language;
          if (typeof language === 'function') usedCallback = language;

          if (!this.options.resources || this.options.partialBundledLanguages) {
            if (usedLng && usedLng.toLowerCase() === 'cimode') return usedCallback();
            var toLoad = [];

            var append = function append(lng) {
              if (!lng) return;

              var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);

              lngs.forEach(function (l) {
                if (toLoad.indexOf(l) < 0) toLoad.push(l);
              });
            };

            if (!usedLng) {
              var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
              fallbacks.forEach(function (l) {
                return append(l);
              });
            } else {
              append(usedLng);
            }

            if (this.options.preload) {
              this.options.preload.forEach(function (l) {
                return append(l);
              });
            }

            this.services.backendConnector.load(toLoad, this.options.ns, function (e) {
              if (!e && !_this3.resolvedLanguage && _this3.language) _this3.setResolvedLanguage(_this3.language);
              usedCallback(e);
            });
          } else {
            usedCallback(null);
          }
        }
      }, {
        key: "reloadResources",
        value: function reloadResources(lngs, ns, callback) {
          var deferred = defer();
          if (!lngs) lngs = this.languages;
          if (!ns) ns = this.options.ns;
          if (!callback) callback = noop$4;
          this.services.backendConnector.reload(lngs, ns, function (err) {
            deferred.resolve();
            callback(err);
          });
          return deferred;
        }
      }, {
        key: "use",
        value: function use(module) {
          if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
          if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');

          if (module.type === 'backend') {
            this.modules.backend = module;
          }

          if (module.type === 'logger' || module.log && module.warn && module.error) {
            this.modules.logger = module;
          }

          if (module.type === 'languageDetector') {
            this.modules.languageDetector = module;
          }

          if (module.type === 'i18nFormat') {
            this.modules.i18nFormat = module;
          }

          if (module.type === 'postProcessor') {
            postProcessor.addPostProcessor(module);
          }

          if (module.type === 'formatter') {
            this.modules.formatter = module;
          }

          if (module.type === '3rdParty') {
            this.modules.external.push(module);
          }

          return this;
        }
      }, {
        key: "setResolvedLanguage",
        value: function setResolvedLanguage(l) {
          if (!l || !this.languages) return;
          if (['cimode', 'dev'].indexOf(l) > -1) return;

          for (var li = 0; li < this.languages.length; li++) {
            var lngInLngs = this.languages[li];
            if (['cimode', 'dev'].indexOf(lngInLngs) > -1) continue;

            if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
              this.resolvedLanguage = lngInLngs;
              break;
            }
          }
        }
      }, {
        key: "changeLanguage",
        value: function changeLanguage(lng, callback) {
          var _this4 = this;

          this.isLanguageChangingTo = lng;
          var deferred = defer();
          this.emit('languageChanging', lng);

          var setLngProps = function setLngProps(l) {
            _this4.language = l;
            _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
            _this4.resolvedLanguage = undefined;

            _this4.setResolvedLanguage(l);
          };

          var done = function done(err, l) {
            if (l) {
              setLngProps(l);

              _this4.translator.changeLanguage(l);

              _this4.isLanguageChangingTo = undefined;

              _this4.emit('languageChanged', l);

              _this4.logger.log('languageChanged', l);
            } else {
              _this4.isLanguageChangingTo = undefined;
            }

            deferred.resolve(function () {
              return _this4.t.apply(_this4, arguments);
            });
            if (callback) callback(err, function () {
              return _this4.t.apply(_this4, arguments);
            });
          };

          var setLng = function setLng(lngs) {
            if (!lng && !lngs && _this4.services.languageDetector) lngs = [];
            var l = typeof lngs === 'string' ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);

            if (l) {
              if (!_this4.language) {
                setLngProps(l);
              }

              if (!_this4.translator.language) _this4.translator.changeLanguage(l);
              if (_this4.services.languageDetector) _this4.services.languageDetector.cacheUserLanguage(l);
            }

            _this4.loadResources(l, function (err) {
              done(err, l);
            });
          };

          if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
            setLng(this.services.languageDetector.detect());
          } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
            this.services.languageDetector.detect(setLng);
          } else {
            setLng(lng);
          }

          return deferred;
        }
      }, {
        key: "getFixedT",
        value: function getFixedT(lng, ns, keyPrefix) {
          var _this5 = this;

          var fixedT = function fixedT(key, opts) {
            var options;

            if (_typeof$1(opts) !== 'object') {
              for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                rest[_key3 - 2] = arguments[_key3];
              }

              options = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
            } else {
              options = _objectSpread$6({}, opts);
            }

            options.lng = options.lng || fixedT.lng;
            options.lngs = options.lngs || fixedT.lngs;
            options.ns = options.ns || fixedT.ns;
            var keySeparator = _this5.options.keySeparator || '.';
            var resultKey = keyPrefix ? "".concat(keyPrefix).concat(keySeparator).concat(key) : key;
            return _this5.t(resultKey, options);
          };

          if (typeof lng === 'string') {
            fixedT.lng = lng;
          } else {
            fixedT.lngs = lng;
          }

          fixedT.ns = ns;
          fixedT.keyPrefix = keyPrefix;
          return fixedT;
        }
      }, {
        key: "t",
        value: function t() {
          var _this$translator;

          return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
        }
      }, {
        key: "exists",
        value: function exists() {
          var _this$translator2;

          return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
        }
      }, {
        key: "setDefaultNamespace",
        value: function setDefaultNamespace(ns) {
          this.options.defaultNS = ns;
        }
      }, {
        key: "hasLoadedNamespace",
        value: function hasLoadedNamespace(ns) {
          var _this6 = this;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          if (!this.isInitialized) {
            this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
            return false;
          }

          if (!this.languages || !this.languages.length) {
            this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
            return false;
          }

          var lng = this.resolvedLanguage || this.languages[0];
          var fallbackLng = this.options ? this.options.fallbackLng : false;
          var lastLng = this.languages[this.languages.length - 1];
          if (lng.toLowerCase() === 'cimode') return true;

          var loadNotPending = function loadNotPending(l, n) {
            var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];

            return loadState === -1 || loadState === 2;
          };

          if (options.precheck) {
            var preResult = options.precheck(this, loadNotPending);
            if (preResult !== undefined) return preResult;
          }

          if (this.hasResourceBundle(lng, ns)) return true;
          if (!this.services.backendConnector.backend) return true;
          if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
          return false;
        }
      }, {
        key: "loadNamespaces",
        value: function loadNamespaces(ns, callback) {
          var _this7 = this;

          var deferred = defer();

          if (!this.options.ns) {
            callback && callback();
            return Promise.resolve();
          }

          if (typeof ns === 'string') ns = [ns];
          ns.forEach(function (n) {
            if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
          });
          this.loadResources(function (err) {
            deferred.resolve();
            if (callback) callback(err);
          });
          return deferred;
        }
      }, {
        key: "loadLanguages",
        value: function loadLanguages(lngs, callback) {
          var deferred = defer();
          if (typeof lngs === 'string') lngs = [lngs];
          var preloaded = this.options.preload || [];
          var newLngs = lngs.filter(function (lng) {
            return preloaded.indexOf(lng) < 0;
          });

          if (!newLngs.length) {
            if (callback) callback();
            return Promise.resolve();
          }

          this.options.preload = preloaded.concat(newLngs);
          this.loadResources(function (err) {
            deferred.resolve();
            if (callback) callback(err);
          });
          return deferred;
        }
      }, {
        key: "dir",
        value: function dir(lng) {
          if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
          if (!lng) return 'rtl';
          var rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ug', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam', 'ckb'];
          return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf('-arab') > 1 ? 'rtl' : 'ltr';
        }
      }, {
        key: "cloneInstance",
        value: function cloneInstance() {
          var _this8 = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$4;

          var mergedOptions = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, this.options), options), {
            isClone: true
          });

          var clone = new I18n(mergedOptions);
          var membersToCopy = ['store', 'services', 'language'];
          membersToCopy.forEach(function (m) {
            clone[m] = _this8[m];
          });
          clone.services = _objectSpread$6({}, this.services);
          clone.services.utils = {
            hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
          };
          clone.translator = new Translator(clone.services, clone.options);
          clone.translator.on('*', function (event) {
            for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
              args[_key4 - 1] = arguments[_key4];
            }

            clone.emit.apply(clone, [event].concat(args));
          });
          clone.init(mergedOptions, callback);
          clone.translator.options = clone.options;
          clone.translator.backendConnector.services.utils = {
            hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
          };
          return clone;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          return {
            options: this.options,
            store: this.store,
            language: this.language,
            languages: this.languages,
            resolvedLanguage: this.resolvedLanguage
          };
        }
      }]);

      return I18n;
    }(EventEmitter);

    _defineProperty$3(I18n, "createInstance", function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;
      return new I18n(options, callback);
    });

    var instance = I18n.createInstance();
    instance.createInstance = I18n.createInstance;

    instance.createInstance;
    instance.init;
    instance.loadResources;
    instance.reloadResources;
    instance.use;
    instance.changeLanguage;
    instance.getFixedT;
    instance.t;
    instance.exists;
    instance.setDefaultNamespace;
    instance.hasLoadedNamespace;
    instance.loadNamespaces;
    instance.loadLanguages;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var updateLocale = createCommonjsModule$1(function (module, exports) {
    !function(e,n){module.exports=n();}(commonjsGlobal,function(){return function(e,n,t){t.updateLocale=function(e,n){var o=t.Ls[e];if(o)return (n?Object.keys(n):[]).forEach(function(e){o[e]=n[e];}),o};}});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var localeData = createCommonjsModule$1(function (module, exports) {
    !function(n,t){module.exports=t();}(commonjsGlobal,function(){return function(n,t,e){var r=function(n){return n&&(n.indexOf?n:n.s)},o=function(n,t,e,o,u){var a=n.name?n:n.$locale(),i=r(a[t]),s=r(a[e]),d=i||s.map(function(n){return n.substr(0,o)});if(!u)return d;var f=a.weekStart;return d.map(function(n,t){return d[(t+(f||0))%7]})},u=function(){return e.Ls[e.locale()]},a=function(n,t){return n.formats[t]||function(n){return n.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,function(n,t,e){return t||e.slice(1)})}(n.formats[t.toUpperCase()])};t.prototype.localeData=function(){return function(){var n=this;return {months:function(t){return t?t.format("MMMM"):o(n,"months")},monthsShort:function(t){return t?t.format("MMM"):o(n,"monthsShort","months",3)},firstDayOfWeek:function(){return n.$locale().weekStart||0},weekdays:function(t){return t?t.format("dddd"):o(n,"weekdays")},weekdaysMin:function(t){return t?t.format("dd"):o(n,"weekdaysMin","weekdays",2)},weekdaysShort:function(t){return t?t.format("ddd"):o(n,"weekdaysShort","weekdays",3)},longDateFormat:function(t){return a(n.$locale(),t)},meridiem:this.$locale().meridiem,ordinal:this.$locale().ordinal}}.bind(this)()},e.localeData=function(){var n=u();return {firstDayOfWeek:function(){return n.weekStart||0},weekdays:function(){return e.weekdays()},weekdaysShort:function(){return e.weekdaysShort()},weekdaysMin:function(){return e.weekdaysMin()},months:function(){return e.months()},monthsShort:function(){return e.monthsShort()},longDateFormat:function(t){return a(n,t)},meridiem:n.meridiem,ordinal:n.ordinal}},e.months=function(){return o(u(),"months")},e.monthsShort=function(){return o(u(),"monthsShort","months",3)},e.weekdays=function(n){return o(u(),"weekdays",null,null,n)},e.weekdaysShort=function(n){return o(u(),"weekdaysShort","weekdays",3,n)},e.weekdaysMin=function(n){return o(u(),"weekdaysMin","weekdays",2,n)};}});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var relativeTime = createCommonjsModule$1(function (module, exports) {
    !function(r,t){module.exports=t();}(commonjsGlobal,function(){return function(r,t,e){r=r||{};var n=t.prototype,o={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function i(r,t,e,o){return n.fromToBase(r,t,e,o)}e.en.relativeTime=o,n.fromToBase=function(t,n,i,d,u){for(var a,f,s,l=i.$locale().relativeTime||o,h=r.thresholds||[{l:"s",r:44,d:"second"},{l:"m",r:89},{l:"mm",r:44,d:"minute"},{l:"h",r:89},{l:"hh",r:21,d:"hour"},{l:"d",r:35},{l:"dd",r:25,d:"day"},{l:"M",r:45},{l:"MM",r:10,d:"month"},{l:"y",r:17},{l:"yy",d:"year"}],m=h.length,c=0;c<m;c+=1){var y=h[c];y.d&&(a=d?e(t).diff(i,y.d,!0):i.diff(t,y.d,!0));var p=(r.rounding||Math.round)(Math.abs(a));if(s=a>0,p<=y.r||!y.r){p<=1&&c>0&&(y=h[c-1]);var v=l[y.l];u&&(p=u(""+p)),f="string"==typeof v?v.replace("%d",p):v(p,n,y.l,s);break}}if(n)return f;var M=s?l.future:l.past;return "function"==typeof M?M(f):M.replace("%s",f)},n.to=function(r,t){return i(r,t,this,!0)},n.from=function(r,t){return i(r,t,this)};var d=function(r){return r.$u?e.utc():e()};n.toNow=function(r){return this.to(d(this),r)},n.fromNow=function(r){return this.from(d(this),r)};}});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    createCommonjsModule$1(function (module, exports) {
    !function(e,n){module.exports=n(dayjs_min);}(commonjsGlobal,function(e){e=e&&e.hasOwnProperty("default")?e.default:e;var n={s:"ein paar Sekunden",m:["eine Minute","einer Minute"],mm:"%d Minuten",h:["eine Stunde","einer Stunde"],hh:"%d Stunden",d:["ein Tag","einem Tag"],dd:["%d Tage","%d Tagen"],M:["ein Monat","einem Monat"],MM:["%d Monate","%d Monaten"],y:["ein Jahr","einem Jahr"],yy:["%d Jahre","%d Jahren"]};function t(e,t,a){var r=n[a];return Array.isArray(r)&&(r=r[t?0:1]),r.replace("%d",e)}var a={name:"de",weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan_Feb_März_Apr_Mai_Juni_Juli_Aug_Sept_Okt_Nov_Dez".split("_"),ordinal:function(e){return e+"."},weekStart:1,yearStart:4,formats:{LTS:"HH:mm:ss",LT:"HH:mm",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},relativeTime:{future:"in %s",past:"vor %s",s:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t}};return e.locale(a,null,!0),a});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    createCommonjsModule$1(function (module, exports) {
    !function(e,s){module.exports=s(dayjs_min);}(commonjsGlobal,function(e){e=e&&e.hasOwnProperty("default")?e.default:e;var s={name:"es",monthsShort:"ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),months:"Enero_Febrero_Marzo_Abril_Mayo_Junio_Julio_Agosto_Septiembre_Octubre_Noviembre_Diciembre".split("_"),weekStart:1,formats:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinal:function(e){return e+"º"}};return e.locale(s,null,!0),s});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    createCommonjsModule$1(function (module, exports) {
    !function(e,_){module.exports=_(dayjs_min);}(commonjsGlobal,function(e){e=e&&e.hasOwnProperty("default")?e.default:e;var _={name:"fr",weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekStart:1,yearStart:4,formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinal:function(e){return ""+e+(1===e?"er":"")}};return e.locale(_,null,!0),_});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    createCommonjsModule$1(function (module, exports) {
    !function(_,e){module.exports=e(dayjs_min);}(commonjsGlobal,function(_){_=_&&_.hasOwnProperty("default")?_.default:_;var e={name:"hi",weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),ordinal:function(_){return _},formats:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"}};return _.locale(e,null,!0),e});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    createCommonjsModule$1(function (module, exports) {
    !function(e,o){module.exports=o(dayjs_min);}(commonjsGlobal,function(e){e=e&&e.hasOwnProperty("default")?e.default:e;var o={name:"it",weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),weekStart:1,monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},relativeTime:{future:"tra %s",past:"%s fa",s:"qualche secondo",m:"un minuto",mm:"%d minuti",h:"un' ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},ordinal:function(e){return e+"º"}};return e.locale(o,null,!0),o});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    createCommonjsModule$1(function (module, exports) {
    !function(_,e){module.exports=e(dayjs_min);}(commonjsGlobal,function(_){_=_&&_.hasOwnProperty("default")?_.default:_;var e={name:"ja",weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),ordinal:function(_){return _+"日"},formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiem:function(_){return _<12?"午前":"午後"},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}};return _.locale(e,null,!0),e});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    createCommonjsModule$1(function (module, exports) {
    !function(_,e){module.exports=e(dayjs_min);}(commonjsGlobal,function(_){_=_&&_.hasOwnProperty("default")?_.default:_;var e={name:"ko",weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),ordinal:function(_){return _},formats:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},meridiem:function(_){return _<12?"오전":"오후"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"}};return _.locale(e,null,!0),e});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    createCommonjsModule$1(function (module, exports) {
    !function(e,a){module.exports=a(dayjs_min);}(commonjsGlobal,function(e){e=e&&e.hasOwnProperty("default")?e.default:e;var a={name:"nl",weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),ordinal:function(e){return e+"."},weekStart:1,yearStart:4,formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"een minuut",mm:"%d minuten",h:"een uur",hh:"%d uur",d:"een dag",dd:"%d dagen",M:"een maand",MM:"%d maanden",y:"een jaar",yy:"%d jaar"}};return e.locale(a,null,!0),a});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    createCommonjsModule$1(function (module, exports) {
    !function(e,a){module.exports=a(dayjs_min);}(commonjsGlobal,function(e){e=e&&e.hasOwnProperty("default")?e.default:e;var a={name:"pt",weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sab".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sa".split("_"),months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),ordinal:function(e){return e+"º"},weekStart:1,yearStart:4,formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},relativeTime:{future:"em %s",past:"há %s",s:"alguns segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"}};return e.locale(a,null,!0),a});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    createCommonjsModule$1(function (module, exports) {
    !function(_,t){module.exports=t(dayjs_min);}(commonjsGlobal,function(_){_=_&&_.hasOwnProperty("default")?_.default:_;var t="января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),e="январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),n="янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),s="янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_"),r=/D[oD]?(\[[^[\]]*\]|\s)+MMMM?/;function o(_,t,e){var n,s;return "m"===e?t?"минута":"минуту":_+" "+(n=+_,s={mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[e].split("_"),n%10==1&&n%100!=11?s[0]:n%10>=2&&n%10<=4&&(n%100<10||n%100>=20)?s[1]:s[2])}var d=function(_,n){return r.test(n)?t[_.month()]:e[_.month()]};d.s=e,d.f=t;var i=function(_,t){return r.test(t)?n[_.month()]:s[_.month()]};i.s=s,i.f=n;var m={name:"ru",weekdays:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),weekdaysShort:"вск_пнд_втр_срд_чтв_птн_сбт".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),months:d,monthsShort:i,weekStart:1,formats:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:o,mm:o,h:"час",hh:o,d:"день",dd:o,M:"месяц",MM:o,y:"год",yy:o},ordinal:function(_){return _}};return _.locale(m,null,!0),m});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    createCommonjsModule$1(function (module, exports) {
    !function(a,e){module.exports=e(dayjs_min);}(commonjsGlobal,function(a){a=a&&a.hasOwnProperty("default")?a.default:a;var e={name:"tr",weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekStart:1,formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(a){return a+"."}};return a.locale(e,null,!0),e});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    createCommonjsModule$1(function (module, exports) {
    !function(e,n){module.exports=n();}(commonjsGlobal,function(){return {name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")}});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var defaultNS = 'translation';
    var defaultLng = 'en';
    dayjs_min.extend(updateLocale);
    dayjs_min.updateLocale('de', {
        calendar: {
            lastDay: '[gestern um] LT',
            lastWeek: '[letzten] dddd [um] LT',
            nextDay: '[morgen um] LT',
            nextWeek: 'dddd [um] LT',
            sameDay: '[heute um] LT',
            sameElse: 'L',
        },
    });
    dayjs_min.updateLocale('es', {
        calendar: {
            lastDay: '[ayer a las] LT',
            lastWeek: '[pasado] dddd [a] LT',
            nextDay: '[mañana a] LT',
            nextWeek: 'dddd [a] LT',
            sameDay: '[hoy a las] LT',
            sameElse: 'L',
        },
    });
    dayjs_min.updateLocale('fr', {
        calendar: {
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            sameDay: '[Aujourd’hui à] LT',
            sameElse: 'L',
        },
    });
    dayjs_min.updateLocale('hi', {
        calendar: {
            lastDay: '[कल] LT',
            lastWeek: '[पिछले] dddd, LT',
            nextDay: '[कल] LT',
            nextWeek: 'dddd, LT',
            sameDay: '[आज] LT',
            sameElse: 'L',
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiem: function (hour) {
            if (hour < 4) {
                return 'रात';
            }
            else if (hour < 10) {
                return 'सुबह';
            }
            else if (hour < 17) {
                return 'दोपहर';
            }
            else if (hour < 20) {
                return 'शाम';
            }
            else {
                return 'रात';
            }
        },
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात') {
                return hour < 4 ? hour : hour + 12;
            }
            else if (meridiem === 'सुबह') {
                return hour;
            }
            else if (meridiem === 'दोपहर') {
                return hour >= 10 ? hour : hour + 12;
            }
            else if (meridiem === 'शाम') {
                return hour + 12;
            }
            return hour;
        },
        meridiemParse: /रात|सुबह|दोपहर|शाम/,
    });
    dayjs_min.updateLocale('it', {
        calendar: {
            lastDay: '[Ieri alle] LT',
            lastWeek: '[lo scorso] dddd [alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            sameDay: '[Oggi alle] LT',
            sameElse: 'L',
        },
    });
    dayjs_min.updateLocale('ja', {
        calendar: {
            lastDay: '[昨日] LT',
            lastWeek: 'dddd LT',
            nextDay: '[明日] LT',
            nextWeek: '[次の] dddd LT',
            sameDay: '[今日] LT',
            sameElse: 'L',
        },
    });
    dayjs_min.updateLocale('ko', {
        calendar: {
            lastDay: '[어제] LT',
            lastWeek: '[지난] dddd LT',
            nextDay: '[내일] LT',
            nextWeek: 'dddd LT',
            sameDay: '[오늘] LT',
            sameElse: 'L',
        },
    });
    dayjs_min.updateLocale('nl', {
        calendar: {
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            sameDay: '[vandaag om] LT',
            sameElse: 'L',
        },
    });
    dayjs_min.updateLocale('pt', {
        calendar: {
            lastDay: '[ontem às] LT',
            lastWeek: 'dddd [passada às] LT',
            nextDay: '[amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            sameDay: '[hoje às] LT',
            sameElse: 'L',
        },
    });
    dayjs_min.updateLocale('ru', {
        calendar: {
            lastDay: '[Вчера, в] LT',
            nextDay: '[Завтра, в] LT',
            sameDay: '[Сегодня, в] LT',
        },
    });
    dayjs_min.updateLocale('tr', {
        calendar: {
            lastDay: '[dün] LT',
            lastWeek: '[geçen] dddd [saat] LT',
            nextDay: '[yarın saat] LT',
            nextWeek: '[gelecek] dddd [saat] LT',
            sameDay: '[bugün saat] LT',
            sameElse: 'L',
        },
    });
    var en_locale = {
        formats: {},
        months: [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December',
        ],
        relativeTime: {},
        weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    };
    // Type guards to check DayJs
    var isDayJs = function (dateTimeParser) {
        return dateTimeParser.extend !== undefined;
    };
    /**
     * Wrapper around [i18next](https://www.i18next.com/) class for Stream related translations.
     * Instance of this class should be provided to Chat component to handle translations.
     * Stream provides following list of in-built translations:
     * 1. English (en)
     * 2. Dutch (nl)
     * 3. Russian (ru)
     * 4. Turkish (tr)
     * 5. French (fr)
     * 6. Italian (it)
     * 7. Hindi (hi)
     * 8. Spanish (es)
     * 9. Portuguese (pt)
     * 10. German (de)
     * 11. Japanese (ja)
     * 12. Korean (ko)
     *
     * Simplest way to start using chat components in one of the in-built languages would be following:
     *
     * ```
     * const i18n = new Streami18n({ language 'nl' });
     * <Chat client={chatClient} i18nInstance={i18n}>
     *  ...
     * </Chat>
     * ```
     *
     * If you would like to override certain keys in in-built translation.
     * UI will be automatically updated in this case.
     *
     * ```
     * const i18n = new Streami18n({
     *  language: 'nl',
     *  translationsForLanguage: {
     *    'Nothing yet...': 'Nog Niet ...',
     *    '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} en {{ secondUser }} zijn aan het typen...',
     *  }
     * });
     *
     * If you would like to register additional languages, use registerTranslation. You can add as many languages as you want:
     *
     * i18n.registerTranslation('zh', {
     *  'Nothing yet...': 'Nog Niet ...',
     *  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} en {{ secondUser }} zijn aan het typen...',
     * });
     *
     * <Chat client={chatClient} i18nInstance={i18n}>
     *  ...
     * </Chat>
     * ```
     *
     * You can use the same function to add whole new language as well.
     *
     * ```
     * const i18n = new Streami18n();
     *
     * i18n.registerTranslation('mr', {
     *  'Nothing yet...': 'काहीही नाही  ...',
     *  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत ',
     * });
     *
     * // Make sure to call setLanguage to reflect new language in UI.
     * i18n.setLanguage('it');
     * <Chat client={chatClient} i18nInstance={i18n}>
     *  ...
     * </Chat>
     * ```
     *
     * ## Datetime translations
     *
     * Stream react chat components uses [dayjs](https://day.js.org/en/) internally by default to format datetime stamp.
     * e.g., in ChannelPreview, MessageContent components.
     * Dayjs has locale support as well - https://day.js.org/docs/en/i18n/i18n
     * Dayjs is a lightweight alternative to Momentjs with the same modern API.
     *
     * Dayjs provides locale config for plenty of languages, you can check the whole list of locale configs at following url
     * https://github.com/iamkun/dayjs/tree/dev/src/locale
     *
     * You can either provide the dayjs locale config while registering
     * language with Streami18n (either via constructor or registerTranslation()) or you can provide your own Dayjs or Moment instance
     * to Streami18n constructor, which will be then used internally (using the language locale) in components.
     *
     * 1. Via language registration
     *
     * e.g.,
     * ```
     * const i18n = new Streami18n({
     *  language: 'nl',
     *  dayjsLocaleConfigForLanguage: {
     *    months: [...],
     *    monthsShort: [...],
     *    calendar: {
     *      sameDay: ...'
     *    }
     *  }
     * });
     * ```
     *
     * Similarly, you can add locale config for moment while registering translation via `registerTranslation` function.
     *
     * e.g.,
     * ```
     * const i18n = new Streami18n();
     *
     * i18n.registerTranslation(
     *  'mr',
     *  {
     *    'Nothing yet...': 'काहीही नाही  ...',
     *    '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत ',
     *  },
     *  {
     *    months: [...],
     *    monthsShort: [...],
     *    calendar: {
     *      sameDay: ...'
     *    }
     *  }
     * );
     *```
     * 2. Provide your own Moment object
     *
     * ```js
     * import 'moment/locale/nl';
     * import 'moment/locale/it';
     * // or if you want to include all locales
     * import 'moment/min/locales';
     *
     * import Moment from moment
     *
     * const i18n = new Streami18n({
     *  language: 'nl',
     *  DateTimeParser: Moment
     * })
     * ```
     *
     * 3. Provide your own Dayjs object
     *
     * ```js
     * import Dayjs from 'dayjs'
     *
     * import 'dayjs/locale/nl';
     * import 'dayjs/locale/it';
     * // or if you want to include all locales
     * import 'dayjs/min/locales';
     *
     * const i18n = new Streami18n({
     *  language: 'nl',
     *  DateTimeParser: Dayjs
     * })
     * ```
     * If you would like to stick with english language for datetimes in Stream components, you can set `disableDateTimeTranslations` to true.
     *
     */
    var defaultStreami18nOptions = {
        DateTimeParser: dayjs_min,
        dayjsLocaleConfigForLanguage: null,
        debug: false,
        disableDateTimeTranslations: false,
        language: 'en',
        logger: function (message) { return console.warn(message); },
    };
    var defaultTranslatorFunction = function (key) { return key; };
    var Streami18n = /** @class */ (function () {
        /**
         * Constructor accepts following options:
         *  - language (String) default: 'en'
         *    Language code e.g., en, tr
         *
         *  - translationsForLanguage (object)
         *    Translations object. Please check src/i18n/en.json for example.
         *
         *  - disableDateTimeTranslations (boolean) default: false
         *    Disable translations for date-times
         *
         *  - debug (boolean) default: false
         *    Enable debug mode in internal i18n class
         *
         *  - logger (function) default: () => {}
         *    Logger function to log warnings/errors from this class
         *
         *  - dayjsLocaleConfigForLanguage (object) default: 'enConfig'
         *    [Config object](https://momentjs.com/docs/#/i18n/changing-locale/) for internal moment object,
         *    corresponding to language (param)
         *
         *  - DateTimeParser (function) Moment or Dayjs instance/function.
         *    Make sure to load all the required locales in this Moment or Dayjs instance that you will be provide to Streami18n
         *
         * @param {*} options
         */
        function Streami18n(options) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            var _this = this;
            if (options === void 0) { options = {}; }
            this.i18nInstance = instance.createInstance();
            this.Dayjs = null;
            this.setLanguageCallback = function () { return null; };
            this.initialized = false;
            this.t = defaultTranslatorFunction;
            this.translations = {
                de: (_a = {}, _a[defaultNS] = deTranslations, _a),
                en: (_b = {}, _b[defaultNS] = enTranslations, _b),
                es: (_c = {}, _c[defaultNS] = esTranslations, _c),
                fr: (_d = {}, _d[defaultNS] = frTranslations, _d),
                hi: (_e = {}, _e[defaultNS] = hiTranslations, _e),
                it: (_f = {}, _f[defaultNS] = itTranslations, _f),
                ja: (_g = {}, _g[defaultNS] = jaTranslations, _g),
                ko: (_h = {}, _h[defaultNS] = koTranslations, _h),
                nl: (_j = {}, _j[defaultNS] = nlTranslations, _j),
                pt: (_k = {}, _k[defaultNS] = ptTranslations, _k),
                ru: (_l = {}, _l[defaultNS] = ruTranslations, _l),
                tr: (_m = {}, _m[defaultNS] = trTranslations, _m),
            };
            /**
             * dayjs.defineLanguage('nl') also changes the global locale. We don't want to do that
             * when user calls registerTranslation() function. So instead we will store the locale configs
             * given to registerTranslation() function in `dayjsLocales` object, and register the required locale
             * with moment, when setLanguage is called.
             * */
            this.dayjsLocales = {};
            this.localeExists = function (language) {
                if (_this.isCustomDateTimeParser)
                    return true;
                return Object.keys(dayjs_min.Ls).indexOf(language) > -1;
            };
            this.validateCurrentLanguage = function () {
                var availableLanguages = Object.keys(_this.translations);
                if (availableLanguages.indexOf(_this.currentLanguage) === -1) {
                    _this.logger("Streami18n: '" + _this.currentLanguage + "' language is not registered." +
                        (" Please make sure to call streami18n.registerTranslation('" + _this.currentLanguage + "', {...}) or ") +
                        ("use one the built-in supported languages - " + _this.getAvailableLanguages()));
                    _this.currentLanguage = defaultLng;
                }
            };
            /** Returns an instance of i18next used within this class instance */
            this.geti18Instance = function () { return _this.i18nInstance; };
            /** Returns list of available languages. */
            this.getAvailableLanguages = function () { return Object.keys(_this.translations); };
            /** Returns all the translation dictionary for all inbuilt-languages */
            this.getTranslations = function () { return _this.translations; };
            var finalOptions = __assign$2(__assign$2({}, defaultStreami18nOptions), options);
            // Prepare the i18next configuration.
            this.logger = finalOptions.logger;
            this.currentLanguage = finalOptions.language;
            this.DateTimeParser = finalOptions.DateTimeParser;
            try {
                if (this.DateTimeParser && isDayJs(this.DateTimeParser)) {
                    this.DateTimeParser.extend(localizedFormat);
                    this.DateTimeParser.extend(calendar);
                    this.DateTimeParser.extend(localeData);
                    this.DateTimeParser.extend(relativeTime);
                }
            }
            catch (error) {
                throw Error("Streami18n: Looks like you wanted to provide Dayjs instance, but something went wrong while adding plugins " + error);
            }
            this.isCustomDateTimeParser = !!options.DateTimeParser;
            var translationsForLanguage = finalOptions.translationsForLanguage;
            if (translationsForLanguage) {
                this.translations[this.currentLanguage] = (_o = {},
                    _o[defaultNS] = this.translations[this.currentLanguage] &&
                        this.translations[this.currentLanguage][defaultNS]
                        ? __assign$2(__assign$2({}, this.translations[this.currentLanguage][defaultNS]), translationsForLanguage) : translationsForLanguage,
                    _o);
            }
            // If translations don't exist for given language, then set it as empty object.
            if (!this.translations[this.currentLanguage]) {
                this.translations[this.currentLanguage] = (_p = {},
                    _p[defaultNS] = {},
                    _p);
            }
            this.i18nextConfig = {
                debug: finalOptions.debug,
                fallbackLng: false,
                interpolation: { escapeValue: false },
                keySeparator: false,
                lng: this.currentLanguage,
                nsSeparator: false,
                parseMissingKeyHandler: function (key) {
                    _this.logger("Streami18n: Missing translation for key: " + key);
                    return key;
                },
            };
            this.validateCurrentLanguage();
            var dayjsLocaleConfigForLanguage = finalOptions.dayjsLocaleConfigForLanguage;
            if (dayjsLocaleConfigForLanguage) {
                this.addOrUpdateLocale(this.currentLanguage, __assign$2({}, dayjsLocaleConfigForLanguage));
            }
            else if (!this.localeExists(this.currentLanguage)) {
                this.logger("Streami18n: Streami18n(...) - Locale config for " + this.currentLanguage + " does not exist in momentjs." +
                    ("Please import the locale file using \"import 'moment/locale/" + this.currentLanguage + "';\" in your app or ") +
                    "register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)");
            }
            this.tDateTimeParser = function (timestamp) {
                if (finalOptions.disableDateTimeTranslations || !_this.localeExists(_this.currentLanguage)) {
                    /**
                     * TS needs to know which is being called to accept the chain call
                     */
                    if (isDayJs(_this.DateTimeParser)) {
                        return _this.DateTimeParser(timestamp).locale(defaultLng);
                    }
                    return _this.DateTimeParser(timestamp).locale(defaultLng);
                }
                if (isDayJs(_this.DateTimeParser)) {
                    return _this.DateTimeParser(timestamp).locale(_this.currentLanguage);
                }
                return _this.DateTimeParser(timestamp).locale(_this.currentLanguage);
            };
        }
        /**
         * Initializes the i18next instance with configuration (which enables natural language as default keys)
         */
        Streami18n.prototype.init = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var _a, error_1;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.validateCurrentLanguage();
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            _a = this;
                            return [4 /*yield*/, this.i18nInstance.init(__assign$2(__assign$2({}, this.i18nextConfig), { lng: this.currentLanguage, resources: this.translations }))];
                        case 2:
                            _a.t = _b.sent();
                            this.initialized = true;
                            return [3 /*break*/, 4];
                        case 3:
                            error_1 = _b.sent();
                            this.logger("Something went wrong with init: " + JSON.stringify(error_1));
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, {
                                t: this.t,
                                tDateTimeParser: this.tDateTimeParser,
                            }];
                    }
                });
            });
        };
        /**
         * Returns current version translator function.
         */
        Streami18n.prototype.getTranslators = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.initialized) return [3 /*break*/, 2];
                            if (this.dayjsLocales[this.currentLanguage]) {
                                this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);
                            }
                            return [4 /*yield*/, this.init()];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2: return [2 /*return*/, {
                                t: this.t,
                                tDateTimeParser: this.tDateTimeParser,
                            }];
                    }
                });
            });
        };
        Streami18n.prototype.registerTranslation = function (language, translation, customDayjsLocale) {
            var _a;
            if (!translation) {
                this.logger("Streami18n: registerTranslation(language, translation, customDayjsLocale) called without translation");
                return;
            }
            if (!this.translations[language]) {
                this.translations[language] = (_a = {}, _a[defaultNS] = translation, _a);
            }
            else {
                this.translations[language][defaultNS] = translation;
            }
            if (customDayjsLocale) {
                this.dayjsLocales[language] = __assign$2({}, customDayjsLocale);
            }
            else if (!this.localeExists(language)) {
                this.logger("Streami18n: registerTranslation(language, translation, customDayjsLocale) - " +
                    ("Locale config for " + language + " does not exist in Dayjs.") +
                    ("Please import the locale file using \"import 'dayjs/locale/" + language + "';\" in your app or ") +
                    "register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)");
            }
            if (this.initialized) {
                this.i18nInstance.addResources(language, defaultNS, translation);
            }
        };
        Streami18n.prototype.addOrUpdateLocale = function (key, config) {
            if (this.localeExists(key)) {
                dayjs_min.updateLocale(key, __assign$2({}, config));
            }
            else {
                // Merging the custom locale config with en config, so missing keys can default to english.
                dayjs_min.locale(__assign$2(__assign$2({ name: key }, en_locale), config), undefined, true);
            }
        };
        Streami18n.prototype.setLanguage = function (language) {
            return __awaiter$1(this, void 0, void 0, function () {
                var t, error_2;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.currentLanguage = language;
                            if (!this.initialized)
                                return [2 /*return*/];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.i18nInstance.changeLanguage(language)];
                        case 2:
                            t = _a.sent();
                            if (this.dayjsLocales[language]) {
                                this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);
                            }
                            this.setLanguageCallback(t);
                            return [2 /*return*/, t];
                        case 3:
                            error_2 = _a.sent();
                            this.logger("Failed to set language: " + JSON.stringify(error_2));
                            return [2 /*return*/, this.t];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        Streami18n.prototype.registerSetLanguageCallback = function (callback) {
            this.setLanguageCallback = callback;
        };
        return Streami18n;
    }());

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};dayjs_min.extend(calendar);
    dayjs_min.extend(localizedFormat);
    var isLanguageSupported = function (language) {
        var translations = ['de', 'en', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'nl', 'pt', 'ru', 'tr'];
        return translations.some(function (translation) { return language === translation; });
    };
    var isDayOrMoment = function (output) { var _a; return !!((_a = output) === null || _a === void 0 ? void 0 : _a.isSame); };
    var isDate = function (output) { var _a; return !!((_a = output) === null || _a === void 0 ? void 0 : _a.getMonth); };
    var isNumberOrString = function (output) {
        return typeof output === 'string' || typeof output === 'number';
    };
    var defaultDateTimeParser = function (input) { return dayjs_min(input); };
    var TranslationContext = React__default['default'].createContext({
        t: defaultTranslatorFunction,
        tDateTimeParser: defaultDateTimeParser,
        userLanguage: 'en',
    });
    var TranslationProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default['default'].createElement(TranslationContext.Provider, { value: value }, children));
    };
    var useTranslationContext = function (componentName) {
        var contextValue = React.useContext(TranslationContext);
        if (!contextValue) {
            console.warn("The useTranslationContext hook was called outside of the TranslationContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the " + componentName + " component.");
            return {};
        }
        return contextValue;
    };
    var withTranslationContext = function (Component) {
        var WithTranslationContextComponent = function (props) {
            var translationContext = useTranslationContext();
            return React__default['default'].createElement(Component, __assign$2({}, props, translationContext));
        };
        WithTranslationContextComponent.displayName = "WithTranslationContext" + getDisplayName(Component);
        return WithTranslationContextComponent;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ChannelStateContext = React__default['default'].createContext(undefined);
    var ChannelStateProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default['default'].createElement(ChannelStateContext.Provider, { value: value }, children));
    };
    var useChannelStateContext = function (componentName) {
        var contextValue = React.useContext(ChannelStateContext);
        if (!contextValue) {
            console.warn("The useChannelStateContext hook was called outside of the ChannelStateContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the " + componentName + " component.");
            return {};
        }
        return contextValue;
    };
    /**
     * Typescript currently does not support partial inference, so if ChannelStateContext
     * typing is desired while using the HOC withChannelStateContext, the Props for the
     * wrapped component must be provided as the first generic.
     */
    var withChannelStateContext = function (Component) {
        var WithChannelStateContextComponent = function (props) {
            var channelStateContext = useChannelStateContext();
            return React__default['default'].createElement(Component, __assign$2({}, props, channelStateContext));
        };
        WithChannelStateContextComponent.displayName = (Component.displayName ||
            Component.name ||
            'Component').replace('Base', '');
        return WithChannelStateContextComponent;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedCard = function (props) {
        var giphy = props.giphy, image_url = props.image_url, og_scrape_url = props.og_scrape_url, text = props.text, thumb_url = props.thumb_url, title = props.title, title_link = props.title_link, type = props.type;
        var t = useTranslationContext('Card').t;
        var giphyVersionName = useChannelStateContext('Card').giphyVersion;
        var image = thumb_url || image_url;
        var dimensions = {};
        if (type === 'giphy' && typeof giphy !== 'undefined') {
            var giphyVersion = giphy[giphyVersionName];
            image = giphyVersion.url;
            dimensions.height = giphyVersion.height;
            dimensions.width = giphyVersion.width;
        }
        var trimUrl = function (url) {
            if (url !== undefined && url !== null) {
                var trimmedUrl = url.replace(/^(?:https?:\/\/)?(?:www\.)?/i, '').split('/')[0];
                return trimmedUrl;
            }
            return null;
        };
        if (!title && !title_link && !image) {
            return (React__default['default'].createElement("div", { className: "str-chat__message-attachment-card str-chat__message-attachment-card--" + type },
                React__default['default'].createElement("div", { className: 'str-chat__message-attachment-card--content' },
                    React__default['default'].createElement("div", { className: 'str-chat__message-attachment-card--text' }, t('this content could not be displayed')))));
        }
        if (!title_link && !og_scrape_url) {
            return null;
        }
        return (React__default['default'].createElement("div", { className: "str-chat__message-attachment-card str-chat__message-attachment-card--" + type },
            image && (React__default['default'].createElement("div", { className: 'str-chat__message-attachment-card--header' },
                React__default['default'].createElement("img", __assign$2({ alt: image, src: image }, dimensions)))),
            React__default['default'].createElement("div", { className: 'str-chat__message-attachment-card--content' },
                React__default['default'].createElement("div", { className: 'str-chat__message-attachment-card--flex' },
                    title && React__default['default'].createElement("div", { className: 'str-chat__message-attachment-card--title' }, title),
                    text && React__default['default'].createElement("div", { className: 'str-chat__message-attachment-card--text' }, text),
                    (title_link || og_scrape_url) && (React__default['default'].createElement(SafeAnchor, { className: 'str-chat__message-attachment-card--url', href: title_link || og_scrape_url, rel: 'noopener noreferrer', target: '_blank' }, trimUrl(title_link || og_scrape_url)))))));
    };
    /**
     * Simple Card Layout for displaying links
     */
    var Card$1 = React__default['default'].memo(UnMemoizedCard);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const BYTE_UNITS = [
    	'B',
    	'kB',
    	'MB',
    	'GB',
    	'TB',
    	'PB',
    	'EB',
    	'ZB',
    	'YB'
    ];

    const BIBYTE_UNITS = [
    	'B',
    	'kiB',
    	'MiB',
    	'GiB',
    	'TiB',
    	'PiB',
    	'EiB',
    	'ZiB',
    	'YiB'
    ];

    const BIT_UNITS = [
    	'b',
    	'kbit',
    	'Mbit',
    	'Gbit',
    	'Tbit',
    	'Pbit',
    	'Ebit',
    	'Zbit',
    	'Ybit'
    ];

    const BIBIT_UNITS = [
    	'b',
    	'kibit',
    	'Mibit',
    	'Gibit',
    	'Tibit',
    	'Pibit',
    	'Eibit',
    	'Zibit',
    	'Yibit'
    ];

    /*
    Formats the given number using `Number#toLocaleString`.
    - If locale is a string, the value is expected to be a locale-key (for example: `de`).
    - If locale is true, the system default locale is used for translation.
    - If no value for locale is specified, the number is returned unmodified.
    */
    const toLocaleString = (number, locale, options) => {
    	let result = number;
    	if (typeof locale === 'string' || Array.isArray(locale)) {
    		result = number.toLocaleString(locale, options);
    	} else if (locale === true || options !== undefined) {
    		result = number.toLocaleString(undefined, options);
    	}

    	return result;
    };

    var prettyBytes = (number, options) => {
    	if (!Number.isFinite(number)) {
    		throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);
    	}

    	options = Object.assign({bits: false, binary: false}, options);

    	const UNITS = options.bits ?
    		(options.binary ? BIBIT_UNITS : BIT_UNITS) :
    		(options.binary ? BIBYTE_UNITS : BYTE_UNITS);

    	if (options.signed && number === 0) {
    		return ` 0 ${UNITS[0]}`;
    	}

    	const isNegative = number < 0;
    	const prefix = isNegative ? '-' : (options.signed ? '+' : '');

    	if (isNegative) {
    		number = -number;
    	}

    	let localeOptions;

    	if (options.minimumFractionDigits !== undefined) {
    		localeOptions = {minimumFractionDigits: options.minimumFractionDigits};
    	}

    	if (options.maximumFractionDigits !== undefined) {
    		localeOptions = Object.assign({maximumFractionDigits: options.maximumFractionDigits}, localeOptions);
    	}

    	if (number < 1) {
    		const numberString = toLocaleString(number, options.locale, localeOptions);
    		return prefix + numberString + ' ' + UNITS[0];
    	}

    	const exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1);
    	// eslint-disable-next-line unicorn/prefer-exponentiation-operator
    	number /= Math.pow(options.binary ? 1024 : 1000, exponent);

    	if (!localeOptions) {
    		number = number.toPrecision(3);
    	}

    	const numberString = toLocaleString(Number(number), options.locale, localeOptions);

    	const unit = UNITS[exponent];

    	return prefix + numberString + ' ' + unit;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * An icon of a paperclip, which is used as the default icon for FileUploadButton
     */
    var AttachmentIcon = function () { return (React__default['default'].createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "20", viewBox: "0 0 24 24" },
        React__default['default'].createElement("path", { d: "M16.5 6v11.5c0 2.21-1.79 4-4 4s-4-1.79-4-4V5a2.5 2.5 0 0 1 5 0v10.5c0 .55-.45 1-1 1s-1-.45-1-1V6H10v9.5a2.5 2.5 0 0 0 5 0V5c0-2.21-1.79-4-4-4S7 2.79 7 5v12.5c0 3.04 2.46 5.5 5.5 5.5s5.5-2.46 5.5-5.5V6h-1.5z" }),
        React__default['default'].createElement("path", { d: "M0 0h24v24H0z", fill: "none" }))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var wordMimeTypes = [
        // Microsoft Word
        // .doc .dot
        'application/msword',
        // .doc .dot
        'application/msword-template',
        // .docx
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        // .dotx (no test)
        'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
        // .docm
        'application/vnd.ms-word.document.macroEnabled.12',
        // .dotm (no test)
        'application/vnd.ms-word.template.macroEnabled.12',
        // LibreOffice/OpenOffice Writer
        // .odt
        'application/vnd.oasis.opendocument.text',
        // .ott
        'application/vnd.oasis.opendocument.text-template',
        // .fodt
        'application/vnd.oasis.opendocument.text-flat-xml',
        // .uot
        // NOTE: firefox doesn't know mimetype so maybe ignore
    ];
    var excelMimeTypes = [
        // .csv
        'text/csv',
        // TODO: maybe more data files
        // Microsoft Excel
        // .xls .xlt .xla (no test for .xla)
        'application/vnd.ms-excel',
        // .xlsx
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        // .xltx (no test)
        'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
        // .xlsm
        'application/vnd.ms-excel.sheet.macroEnabled.12',
        // .xltm (no test)
        'application/vnd.ms-excel.template.macroEnabled.12',
        // .xlam (no test)
        'application/vnd.ms-excel.addin.macroEnabled.12',
        // .xlsb (no test)
        'application/vnd.ms-excel.addin.macroEnabled.12',
        // LibreOffice/OpenOffice Calc
        // .ods
        'application/vnd.oasis.opendocument.spreadsheet',
        // .ots
        'application/vnd.oasis.opendocument.spreadsheet-template',
        // .fods
        'application/vnd.oasis.opendocument.spreadsheet-flat-xml',
        // .uos
        // NOTE: firefox doesn't know mimetype so maybe ignore
    ];
    var powerpointMimeTypes = [
        // Microsoft Word
        // .ppt .pot .pps .ppa (no test for .ppa)
        'application/vnd.ms-powerpoint',
        // .pptx
        'application/vnd.openxmlformats-officedocument.presentationml.presentation',
        // .potx (no test)
        'application/vnd.openxmlformats-officedocument.presentationml.template',
        // .ppsx
        'application/vnd.openxmlformats-officedocument.presentationml.slideshow',
        // .ppam
        'application/vnd.ms-powerpoint.addin.macroEnabled.12',
        // .pptm
        'application/vnd.ms-powerpoint.presentation.macroEnabled.12',
        // .potm
        'application/vnd.ms-powerpoint.template.macroEnabled.12',
        // .ppsm
        'application/vnd.ms-powerpoint.slideshow.macroEnabled.12',
        // LibreOffice/OpenOffice Writer
        // .odp
        'application/vnd.oasis.opendocument.presentation',
        // .otp
        'application/vnd.oasis.opendocument.presentation-template',
        // .fodp
        'application/vnd.oasis.opendocument.presentation-flat-xml',
        // .uop
        // NOTE: firefox doesn't know mimetype so maybe ignore
    ];
    var archiveFileTypes = [
        // .zip
        'application/zip',
        // .z7
        'application/x-7z-compressed',
        // .ar
        'application/x-archive',
        // .tar
        'application/x-tar',
        // .tar.gz
        'application/gzip',
        // .tar.Z
        'application/x-compress',
        // .tar.bz2
        'application/x-bzip',
        // .tar.lz
        'application/x-lzip',
        // .tar.lz4
        'application/x-lz4',
        // .tar.lzma
        'application/x-lzma',
        // .tar.lzo (no test)
        'application/x-lzop',
        // .tar.xz
        'application/x-xz',
        // .war
        'application/x-webarchive',
        // .rar
        'application/vnd.rar',
    ];
    var codeFileTypes = [
        // .html .htm
        'text/html',
        // .css
        'text/css',
        // .js
        'application/x-javascript',
        // .json
        'application/json',
        // .py
        'text/x-python',
        // .go
        'text/x-go',
        // .c
        'text/x-csrc',
        // .cpp
        'text/x-c++src',
        // .rb
        'application/x-ruby',
        // .rust
        'text/rust',
        // .java
        'text/x-java',
        // .php
        'application/x-php',
        // .cs
        'text/x-csharp',
        // .scala
        'text/x-scala',
        // .erl
        'text/x-erlang',
        // .sh
        'application/x-shellscript',
    ];

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Font Awesome Free 5.15.3 by @fontawesome - https://fontawesome.com
     * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
     */
    var DEFAULT_SIZE = 20;
    var FilePdfIcon = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b;
        return (React__default['default'].createElement("svg", { className: "rfu-file-icon--small fa-file-pdf", height: size, width: size, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 384 512" },
            React__default['default'].createElement("path", { d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm250.2-143.7c-12.2-12-47-8.7-64.4-6.5-17.2-10.5-28.7-25-36.8-46.3 3.9-16.1 10.1-40.6 5.4-56-4.2-26.2-37.8-23.6-42.6-5.9-4.4 16.1-.4 38.5 7 67.1-10 23.9-24.9 56-35.4 74.4-20 10.3-47 26.2-51 46.2-3.3 15.8 26 55.2 76.1-31.2 22.4-7.4 46.8-16.5 68.4-20.1 18.9 10.2 41 17 55.8 17 25.5 0 28-28.2 17.5-38.7zm-198.1 77.8c5.1-13.7 24.5-29.5 30.4-35-19 30.3-30.4 35.7-30.4 35zm81.6-190.6c7.4 0 6.7 32.1 1.8 40.8-4.4-13.9-4.3-40.8-1.8-40.8zm-24.4 136.6c9.7-16.9 18-37 24.7-54.7 8.3 15.1 18.9 27.2 30.1 35.5-20.8 4.3-38.9 13.1-54.8 19.2zm131.6-5s-5 6-37.3-7.8c35.1-2.6 40.9 5.4 37.3 7.8z", fill: "#f82903" })));
    };
    var FileWordIcon = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b;
        return (React__default['default'].createElement("svg", { className: "rfu-file-icon--small fa-file-word", height: size, width: size, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 384 512" },
            React__default['default'].createElement("path", { d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm220.1-208c-5.7 0-10.6 4-11.7 9.5-20.6 97.7-20.4 95.4-21 103.5-.2-1.2-.4-2.6-.7-4.3-.8-5.1.3.2-23.6-99.5-1.3-5.4-6.1-9.2-11.7-9.2h-13.3c-5.5 0-10.3 3.8-11.7 9.1-24.4 99-24 96.2-24.8 103.7-.1-1.1-.2-2.5-.5-4.2-.7-5.2-14.1-73.3-19.1-99-1.1-5.6-6-9.7-11.8-9.7h-16.8c-7.8 0-13.5 7.3-11.7 14.8 8 32.6 26.7 109.5 33.2 136 1.3 5.4 6.1 9.1 11.7 9.1h25.2c5.5 0 10.3-3.7 11.6-9.1l17.9-71.4c1.5-6.2 2.5-12 3-17.3l2.9 17.3c.1.4 12.6 50.5 17.9 71.4 1.3 5.3 6.1 9.1 11.6 9.1h24.7c5.5 0 10.3-3.7 11.6-9.1 20.8-81.9 30.2-119 34.5-136 1.9-7.6-3.8-14.9-11.6-14.9h-15.8z", fill: "#2c599d" })));
    };
    var FilePowerPointIcon = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b;
        return (React__default['default'].createElement("svg", { className: "rfu-file-icon--small fa-file-powerpoint", height: size, width: size, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 384 512" },
            React__default['default'].createElement("path", { d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm72-60V236c0-6.6 5.4-12 12-12h69.2c36.7 0 62.8 27 62.8 66.3 0 74.3-68.7 66.5-95.5 66.5V404c0 6.6-5.4 12-12 12H132c-6.6 0-12-5.4-12-12zm48.5-87.4h23c7.9 0 13.9-2.4 18.1-7.2 8.5-9.8 8.4-28.5.1-37.8-4.1-4.6-9.9-7-17.4-7h-23.9v52z", fill: "#cb4a32" })));
    };
    var FileExcelIcon = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b;
        return (React__default['default'].createElement("svg", { className: "rfu-file-icon--small fa-file-excel", height: size, width: size, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 384 512" },
            React__default['default'].createElement("path", { d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm212-240h-28.8c-4.4 0-8.4 2.4-10.5 6.3-18 33.1-22.2 42.4-28.6 57.7-13.9-29.1-6.9-17.3-28.6-57.7-2.1-3.9-6.2-6.3-10.6-6.3H124c-9.3 0-15 10-10.4 18l46.3 78-46.3 78c-4.7 8 1.1 18 10.4 18h28.9c4.4 0 8.4-2.4 10.5-6.3 21.7-40 23-45 28.6-57.7 14.9 30.2 5.9 15.9 28.6 57.7 2.1 3.9 6.2 6.3 10.6 6.3H260c9.3 0 15-10 10.4-18L224 320c.7-1.1 30.3-50.5 46.3-78 4.7-8-1.1-18-10.3-18z", fill: "#207245" })));
    };
    var FileArchiveIcon = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b;
        return (React__default['default'].createElement("svg", { className: "rfu-file-icon--small fa-file-archive", height: size, width: size, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 384 512" },
            React__default['default'].createElement("path", { d: "M128.3 160v32h32v-32zm64-96h-32v32h32zm-64 32v32h32V96zm64 32h-32v32h32zm177.6-30.1L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM256 51.9l76.1 76.1H256zM336 464H48V48h79.7v16h32V48H208v104c0 13.3 10.7 24 24 24h104zM194.2 265.7c-1.1-5.6-6-9.7-11.8-9.7h-22.1v-32h-32v32l-19.7 97.1C102 385.6 126.8 416 160 416c33.1 0 57.9-30.2 51.5-62.6zm-33.9 124.4c-17.9 0-32.4-12.1-32.4-27s14.5-27 32.4-27 32.4 12.1 32.4 27-14.5 27-32.4 27zm32-198.1h-32v32h32z", fill: "#414D54" })));
    };
    var FileCodeIcon = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b;
        return (React__default['default'].createElement("svg", { className: "rfu-file-icon--small fa-file-code", height: size, width: size, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 384 512" },
            React__default['default'].createElement("path", { d: "M149.9 349.1l-.2-.2-32.8-28.9 32.8-28.9c3.6-3.2 4-8.8.8-12.4l-.2-.2-17.4-18.6c-3.4-3.6-9-3.7-12.4-.4l-57.7 54.1c-3.7 3.5-3.7 9.4 0 12.8l57.7 54.1c1.6 1.5 3.8 2.4 6 2.4 2.4 0 4.8-1 6.4-2.8l17.4-18.6c3.3-3.5 3.1-9.1-.4-12.4zm220-251.2L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM256 51.9l76.1 76.1H256zM336 464H48V48h160v104c0 13.3 10.7 24 24 24h104zM209.6 214c-4.7-1.4-9.5 1.3-10.9 6L144 408.1c-1.4 4.7 1.3 9.6 6 10.9l24.4 7.1c4.7 1.4 9.6-1.4 10.9-6L240 231.9c1.4-4.7-1.3-9.6-6-10.9zm24.5 76.9l.2.2 32.8 28.9-32.8 28.9c-3.6 3.2-4 8.8-.8 12.4l.2.2 17.4 18.6c3.3 3.5 8.9 3.7 12.4.4l57.7-54.1c3.7-3.5 3.7-9.4 0-12.8l-57.7-54.1c-3.5-3.3-9.1-3.2-12.4.4l-17.4 18.6c-3.3 3.5-3.1 9.1.4 12.4z", fill: "#414D54" })));
    };
    var FileAudioIcon = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b;
        return (React__default['default'].createElement("svg", { className: "rfu-file-icon--small fa-file-audio", height: size, width: size, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 384 512" },
            React__default['default'].createElement("path", { d: "M369.941 97.941l-83.882-83.882A48 48 0 0 0 252.118 0H48C21.49 0 0 21.49 0 48v416c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48V131.882a48 48 0 0 0-14.059-33.941zM332.118 128H256V51.882L332.118 128zM48 464V48h160v104c0 13.255 10.745 24 24 24h104v288H48zm144-76.024c0 10.691-12.926 16.045-20.485 8.485L136 360.486h-28c-6.627 0-12-5.373-12-12v-56c0-6.627 5.373-12 12-12h28l35.515-36.947c7.56-7.56 20.485-2.206 20.485 8.485v135.952zm41.201-47.13c9.051-9.297 9.06-24.133.001-33.439-22.149-22.752 12.235-56.246 34.395-33.481 27.198 27.94 27.212 72.444.001 100.401-21.793 22.386-56.947-10.315-34.397-33.481z", fill: "#414D54" })));
    };
    var FileVideoIcon = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b;
        return (React__default['default'].createElement("svg", { className: "rfu-file-icon--small fa-file-video", height: size, width: size, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 384 512" },
            React__default['default'].createElement("path", { d: "M369.941 97.941l-83.882-83.882A48 48 0 0 0 252.118 0H48C21.49 0 0 21.49 0 48v416c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48V131.882a48 48 0 0 0-14.059-33.941zM332.118 128H256V51.882L332.118 128zM48 464V48h160v104c0 13.255 10.745 24 24 24h104v288H48zm228.687-211.303L224 305.374V268c0-11.046-8.954-20-20-20H100c-11.046 0-20 8.954-20 20v104c0 11.046 8.954 20 20 20h104c11.046 0 20-8.954 20-20v-37.374l52.687 52.674C286.704 397.318 304 390.28 304 375.986V264.011c0-14.311-17.309-21.319-27.313-11.314z", fill: "#414D54" })));
    };
    var FileImageIcon = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b;
        return (React__default['default'].createElement("svg", { className: "rfu-file-icon--small fa-file-image", height: size, width: size, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 384 512" },
            React__default['default'].createElement("path", { d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm32-48h224V288l-23.5-23.5c-4.7-4.7-12.3-4.7-17 0L176 352l-39.5-39.5c-4.7-4.7-12.3-4.7-17 0L80 352v64zm48-240c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z", fill: "#414D54" })));
    };
    var FileAltIcon = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b;
        return (React__default['default'].createElement("svg", { className: "rfu-file-icon--small fa-file-alt", height: size, width: size, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 384 512" },
            React__default['default'].createElement("path", { d: "M288 248v28c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-28c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12zm-12 72H108c-6.6 0-12 5.4-12 12v28c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-28c0-6.6-5.4-12-12-12zm108-188.1V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V48C0 21.5 21.5 0 48 0h204.1C264.8 0 277 5.1 286 14.1L369.9 98c9 8.9 14.1 21.2 14.1 33.9zm-128-80V128h76.1L256 51.9zM336 464V176H232c-13.3 0-24-10.7-24-24V48H48v416h288z", fill: "#414D54" })));
    };
    var FileFallbackIcon = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE : _b;
        return (React__default['default'].createElement("svg", { className: "rfu-file-icon--small fa-file-fallback", height: size, width: size, xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 384 512" },
            React__default['default'].createElement("path", { d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48z", fill: "#414D54" })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// Partially based on: https://stackoverflow.com/a/4212908/2570866
    var mimeTypeToIconMap = {
        'application/pdf': FilePdfIcon,
    };
    for (var _i = 0, wordMimeTypes_1 = wordMimeTypes; _i < wordMimeTypes_1.length; _i++) {
        var type$3 = wordMimeTypes_1[_i];
        mimeTypeToIconMap[type$3] = FileWordIcon;
    }
    for (var _a = 0, excelMimeTypes_1 = excelMimeTypes; _a < excelMimeTypes_1.length; _a++) {
        var type$3 = excelMimeTypes_1[_a];
        mimeTypeToIconMap[type$3] = FileExcelIcon;
    }
    for (var _b = 0, powerpointMimeTypes_1 = powerpointMimeTypes; _b < powerpointMimeTypes_1.length; _b++) {
        var type$3 = powerpointMimeTypes_1[_b];
        mimeTypeToIconMap[type$3] = FilePowerPointIcon;
    }
    for (var _c = 0, archiveFileTypes_1 = archiveFileTypes; _c < archiveFileTypes_1.length; _c++) {
        var type$3 = archiveFileTypes_1[_c];
        mimeTypeToIconMap[type$3] = FileArchiveIcon;
    }
    for (var _d = 0, codeFileTypes_1 = codeFileTypes; _d < codeFileTypes_1.length; _d++) {
        var type$3 = codeFileTypes_1[_d];
        mimeTypeToIconMap[type$3] = FileCodeIcon;
    }
    function mimeTypeToIcon(mimeType) {
        if (mimeType == null)
            return FileFallbackIcon;
        var icon = mimeTypeToIconMap[mimeType];
        if (icon)
            return icon;
        if (mimeType.startsWith('audio/'))
            return FileAudioIcon;
        if (mimeType.startsWith('video/'))
            return FileVideoIcon;
        if (mimeType.startsWith('image/'))
            return FileImageIcon;
        if (mimeType.startsWith('text/'))
            return FileAltIcon;
        return FileFallbackIcon;
    }
    var FileIcon = function (props) {
        var _a = props.big, big = _a === void 0 ? false : _a, mimeType = props.mimeType, _b = props.size, size = _b === void 0 ? 50 : _b, _c = props.sizeSmall, sizeSmall = _c === void 0 ? 20 : _c;
        var Icon = mimeTypeToIcon(mimeType);
        return React__default['default'].createElement(Icon, { size: big ? size : sizeSmall });
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var LoadingIndicator$1 = function (_a) {
        var _b = _a.size, size = _b === void 0 ? 20 : _b, _c = _a.width, width = _c === void 0 ? 2 : _c, backgroundColor = _a.backgroundColor, color = _a.color;
        return (React__default['default'].createElement("div", { className: "rfu-loading-indicator__spinner", style: {
                margin: '0 auto',
                borderColor: backgroundColor ? backgroundColor : '',
                borderTopColor: color ? color : '',
                width: size ? size : '',
                height: size ? size : '',
                borderWidth: width ? width : '',
            } }));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Component that displays files which are being uploaded
     */
    var FilePreviewer = function (_a) {
        var uploads = _a.uploads, handleRemove = _a.handleRemove, handleRetry = _a.handleRetry;
        return (React__default['default'].createElement("div", { className: "rfu-file-previewer" },
            React__default['default'].createElement("ol", null, uploads === null || uploads === void 0 ? void 0 : uploads.map(function (upload) { return (React__default['default'].createElement("li", { key: upload.id, className: "rfu-file-previewer__file " + (upload.state === 'uploading'
                    ? 'rfu-file-previewer__file--uploading'
                    : '') + " " + (upload.state === 'failed' ? 'rfu-file-previewer__file--failed' : '') },
                React__default['default'].createElement(FileIcon, { mimeType: upload.file.type, filename: upload.file.name }),
                React__default['default'].createElement("a", { href: upload.url, download: true },
                    upload.file.name,
                    upload.state === 'failed' && (React__default['default'].createElement(React__default['default'].Fragment, null,
                        React__default['default'].createElement("div", { className: "rfu-file-previewer__failed", onClick: function () { return handleRetry === null || handleRetry === void 0 ? void 0 : handleRetry(upload.id); } }, "failed"),
                        React__default['default'].createElement("div", { className: "rfu-file-previewer__retry", onClick: function () { return handleRetry === null || handleRetry === void 0 ? void 0 : handleRetry(upload.id); } }, "retry")))),
                React__default['default'].createElement("span", { className: "rfu-file-previewer__close-button", onClick: handleRemove && (function () { return handleRemove(upload.id); }) }, "\u2718"),
                upload.state === 'uploading' && (React__default['default'].createElement("div", { className: "rfu-file-previewer__loading-indicator" },
                    React__default['default'].createElement(LoadingIndicator$1, null))))); }))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    function dataTransferItemsHaveFiles(items) {
        if (!items || !items.length) {
            return false;
        }
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            if (item.kind === 'file' || item.type === 'text/html') {
                return true;
            }
        }
        return false;
    }
    function getFileLikes(items) {
        var fileLikes = [];
        for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
            var item = items_2[_i];
            if (item.kind === 'file') {
                var file = item.getAsFile();
                if (file) {
                    fileLikes.push(file);
                }
            }
        }
        return fileLikes;
    }
    function getImageSource(fileLikes, src) {
        return __awaiter(this, void 0, void 0, function () {
            var res, contentType, buf, blob;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, fetch(src)];
                    case 1:
                        res = _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                    case 3:
                        contentType = res.headers.get('Content-type') || 'application/octet-stream';
                        return [4 /*yield*/, res.arrayBuffer()];
                    case 4:
                        buf = _a.sent();
                        blob = new Blob([buf], { type: contentType });
                        fileLikes.push(blob);
                        return [2 /*return*/];
                }
            });
        });
    }
    var extractImageSources = function (s) {
        var imageTags = new DOMParser()
            .parseFromString(s, 'text/html')
            .getElementsByTagName('img');
        return Array.from(imageTags, function (tag) { return tag.src; }).filter(function (tag) { return tag; });
    };
    function dataTransferItemsToFiles(items) {
        return __awaiter(this, void 0, void 0, function () {
            var fileLikes, blobPromises, _loop_1, _i, items_3, item;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!items || !items.length) {
                            return [2 /*return*/, []];
                        }
                        fileLikes = getFileLikes(items);
                        if (fileLikes.length) {
                            return [2 /*return*/, fileLikes];
                        }
                        blobPromises = [];
                        _loop_1 = function (item) {
                            if (item.type === 'text/html') {
                                blobPromises.push(new Promise(function (accept) {
                                    item.getAsString(function (s) { return __awaiter(_this, void 0, void 0, function () {
                                        var imagePromises;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    imagePromises = extractImageSources(s).map(function (src) {
                                                        return getImageSource(fileLikes, src);
                                                    });
                                                    return [4 /*yield*/, Promise.all(imagePromises)];
                                                case 1:
                                                    _a.sent();
                                                    accept();
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); });
                                }));
                            }
                        };
                        for (_i = 0, items_3 = items; _i < items_3.length; _i++) {
                            item = items_3[_i];
                            _loop_1(item);
                        }
                        return [4 /*yield*/, Promise.all(blobPromises)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, fileLikes];
                }
            });
        });
    }
    var useHandleFileChangeWrapper = function (resetOnChange, handler) {
        if (resetOnChange === void 0) { resetOnChange = false; }
        return function (_a) {
            var currentTarget = _a.currentTarget;
            var files = currentTarget.files;
            if (!files)
                return;
            try {
                handler === null || handler === void 0 ? void 0 : handler(Array.from(files));
            }
            catch (error) {
                console.error(error);
            }
            if (resetOnChange)
                currentTarget.value = '';
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var FileUploadButton = function (_a) {
        var _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.multiple, multiple = _c === void 0 ? false : _c, _d = _a.children, children = _d === void 0 ? React__default['default'].createElement(AttachmentIcon, null) : _d, handleFiles = _a.handleFiles, accepts = _a.accepts, _e = _a.resetOnChange, resetOnChange = _e === void 0 ? true : _e;
        var className = 'rfu-file-upload-button';
        if (disabled) {
            className = className + " rfu-file-upload-button--disabled";
        }
        var onFileChange = useHandleFileChangeWrapper(resetOnChange, handleFiles);
        return (React__default['default'].createElement("div", { className: className },
            React__default['default'].createElement("label", null,
                React__default['default'].createElement("input", { "aria-label": "File input", type: "file", className: "rfu-file-input", onChange: onFileChange, multiple: multiple, disabled: disabled, accept: Array.isArray(accepts) ? accepts.join(',') : accepts }),
                children)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * This is simply a button wrapper, adds a div with `role="button"` and a onClick
     */
    var IconButton = function (_a) {
        var onClick = _a.onClick, children = _a.children;
        return (React__default['default'].createElement("button", { type: "button", "data-testid": "cancel-upload-button", "aria-label": "Cancel upload", className: "rfu-icon-button", onClick: onClick }, children));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

    var ReactPropTypesSecret_1 = ReactPropTypesSecret;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    function emptyFunction() {}
    function emptyFunctionWithReset() {}
    emptyFunctionWithReset.resetWarningCache = emptyFunction;

    var factoryWithThrowingShims = function() {
      function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret_1) {
          // It is still safe when called from React.
          return;
        }
        var err = new Error(
          'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
          'Use PropTypes.checkPropTypes() to call them. ' +
          'Read more at http://fb.me/use-check-prop-types'
        );
        err.name = 'Invariant Violation';
        throw err;
      }  shim.isRequired = shim;
      function getShim() {
        return shim;
      }  // Important!
      // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
      var ReactPropTypes = {
        array: shim,
        bigint: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,

        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,

        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
      };

      ReactPropTypes.PropTypes = ReactPropTypes;

      return ReactPropTypes;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var propTypes = createCommonjsModule$1(function (module) {
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    {
      // By explicitly using `prop-types` you are opting into new production behavior.
      // http://fb.me/prop-types-in-prod
      module.exports = factoryWithThrowingShims();
    }
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var COMMON_MIME_TYPES = new Map([
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
        ['aac', 'audio/aac'],
        ['abw', 'application/x-abiword'],
        ['arc', 'application/x-freearc'],
        ['avif', 'image/avif'],
        ['avi', 'video/x-msvideo'],
        ['azw', 'application/vnd.amazon.ebook'],
        ['bin', 'application/octet-stream'],
        ['bmp', 'image/bmp'],
        ['bz', 'application/x-bzip'],
        ['bz2', 'application/x-bzip2'],
        ['cda', 'application/x-cdf'],
        ['csh', 'application/x-csh'],
        ['css', 'text/css'],
        ['csv', 'text/csv'],
        ['doc', 'application/msword'],
        ['docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],
        ['eot', 'application/vnd.ms-fontobject'],
        ['epub', 'application/epub+zip'],
        ['gz', 'application/gzip'],
        ['gif', 'image/gif'],
        ['heic', 'image/heic'],
        ['heif', 'image/heif'],
        ['htm', 'text/html'],
        ['html', 'text/html'],
        ['ico', 'image/vnd.microsoft.icon'],
        ['ics', 'text/calendar'],
        ['jar', 'application/java-archive'],
        ['jpeg', 'image/jpeg'],
        ['jpg', 'image/jpeg'],
        ['js', 'text/javascript'],
        ['json', 'application/json'],
        ['jsonld', 'application/ld+json'],
        ['mid', 'audio/midi'],
        ['midi', 'audio/midi'],
        ['mjs', 'text/javascript'],
        ['mp3', 'audio/mpeg'],
        ['mp4', 'video/mp4'],
        ['mpeg', 'video/mpeg'],
        ['mpkg', 'application/vnd.apple.installer+xml'],
        ['odp', 'application/vnd.oasis.opendocument.presentation'],
        ['ods', 'application/vnd.oasis.opendocument.spreadsheet'],
        ['odt', 'application/vnd.oasis.opendocument.text'],
        ['oga', 'audio/ogg'],
        ['ogv', 'video/ogg'],
        ['ogx', 'application/ogg'],
        ['opus', 'audio/opus'],
        ['otf', 'font/otf'],
        ['png', 'image/png'],
        ['pdf', 'application/pdf'],
        ['php', 'application/x-httpd-php'],
        ['ppt', 'application/vnd.ms-powerpoint'],
        ['pptx', 'application/vnd.openxmlformats-officedocument.presentationml.presentation'],
        ['rar', 'application/vnd.rar'],
        ['rtf', 'application/rtf'],
        ['sh', 'application/x-sh'],
        ['svg', 'image/svg+xml'],
        ['swf', 'application/x-shockwave-flash'],
        ['tar', 'application/x-tar'],
        ['tif', 'image/tiff'],
        ['tiff', 'image/tiff'],
        ['ts', 'video/mp2t'],
        ['ttf', 'font/ttf'],
        ['txt', 'text/plain'],
        ['vsd', 'application/vnd.visio'],
        ['wav', 'audio/wav'],
        ['weba', 'audio/webm'],
        ['webm', 'video/webm'],
        ['webp', 'image/webp'],
        ['woff', 'font/woff'],
        ['woff2', 'font/woff2'],
        ['xhtml', 'application/xhtml+xml'],
        ['xls', 'application/vnd.ms-excel'],
        ['xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],
        ['xml', 'application/xml'],
        ['xul', 'application/vnd.mozilla.xul+xml'],
        ['zip', 'application/zip'],
        ['7z', 'application/x-7z-compressed'],
        // Others
        ['mkv', 'video/x-matroska'],
        ['mov', 'video/quicktime'],
        ['msg', 'application/vnd.ms-outlook']
    ]);
    function toFileWithPath(file, path) {
        var f = withMimeType(file);
        if (typeof f.path !== 'string') { // on electron, path is already set to the absolute path
            var webkitRelativePath = file.webkitRelativePath;
            Object.defineProperty(f, 'path', {
                value: typeof path === 'string'
                    ? path
                    // If <input webkitdirectory> is set,
                    // the File will have a {webkitRelativePath} property
                    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitdirectory
                    : typeof webkitRelativePath === 'string' && webkitRelativePath.length > 0
                        ? webkitRelativePath
                        : file.name,
                writable: false,
                configurable: false,
                enumerable: true
            });
        }
        return f;
    }
    function withMimeType(file) {
        var name = file.name;
        var hasExtension = name && name.lastIndexOf('.') !== -1;
        if (hasExtension && !file.type) {
            var ext = name.split('.')
                .pop().toLowerCase();
            var type = COMMON_MIME_TYPES.get(ext);
            if (type) {
                Object.defineProperty(file, 'type', {
                    value: type,
                    writable: false,
                    configurable: false,
                    enumerable: true
                });
            }
        }
        return file;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var FILES_TO_IGNORE = [
        // Thumbnail cache files for macOS and Windows
        '.DS_Store',
        'Thumbs.db' // Windows
    ];
    /**
     * Convert a DragEvent's DataTrasfer object to a list of File objects
     * NOTE: If some of the items are folders,
     * everything will be flattened and placed in the same list but the paths will be kept as a {path} property.
     *
     * EXPERIMENTAL: A list of https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle objects can also be passed as an arg
     * and a list of File objects will be returned.
     *
     * @param evt
     */
    function fromEvent(evt) {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                if (isObject$2(evt) && isDataTransfer(evt)) {
                    return [2 /*return*/, getDataTransferFiles(evt.dataTransfer, evt.type)];
                }
                else if (isChangeEvt(evt)) {
                    return [2 /*return*/, getInputFiles(evt)];
                }
                else if (Array.isArray(evt) && evt.every(function (item) { return 'getFile' in item && typeof item.getFile === 'function'; })) {
                    return [2 /*return*/, getFsHandleFiles(evt)];
                }
                return [2 /*return*/, []];
            });
        });
    }
    function isDataTransfer(value) {
        return isObject$2(value.dataTransfer);
    }
    function isChangeEvt(value) {
        return isObject$2(value) && isObject$2(value.target);
    }
    function isObject$2(v) {
        return typeof v === 'object' && v !== null;
    }
    function getInputFiles(evt) {
        return fromList(evt.target.files).map(function (file) { return toFileWithPath(file); });
    }
    // Ee expect each handle to be https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileHandle
    function getFsHandleFiles(handles) {
        return __awaiter$1(this, void 0, void 0, function () {
            var files;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(handles.map(function (h) { return h.getFile(); }))];
                    case 1:
                        files = _a.sent();
                        return [2 /*return*/, files.map(function (file) { return toFileWithPath(file); })];
                }
            });
        });
    }
    function getDataTransferFiles(dt, type) {
        return __awaiter$1(this, void 0, void 0, function () {
            var items, files;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (dt === null) {
                            return [2 /*return*/, []];
                        }
                        if (!dt.items) return [3 /*break*/, 2];
                        items = fromList(dt.items)
                            .filter(function (item) { return item.kind === 'file'; });
                        // According to https://html.spec.whatwg.org/multipage/dnd.html#dndevents,
                        // only 'dragstart' and 'drop' has access to the data (source node)
                        if (type !== 'drop') {
                            return [2 /*return*/, items];
                        }
                        return [4 /*yield*/, Promise.all(items.map(toFilePromises))];
                    case 1:
                        files = _a.sent();
                        return [2 /*return*/, noIgnoredFiles(flatten(files))];
                    case 2: return [2 /*return*/, noIgnoredFiles(fromList(dt.files)
                            .map(function (file) { return toFileWithPath(file); }))];
                }
            });
        });
    }
    function noIgnoredFiles(files) {
        return files.filter(function (file) { return FILES_TO_IGNORE.indexOf(file.name) === -1; });
    }
    // IE11 does not support Array.from()
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Browser_compatibility
    // https://developer.mozilla.org/en-US/docs/Web/API/FileList
    // https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList
    function fromList(items) {
        if (items === null) {
            return [];
        }
        var files = [];
        // tslint:disable: prefer-for-of
        for (var i = 0; i < items.length; i++) {
            var file = items[i];
            files.push(file);
        }
        return files;
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem
    function toFilePromises(item) {
        if (typeof item.webkitGetAsEntry !== 'function') {
            return fromDataTransferItem(item);
        }
        var entry = item.webkitGetAsEntry();
        // Safari supports dropping an image node from a different window and can be retrieved using
        // the DataTransferItem.getAsFile() API
        // NOTE: FileSystemEntry.file() throws if trying to get the file
        if (entry && entry.isDirectory) {
            return fromDirEntry(entry);
        }
        return fromDataTransferItem(item);
    }
    function flatten(items) {
        return items.reduce(function (acc, files) { return __spread(acc, (Array.isArray(files) ? flatten(files) : [files])); }, []);
    }
    function fromDataTransferItem(item) {
        var file = item.getAsFile();
        if (!file) {
            return Promise.reject(item + " is not a File");
        }
        var fwp = toFileWithPath(file);
        return Promise.resolve(fwp);
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry
    function fromEntry(entry) {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                return [2 /*return*/, entry.isDirectory ? fromDirEntry(entry) : fromFileEntry(entry)];
            });
        });
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry
    function fromDirEntry(entry) {
        var reader = entry.createReader();
        return new Promise(function (resolve, reject) {
            var entries = [];
            function readEntries() {
                var _this = this;
                // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry/createReader
                // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader/readEntries
                reader.readEntries(function (batch) { return __awaiter$1(_this, void 0, void 0, function () {
                    var files, err_1, items;
                    return __generator$1(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!!batch.length) return [3 /*break*/, 5];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, Promise.all(entries)];
                            case 2:
                                files = _a.sent();
                                resolve(files);
                                return [3 /*break*/, 4];
                            case 3:
                                err_1 = _a.sent();
                                reject(err_1);
                                return [3 /*break*/, 4];
                            case 4: return [3 /*break*/, 6];
                            case 5:
                                items = Promise.all(batch.map(fromEntry));
                                entries.push(items);
                                // Continue reading
                                readEntries();
                                _a.label = 6;
                            case 6: return [2 /*return*/];
                        }
                    });
                }); }, function (err) {
                    reject(err);
                });
            }
            readEntries();
        });
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry
    function fromFileEntry(entry) {
        return __awaiter$1(this, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        entry.file(function (file) {
                            var fwp = toFileWithPath(file, entry.fullPath);
                            resolve(fwp);
                        }, function (err) {
                            reject(err);
                        });
                    })];
            });
        });
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var es = createCommonjsModule$1(function (module, exports) {

    exports.__esModule = true;

    exports.default = function (file, acceptedFiles) {
      if (file && acceptedFiles) {
        var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(',');
        var fileName = file.name || '';
        var mimeType = (file.type || '').toLowerCase();
        var baseMimeType = mimeType.replace(/\/.*$/, '');
        return acceptedFilesArray.some(function (type) {
          var validType = type.trim().toLowerCase();

          if (validType.charAt(0) === '.') {
            return fileName.toLowerCase().endsWith(validType);
          } else if (validType.endsWith('/*')) {
            // This is something like a image/* mime type
            return baseMimeType === validType.replace(/\/.*$/, '');
          }

          return mimeType === validType;
        });
      }

      return true;
    };
    });

    var accepts = unwrapExports(es);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

    function _defineProperty$2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _slicedToArray$2(arr, i) { return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$2(arr, i) || _nonIterableRest$1(); }

    function _nonIterableRest$1() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

    function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    function _iterableToArrayLimit$1(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

    function _arrayWithHoles$1(arr) { if (Array.isArray(arr)) return arr; }

    var FILE_INVALID_TYPE = "file-invalid-type";
    var FILE_TOO_LARGE = "file-too-large";
    var FILE_TOO_SMALL = "file-too-small";
    var TOO_MANY_FILES = "too-many-files";

    var getInvalidTypeRejectionErr = function getInvalidTypeRejectionErr(accept) {
      accept = Array.isArray(accept) && accept.length === 1 ? accept[0] : accept;
      var messageSuffix = Array.isArray(accept) ? "one of ".concat(accept.join(", ")) : accept;
      return {
        code: FILE_INVALID_TYPE,
        message: "File type must be ".concat(messageSuffix)
      };
    };
    var getTooLargeRejectionErr = function getTooLargeRejectionErr(maxSize) {
      return {
        code: FILE_TOO_LARGE,
        message: "File is larger than ".concat(maxSize, " ").concat(maxSize === 1 ? "byte" : "bytes")
      };
    };
    var getTooSmallRejectionErr = function getTooSmallRejectionErr(minSize) {
      return {
        code: FILE_TOO_SMALL,
        message: "File is smaller than ".concat(minSize, " ").concat(minSize === 1 ? "byte" : "bytes")
      };
    };
    var TOO_MANY_FILES_REJECTION = {
      code: TOO_MANY_FILES,
      message: "Too many files"
    }; // Firefox versions prior to 53 return a bogus MIME type for every file drag, so dragovers with
    // that MIME type will always be accepted

    function fileAccepted(file, accept) {
      var isAcceptable = file.type === "application/x-moz-file" || accepts(file, accept);
      return [isAcceptable, isAcceptable ? null : getInvalidTypeRejectionErr(accept)];
    }
    function fileMatchSize(file, minSize, maxSize) {
      if (isDefined(file.size)) {
        if (isDefined(minSize) && isDefined(maxSize)) {
          if (file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
          if (file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];
        } else if (isDefined(minSize) && file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];else if (isDefined(maxSize) && file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
      }

      return [true, null];
    }

    function isDefined(value) {
      return value !== undefined && value !== null;
    }

    function allFilesAccepted(_ref) {
      var files = _ref.files,
          accept = _ref.accept,
          minSize = _ref.minSize,
          maxSize = _ref.maxSize,
          multiple = _ref.multiple,
          maxFiles = _ref.maxFiles;

      if (!multiple && files.length > 1 || multiple && maxFiles >= 1 && files.length > maxFiles) {
        return false;
      }

      return files.every(function (file) {
        var _fileAccepted = fileAccepted(file, accept),
            _fileAccepted2 = _slicedToArray$2(_fileAccepted, 1),
            accepted = _fileAccepted2[0];

        var _fileMatchSize = fileMatchSize(file, minSize, maxSize),
            _fileMatchSize2 = _slicedToArray$2(_fileMatchSize, 1),
            sizeMatch = _fileMatchSize2[0];

        return accepted && sizeMatch;
      });
    } // React's synthetic events has event.isPropagationStopped,
    // but to remain compatibility with other libs (Preact) fall back
    // to check event.cancelBubble

    function isPropagationStopped(event) {
      if (typeof event.isPropagationStopped === "function") {
        return event.isPropagationStopped();
      } else if (typeof event.cancelBubble !== "undefined") {
        return event.cancelBubble;
      }

      return false;
    }
    function isEvtWithFiles(event) {
      if (!event.dataTransfer) {
        return !!event.target && !!event.target.files;
      } // https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types
      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#file


      return Array.prototype.some.call(event.dataTransfer.types, function (type) {
        return type === "Files" || type === "application/x-moz-file";
      });
    }

    function onDocumentDragOver(event) {
      event.preventDefault();
    }

    function isIe(userAgent) {
      return userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident/") !== -1;
    }

    function isEdge(userAgent) {
      return userAgent.indexOf("Edge/") !== -1;
    }

    function isIeOrEdge() {
      var userAgent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
      return isIe(userAgent) || isEdge(userAgent);
    }
    /**
     * This is intended to be used to compose event handlers
     * They are executed in order until one of them calls `event.isPropagationStopped()`.
     * Note that the check is done on the first invoke too,
     * meaning that if propagation was stopped before invoking the fns,
     * no handlers will be executed.
     *
     * @param {Function} fns the event hanlder functions
     * @return {Function} the event handler to add to an element
     */

    function composeEventHandlers() {
      for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
        fns[_key] = arguments[_key];
      }

      return function (event) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        return fns.some(function (fn) {
          if (!isPropagationStopped(event) && fn) {
            fn.apply(void 0, [event].concat(args));
          }

          return isPropagationStopped(event);
        });
      };
    }
    /**
     * canUseFileSystemAccessAPI checks if the [File System Access API](https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API)
     * is supported by the browser.
     * @returns {boolean}
     */

    function canUseFileSystemAccessAPI() {
      return "showOpenFilePicker" in window;
    }
    /**
     * filePickerOptionsTypes returns the {types} option for https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker
     * based on the accept attr (see https://github.com/react-dropzone/attr-accept)
     * E.g: converts ['image/*', 'text/*'] to {'image/*': [], 'text/*': []}
     * @param {string|string[]} accept
     */

    function filePickerOptionsTypes(accept) {
      accept = typeof accept === "string" ? accept.split(",") : accept;
      return [{
        description: "everything",
        // TODO: Need to handle filtering more elegantly than this!
        accept: Array.isArray(accept) ? // Accept just MIME types as per spec
        // NOTE: accept can be https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers
        accept.filter(function (item) {
          return item === "audio/*" || item === "video/*" || item === "image/*" || item === "text/*" || /\w+\/[-+.\w]+/g.test(item);
        }).reduce(function (a, b) {
          return _objectSpread$3(_objectSpread$3({}, a), {}, _defineProperty$2({}, b, []));
        }, {}) : {}
      }];
    }
    /**
     * Check if v is an exception caused by aborting a request (e.g window.showOpenFilePicker()).
     *
     * See https://developer.mozilla.org/en-US/docs/Web/API/DOMException.
     * @param {any} v
     * @returns {boolean} True if v is an abort exception.
     */

    function isAbort(v) {
      return v instanceof DOMException && (v.name === "AbortError" || v.code === v.ABORT_ERR);
    }
    /**
     * Check if v is a security error.
     *
     * See https://developer.mozilla.org/en-US/docs/Web/API/DOMException.
     * @param {any} v
     * @returns {boolean} True if v is a security error.
     */

    function isSecurityError(v) {
      return v instanceof DOMException && (v.name === "SecurityError" || v.code === v.SECURITY_ERR);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var _excluded$1 = ["children"],
        _excluded2 = ["open"],
        _excluded3 = ["refKey", "role", "onKeyDown", "onFocus", "onBlur", "onClick", "onDragEnter", "onDragOver", "onDragLeave", "onDrop"],
        _excluded4 = ["refKey", "onChange", "onClick"];

    function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread(); }

    function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

    function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray$1(arr); }

    function _slicedToArray$1(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest(); }

    function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

    function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

    function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

    function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

    function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$2(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

    function _objectWithoutPropertiesLoose$2(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
    /**
     * Convenience wrapper component for the `useDropzone` hook
     *
     * ```jsx
     * <Dropzone>
     *   {({getRootProps, getInputProps}) => (
     *     <div {...getRootProps()}>
     *       <input {...getInputProps()} />
     *       <p>Drag 'n' drop some files here, or click to select files</p>
     *     </div>
     *   )}
     * </Dropzone>
     * ```
     */

    var Dropzone = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
      var children = _ref.children,
          params = _objectWithoutProperties(_ref, _excluded$1);

      var _useDropzone = useDropzone(params),
          open = _useDropzone.open,
          props = _objectWithoutProperties(_useDropzone, _excluded2);

      React.useImperativeHandle(ref, function () {
        return {
          open: open
        };
      }, [open]); // TODO: Figure out why react-styleguidist cannot create docs if we don't return a jsx element

      return /*#__PURE__*/React__default['default'].createElement(React.Fragment, null, children(_objectSpread$2(_objectSpread$2({}, props), {}, {
        open: open
      })));
    });
    Dropzone.displayName = "Dropzone"; // Add default props for react-docgen

    var defaultProps = {
      disabled: false,
      getFilesFromEvent: fromEvent,
      maxSize: Infinity,
      minSize: 0,
      multiple: true,
      maxFiles: 0,
      preventDropOnDocument: true,
      noClick: false,
      noKeyboard: false,
      noDrag: false,
      noDragEventsBubbling: false,
      validator: null,
      useFsAccessApi: true
    };
    Dropzone.defaultProps = defaultProps;
    Dropzone.propTypes = {
      /**
       * Render function that exposes the dropzone state and prop getter fns
       *
       * @param {object} params
       * @param {Function} params.getRootProps Returns the props you should apply to the root drop container you render
       * @param {Function} params.getInputProps Returns the props you should apply to hidden file input you render
       * @param {Function} params.open Open the native file selection dialog
       * @param {boolean} params.isFocused Dropzone area is in focus
       * @param {boolean} params.isFileDialogActive File dialog is opened
       * @param {boolean} params.isDragActive Active drag is in progress
       * @param {boolean} params.isDragAccept Dragged files are accepted
       * @param {boolean} params.isDragReject Some dragged files are rejected
       * @param {File[]} params.draggedFiles Files in active drag
       * @param {File[]} params.acceptedFiles Accepted files
       * @param {FileRejection[]} params.fileRejections Rejected files and why they were rejected
       */
      children: propTypes.func,

      /**
       * Set accepted file types.
       * See https://github.com/okonet/attr-accept for more information.
       * Keep in mind that mime type determination is not reliable across platforms. CSV files,
       * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
       * Windows. In some cases there might not be a mime type set at all.
       * See: https://github.com/react-dropzone/react-dropzone/issues/276
       */
      accept: propTypes.oneOfType([propTypes.string, propTypes.arrayOf(propTypes.string)]),

      /**
       * Allow drag 'n' drop (or selection from the file dialog) of multiple files
       */
      multiple: propTypes.bool,

      /**
       * If false, allow dropped items to take over the current browser window
       */
      preventDropOnDocument: propTypes.bool,

      /**
       * If true, disables click to open the native file selection dialog
       */
      noClick: propTypes.bool,

      /**
       * If true, disables SPACE/ENTER to open the native file selection dialog.
       * Note that it also stops tracking the focus state.
       */
      noKeyboard: propTypes.bool,

      /**
       * If true, disables drag 'n' drop
       */
      noDrag: propTypes.bool,

      /**
       * If true, stops drag event propagation to parents
       */
      noDragEventsBubbling: propTypes.bool,

      /**
       * Minimum file size (in bytes)
       */
      minSize: propTypes.number,

      /**
       * Maximum file size (in bytes)
       */
      maxSize: propTypes.number,

      /**
       * Maximum accepted number of files
       * The default value is 0 which means there is no limitation to how many files are accepted.
       */
      maxFiles: propTypes.number,

      /**
       * Enable/disable the dropzone
       */
      disabled: propTypes.bool,

      /**
       * Use this to provide a custom file aggregator
       *
       * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
       */
      getFilesFromEvent: propTypes.func,

      /**
       * Cb for when closing the file dialog with no selection
       */
      onFileDialogCancel: propTypes.func,

      /**
       * Cb for when opening the file dialog
       */
      onFileDialogOpen: propTypes.func,

      /**
       * Set to true to use the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API
       * to open the file picker instead of using an `<input type="file">` click event.
       */
      useFsAccessApi: propTypes.bool,

      /**
       * Cb for when the `dragenter` event occurs.
       *
       * @param {DragEvent} event
       */
      onDragEnter: propTypes.func,

      /**
       * Cb for when the `dragleave` event occurs
       *
       * @param {DragEvent} event
       */
      onDragLeave: propTypes.func,

      /**
       * Cb for when the `dragover` event occurs
       *
       * @param {DragEvent} event
       */
      onDragOver: propTypes.func,

      /**
       * Cb for when the `drop` event occurs.
       * Note that this callback is invoked after the `getFilesFromEvent` callback is done.
       *
       * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.
       * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.
       * If `multiple` is set to false and additional files are dropped,
       * all files besides the first will be rejected.
       * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.
       *
       * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.
       * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.
       *
       * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.
       * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:
       *
       * ```js
       * function onDrop(acceptedFiles) {
       *   const req = request.post('/upload')
       *   acceptedFiles.forEach(file => {
       *     req.attach(file.name, file)
       *   })
       *   req.end(callback)
       * }
       * ```
       *
       * @param {File[]} acceptedFiles
       * @param {FileRejection[]} fileRejections
       * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
       */
      onDrop: propTypes.func,

      /**
       * Cb for when the `drop` event occurs.
       * Note that if no files are accepted, this callback is not invoked.
       *
       * @param {File[]} files
       * @param {(DragEvent|Event)} event
       */
      onDropAccepted: propTypes.func,

      /**
       * Cb for when the `drop` event occurs.
       * Note that if no files are rejected, this callback is not invoked.
       *
       * @param {FileRejection[]} fileRejections
       * @param {(DragEvent|Event)} event
       */
      onDropRejected: propTypes.func,

      /**
       * Custom validation function
       * @param {File} file
       * @returns {FileError|FileError[]}
       */
      validator: propTypes.func
    };
    /**
     * A function that is invoked for the `dragenter`,
     * `dragover` and `dragleave` events.
     * It is not invoked if the items are not files (such as link, text, etc.).
     *
     * @callback dragCb
     * @param {DragEvent} event
     */

    /**
     * A function that is invoked for the `drop` or input change event.
     * It is not invoked if the items are not files (such as link, text, etc.).
     *
     * @callback dropCb
     * @param {File[]} acceptedFiles List of accepted files
     * @param {FileRejection[]} fileRejections List of rejected files and why they were rejected
     * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
     */

    /**
     * A function that is invoked for the `drop` or input change event.
     * It is not invoked if the items are files (such as link, text, etc.).
     *
     * @callback dropAcceptedCb
     * @param {File[]} files List of accepted files that meet the given criteria
     * (`accept`, `multiple`, `minSize`, `maxSize`)
     * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
     */

    /**
     * A function that is invoked for the `drop` or input change event.
     *
     * @callback dropRejectedCb
     * @param {File[]} files List of rejected files that do not meet the given criteria
     * (`accept`, `multiple`, `minSize`, `maxSize`)
     * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
     */

    /**
     * A function that is used aggregate files,
     * in a asynchronous fashion, from drag or input change events.
     *
     * @callback getFilesFromEvent
     * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
     * @returns {(File[]|Promise<File[]>)}
     */

    /**
     * An object with the current dropzone state and some helper functions.
     *
     * @typedef {object} DropzoneState
     * @property {Function} getRootProps Returns the props you should apply to the root drop container you render
     * @property {Function} getInputProps Returns the props you should apply to hidden file input you render
     * @property {Function} open Open the native file selection dialog
     * @property {boolean} isFocused Dropzone area is in focus
     * @property {boolean} isFileDialogActive File dialog is opened
     * @property {boolean} isDragActive Active drag is in progress
     * @property {boolean} isDragAccept Dragged files are accepted
     * @property {boolean} isDragReject Some dragged files are rejected
     * @property {File[]} draggedFiles Files in active drag
     * @property {File[]} acceptedFiles Accepted files
     * @property {FileRejection[]} fileRejections Rejected files and why they were rejected
     */

    var initialState$1 = {
      isFocused: false,
      isFileDialogActive: false,
      isDragActive: false,
      isDragAccept: false,
      isDragReject: false,
      draggedFiles: [],
      acceptedFiles: [],
      fileRejections: []
    };
    /**
     * A React hook that creates a drag 'n' drop area.
     *
     * ```jsx
     * function MyDropzone(props) {
     *   const {getRootProps, getInputProps} = useDropzone({
     *     onDrop: acceptedFiles => {
     *       // do something with the File objects, e.g. upload to some server
     *     }
     *   });
     *   return (
     *     <div {...getRootProps()}>
     *       <input {...getInputProps()} />
     *       <p>Drag and drop some files here, or click to select files</p>
     *     </div>
     *   )
     * }
     * ```
     *
     * @function useDropzone
     *
     * @param {object} props
     * @param {string|string[]} [props.accept] Set accepted file types.
     * See https://github.com/okonet/attr-accept for more information.
     * Keep in mind that mime type determination is not reliable across platforms. CSV files,
     * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
     * Windows. In some cases there might not be a mime type set at all.
     * See: https://github.com/react-dropzone/react-dropzone/issues/276
     * @param {boolean} [props.multiple=true] Allow drag 'n' drop (or selection from the file dialog) of multiple files
     * @param {boolean} [props.preventDropOnDocument=true] If false, allow dropped items to take over the current browser window
     * @param {boolean} [props.noClick=false] If true, disables click to open the native file selection dialog
     * @param {boolean} [props.noKeyboard=false] If true, disables SPACE/ENTER to open the native file selection dialog.
     * Note that it also stops tracking the focus state.
     * @param {boolean} [props.noDrag=false] If true, disables drag 'n' drop
     * @param {boolean} [props.noDragEventsBubbling=false] If true, stops drag event propagation to parents
     * @param {number} [props.minSize=0] Minimum file size (in bytes)
     * @param {number} [props.maxSize=Infinity] Maximum file size (in bytes)
     * @param {boolean} [props.disabled=false] Enable/disable the dropzone
     * @param {getFilesFromEvent} [props.getFilesFromEvent] Use this to provide a custom file aggregator
     * @param {Function} [props.onFileDialogCancel] Cb for when closing the file dialog with no selection
     * @param {boolean} [props.useFsAccessApi] Set to true to use the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API
     * to open the file picker instead of using an `<input type="file">` click event.
     * @param {Function} [props.onFileDialogOpen] Cb for when opening the file dialog
     * @param {dragCb} [props.onDragEnter] Cb for when the `dragenter` event occurs.
     * @param {dragCb} [props.onDragLeave] Cb for when the `dragleave` event occurs
     * @param {dragCb} [props.onDragOver] Cb for when the `dragover` event occurs
     * @param {dropCb} [props.onDrop] Cb for when the `drop` event occurs.
     * Note that this callback is invoked after the `getFilesFromEvent` callback is done.
     *
     * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.
     * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.
     * If `multiple` is set to false and additional files are dropped,
     * all files besides the first will be rejected.
     * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.
     *
     * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.
     * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.
     *
     * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.
     * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:
     *
     * ```js
     * function onDrop(acceptedFiles) {
     *   const req = request.post('/upload')
     *   acceptedFiles.forEach(file => {
     *     req.attach(file.name, file)
     *   })
     *   req.end(callback)
     * }
     * ```
     * @param {dropAcceptedCb} [props.onDropAccepted]
     * @param {dropRejectedCb} [props.onDropRejected]
     *
     * @returns {DropzoneState}
     */

    function useDropzone() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var _defaultProps$options = _objectSpread$2(_objectSpread$2({}, defaultProps), options),
          accept = _defaultProps$options.accept,
          disabled = _defaultProps$options.disabled,
          getFilesFromEvent = _defaultProps$options.getFilesFromEvent,
          maxSize = _defaultProps$options.maxSize,
          minSize = _defaultProps$options.minSize,
          multiple = _defaultProps$options.multiple,
          maxFiles = _defaultProps$options.maxFiles,
          onDragEnter = _defaultProps$options.onDragEnter,
          onDragLeave = _defaultProps$options.onDragLeave,
          onDragOver = _defaultProps$options.onDragOver,
          onDrop = _defaultProps$options.onDrop,
          onDropAccepted = _defaultProps$options.onDropAccepted,
          onDropRejected = _defaultProps$options.onDropRejected,
          onFileDialogCancel = _defaultProps$options.onFileDialogCancel,
          onFileDialogOpen = _defaultProps$options.onFileDialogOpen,
          useFsAccessApi = _defaultProps$options.useFsAccessApi,
          preventDropOnDocument = _defaultProps$options.preventDropOnDocument,
          noClick = _defaultProps$options.noClick,
          noKeyboard = _defaultProps$options.noKeyboard,
          noDrag = _defaultProps$options.noDrag,
          noDragEventsBubbling = _defaultProps$options.noDragEventsBubbling,
          validator = _defaultProps$options.validator;

      var onFileDialogOpenCb = React.useMemo(function () {
        return typeof onFileDialogOpen === "function" ? onFileDialogOpen : noop$3;
      }, [onFileDialogOpen]);
      var onFileDialogCancelCb = React.useMemo(function () {
        return typeof onFileDialogCancel === "function" ? onFileDialogCancel : noop$3;
      }, [onFileDialogCancel]);
      var rootRef = React.useRef(null);
      var inputRef = React.useRef(null);

      var _useReducer = React.useReducer(reducer, initialState$1),
          _useReducer2 = _slicedToArray$1(_useReducer, 2),
          state = _useReducer2[0],
          dispatch = _useReducer2[1];

      var isFocused = state.isFocused,
          isFileDialogActive = state.isFileDialogActive,
          draggedFiles = state.draggedFiles;
      var fsAccessApiWorksRef = React.useRef(typeof window !== "undefined" && window.isSecureContext && useFsAccessApi && canUseFileSystemAccessAPI()); // Update file dialog active state when the window is focused on

      var onWindowFocus = function onWindowFocus() {
        // Execute the timeout only if the file dialog is opened in the browser
        if (!fsAccessApiWorksRef.current && isFileDialogActive) {
          setTimeout(function () {
            if (inputRef.current) {
              var files = inputRef.current.files;

              if (!files.length) {
                dispatch({
                  type: "closeDialog"
                });
                onFileDialogCancelCb();
              }
            }
          }, 300);
        }
      };

      React.useEffect(function () {
        window.addEventListener("focus", onWindowFocus, false);
        return function () {
          window.removeEventListener("focus", onWindowFocus, false);
        };
      }, [inputRef, isFileDialogActive, onFileDialogCancelCb, fsAccessApiWorksRef]);
      var dragTargetsRef = React.useRef([]);

      var onDocumentDrop = function onDocumentDrop(event) {
        if (rootRef.current && rootRef.current.contains(event.target)) {
          // If we intercepted an event for our instance, let it propagate down to the instance's onDrop handler
          return;
        }

        event.preventDefault();
        dragTargetsRef.current = [];
      };

      React.useEffect(function () {
        if (preventDropOnDocument) {
          document.addEventListener("dragover", onDocumentDragOver, false);
          document.addEventListener("drop", onDocumentDrop, false);
        }

        return function () {
          if (preventDropOnDocument) {
            document.removeEventListener("dragover", onDocumentDragOver);
            document.removeEventListener("drop", onDocumentDrop);
          }
        };
      }, [rootRef, preventDropOnDocument]);
      var onDragEnterCb = React.useCallback(function (event) {
        event.preventDefault(); // Persist here because we need the event later after getFilesFromEvent() is done

        event.persist();
        stopPropagation(event);
        dragTargetsRef.current = [].concat(_toConsumableArray(dragTargetsRef.current), [event.target]);

        if (isEvtWithFiles(event)) {
          Promise.resolve(getFilesFromEvent(event)).then(function (draggedFiles) {
            if (isPropagationStopped(event) && !noDragEventsBubbling) {
              return;
            }

            dispatch({
              draggedFiles: draggedFiles,
              isDragActive: true,
              type: "setDraggedFiles"
            });

            if (onDragEnter) {
              onDragEnter(event);
            }
          });
        }
      }, [getFilesFromEvent, onDragEnter, noDragEventsBubbling]);
      var onDragOverCb = React.useCallback(function (event) {
        event.preventDefault();
        event.persist();
        stopPropagation(event);
        var hasFiles = isEvtWithFiles(event);

        if (hasFiles && event.dataTransfer) {
          try {
            event.dataTransfer.dropEffect = "copy";
          } catch (_unused) {}
          /* eslint-disable-line no-empty */

        }

        if (hasFiles && onDragOver) {
          onDragOver(event);
        }

        return false;
      }, [onDragOver, noDragEventsBubbling]);
      var onDragLeaveCb = React.useCallback(function (event) {
        event.preventDefault();
        event.persist();
        stopPropagation(event); // Only deactivate once the dropzone and all children have been left

        var targets = dragTargetsRef.current.filter(function (target) {
          return rootRef.current && rootRef.current.contains(target);
        }); // Make sure to remove a target present multiple times only once
        // (Firefox may fire dragenter/dragleave multiple times on the same element)

        var targetIdx = targets.indexOf(event.target);

        if (targetIdx !== -1) {
          targets.splice(targetIdx, 1);
        }

        dragTargetsRef.current = targets;

        if (targets.length > 0) {
          return;
        }

        dispatch({
          isDragActive: false,
          type: "setDraggedFiles",
          draggedFiles: []
        });

        if (isEvtWithFiles(event) && onDragLeave) {
          onDragLeave(event);
        }
      }, [rootRef, onDragLeave, noDragEventsBubbling]);
      var setFiles = React.useCallback(function (files, event) {
        var acceptedFiles = [];
        var fileRejections = [];
        files.forEach(function (file) {
          var _fileAccepted = fileAccepted(file, accept),
              _fileAccepted2 = _slicedToArray$1(_fileAccepted, 2),
              accepted = _fileAccepted2[0],
              acceptError = _fileAccepted2[1];

          var _fileMatchSize = fileMatchSize(file, minSize, maxSize),
              _fileMatchSize2 = _slicedToArray$1(_fileMatchSize, 2),
              sizeMatch = _fileMatchSize2[0],
              sizeError = _fileMatchSize2[1];

          var customErrors = validator ? validator(file) : null;

          if (accepted && sizeMatch && !customErrors) {
            acceptedFiles.push(file);
          } else {
            var errors = [acceptError, sizeError];

            if (customErrors) {
              errors = errors.concat(customErrors);
            }

            fileRejections.push({
              file: file,
              errors: errors.filter(function (e) {
                return e;
              })
            });
          }
        });

        if (!multiple && acceptedFiles.length > 1 || multiple && maxFiles >= 1 && acceptedFiles.length > maxFiles) {
          // Reject everything and empty accepted files
          acceptedFiles.forEach(function (file) {
            fileRejections.push({
              file: file,
              errors: [TOO_MANY_FILES_REJECTION]
            });
          });
          acceptedFiles.splice(0);
        }

        dispatch({
          acceptedFiles: acceptedFiles,
          fileRejections: fileRejections,
          type: "setFiles"
        });

        if (onDrop) {
          onDrop(acceptedFiles, fileRejections, event);
        }

        if (fileRejections.length > 0 && onDropRejected) {
          onDropRejected(fileRejections, event);
        }

        if (acceptedFiles.length > 0 && onDropAccepted) {
          onDropAccepted(acceptedFiles, event);
        }
      }, [dispatch, multiple, accept, minSize, maxSize, maxFiles, onDrop, onDropAccepted, onDropRejected, validator]);
      var onDropCb = React.useCallback(function (event) {
        event.preventDefault(); // Persist here because we need the event later after getFilesFromEvent() is done

        event.persist();
        stopPropagation(event);
        dragTargetsRef.current = [];

        if (isEvtWithFiles(event)) {
          Promise.resolve(getFilesFromEvent(event)).then(function (files) {
            if (isPropagationStopped(event) && !noDragEventsBubbling) {
              return;
            }

            setFiles(files, event);
          });
        }

        dispatch({
          type: "reset"
        });
      }, [getFilesFromEvent, setFiles, noDragEventsBubbling]); // Fn for opening the file dialog programmatically

      var openFileDialog = React.useCallback(function () {
        // No point to use FS access APIs if context is not secure
        // https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts#feature_detection
        if (fsAccessApiWorksRef.current) {
          dispatch({
            type: "openDialog"
          });
          onFileDialogOpenCb(); // https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker

          var opts = {
            multiple: multiple,
            types: filePickerOptionsTypes(accept)
          };
          window.showOpenFilePicker(opts).then(function (handles) {
            return getFilesFromEvent(handles);
          }).then(function (files) {
            setFiles(files, null);
            dispatch({
              type: "closeDialog"
            });
          }).catch(function (e) {
            // AbortError means the user canceled
            if (isAbort(e)) {
              onFileDialogCancelCb(e);
              dispatch({
                type: "closeDialog"
              });
            } else if (isSecurityError(e)) {
              fsAccessApiWorksRef.current = false; // CORS, so cannot use this API
              // Try using the input

              if (inputRef.current) {
                inputRef.current.value = null;
                inputRef.current.click();
              }
            }
          });
          return;
        }

        if (inputRef.current) {
          dispatch({
            type: "openDialog"
          });
          onFileDialogOpenCb();
          inputRef.current.value = null;
          inputRef.current.click();
        }
      }, [dispatch, onFileDialogOpenCb, onFileDialogCancelCb, useFsAccessApi, setFiles, accept, multiple]); // Cb to open the file dialog when SPACE/ENTER occurs on the dropzone

      var onKeyDownCb = React.useCallback(function (event) {
        // Ignore keyboard events bubbling up the DOM tree
        if (!rootRef.current || !rootRef.current.isEqualNode(event.target)) {
          return;
        }

        if (event.key === " " || event.key === "Enter" || event.keyCode === 32 || event.keyCode === 13) {
          event.preventDefault();
          openFileDialog();
        }
      }, [rootRef, openFileDialog]); // Update focus state for the dropzone

      var onFocusCb = React.useCallback(function () {
        dispatch({
          type: "focus"
        });
      }, []);
      var onBlurCb = React.useCallback(function () {
        dispatch({
          type: "blur"
        });
      }, []); // Cb to open the file dialog when click occurs on the dropzone

      var onClickCb = React.useCallback(function () {
        if (noClick) {
          return;
        } // In IE11/Edge the file-browser dialog is blocking, therefore, use setTimeout()
        // to ensure React can handle state changes
        // See: https://github.com/react-dropzone/react-dropzone/issues/450


        if (isIeOrEdge()) {
          setTimeout(openFileDialog, 0);
        } else {
          openFileDialog();
        }
      }, [noClick, openFileDialog]);

      var composeHandler = function composeHandler(fn) {
        return disabled ? null : fn;
      };

      var composeKeyboardHandler = function composeKeyboardHandler(fn) {
        return noKeyboard ? null : composeHandler(fn);
      };

      var composeDragHandler = function composeDragHandler(fn) {
        return noDrag ? null : composeHandler(fn);
      };

      var stopPropagation = function stopPropagation(event) {
        if (noDragEventsBubbling) {
          event.stopPropagation();
        }
      };

      var getRootProps = React.useMemo(function () {
        return function () {
          var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref2$refKey = _ref2.refKey,
              refKey = _ref2$refKey === void 0 ? "ref" : _ref2$refKey,
              role = _ref2.role,
              onKeyDown = _ref2.onKeyDown,
              onFocus = _ref2.onFocus,
              onBlur = _ref2.onBlur,
              onClick = _ref2.onClick,
              onDragEnter = _ref2.onDragEnter,
              onDragOver = _ref2.onDragOver,
              onDragLeave = _ref2.onDragLeave,
              onDrop = _ref2.onDrop,
              rest = _objectWithoutProperties(_ref2, _excluded3);

          return _objectSpread$2(_objectSpread$2(_defineProperty$1({
            onKeyDown: composeKeyboardHandler(composeEventHandlers(onKeyDown, onKeyDownCb)),
            onFocus: composeKeyboardHandler(composeEventHandlers(onFocus, onFocusCb)),
            onBlur: composeKeyboardHandler(composeEventHandlers(onBlur, onBlurCb)),
            onClick: composeHandler(composeEventHandlers(onClick, onClickCb)),
            onDragEnter: composeDragHandler(composeEventHandlers(onDragEnter, onDragEnterCb)),
            onDragOver: composeDragHandler(composeEventHandlers(onDragOver, onDragOverCb)),
            onDragLeave: composeDragHandler(composeEventHandlers(onDragLeave, onDragLeaveCb)),
            onDrop: composeDragHandler(composeEventHandlers(onDrop, onDropCb)),
            role: typeof role === "string" && role !== "" ? role : "button"
          }, refKey, rootRef), !disabled && !noKeyboard ? {
            tabIndex: 0
          } : {}), rest);
        };
      }, [rootRef, onKeyDownCb, onFocusCb, onBlurCb, onClickCb, onDragEnterCb, onDragOverCb, onDragLeaveCb, onDropCb, noKeyboard, noDrag, disabled]);
      var onInputElementClick = React.useCallback(function (event) {
        event.stopPropagation();
      }, []);
      var getInputProps = React.useMemo(function () {
        return function () {
          var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref3$refKey = _ref3.refKey,
              refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey,
              onChange = _ref3.onChange,
              onClick = _ref3.onClick,
              rest = _objectWithoutProperties(_ref3, _excluded4);

          var inputProps = _defineProperty$1({
            accept: accept,
            multiple: multiple,
            type: "file",
            style: {
              display: "none"
            },
            onChange: composeHandler(composeEventHandlers(onChange, onDropCb)),
            onClick: composeHandler(composeEventHandlers(onClick, onInputElementClick)),
            tabIndex: -1
          }, refKey, inputRef);

          return _objectSpread$2(_objectSpread$2({}, inputProps), rest);
        };
      }, [inputRef, accept, multiple, onDropCb, disabled]);
      var fileCount = draggedFiles.length;
      var isDragAccept = fileCount > 0 && allFilesAccepted({
        files: draggedFiles,
        accept: accept,
        minSize: minSize,
        maxSize: maxSize,
        multiple: multiple,
        maxFiles: maxFiles
      });
      var isDragReject = fileCount > 0 && !isDragAccept;
      return _objectSpread$2(_objectSpread$2({}, state), {}, {
        isDragAccept: isDragAccept,
        isDragReject: isDragReject,
        isFocused: isFocused && !disabled,
        getRootProps: getRootProps,
        getInputProps: getInputProps,
        rootRef: rootRef,
        inputRef: inputRef,
        open: composeHandler(openFileDialog)
      });
    }

    function reducer(state, action) {
      /* istanbul ignore next */
      switch (action.type) {
        case "focus":
          return _objectSpread$2(_objectSpread$2({}, state), {}, {
            isFocused: true
          });

        case "blur":
          return _objectSpread$2(_objectSpread$2({}, state), {}, {
            isFocused: false
          });

        case "openDialog":
          return _objectSpread$2(_objectSpread$2({}, initialState$1), {}, {
            isFileDialogActive: true
          });

        case "closeDialog":
          return _objectSpread$2(_objectSpread$2({}, state), {}, {
            isFileDialogActive: false
          });

        case "setDraggedFiles":
          /* eslint no-case-declarations: 0 */
          var isDragActive = action.isDragActive,
              draggedFiles = action.draggedFiles;
          return _objectSpread$2(_objectSpread$2({}, state), {}, {
            draggedFiles: draggedFiles,
            isDragActive: isDragActive
          });

        case "setFiles":
          return _objectSpread$2(_objectSpread$2({}, state), {}, {
            acceptedFiles: action.acceptedFiles,
            fileRejections: action.fileRejections
          });

        case "reset":
          return _objectSpread$2({}, initialState$1);

        default:
          return state;
      }
    }

    function noop$3() {}

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var __assign$1 = (undefined && undefined.__assign) || function () {
        __assign$1 = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign$1.apply(this, arguments);
    };
    var ImageDropzone = function (_a) {
        var handleFiles = _a.handleFiles, maxNumberOfFiles = _a.maxNumberOfFiles, children = _a.children, accept = _a.accept, multiple = _a.multiple, disabled = _a.disabled;
        var handleDrop = React.useCallback(function (accepted) {
            if (!handleFiles) {
                return;
            }
            if (accepted && accepted.length) {
                handleFiles(accepted);
            }
        }, [handleFiles]);
        var _b = useDropzone({
            accept: accept,
            multiple: multiple,
            disabled: disabled,
            maxFiles: maxNumberOfFiles,
            onDrop: handleDrop,
            noClick: true,
        }), getRootProps = _b.getRootProps, isDragAccept = _b.isDragAccept, isDragReject = _b.isDragReject;
        return (React__default['default'].createElement("div", __assign$1({}, getRootProps({
            style: { position: 'relative' },
            className: "\n\t\t\t  rfu-dropzone\n\t\t\t  " + (isDragAccept ? 'rfu-dropzone--accept' : '') + "\n\t\t\t  " + (isDragReject ? 'rfu-dropzone--reject' : '') + "\n\t\t\t",
        }), { tabIndex: -1 }),
            React__default['default'].createElement("div", { className: "rfu-dropzone__notifier" },
                React__default['default'].createElement("div", { className: "rfu-dropzone__inner" },
                    React__default['default'].createElement("svg", { width: "41", height: "41", viewBox: "0 0 41 41", xmlns: "http://www.w3.org/2000/svg" },
                        React__default['default'].createElement("path", { d: "M40.517 28.002V3.997c0-2.197-1.808-3.992-4.005-3.992H12.507a4.004 4.004 0 0 0-3.992 3.993v24.004a4.004 4.004 0 0 0 3.992 3.993h24.005c2.197 0 4.005-1.795 4.005-3.993zm-22.002-7.997l4.062 5.42 5.937-7.423 7.998 10H12.507l6.008-7.997zM.517 8.003V36c0 2.198 1.795 4.005 3.993 4.005h27.997V36H4.51V8.002H.517z", fill: "#000", fillRule: "nonzero" })),
                    React__default['default'].createElement("p", null, "Drag your files here to add to your post"))),
            children));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var __assign = (undefined && undefined.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    var FilePlaceholder = function (props) { return (React__default['default'].createElement("svg", __assign({ xmlns: "http://www.w3.org/2000/svg", role: "img", viewBox: "0 0 400 400" }, props),
        React__default['default'].createElement("g", null,
            React__default['default'].createElement("path", { d: "M0.000 200.000 L 0.000 400.000 200.000 400.000 L 400.000 400.000 400.000 200.000 L 400.000 0.000 200.000 0.000 L 0.000 0.000 0.000 200.000 M243.085 68.180 C 251.168 72.240,252.758 82.164,246.332 88.456 C 242.609 92.102,249.072 91.774,176.600 92.000 L 112.600 92.200 111.000 93.165 C 107.620 95.203,105.382 98.131,104.780 101.304 C 104.548 102.526,104.400 132.258,104.400 177.461 C 104.400 261.065,104.646 254.561,101.340 258.340 C 95.134 265.435,84.540 263.898,80.562 255.326 L 79.600 253.251 79.600 170.356 L 79.600 87.460 80.613 84.526 C 83.246 76.897,91.469 68.511,96.439 68.386 C 96.747 68.378,97.450 68.114,98.000 67.800 C 98.856 67.311,109.214 67.226,170.067 67.214 L 241.134 67.200 243.085 68.180 M230.400 116.002 C 236.845 117.273,237.603 117.566,242.024 120.500 C 243.269 121.327,256.977 134.788,274.002 151.902 C 299.664 177.700,305.143 183.306,307.142 185.815 C 307.838 186.688,309.600 190.497,309.602 191.133 C 309.604 191.500,309.919 192.340,310.302 193.000 C 310.956 194.125,311.007 197.998,311.108 254.600 L 311.215 315.000 310.241 318.000 C 307.327 326.967,302.400 332.072,293.800 335.031 L 291.000 335.994 219.630 335.997 L 148.260 336.000 145.430 335.018 C 140.319 333.244,139.684 332.841,134.862 328.318 C 132.616 326.212,129.907 321.565,129.427 318.997 C 129.263 318.118,128.920 317.147,128.664 316.839 C 128.315 316.416,128.200 294.170,128.200 227.039 L 128.200 137.800 129.067 134.600 C 129.543 132.840,130.393 130.590,130.954 129.600 C 131.515 128.610,132.247 127.320,132.580 126.733 C 134.155 123.961,138.478 120.313,143.000 117.940 C 144.003 117.414,146.644 116.725,151.000 115.853 C 152.661 115.520,228.681 115.664,230.400 116.002 M226.250 137.650 C 225.849 139.656,225.987 187.508,226.403 190.713 C 227.174 196.647,230.700 200.107,237.136 201.245 C 239.519 201.666,290.972 201.562,291.398 201.135 C 291.727 200.807,227.629 136.400,226.974 136.400 C 226.713 136.400,226.388 136.963,226.250 137.650", stroke: "none", fill: "#fcfcfc", fillRule: "evenodd" }),
            React__default['default'].createElement("path", { d: "M98.000 67.800 C 97.450 68.114,96.747 68.378,96.439 68.386 C 91.469 68.511,83.246 76.897,80.613 84.526 L 79.600 87.460 79.600 170.356 L 79.600 253.251 80.562 255.326 C 84.540 263.898,95.134 265.435,101.340 258.340 C 104.646 254.561,104.400 261.065,104.400 177.461 C 104.400 132.258,104.548 102.526,104.780 101.304 C 105.382 98.131,107.620 95.203,111.000 93.165 L 112.600 92.200 176.600 92.000 C 249.072 91.774,242.609 92.102,246.332 88.456 C 252.758 82.164,251.168 72.240,243.085 68.180 L 241.134 67.200 170.067 67.214 C 109.214 67.226,98.856 67.311,98.000 67.800 M151.000 115.853 C 146.644 116.725,144.003 117.414,143.000 117.940 C 138.478 120.313,134.155 123.961,132.580 126.733 C 132.247 127.320,131.515 128.610,130.954 129.600 C 130.393 130.590,129.543 132.840,129.067 134.600 L 128.200 137.800 128.200 227.039 C 128.200 294.170,128.315 316.416,128.664 316.839 C 128.920 317.147,129.263 318.118,129.427 318.997 C 129.907 321.565,132.616 326.212,134.862 328.318 C 139.684 332.841,140.319 333.244,145.430 335.018 L 148.260 336.000 219.630 335.997 L 291.000 335.994 293.800 335.031 C 302.400 332.072,307.327 326.967,310.241 318.000 L 311.215 315.000 311.108 254.600 C 311.007 197.998,310.956 194.125,310.302 193.000 C 309.919 192.340,309.604 191.500,309.602 191.133 C 309.600 190.497,307.838 186.688,307.142 185.815 C 305.143 183.306,299.664 177.700,274.002 151.902 C 238.906 116.622,240.594 118.012,230.400 116.002 C 228.681 115.664,152.661 115.520,151.000 115.853 M259.556 168.635 C 277.215 186.364,291.544 200.989,291.398 201.135 C 290.972 201.562,239.519 201.666,237.136 201.245 C 230.700 200.107,227.174 196.647,226.403 190.713 C 225.460 183.450,225.955 136.400,226.974 136.400 C 227.235 136.400,241.897 150.906,259.556 168.635", stroke: "none", fill: "#e4e4e4", fillRule: "evenodd" })))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var CloseIcon = function () { return (React__default['default'].createElement("svg", { width: "28", height: "28", viewBox: "0 0 28 28", xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink" },
        React__default['default'].createElement("defs", null,
            React__default['default'].createElement("path", { d: "M465 5c5.53 0 10 4.47 10 10s-4.47 10-10 10-10-4.47-10-10 4.47-10 10-10zm3.59 5L465 13.59 461.41 10 460 11.41l3.59 3.59-3.59 3.59 1.41 1.41 3.59-3.59 3.59 3.59 1.41-1.41-3.59-3.59 3.59-3.59-1.41-1.41z", id: "b" }),
            React__default['default'].createElement("filter", { x: "-30%", y: "-30%", width: "160%", height: "160%", filterUnits: "objectBoundingBox", id: "a" },
                React__default['default'].createElement("feOffset", { in: "SourceAlpha", result: "shadowOffsetOuter1" }),
                React__default['default'].createElement("feGaussianBlur", { stdDeviation: "2", in: "shadowOffsetOuter1", result: "shadowBlurOuter1" }),
                React__default['default'].createElement("feColorMatrix", { values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0", in: "shadowBlurOuter1" }))),
        React__default['default'].createElement("g", { transform: "translate(-451 -1)", fillRule: "nonzero", fill: "none" },
            React__default['default'].createElement("use", { fill: "#000", filter: "url(#a)", xlinkHref: "#b" }),
            React__default['default'].createElement("use", { fill: "#FFF", fillRule: "evenodd", xlinkHref: "#b" })))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Thumbnail = function (_a) {
        var image = _a.image, _b = _a.size, size = _b === void 0 ? 100 : _b, handleClose = _a.handleClose, alt = _a.alt;
        var onClose = React.useCallback(function (event) { return handleClose === null || handleClose === void 0 ? void 0 : handleClose(event); }, [handleClose]);
        return (React__default['default'].createElement("div", { className: "rfu-thumbnail__wrapper", style: { width: size, height: size } },
            React__default['default'].createElement("div", { className: "rfu-thumbnail__overlay" }, handleClose ? (React__default['default'].createElement(IconButton, { onClick: onClose },
                React__default['default'].createElement(CloseIcon, null))) : null),
            image ? (React__default['default'].createElement("img", { src: image, className: "rfu-thumbnail__image", alt: alt !== null && alt !== void 0 ? alt : '' })) : (React__default['default'].createElement(FilePlaceholder, { preserveAspectRatio: "xMinYMin slice", className: "rfu-thumbnail__image" }))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * An icon of a picture, which is used as the default icon for ImageUploadButton
     */
    var PictureIcon = function () { return (React__default['default'].createElement("svg", { width: "20", height: "20", viewBox: "0 0 20 20", xmlns: "http://www.w3.org/2000/svg" },
        React__default['default'].createElement("path", { d: "M2 0h16a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zm3 2a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM2 16v2h16v-6l-3-3-6 6-3-3-4 4z", fillRule: "nonzero" }))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ImageUploadButton = function (_a) {
        var _b = _a.multiple, multiple = _b === void 0 ? false : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, handleFiles = _a.handleFiles, _d = _a.children, children = _d === void 0 ? React__default['default'].createElement(PictureIcon, null) : _d, _e = _a.resetOnChange, resetOnChange = _e === void 0 ? false : _e;
        var onFileChange = useHandleFileChangeWrapper(resetOnChange, handleFiles);
        return (React__default['default'].createElement("div", { className: "rfu-image-upload-button" },
            React__default['default'].createElement("label", null,
                React__default['default'].createElement("input", { "aria-label": "Image input", type: "file", className: "rfu-image-input", onChange: onFileChange, accept: "image/*", multiple: multiple, disabled: disabled }),
                children)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ThumbnailPlaceholder = function (_a) {
        var _b = _a.multiple, multiple = _b === void 0 ? false : _b, handleFiles = _a.handleFiles;
        return (React__default['default'].createElement(ImageUploadButton, { handleFiles: handleFiles, multiple: multiple },
            React__default['default'].createElement("div", { className: "rfu-thumbnail-placeholder" },
                React__default['default'].createElement("svg", { width: "14", height: "15", viewBox: "0 0 14 15", xmlns: "http://www.w3.org/2000/svg" },
                    React__default['default'].createElement("path", { d: "M14 8.998H8v6H6v-6H0v-2h6v-6h2v6h6z", fill: "#A0B2B8", fillRule: "nonzero" })))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var RetryIcon = function () { return (React__default['default'].createElement("svg", { width: "22", height: "20", viewBox: "0 0 22 20", xmlns: "http://www.w3.org/2000/svg" },
        React__default['default'].createElement("path", { d: "M20 5.535V2a1 1 0 0 1 2 0v6a1 1 0 0 1-1 1h-6a1 1 0 0 1 0-2h3.638l-2.975-2.653a8 8 0 1 0 1.884 8.32 1 1 0 1 1 1.886.666A10 10 0 1 1 5.175 1.245c3.901-2.15 8.754-1.462 11.88 1.667L20 5.535z", fill: "#FFF", fillRule: "nonzero" }))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ImagePreviewer = function (_a) {
        var _b = _a.multiple, multiple = _b === void 0 ? true : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, imageUploads = _a.imageUploads, handleRemove = _a.handleRemove, handleRetry = _a.handleRetry, handleFiles = _a.handleFiles;
        var onClose = React.useCallback(function (id, event) {
            if (!id)
                return console.warn("image.id of closed image was \"null\", this shouldn't happen");
            handleRemove === null || handleRemove === void 0 ? void 0 : handleRemove(id, event);
        }, [handleRemove]);
        return (React__default['default'].createElement("div", { className: "rfu-image-previewer" }, imageUploads === null || imageUploads === void 0 ? void 0 :
            imageUploads.map(function (image) {
                var url = image.url || image.previewUri;
                return (React__default['default'].createElement("div", { key: image.id, className: "rfu-image-previewer__image" + (image.state === 'finished'
                        ? ' rfu-image-previewer__image--loaded'
                        : '') },
                    image.state === 'failed' && (React__default['default'].createElement("button", { type: "button", "aria-label": "Retry upload", className: "rfu-image-previewer__retry", onClick: function (event) { return handleRetry === null || handleRetry === void 0 ? void 0 : handleRetry(image.id, event); } },
                        React__default['default'].createElement(RetryIcon, null))),
                    url && (React__default['default'].createElement(Thumbnail, { handleClose: function (event) { return onClose(image.id, event); }, image: url })),
                    image.state === 'uploading' && (React__default['default'].createElement(LoadingIndicator$1, { backgroundColor: "#ffffff19", color: "#ffffffb2" }))));
            }),
            handleFiles && !disabled && (React__default['default'].createElement(ThumbnailPlaceholder, { handleFiles: handleFiles, multiple: multiple }))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedFileAttachment = function (props) {
        var attachment = props.attachment;
        return (React__default['default'].createElement("div", { className: 'str-chat__message-attachment-file--item', "data-testid": 'attachment-file' },
            React__default['default'].createElement(FileIcon, { big: true, filename: attachment.title, mimeType: attachment.mime_type, size: 30 }),
            React__default['default'].createElement("div", { className: 'str-chat__message-attachment-file--item-text' },
                React__default['default'].createElement(SafeAnchor, { download: true, href: attachment.asset_url, target: '_blank' }, attachment.title),
                attachment.file_size && Number.isFinite(Number(attachment.file_size)) && (React__default['default'].createElement("span", null, prettyBytes(attachment.file_size))))));
    };
    var FileAttachment = React__default['default'].memo(UnMemoizedFileAttachment);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var imageGallery = createCommonjsModule$1(function (module, exports) {
    !function(e,t){module.exports=t(React__default['default']);}(commonjsGlobal,(function(e){return (()=>{var t={703:(e,t,n)=>{var i=n(414);function r(){}function a(){}a.resetWarningCache=r,e.exports=function(){function e(e,t,n,r,a,s){if(s!==i){var o=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw o.name="Invariant Violation",o}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:r};return n.PropTypes=n,n};},697:(e,t,n)=>{e.exports=n(703)();},414:e=>{e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";},590:e=>{var t="undefined"!=typeof Element,n="function"==typeof Map,i="function"==typeof Set,r="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function a(e,s){if(e===s)return !0;if(e&&s&&"object"==typeof e&&"object"==typeof s){if(e.constructor!==s.constructor)return !1;var o,l,u,c;if(Array.isArray(e)){if((o=e.length)!=s.length)return !1;for(l=o;0!=l--;)if(!a(e[l],s[l]))return !1;return !0}if(n&&e instanceof Map&&s instanceof Map){if(e.size!==s.size)return !1;for(c=e.entries();!(l=c.next()).done;)if(!s.has(l.value[0]))return !1;for(c=e.entries();!(l=c.next()).done;)if(!a(l.value[1],s.get(l.value[0])))return !1;return !0}if(i&&e instanceof Set&&s instanceof Set){if(e.size!==s.size)return !1;for(c=e.entries();!(l=c.next()).done;)if(!s.has(l.value[0]))return !1;return !0}if(r&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(s)){if((o=e.length)!=s.length)return !1;for(l=o;0!=l--;)if(e[l]!==s[l])return !1;return !0}if(e.constructor===RegExp)return e.source===s.source&&e.flags===s.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===s.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===s.toString();if((o=(u=Object.keys(e)).length)!==Object.keys(s).length)return !1;for(l=o;0!=l--;)if(!Object.prototype.hasOwnProperty.call(s,u[l]))return !1;if(t&&e instanceof Element)return !1;for(l=o;0!=l--;)if(("_owner"!==u[l]&&"__v"!==u[l]&&"__o"!==u[l]||!e.$$typeof)&&!a(e[u[l]],s[u[l]]))return !1;return !0}return e!=e&&s!=s}e.exports=function(e,t){try{return a(e,t)}catch(e){if((e.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw e}};},37:function(e,t,n){!function(e,t){function n(){return (n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);}return e}).apply(this,arguments)}var i="Left",r="Right",a="Down",s={delta:10,preventDefaultTouchmoveEvent:!1,rotationAngle:0,trackMouse:!1,trackTouch:!0},o={first:!0,initial:[0,0],start:0,swiping:!1,xy:[0,0]},l="mousemove",u="mouseup";function c(e,t){if(0===t)return e;var n=Math.PI/180*t;return [e[0]*Math.cos(n)+e[1]*Math.sin(n),e[1]*Math.cos(n)-e[0]*Math.sin(n)]}function h(e,t){var s=function(t){t&&"touches"in t&&t.touches.length>1||e((function(e,i){i.trackMouse&&(document.addEventListener(l,h),document.addEventListener(u,f));var r="touches"in t?t.touches[0]:t,a=c([r.clientX,r.clientY],i.rotationAngle);return n({},e,o,{initial:[].concat(a),xy:a,start:t.timeStamp||0})}));},h=function(t){e((function(e,s){if("touches"in t&&t.touches.length>1)return e;var o="touches"in t?t.touches[0]:t,l=c([o.clientX,o.clientY],s.rotationAngle),u=l[0],h=l[1],d=u-e.xy[0],f=h-e.xy[1],p=Math.abs(d),m=Math.abs(f),v=(t.timeStamp||0)-e.start,g=Math.sqrt(p*p+m*m)/(v||1),b=[d/(v||1),f/(v||1)];if(p<s.delta&&m<s.delta&&!e.swiping)return e;var y=function(e,t,n,s){return e>t?n>0?r:i:s>0?a:"Up"}(p,m,d,f),w={absX:p,absY:m,deltaX:d,deltaY:f,dir:y,event:t,first:e.first,initial:e.initial,velocity:g,vxvy:b};s.onSwiping&&s.onSwiping(w);var T=!1;return (s.onSwiping||s.onSwiped||"onSwiped"+y in s)&&(T=!0),T&&s.preventDefaultTouchmoveEvent&&s.trackTouch&&t.cancelable&&t.preventDefault(),n({},e,{first:!1,eventData:w,swiping:!0})}));},d=function(t){e((function(e,i){var r;if(e.swiping&&e.eventData){r=n({},e.eventData,{event:t}),i.onSwiped&&i.onSwiped(r);var a="onSwiped"+r.dir;a in i&&i[a](r);}else i.onTap&&i.onTap({event:t});return n({},e,o,{eventData:r})}));},f=function(e){document.removeEventListener(l,h),document.removeEventListener(u,f),d(e);},p=function(e,t){var n=function(){};if(e&&e.addEventListener){var i=[["touchstart",s],["touchmove",h],["touchend",d]];i.forEach((function(n){var i=n[0],r=n[1];return e.addEventListener(i,r,{passive:t})})),n=function(){return i.forEach((function(t){var n=t[0],i=t[1];return e.removeEventListener(n,i)}))};}return n},m={ref:function(t){null!==t&&e((function(e,i){if(e.el===t)return e;var r={};return e.el&&e.el!==t&&e.cleanUpTouch&&(e.cleanUpTouch(),r.cleanUpTouch=void 0),i.trackTouch&&t&&(r.cleanUpTouch=p(t,!i.preventDefaultTouchmoveEvent)),n({},e,{el:t},r)}));}};return t.trackMouse&&(m.onMouseDown=s),[m,p]}e.DOWN=a,e.LEFT=i,e.RIGHT=r,e.UP="Up",e.useSwipeable=function(e){var i=e.trackMouse,r=t.useRef(n({},o)),a=t.useRef(n({},s));a.current=n({},s,e);var l=t.useMemo((function(){return h((function(e){return r.current=e(r.current,a.current)}),{trackMouse:i})}),[i]),u=l[0],c=l[1];return r.current=function(e,t,i){var r={};return !t.trackTouch&&e.cleanUpTouch?(e.cleanUpTouch(),r.cleanUpTouch=void 0):t.trackTouch&&!e.cleanUpTouch&&e.el&&(r.cleanUpTouch=i(e.el,!t.preventDefaultTouchmoveEvent)),n({},e,r)}(r.current,a.current,c),u};}(t,n(888));},888:t=>{t.exports=e;}},n={};function i(e){var r=n[e];if(void 0!==r)return r.exports;var a=n[e]={exports:{}};return t[e].call(a.exports,a,a.exports,i),a.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]});},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});};var r={};return (()=>{function e(t){var n,i,r="";if("string"==typeof t||"number"==typeof t)r+=t;else if("object"==typeof t)if(Array.isArray(t))for(n=0;n<t.length;n++)t[n]&&(i=e(t[n]))&&(r&&(r+=" "),r+=i);else for(n in t)t[n]&&(r&&(r+=" "),r+=n);return r}function t(){for(var t,n,i=0,r="";i<arguments.length;)(t=arguments[i++])&&(n=e(t))&&(r&&(r+=" "),r+=n);return r}i.r(r),i.d(r,{default:()=>Me});var n=i(888),a=i.n(n);const s=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)},o="object"==typeof commonjsGlobal&&commonjsGlobal&&commonjsGlobal.Object===Object&&commonjsGlobal;var l="object"==typeof self&&self&&self.Object===Object&&self;const u=o||l||Function("return this")(),c=function(){return u.Date.now()};var h=/\s/;var d=/^\s+/;const f=function(e){return e?e.slice(0,function(e){for(var t=e.length;t--&&h.test(e.charAt(t)););return t}(e)+1).replace(d,""):e},p=u.Symbol;var m=Object.prototype,v=m.hasOwnProperty,g=m.toString,b=p?p.toStringTag:void 0;var y=Object.prototype.toString;var w=p?p.toStringTag:void 0;const T=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":w&&w in Object(e)?function(e){var t=v.call(e,b),n=e[b];try{e[b]=void 0;var i=!0;}catch(e){}var r=g.call(e);return i&&(t?e[b]=n:delete e[b]),r}(e):function(e){return y.call(e)}(e)};var S=/^[-+]0x[0-9a-f]+$/i,O=/^0b[01]+$/i,E=/^0o[0-7]+$/i,I=parseInt;const k=function(e){if("number"==typeof e)return e;if(function(e){return "symbol"==typeof e||function(e){return null!=e&&"object"==typeof e}(e)&&"[object Symbol]"==T(e)}(e))return NaN;if(s(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=s(t)?t+"":t;}if("string"!=typeof e)return 0===e?e:+e;e=f(e);var n=O.test(e);return n||E.test(e)?I(e.slice(2),n?2:8):S.test(e)?NaN:+e};var x=Math.max,_=Math.min;const L=function(e,t,n){var i,r,a,o,l,u,h=0,d=!1,f=!1,p=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function m(t){var n=i,a=r;return i=r=void 0,h=t,o=e.apply(a,n)}function v(e){return h=e,l=setTimeout(b,t),d?m(e):o}function g(e){var n=e-u;return void 0===u||n>=t||n<0||f&&e-h>=a}function b(){var e=c();if(g(e))return y(e);l=setTimeout(b,function(e){var n=t-(e-u);return f?_(n,a-(e-h)):n}(e));}function y(e){return l=void 0,p&&i?m(e):(i=r=void 0,o)}function w(){var e=c(),n=g(e);if(i=arguments,r=this,u=e,n){if(void 0===l)return v(u);if(f)return clearTimeout(l),l=setTimeout(b,t),m(u)}return void 0===l&&(l=setTimeout(b,t)),o}return t=k(t)||0,s(n)&&(d=!!n.leading,a=(f="maxWait"in n)?x(k(n.maxWait)||0,t):a,p="trailing"in n?!!n.trailing:p),w.cancel=function(){void 0!==l&&clearTimeout(l),h=0,i=u=r=l=void 0;},w.flush=function(){return void 0===l?o:y(c())},w},P=function(e,t,n){var i=!0,r=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return s(n)&&(i="leading"in n?!!n.leading:i,r="trailing"in n?!!n.trailing:r),L(e,t,{leading:i,maxWait:t,trailing:r})};var M=i(590),R=i.n(M),D=function(){if("undefined"!=typeof Map)return Map;function e(e,t){var n=-1;return e.some((function(e,i){return e[0]===t&&(n=i,!0)})),n}return function(){function t(){this.__entries__=[];}return Object.defineProperty(t.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var n=e(this.__entries__,t),i=this.__entries__[n];return i&&i[1]},t.prototype.set=function(t,n){var i=e(this.__entries__,t);~i?this.__entries__[i][1]=n:this.__entries__.push([t,n]);},t.prototype.delete=function(t){var n=this.__entries__,i=e(n,t);~i&&n.splice(i,1);},t.prototype.has=function(t){return !!~e(this.__entries__,t)},t.prototype.clear=function(){this.__entries__.splice(0);},t.prototype.forEach=function(e,t){void 0===t&&(t=null);for(var n=0,i=this.__entries__;n<i.length;n++){var r=i[n];e.call(t,r[1],r[0]);}},t}()}(),F="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,C=void 0!==i.g&&i.g.Math===Math?i.g:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),W="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(C):function(e){return setTimeout((function(){return e(Date.now())}),1e3/60)},N=["top","right","bottom","left","width","height","size","weight"],j="undefined"!=typeof MutationObserver,z=function(){function e(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(e,t){var n=!1,i=!1,r=0;function a(){n&&(n=!1,e()),i&&o();}function s(){W(a);}function o(){var e=Date.now();if(n){if(e-r<2)return;i=!0;}else n=!0,i=!1,setTimeout(s,20);r=e;}return o}(this.refresh.bind(this));}return e.prototype.addObserver=function(e){~this.observers_.indexOf(e)||this.observers_.push(e),this.connected_||this.connect_();},e.prototype.removeObserver=function(e){var t=this.observers_,n=t.indexOf(e);~n&&t.splice(n,1),!t.length&&this.connected_&&this.disconnect_();},e.prototype.refresh=function(){this.updateObservers_()&&this.refresh();},e.prototype.updateObservers_=function(){var e=this.observers_.filter((function(e){return e.gatherActive(),e.hasActive()}));return e.forEach((function(e){return e.broadcastActive()})),e.length>0},e.prototype.connect_=function(){F&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),j?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0);},e.prototype.disconnect_=function(){F&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1);},e.prototype.onTransitionEnd_=function(e){var t=e.propertyName,n=void 0===t?"":t;N.some((function(e){return !!~n.indexOf(e)}))&&this.refresh();},e.getInstance=function(){return this.instance_||(this.instance_=new e),this.instance_},e.instance_=null,e}(),B=function(e,t){for(var n=0,i=Object.keys(t);n<i.length;n++){var r=i[n];Object.defineProperty(e,r,{value:t[r],enumerable:!1,writable:!1,configurable:!0});}return e},A=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||C},G=V(0,0,0,0);function U(e){return parseFloat(e)||0}function H(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.reduce((function(t,n){return t+U(e["border-"+n+"-width"])}),0)}var q="undefined"!=typeof SVGGraphicsElement?function(e){return e instanceof A(e).SVGGraphicsElement}:function(e){return e instanceof A(e).SVGElement&&"function"==typeof e.getBBox};function K(e){return F?q(e)?function(e){var t=e.getBBox();return V(0,0,t.width,t.height)}(e):function(e){var t=e.clientWidth,n=e.clientHeight;if(!t&&!n)return G;var i=A(e).getComputedStyle(e),r=function(e){for(var t={},n=0,i=["top","right","bottom","left"];n<i.length;n++){var r=i[n],a=e["padding-"+r];t[r]=U(a);}return t}(i),a=r.left+r.right,s=r.top+r.bottom,o=U(i.width),l=U(i.height);if("border-box"===i.boxSizing&&(Math.round(o+a)!==t&&(o-=H(i,"left","right")+a),Math.round(l+s)!==n&&(l-=H(i,"top","bottom")+s)),!function(e){return e===A(e).document.documentElement}(e)){var u=Math.round(o+a)-t,c=Math.round(l+s)-n;1!==Math.abs(u)&&(o-=u),1!==Math.abs(c)&&(l-=c);}return V(r.left,r.top,o,l)}(e):G}function V(e,t,n,i){return {x:e,y:t,width:n,height:i}}var X=function(){function e(e){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=V(0,0,0,0),this.target=e;}return e.prototype.isActive=function(){var e=K(this.target);return this.contentRect_=e,e.width!==this.broadcastWidth||e.height!==this.broadcastHeight},e.prototype.broadcastRect=function(){var e=this.contentRect_;return this.broadcastWidth=e.width,this.broadcastHeight=e.height,e},e}(),Y=function(e,t){var n,i,r,a,s,o,l,u=(i=(n=t).x,r=n.y,a=n.width,s=n.height,o="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,l=Object.create(o.prototype),B(l,{x:i,y:r,width:a,height:s,top:r,right:i+a,bottom:s+r,left:i}),l);B(this,{target:e,contentRect:u});},$=function(){function e(e,t,n){if(this.activeObservations_=[],this.observations_=new D,"function"!=typeof e)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=e,this.controller_=t,this.callbackCtx_=n;}return e.prototype.observe=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof A(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)||(t.set(e,new X(e)),this.controller_.addObserver(this),this.controller_.refresh());}},e.prototype.unobserve=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof A(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)&&(t.delete(e),t.size||this.controller_.removeObserver(this));}},e.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this);},e.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach((function(t){t.isActive()&&e.activeObservations_.push(t);}));},e.prototype.broadcastActive=function(){if(this.hasActive()){var e=this.callbackCtx_,t=this.activeObservations_.map((function(e){return new Y(e.target,e.broadcastRect())}));this.callback_.call(e,t,e),this.clearActive();}},e.prototype.clearActive=function(){this.activeObservations_.splice(0);},e.prototype.hasActive=function(){return this.activeObservations_.length>0},e}(),J="undefined"!=typeof WeakMap?new WeakMap:new D,Q=function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=z.getInstance(),i=new $(t,n,this);J.set(this,i);};["observe","unobserve","disconnect"].forEach((function(e){Q.prototype[e]=function(){var t;return (t=J.get(this))[e].apply(t,arguments)};}));const Z=void 0!==C.ResizeObserver?C.ResizeObserver:Q;var ee=i(37),te=i(697),ne=a().memo((function(e){var t=e.description,n=e.fullscreen,i=e.handleImageLoaded,r=e.isFullscreen,s=e.onImageError,o=e.original,l=e.originalAlt,u=e.originalHeight,c=e.originalWidth,h=e.originalTitle,d=e.sizes,f=e.srcSet,p=r&&n||o;return a().createElement(a().Fragment,null,a().createElement("img",{className:"image-gallery-image",src:p,alt:l,srcSet:f,height:u,width:c,sizes:d,title:h,onLoad:function(e){return i(e,o)},onError:s}),t&&a().createElement("span",{className:"image-gallery-description"},t))}));ne.displayName="Item",ne.propTypes={description:te.string,fullscreen:te.string,handleImageLoaded:te.func.isRequired,isFullscreen:te.bool,onImageError:te.func.isRequired,original:te.string.isRequired,originalAlt:te.string,originalHeight:te.string,originalWidth:te.string,originalTitle:te.string,sizes:te.string,srcSet:te.string},ne.defaultProps={description:"",fullscreen:"",isFullscreen:!1,originalAlt:"",originalHeight:"",originalWidth:"",originalTitle:"",sizes:"",srcSet:""};const ie=ne;var re={left:a().createElement("polyline",{points:"15 18 9 12 15 6"}),right:a().createElement("polyline",{points:"9 18 15 12 9 6"}),maximize:a().createElement("path",{d:"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}),minimize:a().createElement("path",{d:"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}),play:a().createElement("polygon",{points:"5 3 19 12 5 21 5 3"}),pause:a().createElement(a().Fragment,null,a().createElement("rect",{x:"6",y:"4",width:"4",height:"16"}),a().createElement("rect",{x:"14",y:"4",width:"4",height:"16"}))},ae=function(e){var t=e.strokeWidth,n=e.viewBox,i=e.icon;return a().createElement("svg",{className:"image-gallery-svg",xmlns:"http://www.w3.org/2000/svg",viewBox:n,fill:"none",stroke:"currentColor",strokeWidth:t,strokeLinecap:"round",strokeLinejoin:"round"},re[i])};ae.propTypes={strokeWidth:te.number,viewBox:te.string,icon:(0, te.oneOf)(["left","right","maximize","minimize","play","pause"]).isRequired},ae.defaultProps={strokeWidth:1,viewBox:"0 0 24 24"};const se=ae;var oe=a().memo((function(e){var t=e.isFullscreen,n=e.onClick;return a().createElement("button",{type:"button",className:"image-gallery-icon image-gallery-fullscreen-button",onClick:n,"aria-label":"Open Fullscreen"},a().createElement(se,{strokeWidth:2,icon:t?"minimize":"maximize"}))}));oe.displayName="Fullscreen",oe.propTypes={isFullscreen:te.bool.isRequired,onClick:te.func.isRequired};const le=oe;var ue=a().memo((function(e){var t=e.disabled,n=e.onClick;return a().createElement("button",{type:"button",className:"image-gallery-icon image-gallery-left-nav",disabled:t,onClick:n,"aria-label":"Previous Slide"},a().createElement(se,{icon:"left",viewBox:"6 0 12 24"}))}));ue.displayName="LeftNav",ue.propTypes={disabled:te.bool.isRequired,onClick:te.func.isRequired};const ce=ue;var he=a().memo((function(e){var t=e.disabled,n=e.onClick;return a().createElement("button",{type:"button",className:"image-gallery-icon image-gallery-right-nav",disabled:t,onClick:n,"aria-label":"Next Slide"},a().createElement(se,{icon:"right",viewBox:"6 0 12 24"}))}));he.displayName="RightNav",he.propTypes={disabled:te.bool.isRequired,onClick:te.func.isRequired};const de=he;var fe=a().memo((function(e){var t=e.isPlaying,n=e.onClick;return a().createElement("button",{type:"button",className:"image-gallery-icon image-gallery-play-button",onClick:n,"aria-label":"Play or Pause Slideshow"},a().createElement(se,{strokeWidth:2,icon:t?"pause":"play"}))}));fe.displayName="PlayPause",fe.propTypes={isPlaying:te.bool.isRequired,onClick:te.func.isRequired};const pe=fe;function me(){return (me=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);}return e}).apply(this,arguments)}var ve=function(e){var t=e.children,n=e.className,i=e.delta,r=e.onSwiping,s=e.onSwiped,o=(0, ee.useSwipeable)({delta:i,onSwiping:r,onSwiped:s});return a().createElement("div",me({},o,{className:n}),t)};ve.propTypes={children:te.node.isRequired,className:te.string,delta:te.number,onSwiped:te.func,onSwiping:te.func},ve.defaultProps={className:"",delta:0,onSwiping:function(){},onSwiped:function(){}};const ge=ve;function be(e){return (be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ye(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i);}return n}function we(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ye(Object(n),!0).forEach((function(t){Te(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ye(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}function Te(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Se(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i);}}function Oe(e,t){return (Oe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ee(e,t){return !t||"object"!==be(t)&&"function"!=typeof t?Ie(e):t}function Ie(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ke(e){return (ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var xe=["fullscreenchange","MSFullscreenChange","mozfullscreenchange","webkitfullscreenchange"],_e=(0, te.arrayOf)((0, te.shape)({srcSet:te.string,media:te.string}));function Le(e){var t=parseInt(e.keyCode||e.which||0,10);return 66===t||62===t}var Pe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Oe(e,t);}(l,e);var n,i,r,s,o=(r=l,s=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}(),function(){var e,t=ke(r);if(s){var n=ke(this).constructor;e=Reflect.construct(t,arguments,n);}else e=t.apply(this,arguments);return Ee(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=o.call(this,e)).state={currentIndex:e.startIndex,thumbsTranslate:0,thumbsSwipedTranslate:0,currentSlideOffset:0,galleryWidth:0,thumbnailsWrapperWidth:0,thumbnailsWrapperHeight:0,thumbsStyle:{transition:"all ".concat(e.slideDuration,"ms ease-out")},isFullscreen:!1,isSwipingThumbnail:!1,isPlaying:!1},t.loadedImages={},t.imageGallery=a().createRef(),t.thumbnailsWrapper=a().createRef(),t.thumbnails=a().createRef(),t.imageGallerySlideWrapper=a().createRef(),t.handleImageLoaded=t.handleImageLoaded.bind(Ie(t)),t.handleKeyDown=t.handleKeyDown.bind(Ie(t)),t.handleMouseDown=t.handleMouseDown.bind(Ie(t)),t.handleTouchMove=t.handleTouchMove.bind(Ie(t)),t.handleOnSwiped=t.handleOnSwiped.bind(Ie(t)),t.handleScreenChange=t.handleScreenChange.bind(Ie(t)),t.handleSwiping=t.handleSwiping.bind(Ie(t)),t.handleThumbnailSwiping=t.handleThumbnailSwiping.bind(Ie(t)),t.handleOnThumbnailSwiped=t.handleOnThumbnailSwiped.bind(Ie(t)),t.onThumbnailMouseLeave=t.onThumbnailMouseLeave.bind(Ie(t)),t.handleImageError=t.handleImageError.bind(Ie(t)),t.pauseOrPlay=t.pauseOrPlay.bind(Ie(t)),t.renderThumbInner=t.renderThumbInner.bind(Ie(t)),t.renderItem=t.renderItem.bind(Ie(t)),t.slideLeft=t.slideLeft.bind(Ie(t)),t.slideRight=t.slideRight.bind(Ie(t)),t.toggleFullScreen=t.toggleFullScreen.bind(Ie(t)),t.togglePlay=t.togglePlay.bind(Ie(t)),t.unthrottledSlideToIndex=t.slideToIndex,t.slideToIndex=P(t.unthrottledSlideToIndex,e.slideDuration,{trailing:!1}),e.lazyLoad&&(t.lazyLoaded=[]),t}return n=l,(i=[{key:"componentDidMount",value:function(){var e=this.props,t=e.autoPlay,n=e.useWindowKeyDown;t&&this.play(),n?window.addEventListener("keydown",this.handleKeyDown):this.imageGallery.current.addEventListener("keydown",this.handleKeyDown),window.addEventListener("mousedown",this.handleMouseDown),window.addEventListener("touchmove",this.handleTouchMove,{passive:!1}),this.initResizeObserver(this.imageGallerySlideWrapper),this.addScreenChangeEvent();}},{key:"componentDidUpdate",value:function(e,t){var n=this.props,i=n.items,r=n.lazyLoad,a=n.slideDuration,s=n.slideInterval,o=n.startIndex,l=n.thumbnailPosition,u=n.showThumbnails,c=n.useWindowKeyDown,h=this.state.currentIndex,d=e.items.length!==i.length,f=!R()(e.items,i),p=e.startIndex!==o,m=e.thumbnailPosition!==l,v=e.showThumbnails!==u;s===e.slideInterval&&a===e.slideDuration||(this.pause(),this.play()),m&&(this.removeResizeObserver(),this.initResizeObserver(this.imageGallerySlideWrapper)),(d||v)&&this.handleResize(),t.currentIndex!==h&&this.slideThumbnailBar(),e.slideDuration!==a&&(this.slideToIndex=P(this.unthrottledSlideToIndex,a,{trailing:!1})),!r||e.lazyLoad&&!f||(this.lazyLoaded=[]),c!==e.useWindowKeyDown&&(c?(this.imageGallery.current.removeEventListener("keydown",this.handleKeyDown),window.addEventListener("keydown",this.handleKeyDown)):(window.removeEventListener("keydown",this.handleKeyDown),this.imageGallery.current.addEventListener("keydown",this.handleKeyDown))),(p||f)&&this.setState({currentIndex:o});}},{key:"componentWillUnmount",value:function(){var e=this.props.useWindowKeyDown;window.removeEventListener("mousedown",this.handleMouseDown),window.removeEventListener("touchmove",this.handleTouchMove),this.removeScreenChangeEvent(),this.removeResizeObserver(),this.playPauseIntervalId&&(window.clearInterval(this.playPauseIntervalId),this.playPauseIntervalId=null),this.transitionTimer&&window.clearTimeout(this.transitionTimer),e?window.removeEventListener("keydown",this.handleKeyDown):this.imageGallery.current.removeEventListener("keydown",this.handleKeyDown);}},{key:"onSliding",value:function(){var e=this,t=this.state,n=t.currentIndex,i=t.isTransitioning,r=this.props,a=r.onSlide,s=r.slideDuration;this.transitionTimer=window.setTimeout((function(){i&&(e.setState({isTransitioning:!i,isSwipingThumbnail:!1}),a&&a(n));}),s+50);}},{key:"onThumbnailClick",value:function(e,t){var n=this.props.onThumbnailClick;e.target.parentNode.parentNode.blur(),this.slideToIndex(t,e),n&&n(e,t);}},{key:"onThumbnailMouseOver",value:function(e,t){var n=this;this.thumbnailMouseOverTimer&&(window.clearTimeout(this.thumbnailMouseOverTimer),this.thumbnailMouseOverTimer=null),this.thumbnailMouseOverTimer=window.setTimeout((function(){n.slideToIndex(t),n.pause();}),300);}},{key:"onThumbnailMouseLeave",value:function(){if(this.thumbnailMouseOverTimer){var e=this.props.autoPlay;window.clearTimeout(this.thumbnailMouseOverTimer),this.thumbnailMouseOverTimer=null,e&&this.play();}}},{key:"setThumbsTranslate",value:function(e){this.setState({thumbsTranslate:e});}},{key:"setModalFullscreen",value:function(e){var t=this.props.onScreenChange;this.setState({modalFullscreen:e}),t&&t(e);}},{key:"getThumbsTranslate",value:function(e){var t,n=this.props,i=n.disableThumbnailScroll,r=n.items,a=this.state,s=a.thumbnailsWrapperWidth,o=a.thumbnailsWrapperHeight,l=this.thumbnails&&this.thumbnails.current;if(i)return 0;if(l){if(this.isThumbnailVertical()){if(l.scrollHeight<=o)return 0;t=l.scrollHeight-o;}else {if(l.scrollWidth<=s||s<=0)return 0;t=l.scrollWidth-s;}return e*(t/(r.length-1))}return 0}},{key:"getAlignmentClassName",value:function(e){var t=this.state.currentIndex,n=this.props,i=n.infinite,r=n.items,a="",s="left",o="right";switch(e){case t-1:a=" ".concat(s);break;case t:a=" ".concat("center");break;case t+1:a=" ".concat(o);}return r.length>=3&&i&&(0===e&&t===r.length-1?a=" ".concat(o):e===r.length-1&&0===t&&(a=" ".concat(s))),a}},{key:"getTranslateXForTwoSlide",value:function(e){var t=this.state,n=t.currentIndex,i=t.currentSlideOffset,r=t.previousIndex,a=n!==r,s=0===e&&0===r,o=1===e&&1===r,l=0===e&&1===n,u=1===e&&0===n,c=0===i,h=-100*n+100*e+i;return i>0?this.direction="left":i<0&&(this.direction="right"),u&&i>0&&(h=-100+i),l&&i<0&&(h=100+i),a?s&&c&&"left"===this.direction?h=100:o&&c&&"right"===this.direction&&(h=-100):(u&&c&&"left"===this.direction&&(h=-100),l&&c&&"right"===this.direction&&(h=100)),h}},{key:"getThumbnailBarHeight",value:function(){return this.isThumbnailVertical()?{height:this.state.gallerySlideWrapperHeight}:{}}},{key:"getSlideStyle",value:function(e){var t=this.state,n=t.currentIndex,i=t.currentSlideOffset,r=t.slideStyle,a=this.props,s=a.infinite,o=a.items,l=a.useTranslate3D,u=a.isRTL,c=-100*n,h=o.length-1,d=(c+100*e)*(u?-1:1)+i;s&&o.length>2&&(0===n&&e===h?d=-100*(u?-1:1)+i:n===h&&0===e&&(d=100*(u?-1:1)+i)),s&&2===o.length&&(d=this.getTranslateXForTwoSlide(e));var f="translate(".concat(d,"%, 0)");return l&&(f="translate3d(".concat(d,"%, 0, 0)")),we({display:this.isSlideVisible(e)?"inherit":"none",WebkitTransform:f,MozTransform:f,msTransform:f,OTransform:f,transform:f},r)}},{key:"getCurrentIndex",value:function(){return this.state.currentIndex}},{key:"getThumbnailStyle",value:function(){var e,t=this.props,n=t.useTranslate3D,i=t.isRTL,r=this.state,a=r.thumbsTranslate,s=r.thumbsStyle,o=i?-1*a:a;return this.isThumbnailVertical()?(e="translate(0, ".concat(a,"px)"),n&&(e="translate3d(0, ".concat(a,"px, 0)"))):(e="translate(".concat(o,"px, 0)"),n&&(e="translate3d(".concat(o,"px, 0, 0)"))),we({WebkitTransform:e,MozTransform:e,msTransform:e,OTransform:e,transform:e},s)}},{key:"getSlideItems",value:function(){var e=this,n=this.state.currentIndex,i=this.props,r=i.items,s=i.slideOnThumbnailOver,o=i.onClick,l=i.lazyLoad,u=i.onTouchMove,c=i.onTouchEnd,h=i.onTouchStart,d=i.onMouseOver,f=i.onMouseLeave,p=i.renderItem,m=i.renderThumbInner,v=i.showThumbnails,g=i.showBullets,b=[],y=[],w=[];return r.forEach((function(i,r){var T=e.getAlignmentClassName(r),S=i.originalClass?" ".concat(i.originalClass):"",O=i.thumbnailClass?" ".concat(i.thumbnailClass):"",E=i.renderItem||p||e.renderItem,I=i.renderThumbInner||m||e.renderThumbInner,k=!l||T||e.lazyLoaded[r];k&&l&&!e.lazyLoaded[r]&&(e.lazyLoaded[r]=!0);var x=e.getSlideStyle(r),_=a().createElement("div",{"aria-label":"Go to Slide ".concat(r+1),key:"slide-".concat(r),tabIndex:"-1",className:"image-gallery-slide ".concat(T," ").concat(S),style:x,onClick:o,onKeyUp:e.handleSlideKeyUp,onTouchMove:u,onTouchEnd:c,onTouchStart:h,onMouseOver:d,onFocus:d,onMouseLeave:f,role:"button"},k?E(i):a().createElement("div",{style:{height:"100%"}}));if(b.push(_),v&&i.thumbnail){var L=t("image-gallery-thumbnail",O,{active:n===r});y.push(a().createElement("button",{key:"thumbnail-".concat(r),type:"button",tabIndex:"0","aria-pressed":n===r?"true":"false","aria-label":"Go to Slide ".concat(r+1),className:L,onMouseLeave:s?e.onThumbnailMouseLeave:null,onMouseOver:function(t){return e.handleThumbnailMouseOver(t,r)},onFocus:function(t){return e.handleThumbnailMouseOver(t,r)},onKeyUp:function(t){return e.handleThumbnailKeyUp(t,r)},onClick:function(t){return e.onThumbnailClick(t,r)}},I(i)));}if(g){var P=t("image-gallery-bullet",i.bulletClass,{active:n===r});w.push(a().createElement("button",{type:"button",key:"bullet-".concat(r),className:P,onClick:function(t){return i.bulletOnClick&&i.bulletOnClick({item:i,itemIndex:r,currentIndex:n}),t.target.blur(),e.slideToIndex.call(e,r,t)},"aria-pressed":n===r?"true":"false","aria-label":"Go to Slide ".concat(r+1)}));}})),{slides:b,thumbnails:y,bullets:w}}},{key:"ignoreIsTransitioning",value:function(){var e=this.props.items,t=this.state,n=t.previousIndex,i=t.currentIndex,r=e.length-1;return Math.abs(n-i)>1&&!(0===n&&i===r)&&!(n===r&&0===i)}},{key:"isFirstOrLastSlide",value:function(e){return e===this.props.items.length-1||0===e}},{key:"slideIsTransitioning",value:function(e){var t=this.state,n=t.isTransitioning,i=t.previousIndex,r=t.currentIndex;return n&&!(e===i||e===r)}},{key:"isSlideVisible",value:function(e){return !this.slideIsTransitioning(e)||this.ignoreIsTransitioning()&&!this.isFirstOrLastSlide(e)}},{key:"slideThumbnailBar",value:function(){var e=this.state,t=e.currentIndex,n=e.isSwipingThumbnail,i=-this.getThumbsTranslate(t);n||(0===t?this.setState({thumbsTranslate:0,thumbsSwipedTranslate:0}):this.setState({thumbsTranslate:i,thumbsSwipedTranslate:i}));}},{key:"canSlide",value:function(){return this.props.items.length>=2}},{key:"canSlideLeft",value:function(){var e=this.props,t=e.infinite,n=e.isRTL;return t||(n?this.canSlideNext():this.canSlidePrevious())}},{key:"canSlideRight",value:function(){var e=this.props,t=e.infinite,n=e.isRTL;return t||(n?this.canSlidePrevious():this.canSlideNext())}},{key:"canSlidePrevious",value:function(){return this.state.currentIndex>0}},{key:"canSlideNext",value:function(){return this.state.currentIndex<this.props.items.length-1}},{key:"handleSwiping",value:function(e){var t=e.event,n=e.absX,i=e.dir,r=this.props,a=r.disableSwipe,s=r.stopPropagation,o=this.state,l=o.galleryWidth,u=o.isTransitioning,c=o.swipingUpDown,h=o.swipingLeftRight;if(i!==ee.UP&&i!==ee.DOWN&&!c||h){if(i!==ee.LEFT&&i!==ee.RIGHT||h||this.setState({swipingLeftRight:!0}),!a){var d=this.props.swipingTransitionDuration;if(s&&t.preventDefault(),u)this.setState({currentSlideOffset:0});else {var f=i===ee.RIGHT?1:-1,p=n/l*100;Math.abs(p)>=100&&(p=100);var m={transition:"transform ".concat(d,"ms ease-out")};this.setState({currentSlideOffset:f*p,slideStyle:m});}}}else c||this.setState({swipingUpDown:!0});}},{key:"handleThumbnailSwiping",value:function(e){var t=e.event,n=e.absX,i=e.absY,r=e.dir,a=this.props,s=a.stopPropagation,o=a.swipingThumbnailTransitionDuration,l=this.state,u=l.thumbsSwipedTranslate,c=l.thumbnailsWrapperHeight,h=l.thumbnailsWrapperWidth,d=l.swipingUpDown,f=l.swipingLeftRight;if(this.isThumbnailVertical()){if((r===ee.LEFT||r===ee.RIGHT||f)&&!d)return void(f||this.setState({swipingLeftRight:!0}));r!==ee.UP&&r!==ee.DOWN||d||this.setState({swipingUpDown:!0});}else {if((r===ee.UP||r===ee.DOWN||d)&&!f)return void(d||this.setState({swipingUpDown:!0}));r!==ee.LEFT&&r!==ee.RIGHT||f||this.setState({swipingLeftRight:!0});}var p,m,v,g,b,y=this.thumbnails&&this.thumbnails.current;if(this.isThumbnailVertical()?(p=u+(r===ee.DOWN?i:-i),m=y.scrollHeight-c+20,v=Math.abs(p)>m,g=p>20,b=y.scrollHeight<=c):(p=u+(r===ee.RIGHT?n:-n),m=y.scrollWidth-h+20,v=Math.abs(p)>m,g=p>20,b=y.scrollWidth<=h),!b&&(r!==ee.LEFT&&r!==ee.UP||!v)&&(r!==ee.RIGHT&&r!==ee.DOWN||!g)){s&&t.stopPropagation();var w={transition:"transform ".concat(o,"ms ease-out")};this.setState({thumbsTranslate:p,thumbsStyle:w});}}},{key:"handleOnThumbnailSwiped",value:function(){var e=this.state.thumbsTranslate,t=this.props.slideDuration;this.resetSwipingDirection(),this.setState({isSwipingThumbnail:!0,thumbsSwipedTranslate:e,thumbsStyle:{transition:"all ".concat(t,"ms ease-out")}});}},{key:"sufficientSwipe",value:function(){var e=this.state.currentSlideOffset,t=this.props.swipeThreshold;return Math.abs(e)>t}},{key:"resetSwipingDirection",value:function(){var e=this.state,t=e.swipingUpDown,n=e.swipingLeftRight;t&&this.setState({swipingUpDown:!1}),n&&this.setState({swipingLeftRight:!1});}},{key:"handleOnSwiped",value:function(e){var t=e.event,n=e.dir,i=e.velocity,r=this.props,a=r.disableSwipe,s=r.stopPropagation,o=r.flickThreshold;if(!a){var l=this.props.isRTL;s&&t.stopPropagation(),this.resetSwipingDirection();var u=(n===ee.LEFT?1:-1)*(l?-1:1),c=n===ee.UP||n===ee.DOWN,h=i>o&&!c;this.handleOnSwipedTo(u,h);}}},{key:"handleOnSwipedTo",value:function(e,t){var n=this.state,i=n.currentIndex,r=n.isTransitioning,a=i;!this.sufficientSwipe()&&!t||r||(a+=e),(-1===e&&!this.canSlideLeft()||1===e&&!this.canSlideRight())&&(a=i),this.unthrottledSlideToIndex(a);}},{key:"handleTouchMove",value:function(e){this.state.swipingLeftRight&&e.preventDefault();}},{key:"handleMouseDown",value:function(){this.imageGallery.current.classList.add("image-gallery-using-mouse");}},{key:"handleKeyDown",value:function(e){var t=this.props,n=t.disableKeyDown,i=t.useBrowserFullscreen,r=this.state.isFullscreen;if(this.imageGallery.current.classList.remove("image-gallery-using-mouse"),!n)switch(parseInt(e.keyCode||e.which||0,10)){case 37:this.canSlideLeft()&&!this.playPauseIntervalId&&this.slideLeft(e);break;case 39:this.canSlideRight()&&!this.playPauseIntervalId&&this.slideRight(e);break;case 27:r&&!i&&this.exitFullScreen();}}},{key:"handleImageError",value:function(e){var t=this.props.onErrorImageURL;t&&-1===e.target.src.indexOf(t)&&(e.target.src=t);}},{key:"removeResizeObserver",value:function(){this.resizeObserver&&this.imageGallerySlideWrapper&&this.imageGallerySlideWrapper.current&&(this.resizeObserver.unobserve(this.imageGallerySlideWrapper.current),this.resizeObserver=null);}},{key:"handleResize",value:function(){var e=this.state.currentIndex;this.resizeObserver&&(this.imageGallery&&this.imageGallery.current&&this.setState({galleryWidth:this.imageGallery.current.offsetWidth}),this.imageGallerySlideWrapper&&this.imageGallerySlideWrapper.current&&this.setState({gallerySlideWrapperHeight:this.imageGallerySlideWrapper.current.offsetHeight}),this.thumbnailsWrapper&&this.thumbnailsWrapper.current&&(this.isThumbnailVertical()?this.setState({thumbnailsWrapperHeight:this.thumbnailsWrapper.current.offsetHeight}):this.setState({thumbnailsWrapperWidth:this.thumbnailsWrapper.current.offsetWidth})),this.setThumbsTranslate(-this.getThumbsTranslate(e)));}},{key:"initResizeObserver",value:function(e){var t=this;this.resizeObserver=new Z(L((function(e){e&&e.forEach((function(){t.handleResize();}));}),300)),this.resizeObserver.observe(e.current);}},{key:"toggleFullScreen",value:function(){this.state.isFullscreen?this.exitFullScreen():this.fullScreen();}},{key:"togglePlay",value:function(){this.playPauseIntervalId?this.pause():this.play();}},{key:"handleScreenChange",value:function(){var e=this.props,t=e.onScreenChange,n=e.useBrowserFullscreen,i=document.fullscreenElement||document.msFullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement,r=this.imageGallery.current===i;t&&t(r),n&&this.setState({isFullscreen:r});}},{key:"slideToIndex",value:function(e,t){var n=this.state,i=n.currentIndex,r=n.isTransitioning,a=this.props,s=a.items,o=a.slideDuration,l=a.onBeforeSlide;if(!r){t&&this.playPauseIntervalId&&(this.pause(!1),this.play(!1));var u=s.length-1,c=e;e<0?c=u:e>u&&(c=0),l&&c!==i&&l(c),this.setState({previousIndex:i,currentIndex:c,isTransitioning:c!==i,currentSlideOffset:0,slideStyle:{transition:"all ".concat(o,"ms ease-out")}},this.onSliding);}}},{key:"slideLeft",value:function(e){var t=this.props.isRTL;this.slideTo(e,t?"right":"left");}},{key:"slideRight",value:function(e){var t=this.props.isRTL;this.slideTo(e,t?"left":"right");}},{key:"slideTo",value:function(e,t){var n=this,i=this.state,r=i.currentIndex,a=i.currentSlideOffset,s=i.isTransitioning,o=this.props.items,l=r+("left"===t?-1:1);s||(2===o.length?this.setState({currentSlideOffset:a+("left"===t?.001:-.001),slideStyle:{transition:"none"}},(function(){window.setTimeout((function(){return n.slideToIndex(l,e)}),25);})):this.slideToIndex(l,e));}},{key:"handleThumbnailMouseOver",value:function(e,t){this.props.slideOnThumbnailOver&&this.onThumbnailMouseOver(e,t);}},{key:"handleThumbnailKeyUp",value:function(e,t){Le(e)&&this.onThumbnailClick(e,t);}},{key:"handleSlideKeyUp",value:function(e){Le(e)&&(0, this.props.onClick)(e);}},{key:"isThumbnailVertical",value:function(){var e=this.props.thumbnailPosition;return "left"===e||"right"===e}},{key:"addScreenChangeEvent",value:function(){var e=this;xe.forEach((function(t){document.addEventListener(t,e.handleScreenChange);}));}},{key:"removeScreenChangeEvent",value:function(){var e=this;xe.forEach((function(t){document.removeEventListener(t,e.handleScreenChange);}));}},{key:"fullScreen",value:function(){var e=this.props.useBrowserFullscreen,t=this.imageGallery.current;e?t.requestFullscreen?t.requestFullscreen():t.msRequestFullscreen?t.msRequestFullscreen():t.mozRequestFullScreen?t.mozRequestFullScreen():t.webkitRequestFullscreen?t.webkitRequestFullscreen():this.setModalFullscreen(!0):this.setModalFullscreen(!0),this.setState({isFullscreen:!0});}},{key:"exitFullScreen",value:function(){var e=this.state.isFullscreen,t=this.props.useBrowserFullscreen;e&&(t?document.exitFullscreen?document.exitFullscreen():document.webkitExitFullscreen?document.webkitExitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.msExitFullscreen?document.msExitFullscreen():this.setModalFullscreen(!1):this.setModalFullscreen(!1),this.setState({isFullscreen:!1}));}},{key:"pauseOrPlay",value:function(){var e=this.props.infinite,t=this.state.currentIndex;e||this.canSlideRight()?this.slideToIndex(t+1):this.pause();}},{key:"play",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=this.props,n=t.onPlay,i=t.slideInterval,r=t.slideDuration,a=this.state.currentIndex;this.playPauseIntervalId||(this.setState({isPlaying:!0}),this.playPauseIntervalId=window.setInterval(this.pauseOrPlay,Math.max(i,r)),n&&e&&n(a));}},{key:"pause",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=this.props.onPause,n=this.state.currentIndex;this.playPauseIntervalId&&(window.clearInterval(this.playPauseIntervalId),this.playPauseIntervalId=null,this.setState({isPlaying:!1}),t&&e&&t(n));}},{key:"isImageLoaded",value:function(e){return !!this.loadedImages[e.original]||(this.loadedImages[e.original]=!0,!1)}},{key:"handleImageLoaded",value:function(e,t){var n=this.props.onImageLoad;!this.loadedImages[t]&&n&&(this.loadedImages[t]=!0,n(e));}},{key:"renderItem",value:function(e){var t=this.state.isFullscreen,n=this.props.onImageError||this.handleImageError;return a().createElement(ie,{description:e.description,fullscreen:e.fullscreen,handleImageLoaded:this.handleImageLoaded,isFullscreen:t,onImageError:n,original:e.original,originalAlt:e.originalAlt,originalHeight:e.originalHeight,originalWidth:e.originalWidth,originalTitle:e.originalTitle,sizes:e.sizes,srcSet:e.srcSet})}},{key:"renderThumbInner",value:function(e){var t=this.props.onThumbnailError||this.handleImageError;return a().createElement("span",{className:"image-gallery-thumbnail-inner"},a().createElement("img",{className:"image-gallery-thumbnail-image",src:e.thumbnail,height:e.thumbnailHeight,width:e.thumbnailWidth,alt:e.thumbnailAlt,title:e.thumbnailTitle,onError:t}),e.thumbnailLabel&&a().createElement("div",{className:"image-gallery-thumbnail-label"},e.thumbnailLabel))}},{key:"render",value:function(){var e=this.state,n=e.currentIndex,i=e.isFullscreen,r=e.modalFullscreen,s=e.isPlaying,o=this.props,l=o.additionalClass,u=o.disableThumbnailSwipe,c=o.indexSeparator,h=o.isRTL,d=o.items,f=o.thumbnailPosition,p=o.renderFullscreenButton,m=o.renderCustomControls,v=o.renderLeftNav,g=o.renderRightNav,b=o.showBullets,y=o.showFullscreenButton,w=o.showIndex,T=o.showThumbnails,S=o.showNav,O=o.showPlayButton,E=o.renderPlayPauseButton,I=this.getThumbnailStyle(),k=this.getSlideItems(),x=k.slides,_=k.thumbnails,L=k.bullets,P=t("image-gallery-slide-wrapper",f,{"image-gallery-rtl":h}),M=a().createElement("div",{ref:this.imageGallerySlideWrapper,className:P},m&&m(),this.canSlide()?a().createElement(a().Fragment,null,S&&a().createElement(a().Fragment,null,v(this.slideLeft,!this.canSlideLeft()),g(this.slideRight,!this.canSlideRight())),a().createElement(ge,{className:"image-gallery-swipe",delta:0,onSwiping:this.handleSwiping,onSwiped:this.handleOnSwiped},a().createElement("div",{className:"image-gallery-slides"},x))):a().createElement("div",{className:"image-gallery-slides"},x),O&&E(this.togglePlay,s),b&&a().createElement("div",{className:"image-gallery-bullets"},a().createElement("div",{className:"image-gallery-bullets-container",role:"navigation","aria-label":"Bullet Navigation"},L)),y&&p(this.toggleFullScreen,i),w&&a().createElement("div",{className:"image-gallery-index"},a().createElement("span",{className:"image-gallery-index-current"},n+1),a().createElement("span",{className:"image-gallery-index-separator"},c),a().createElement("span",{className:"image-gallery-index-total"},d.length))),R=t("image-gallery",l,{"fullscreen-modal":r}),D=t("image-gallery-content",f,{fullscreen:i}),F=t("image-gallery-thumbnails-wrapper",f,{"thumbnails-wrapper-rtl":!this.isThumbnailVertical()&&h},{"thumbnails-swipe-horizontal":!this.isThumbnailVertical()&&!u},{"thumbnails-swipe-vertical":this.isThumbnailVertical()&&!u});return a().createElement("div",{ref:this.imageGallery,className:R,"aria-live":"polite"},a().createElement("div",{className:D},("bottom"===f||"right"===f)&&M,T&&_.length>0?a().createElement(ge,{className:F,delta:0,onSwiping:!u&&this.handleThumbnailSwiping,onSwiped:!u&&this.handleOnThumbnailSwiped},a().createElement("div",{className:"image-gallery-thumbnails",ref:this.thumbnailsWrapper,style:this.getThumbnailBarHeight()},a().createElement("div",{ref:this.thumbnails,className:"image-gallery-thumbnails-container",style:I,"aria-label":"Thumbnail Navigation"},_))):null,("top"===f||"left"===f)&&M))}}])&&Se(n.prototype,i),l}(a().Component);Pe.propTypes={flickThreshold:te.number,items:(0, te.arrayOf)((0, te.shape)({bulletClass:te.string,bulletOnClick:te.func,description:te.string,original:te.string,originalHeight:te.number,originalWidth:te.number,thumbnailHeight:te.number,thumbnailWidth:te.number,fullscreen:te.string,originalAlt:te.string,originalTitle:te.string,thumbnail:te.string,thumbnailAlt:te.string,thumbnailLabel:te.string,thumbnailTitle:te.string,originalClass:te.string,thumbnailClass:te.string,renderItem:te.func,renderThumbInner:te.func,imageSet:_e,srcSet:te.string,sizes:te.string})).isRequired,showNav:te.bool,autoPlay:te.bool,lazyLoad:te.bool,infinite:te.bool,showIndex:te.bool,showBullets:te.bool,showThumbnails:te.bool,showPlayButton:te.bool,showFullscreenButton:te.bool,disableThumbnailScroll:te.bool,disableKeyDown:te.bool,disableSwipe:te.bool,disableThumbnailSwipe:te.bool,useBrowserFullscreen:te.bool,onErrorImageURL:te.string,indexSeparator:te.string,thumbnailPosition:(0, te.oneOf)(["top","bottom","left","right"]),startIndex:te.number,slideDuration:te.number,slideInterval:te.number,slideOnThumbnailOver:te.bool,swipeThreshold:te.number,swipingTransitionDuration:te.number,swipingThumbnailTransitionDuration:te.number,onSlide:te.func,onBeforeSlide:te.func,onScreenChange:te.func,onPause:te.func,onPlay:te.func,onClick:te.func,onImageLoad:te.func,onImageError:te.func,onTouchMove:te.func,onTouchEnd:te.func,onTouchStart:te.func,onMouseOver:te.func,onMouseLeave:te.func,onThumbnailError:te.func,onThumbnailClick:te.func,renderCustomControls:te.func,renderLeftNav:te.func,renderRightNav:te.func,renderPlayPauseButton:te.func,renderFullscreenButton:te.func,renderItem:te.func,renderThumbInner:te.func,stopPropagation:te.bool,additionalClass:te.string,useTranslate3D:te.bool,isRTL:te.bool,useWindowKeyDown:te.bool},Pe.defaultProps={onErrorImageURL:"",additionalClass:"",showNav:!0,autoPlay:!1,lazyLoad:!1,infinite:!0,showIndex:!1,showBullets:!1,showThumbnails:!0,showPlayButton:!0,showFullscreenButton:!0,disableThumbnailScroll:!1,disableKeyDown:!1,disableSwipe:!1,disableThumbnailSwipe:!1,useTranslate3D:!0,isRTL:!1,useBrowserFullscreen:!0,flickThreshold:.4,stopPropagation:!1,indexSeparator:" / ",thumbnailPosition:"bottom",startIndex:0,slideDuration:450,swipingTransitionDuration:0,swipingThumbnailTransitionDuration:0,onSlide:null,onBeforeSlide:null,onScreenChange:null,onPause:null,onPlay:null,onClick:null,onImageLoad:null,onImageError:null,onTouchMove:null,onTouchEnd:null,onTouchStart:null,onMouseOver:null,onMouseLeave:null,onThumbnailError:null,onThumbnailClick:null,renderCustomControls:null,renderThumbInner:null,renderItem:null,slideInterval:3e3,slideOnThumbnailOver:!1,swipeThreshold:30,renderLeftNav:function(e,t){return a().createElement(ce,{onClick:e,disabled:t})},renderRightNav:function(e,t){return a().createElement(de,{onClick:e,disabled:t})},renderPlayPauseButton:function(e,t){return a().createElement(pe,{onClick:e,isPlaying:t})},renderFullscreenButton:function(e,t){return a().createElement(le,{onClick:e,isFullscreen:t})},useWindowKeyDown:!0};const Me=Pe;})(),r})()}));
    });

    var ImageGallery = unwrapExports(imageGallery);
    imageGallery.ImageGallery;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Modal = function (props) {
        var children = props.children, onClose = props.onClose, open = props.open;
        var t = useTranslationContext('Modal').t;
        var innerRef = React.useRef(null);
        var closeRef = React.useRef(null);
        var handleClick = function (event) {
            var target = event.target;
            if (!innerRef.current || !closeRef.current)
                return;
            if (!innerRef.current.contains(target) || closeRef.current.contains(target))
                onClose === null || onClose === void 0 ? void 0 : onClose();
        };
        React.useEffect(function () {
            if (!open)
                return;
            var handleEscKey = function (event) {
                if (event.key === 'Escape')
                    onClose === null || onClose === void 0 ? void 0 : onClose();
            };
            document.addEventListener('keydown', handleEscKey);
            return function () { return document.removeEventListener('keydown', handleEscKey); };
        }, [onClose, open]);
        var openClasses = open ? 'str-chat__modal--open' : 'str-chat__modal--closed';
        if (!open)
            return null;
        return (React__default['default'].createElement("div", { className: "str-chat__modal " + openClasses, onClick: handleClick },
            React__default['default'].createElement("button", { className: 'str-chat__modal__close-button', ref: closeRef, title: 'Close' },
                t('Close'),
                React__default['default'].createElement("svg", { height: '10', width: '10', xmlns: 'http://www.w3.org/2000/svg' },
                    React__default['default'].createElement("path", { d: 'M9.916 1.027L8.973.084 5 4.058 1.027.084l-.943.943L4.058 5 .084 8.973l.943.943L5 5.942l3.973 3.974.943-.943L5.942 5z', fillRule: 'evenodd' }))),
            React__default['default'].createElement("div", { className: 'str-chat__modal__inner', ref: innerRef }, children)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ModalComponent = function (props) {
        var images = props.images, index = props.index, modalIsOpen = props.modalIsOpen, toggleModal = props.toggleModal;
        return (React__default['default'].createElement(Modal, { onClose: toggleModal, open: modalIsOpen },
            React__default['default'].createElement(ImageGallery, { items: images, showIndex: true, showPlayButton: false, showThumbnails: false, startIndex: index })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedGallery = function (props) {
        var images = props.images;
        var _a = React.useState(0), index = _a[0], setIndex = _a[1];
        var _b = React.useState(false), modalOpen = _b[0], setModalOpen = _b[1];
        var t = useTranslationContext('Gallery').t;
        var countImagesDisplayedInPreview = 4;
        var lastImageIndexInPreview = countImagesDisplayedInPreview - 1;
        var toggleModal = function (selectedIndex) {
            if (modalOpen) {
                setModalOpen(false);
            }
            else {
                setIndex(selectedIndex);
                setModalOpen(true);
            }
        };
        var formattedArray = React.useMemo(function () {
            return images.map(function (image) { return ({
                original: image.image_url || image.thumb_url || '',
                originalAlt: 'User uploaded content',
                source: image.image_url || image.thumb_url || '',
            }); });
        }, [images]);
        var renderImages = images.slice(0, countImagesDisplayedInPreview).map(function (image, i) {
            return i === lastImageIndexInPreview && images.length > countImagesDisplayedInPreview ? (React__default['default'].createElement("button", { className: 'str-chat__gallery-placeholder', key: "gallery-image-" + i, onClick: function () { return toggleModal(i); }, style: {
                    backgroundImage: "url(" + images[lastImageIndexInPreview].image_url + ")",
                } },
                React__default['default'].createElement("p", null, t('{{ imageCount }} more', {
                    imageCount: images.length - countImagesDisplayedInPreview,
                })))) : (React__default['default'].createElement("button", { className: 'str-chat__gallery-image', "data-testid": 'gallery-image', key: "gallery-image-" + i, onClick: function () { return toggleModal(i); } },
                React__default['default'].createElement("img", { alt: 'User uploaded content', src: image.image_url || image.thumb_url })));
        });
        return (React__default['default'].createElement("div", { className: "str-chat__gallery " + (images.length > lastImageIndexInPreview ? 'str-chat__gallery--square' : '') },
            renderImages,
            React__default['default'].createElement(ModalComponent, { images: formattedArray, index: index, modalIsOpen: modalOpen, toggleModal: function () { return setModalOpen(!modalOpen); } })));
    };
    /**
     * Displays images in a simple responsive grid with a light box to view the images.
     */
    var Gallery = React__default['default'].memo(UnMemoizedGallery);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * A simple component that displays an image.
     */
    var ImageComponent = function (props) {
        var _a = React.useState(false), modalIsOpen = _a[0], setModalIsOpen = _a[1];
        var fallback = props.fallback, image_url = props.image_url, thumb_url = props.thumb_url;
        var imageSrc = dist_1(image_url || thumb_url);
        var formattedArray = [
            { original: imageSrc, originalAlt: 'User uploaded content', source: imageSrc },
        ];
        var toggleModal = function () { return setModalIsOpen(!modalIsOpen); };
        return (React__default['default'].createElement(React__default['default'].Fragment, null,
            React__default['default'].createElement("img", { alt: fallback, className: 'str-chat__message-attachment--img', "data-testid": 'image-test', onClick: toggleModal, onKeyPress: toggleModal, src: imageSrc, tabIndex: 0 }),
            React__default['default'].createElement(ModalComponent, { images: formattedArray, index: 0, modalIsOpen: modalIsOpen, toggleModal: toggleModal })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var SUPPORTED_VIDEO_FORMATS = ['video/mp4', 'video/ogg', 'video/webm', 'video/quicktime'];
    var isGalleryAttachmentType = function (output) {
        return output.images != null;
    };
    var isAudioAttachment = function (attachment) { return attachment.type === 'audio'; };
    var isFileAttachment = function (attachment) {
        return attachment.type === 'file' ||
            (attachment.mime_type &&
                SUPPORTED_VIDEO_FORMATS.indexOf(attachment.mime_type) === -1 &&
                attachment.type !== 'video');
    };
    var isImageAttachment = function (attachment) { return attachment.type === 'image' && !attachment.title_link && !attachment.og_scrape_url; };
    var isMediaAttachment = function (attachment) {
        return (attachment.mime_type && SUPPORTED_VIDEO_FORMATS.indexOf(attachment.mime_type) !== -1) ||
            attachment.type === 'video';
    };
    var renderAttachmentWithinContainer = function (props) {
        var attachment = props.attachment, children = props.children, componentType = props.componentType;
        var extra = '';
        if (!isGalleryAttachmentType(attachment)) {
            extra =
                componentType === 'card' && !(attachment === null || attachment === void 0 ? void 0 : attachment.image_url) && !(attachment === null || attachment === void 0 ? void 0 : attachment.thumb_url)
                    ? 'no-image'
                    : attachment && attachment.actions && attachment.actions.length
                        ? 'actions'
                        : '';
        }
        return (React__default['default'].createElement("div", { className: "str-chat__message-attachment str-chat__message-attachment--" + componentType + " str-chat__message-attachment--" + ((attachment === null || attachment === void 0 ? void 0 : attachment.type) || '') + " str-chat__message-attachment--" + componentType + "--" + extra, key: (isGalleryAttachmentType(attachment) ? '' : (attachment === null || attachment === void 0 ? void 0 : attachment.id) || nanoid()) + "-" + ((attachment === null || attachment === void 0 ? void 0 : attachment.type) || 'none') + " " }, children));
    };
    var renderAttachmentActions = function (props) {
        var _a;
        var actionHandler = props.actionHandler, attachment = props.attachment, _b = props.AttachmentActions, AttachmentActions$1 = _b === void 0 ? AttachmentActions : _b;
        if (!((_a = attachment.actions) === null || _a === void 0 ? void 0 : _a.length))
            return null;
        return (React__default['default'].createElement(AttachmentActions$1, __assign$2({}, attachment, { actionHandler: function (event, name, value) { return actionHandler === null || actionHandler === void 0 ? void 0 : actionHandler(event, name, value); }, actions: attachment.actions, id: attachment.id || '', key: "key-actions-" + attachment.id, text: attachment.text || '' })));
    };
    var renderGallery = function (props) {
        var attachment = props.attachment, _a = props.Gallery, Gallery$1 = _a === void 0 ? Gallery : _a;
        return renderAttachmentWithinContainer({
            attachment: attachment,
            children: React__default['default'].createElement(Gallery$1, { images: attachment.images || [], key: 'gallery' }),
            componentType: 'gallery',
        });
    };
    var renderImage = function (props) {
        var attachment = props.attachment, _a = props.Image, Image = _a === void 0 ? ImageComponent : _a;
        if (attachment.actions && attachment.actions.length) {
            return renderAttachmentWithinContainer({
                attachment: attachment,
                children: (React__default['default'].createElement("div", { className: 'str-chat__attachment', key: "key-image-" + attachment.id },
                    React__default['default'].createElement(Image, __assign$2({}, attachment)),
                    renderAttachmentActions(props))),
                componentType: 'image',
            });
        }
        return renderAttachmentWithinContainer({
            attachment: attachment,
            children: React__default['default'].createElement(Image, __assign$2({}, attachment, { key: "key-image-" + attachment.id })),
            componentType: 'image',
        });
    };
    var renderCard = function (props) {
        var attachment = props.attachment, _a = props.Card, Card = _a === void 0 ? Card$1 : _a;
        if (attachment.actions && attachment.actions.length) {
            return renderAttachmentWithinContainer({
                attachment: attachment,
                children: (React__default['default'].createElement("div", { className: 'str-chat__attachment', key: "key-image-" + attachment.id },
                    React__default['default'].createElement(Card, __assign$2({}, attachment, { key: "key-card-" + attachment.id })),
                    renderAttachmentActions(props))),
                componentType: 'card',
            });
        }
        return renderAttachmentWithinContainer({
            attachment: attachment,
            children: React__default['default'].createElement(Card, __assign$2({}, attachment, { key: "key-card-" + attachment.id })),
            componentType: 'card',
        });
    };
    var renderFile = function (props) {
        var attachment = props.attachment, _a = props.File, File = _a === void 0 ? FileAttachment : _a;
        if (!attachment.asset_url)
            return null;
        return renderAttachmentWithinContainer({
            attachment: attachment,
            children: React__default['default'].createElement(File, { attachment: attachment, key: "key-file-" + attachment.id }),
            componentType: 'file',
        });
    };
    var renderAudio = function (props) {
        var attachment = props.attachment, _a = props.Audio, Audio$1 = _a === void 0 ? Audio : _a;
        return renderAttachmentWithinContainer({
            attachment: attachment,
            children: (React__default['default'].createElement("div", { className: 'str-chat__attachment', key: "key-video-" + attachment.id },
                React__default['default'].createElement(Audio$1, { og: attachment }))),
            componentType: 'audio',
        });
    };
    var renderMedia = function (props) {
        var _a;
        var attachment = props.attachment, _b = props.Media, Media = _b === void 0 ? ReactPlayer : _b;
        if ((_a = attachment.actions) === null || _a === void 0 ? void 0 : _a.length) {
            return renderAttachmentWithinContainer({
                attachment: attachment,
                children: (React__default['default'].createElement("div", { className: 'str-chat__attachment str-chat__attachment-media', key: "key-video-" + attachment.id },
                    React__default['default'].createElement("div", { className: 'str-chat__player-wrapper' },
                        React__default['default'].createElement(Media, { className: 'react-player', controls: true, height: '100%', url: attachment.asset_url, width: '100%' })),
                    renderAttachmentActions(props))),
                componentType: 'media',
            });
        }
        return renderAttachmentWithinContainer({
            attachment: attachment,
            children: (React__default['default'].createElement("div", { className: 'str-chat__player-wrapper', key: "key-video-" + attachment.id },
                React__default['default'].createElement(Media, { className: 'react-player', controls: true, height: '100%', url: attachment.asset_url, width: '100%' }))),
            componentType: 'media',
        });
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * A component used for rendering message attachments. By default, the component supports: AttachmentActions, Audio, Card, File, Gallery, Image, and Video
     */
    var Attachment = function (props) {
        var attachments = props.attachments, rest = __rest(props, ["attachments"]);
        var gallery = {
            images: attachments === null || attachments === void 0 ? void 0 : attachments.filter(function (attachment) {
                return attachment.type === 'image' && !(attachment.og_scrape_url || attachment.title_link);
            }),
            type: 'gallery',
        };
        var newAttachments = gallery.images.length >= 2
            ? __spreadArray(__spreadArray([], attachments.filter(function (attachment) {
                return !(attachment.type === 'image' && !(attachment.og_scrape_url || attachment.title_link));
            })), [
                gallery,
            ]) : attachments;
        return (React__default['default'].createElement(React__default['default'].Fragment, null, newAttachments.map(function (attachment) {
            if (isGalleryAttachmentType(attachment)) {
                return renderGallery(__assign$2(__assign$2({}, rest), { attachment: attachment }));
            }
            if (isImageAttachment(attachment)) {
                return renderImage(__assign$2(__assign$2({}, rest), { attachment: attachment }));
            }
            if (isAudioAttachment(attachment)) {
                return renderAudio(__assign$2(__assign$2({}, rest), { attachment: attachment }));
            }
            if (isFileAttachment(attachment)) {
                return renderFile(__assign$2(__assign$2({}, rest), { attachment: attachment }));
            }
            if (isMediaAttachment(attachment)) {
                return renderMedia(__assign$2(__assign$2({}, rest), { attachment: attachment }));
            }
            return renderCard(__assign$2(__assign$2({}, rest), { attachment: attachment }));
        })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Item$1 = /*#__PURE__*/React__default['default'].forwardRef(function Item(props, innerRef) {
      var className = props.className,
          Component = props.component,
          item = props.item,
          onClickHandler = props.onClickHandler,
          onSelectHandler = props.onSelectHandler,
          selected = props.selected,
          style = props.style;

      var selectItem = function selectItem() {
        return onSelectHandler(item);
      };

      return /*#__PURE__*/React__default['default'].createElement("li", {
        className: "rta__item ".concat(className || ''),
        style: style
      }, /*#__PURE__*/React__default['default'].createElement("button", {
        className: "rta__entity ".concat(selected ? 'rta__entity--selected' : ''),
        onClick: onClickHandler,
        onFocus: selectItem,
        onMouseEnter: selectItem,
        ref: innerRef
      }, /*#__PURE__*/React__default['default'].createElement("div", {
        tabIndex: -1
      }, /*#__PURE__*/React__default['default'].createElement(Component, {
        entity: item,
        selected: selected
      }))));
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var defineProperty$1 = createCommonjsModule$1(function (module) {
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    var _defineProperty = unwrapExports(defineProperty$1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var arrayWithHoles = createCommonjsModule$1(function (module) {
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    unwrapExports(arrayWithHoles);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var iterableToArrayLimit = createCommonjsModule$1(function (module) {
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;

      var _s, _e;

      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    unwrapExports(iterableToArrayLimit);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var arrayLikeToArray = createCommonjsModule$1(function (module) {
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    unwrapExports(arrayLikeToArray);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var unsupportedIterableToArray = createCommonjsModule$1(function (module) {
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
    }

    module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    unwrapExports(unsupportedIterableToArray);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var nonIterableRest = createCommonjsModule$1(function (module) {
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    unwrapExports(nonIterableRest);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var slicedToArray = createCommonjsModule$1(function (module) {
    function _slicedToArray(arr, i) {
      return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
    }

    module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    var _slicedToArray = unwrapExports(slicedToArray);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ComponentContext = React__default['default'].createContext(undefined);
    var ComponentProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default['default'].createElement(ComponentContext.Provider, { value: value }, children));
    };
    var useComponentContext = function (componentName) {
        var contextValue = React.useContext(ComponentContext);
        if (!contextValue) {
            console.warn("The useComponentContext hook was called outside of the ComponentContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the " + componentName + " component.");
            return {};
        }
        return contextValue;
    };
    /**
     * Typescript currently does not support partial inference, so if ComponentContext
     * typing is desired while using the HOC withComponentContext, the Props for the
     * wrapped component must be provided as the first generic.
     */
    var withComponentContext = function (Component) {
        var WithComponentContextComponent = function (props) {
            var componentContext = useComponentContext();
            return React__default['default'].createElement(Component, __assign$2({}, props, componentContext));
        };
        WithComponentContextComponent.displayName = (Component.displayName ||
            Component.name ||
            'Component').replace('Base', '');
        return WithComponentContextComponent;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var emojiRegex = function () {
      // https://mths.be/emoji
      return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC)?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u2600-\u2604\u260E\u2611\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26B0\u26B1\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0\u26F1\u26F4\u26F7\u26F8\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u3030\u303D\u3297\u3299]|\uD83C[\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\uD83D\uDC41\uFE0F|\uD83C\uDFF3\uFE0F|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\u2764\uFE0F|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF]|[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD1D\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78\uDD7A-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCB\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6]|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDD77\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var _class = createCommonjsModule$1(function (module, exports) {

    exports.__esModule = true;
    exports.inherits = inherits;
    function inherits(parent, child) {
    	var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    	var extended = Object.create(parent.prototype);
    	for (var p in props) {
    		extended[p] = props[p];
    	}
    	extended.constructor = child;
    	child.prototype = extended;
    	return child;
    }
    });

    unwrapExports(_class);
    _class.inherits;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var options = createCommonjsModule$1(function (module, exports) {

    exports.__esModule = true;

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    var defaults = {
    	defaultProtocol: 'http',
    	events: null,
    	format: noop,
    	formatHref: noop,
    	nl2br: false,
    	tagName: 'a',
    	target: typeToTarget,
    	validate: true,
    	ignoreTags: [],
    	attributes: null,
    	className: 'linkified' // Deprecated value - no default class will be provided in the future
    };

    exports.defaults = defaults;
    exports.Options = Options;
    exports.contains = contains;


    function Options(opts) {
    	opts = opts || {};

    	this.defaultProtocol = opts.hasOwnProperty('defaultProtocol') ? opts.defaultProtocol : defaults.defaultProtocol;
    	this.events = opts.hasOwnProperty('events') ? opts.events : defaults.events;
    	this.format = opts.hasOwnProperty('format') ? opts.format : defaults.format;
    	this.formatHref = opts.hasOwnProperty('formatHref') ? opts.formatHref : defaults.formatHref;
    	this.nl2br = opts.hasOwnProperty('nl2br') ? opts.nl2br : defaults.nl2br;
    	this.tagName = opts.hasOwnProperty('tagName') ? opts.tagName : defaults.tagName;
    	this.target = opts.hasOwnProperty('target') ? opts.target : defaults.target;
    	this.validate = opts.hasOwnProperty('validate') ? opts.validate : defaults.validate;
    	this.ignoreTags = [];

    	// linkAttributes and linkClass is deprecated
    	this.attributes = opts.attributes || opts.linkAttributes || defaults.attributes;
    	this.className = opts.hasOwnProperty('className') ? opts.className : opts.linkClass || defaults.className;

    	// Make all tags names upper case
    	var ignoredTags = opts.hasOwnProperty('ignoreTags') ? opts.ignoreTags : defaults.ignoreTags;
    	for (var i = 0; i < ignoredTags.length; i++) {
    		this.ignoreTags.push(ignoredTags[i].toUpperCase());
    	}
    }

    Options.prototype = {
    	/**
      * Given the token, return all options for how it should be displayed
      */
    	resolve: function resolve(token) {
    		var href = token.toHref(this.defaultProtocol);
    		return {
    			formatted: this.get('format', token.toString(), token),
    			formattedHref: this.get('formatHref', href, token),
    			tagName: this.get('tagName', href, token),
    			className: this.get('className', href, token),
    			target: this.get('target', href, token),
    			events: this.getObject('events', href, token),
    			attributes: this.getObject('attributes', href, token)
    		};
    	},


    	/**
      * Returns true or false based on whether a token should be displayed as a
      * link based on the user options. By default,
      */
    	check: function check(token) {
    		return this.get('validate', token.toString(), token);
    	},


    	// Private methods

    	/**
      * Resolve an option's value based on the value of the option and the given
      * params.
      * @param {String} key Name of option to use
      * @param operator will be passed to the target option if it's method
      * @param {MultiToken} token The token from linkify.tokenize
      */
    	get: function get(key, operator, token) {
    		var optionValue = void 0,
    		    option = this[key];
    		if (!option) {
    			return option;
    		}

    		switch (typeof option === 'undefined' ? 'undefined' : _typeof(option)) {
    			case 'function':
    				return option(operator, token.type);
    			case 'object':
    				optionValue = option.hasOwnProperty(token.type) ? option[token.type] : defaults[key];
    				return typeof optionValue === 'function' ? optionValue(operator, token.type) : optionValue;
    		}

    		return option;
    	},
    	getObject: function getObject(key, operator, token) {
    		var option = this[key];
    		return typeof option === 'function' ? option(operator, token.type) : option;
    	}
    };

    /**
     * Quick indexOf replacement for checking the ignoreTags option
     */
    function contains(arr, value) {
    	for (var i = 0; i < arr.length; i++) {
    		if (arr[i] === value) {
    			return true;
    		}
    	}
    	return false;
    }

    function noop(val) {
    	return val;
    }

    function typeToTarget(href, type) {
    	return type === 'url' ? '_blank' : null;
    }
    });

    unwrapExports(options);
    options.defaults;
    options.Options;
    options.contains;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var state = createCommonjsModule$1(function (module, exports) {

    exports.__esModule = true;
    exports.stateify = exports.TokenState = exports.CharacterState = undefined;



    function createStateClass() {
    	return function (tClass) {
    		this.j = [];
    		this.T = tClass || null;
    	};
    }

    /**
    	A simple state machine that can emit token classes

    	The `j` property in this class refers to state jumps. It's a
    	multidimensional array where for each element:

    	* index [0] is a symbol or class of symbols to transition to.
    	* index [1] is a State instance which matches

    	The type of symbol will depend on the target implementation for this class.
    	In Linkify, we have a two-stage scanner. Each stage uses this state machine
    	but with a slighly different (polymorphic) implementation.

    	The `T` property refers to the token class.

    	TODO: Can the `on` and `next` methods be combined?

    	@class BaseState
    */
    var BaseState = createStateClass();
    BaseState.prototype = {
    	defaultTransition: false,

    	/**
     	@method constructor
     	@param {Class} tClass Pass in the kind of token to emit if there are
     		no jumps after this state and the state is accepting.
     */

    	/**
     	On the given symbol(s), this machine should go to the given state
     		@method on
     	@param {Array|Mixed} symbol
     	@param {BaseState} state Note that the type of this state should be the
     		same as the current instance (i.e., don't pass in a different
     		subclass)
     */
    	on: function on(symbol, state) {
    		if (symbol instanceof Array) {
    			for (var i = 0; i < symbol.length; i++) {
    				this.j.push([symbol[i], state]);
    			}
    			return this;
    		}
    		this.j.push([symbol, state]);
    		return this;
    	},


    	/**
     	Given the next item, returns next state for that item
     	@method next
     	@param {Mixed} item Should be an instance of the symbols handled by
     		this particular machine.
     	@return {State} state Returns false if no jumps are available
     */
    	next: function next(item) {
    		for (var i = 0; i < this.j.length; i++) {
    			var jump = this.j[i];
    			var symbol = jump[0]; // Next item to check for
    			var state = jump[1]; // State to jump to if items match

    			// compare item with symbol
    			if (this.test(item, symbol)) {
    				return state;
    			}
    		}

    		// Nowhere left to jump!
    		return this.defaultTransition;
    	},


    	/**
     	Does this state accept?
     	`true` only of `this.T` exists
     		@method accepts
     	@return {Boolean}
     */
    	accepts: function accepts() {
    		return !!this.T;
    	},


    	/**
     	Determine whether a given item "symbolizes" the symbol, where symbol is
     	a class of items handled by this state machine.
     		This method should be overriden in extended classes.
     		@method test
     	@param {Mixed} item Does this item match the given symbol?
     	@param {Mixed} symbol
     	@return {Boolean}
     */
    	test: function test(item, symbol) {
    		return item === symbol;
    	},


    	/**
     	Emit the token for this State (just return it in this case)
     	If this emits a token, this instance is an accepting state
     	@method emit
     	@return {Class} T
     */
    	emit: function emit() {
    		return this.T;
    	}
    };

    /**
    	State machine for string-based input

    	@class CharacterState
    	@extends BaseState
    */
    var CharacterState = (0, _class.inherits)(BaseState, createStateClass(), {
    	/**
     	Does the given character match the given character or regular
     	expression?
     		@method test
     	@param {String} char
     	@param {String|RegExp} charOrRegExp
     	@return {Boolean}
     */
    	test: function test(character, charOrRegExp) {
    		return character === charOrRegExp || charOrRegExp instanceof RegExp && charOrRegExp.test(character);
    	}
    });

    /**
    	State machine for input in the form of TextTokens

    	@class TokenState
    	@extends BaseState
    */
    var TokenState = (0, _class.inherits)(BaseState, createStateClass(), {

    	/**
      * Similar to `on`, but returns the state the results in the transition from
      * the given item
      * @method jump
      * @param {Mixed} item
      * @param {Token} [token]
      * @return state
      */
    	jump: function jump(token) {
    		var tClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    		var state = this.next(new token('')); // dummy temp token
    		if (state === this.defaultTransition) {
    			// Make a new state!
    			state = new this.constructor(tClass);
    			this.on(token, state);
    		} else if (tClass) {
    			state.T = tClass;
    		}
    		return state;
    	},


    	/**
     	Is the given token an instance of the given token class?
     		@method test
     	@param {TextToken} token
     	@param {Class} tokenClass
     	@return {Boolean}
     */
    	test: function test(token, tokenClass) {
    		return token instanceof tokenClass;
    	}
    });

    /**
    	Given a non-empty target string, generates states (if required) for each
    	consecutive substring of characters in str starting from the beginning of
    	the string. The final state will have a special value, as specified in
    	options. All other "in between" substrings will have a default end state.

    	This turns the state machine into a Trie-like data structure (rather than a
    	intelligently-designed DFA).

    	Note that I haven't really tried these with any strings other than
    	DOMAIN.

    	@param {String} str
    	@param {CharacterState} start State to jump from the first character
    	@param {Class} endToken Token class to emit when the given string has been
    		matched and no more jumps exist.
    	@param {Class} defaultToken "Filler token", or which token type to emit when
    		we don't have a full match
    	@return {Array} list of newly-created states
    */
    function stateify(str, start, endToken, defaultToken) {
    	var i = 0,
    	    len = str.length,
    	    state = start,
    	    newStates = [],
    	    nextState = void 0;

    	// Find the next state without a jump to the next character
    	while (i < len && (nextState = state.next(str[i]))) {
    		state = nextState;
    		i++;
    	}

    	if (i >= len) {
    		return [];
    	} // no new tokens were added

    	while (i < len - 1) {
    		nextState = new CharacterState(defaultToken);
    		newStates.push(nextState);
    		state.on(str[i], nextState);
    		state = nextState;
    		i++;
    	}

    	nextState = new CharacterState(endToken);
    	newStates.push(nextState);
    	state.on(str[len - 1], nextState);

    	return newStates;
    }

    exports.CharacterState = CharacterState;
    exports.TokenState = TokenState;
    exports.stateify = stateify;
    });

    unwrapExports(state);
    state.stateify;
    state.TokenState;
    state.CharacterState;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var createTokenClass_1 = createCommonjsModule$1(function (module, exports) {

    exports.__esModule = true;
    function createTokenClass() {
    	return function (value) {
    		if (value) {
    			this.v = value;
    		}
    	};
    }

    exports.createTokenClass = createTokenClass;
    });

    unwrapExports(createTokenClass_1);
    createTokenClass_1.createTokenClass;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var text = createCommonjsModule$1(function (module, exports) {

    exports.__esModule = true;
    exports.AMPERSAND = exports.CLOSEPAREN = exports.CLOSEANGLEBRACKET = exports.CLOSEBRACKET = exports.CLOSEBRACE = exports.OPENPAREN = exports.OPENANGLEBRACKET = exports.OPENBRACKET = exports.OPENBRACE = exports.WS = exports.TLD = exports.SYM = exports.UNDERSCORE = exports.SLASH = exports.MAILTO = exports.PROTOCOL = exports.QUERY = exports.POUND = exports.PLUS = exports.NUM = exports.NL = exports.LOCALHOST = exports.PUNCTUATION = exports.DOT = exports.COLON = exports.AT = exports.DOMAIN = exports.Base = undefined;





    /******************************************************************************
    	Text Tokens
    	Tokens composed of strings
    ******************************************************************************/

    /**
    	Abstract class used for manufacturing text tokens.
    	Pass in the value this token represents

    	@class TextToken
    	@abstract
    */
    var TextToken = (0, createTokenClass_1.createTokenClass)();
    TextToken.prototype = {
    	toString: function toString() {
    		return this.v + '';
    	}
    };

    function inheritsToken(value) {
    	var props = value ? { v: value } : {};
    	return (0, _class.inherits)(TextToken, (0, createTokenClass_1.createTokenClass)(), props);
    }

    /**
    	A valid domain token
    	@class DOMAIN
    	@extends TextToken
    */
    var DOMAIN = inheritsToken();

    /**
    	@class AT
    	@extends TextToken
    */
    var AT = inheritsToken('@');

    /**
    	Represents a single colon `:` character

    	@class COLON
    	@extends TextToken
    */
    var COLON = inheritsToken(':');

    /**
    	@class DOT
    	@extends TextToken
    */
    var DOT = inheritsToken('.');

    /**
    	A character class that can surround the URL, but which the URL cannot begin
    	or end with. Does not include certain English punctuation like parentheses.

    	@class PUNCTUATION
    	@extends TextToken
    */
    var PUNCTUATION = inheritsToken();

    /**
    	The word localhost (by itself)
    	@class LOCALHOST
    	@extends TextToken
    */
    var LOCALHOST = inheritsToken();

    /**
    	Newline token
    	@class NL
    	@extends TextToken
    */
    var NL = inheritsToken('\n');

    /**
    	@class NUM
    	@extends TextToken
    */
    var NUM = inheritsToken();

    /**
    	@class PLUS
    	@extends TextToken
    */
    var PLUS = inheritsToken('+');

    /**
    	@class POUND
    	@extends TextToken
    */
    var POUND = inheritsToken('#');

    /**
    	Represents a web URL protocol. Supported types include

    	* `http:`
    	* `https:`
    	* `ftp:`
    	* `ftps:`

    	@class PROTOCOL
    	@extends TextToken
    */
    var PROTOCOL = inheritsToken();

    /**
    	Represents the start of the email URI protocol

    	@class MAILTO
    	@extends TextToken
    */
    var MAILTO = inheritsToken('mailto:');

    /**
    	@class QUERY
    	@extends TextToken
    */
    var QUERY = inheritsToken('?');

    /**
    	@class SLASH
    	@extends TextToken
    */
    var SLASH = inheritsToken('/');

    /**
    	@class UNDERSCORE
    	@extends TextToken
    */
    var UNDERSCORE = inheritsToken('_');

    /**
    	One ore more non-whitespace symbol.
    	@class SYM
    	@extends TextToken
    */
    var SYM = inheritsToken();

    /**
    	@class TLD
    	@extends TextToken
    */
    var TLD = inheritsToken();

    /**
    	Represents a string of consecutive whitespace characters

    	@class WS
    	@extends TextToken
    */
    var WS = inheritsToken();

    /**
    	Opening/closing bracket classes
    */

    var OPENBRACE = inheritsToken('{');
    var OPENBRACKET = inheritsToken('[');
    var OPENANGLEBRACKET = inheritsToken('<');
    var OPENPAREN = inheritsToken('(');
    var CLOSEBRACE = inheritsToken('}');
    var CLOSEBRACKET = inheritsToken(']');
    var CLOSEANGLEBRACKET = inheritsToken('>');
    var CLOSEPAREN = inheritsToken(')');

    var AMPERSAND = inheritsToken('&');

    exports.Base = TextToken;
    exports.DOMAIN = DOMAIN;
    exports.AT = AT;
    exports.COLON = COLON;
    exports.DOT = DOT;
    exports.PUNCTUATION = PUNCTUATION;
    exports.LOCALHOST = LOCALHOST;
    exports.NL = NL;
    exports.NUM = NUM;
    exports.PLUS = PLUS;
    exports.POUND = POUND;
    exports.QUERY = QUERY;
    exports.PROTOCOL = PROTOCOL;
    exports.MAILTO = MAILTO;
    exports.SLASH = SLASH;
    exports.UNDERSCORE = UNDERSCORE;
    exports.SYM = SYM;
    exports.TLD = TLD;
    exports.WS = WS;
    exports.OPENBRACE = OPENBRACE;
    exports.OPENBRACKET = OPENBRACKET;
    exports.OPENANGLEBRACKET = OPENANGLEBRACKET;
    exports.OPENPAREN = OPENPAREN;
    exports.CLOSEBRACE = CLOSEBRACE;
    exports.CLOSEBRACKET = CLOSEBRACKET;
    exports.CLOSEANGLEBRACKET = CLOSEANGLEBRACKET;
    exports.CLOSEPAREN = CLOSEPAREN;
    exports.AMPERSAND = AMPERSAND;
    });

    unwrapExports(text);
    text.AMPERSAND;
    text.CLOSEPAREN;
    text.CLOSEANGLEBRACKET;
    text.CLOSEBRACKET;
    text.CLOSEBRACE;
    text.OPENPAREN;
    text.OPENANGLEBRACKET;
    text.OPENBRACKET;
    text.OPENBRACE;
    text.WS;
    text.TLD;
    text.SYM;
    text.UNDERSCORE;
    text.SLASH;
    text.MAILTO;
    text.PROTOCOL;
    text.QUERY;
    text.POUND;
    text.PLUS;
    text.NUM;
    text.NL;
    text.LOCALHOST;
    text.PUNCTUATION;
    text.DOT;
    text.COLON;
    text.AT;
    text.DOMAIN;
    text.Base;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var scanner = createCommonjsModule$1(function (module, exports) {

    exports.__esModule = true;
    exports.start = exports.run = exports.TOKENS = exports.State = undefined;





    var TOKENS = _interopRequireWildcard(text);

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

    var tlds = 'aaa|aarp|abarth|abb|abbott|abbvie|abc|able|abogado|abudhabi|ac|academy|accenture|accountant|accountants|aco|active|actor|ad|adac|ads|adult|ae|aeg|aero|aetna|af|afamilycompany|afl|africa|ag|agakhan|agency|ai|aig|aigo|airbus|airforce|airtel|akdn|al|alfaromeo|alibaba|alipay|allfinanz|allstate|ally|alsace|alstom|am|americanexpress|americanfamily|amex|amfam|amica|amsterdam|analytics|android|anquan|anz|ao|aol|apartments|app|apple|aq|aquarelle|ar|arab|aramco|archi|army|arpa|art|arte|as|asda|asia|associates|at|athleta|attorney|au|auction|audi|audible|audio|auspost|author|auto|autos|avianca|aw|aws|ax|axa|az|azure|ba|baby|baidu|banamex|bananarepublic|band|bank|bar|barcelona|barclaycard|barclays|barefoot|bargains|baseball|basketball|bauhaus|bayern|bb|bbc|bbt|bbva|bcg|bcn|bd|be|beats|beauty|beer|bentley|berlin|best|bestbuy|bet|bf|bg|bh|bharti|bi|bible|bid|bike|bing|bingo|bio|biz|bj|black|blackfriday|blanco|blockbuster|blog|bloomberg|blue|bm|bms|bmw|bn|bnl|bnpparibas|bo|boats|boehringer|bofa|bom|bond|boo|book|booking|boots|bosch|bostik|boston|bot|boutique|box|br|bradesco|bridgestone|broadway|broker|brother|brussels|bs|bt|budapest|bugatti|build|builders|business|buy|buzz|bv|bw|by|bz|bzh|ca|cab|cafe|cal|call|calvinklein|cam|camera|camp|cancerresearch|canon|capetown|capital|capitalone|car|caravan|cards|care|career|careers|cars|cartier|casa|case|caseih|cash|casino|cat|catering|catholic|cba|cbn|cbre|cbs|cc|cd|ceb|center|ceo|cern|cf|cfa|cfd|cg|ch|chanel|channel|chase|chat|cheap|chintai|chloe|christmas|chrome|chrysler|church|ci|cipriani|circle|cisco|citadel|citi|citic|city|cityeats|ck|cl|claims|cleaning|click|clinic|clinique|clothing|cloud|club|clubmed|cm|cn|co|coach|codes|coffee|college|cologne|com|comcast|commbank|community|company|compare|computer|comsec|condos|construction|consulting|contact|contractors|cooking|cookingchannel|cool|coop|corsica|country|coupon|coupons|courses|cr|credit|creditcard|creditunion|cricket|crown|crs|cruise|cruises|csc|cu|cuisinella|cv|cw|cx|cy|cymru|cyou|cz|dabur|dad|dance|data|date|dating|datsun|day|dclk|dds|de|deal|dealer|deals|degree|delivery|dell|deloitte|delta|democrat|dental|dentist|desi|design|dev|dhl|diamonds|diet|digital|direct|directory|discount|discover|dish|diy|dj|dk|dm|dnp|do|docs|doctor|dodge|dog|doha|domains|dot|download|drive|dtv|dubai|duck|dunlop|duns|dupont|durban|dvag|dvr|dz|earth|eat|ec|eco|edeka|edu|education|ee|eg|email|emerck|energy|engineer|engineering|enterprises|epost|epson|equipment|er|ericsson|erni|es|esq|estate|esurance|et|etisalat|eu|eurovision|eus|events|everbank|exchange|expert|exposed|express|extraspace|fage|fail|fairwinds|faith|family|fan|fans|farm|farmers|fashion|fast|fedex|feedback|ferrari|ferrero|fi|fiat|fidelity|fido|film|final|finance|financial|fire|firestone|firmdale|fish|fishing|fit|fitness|fj|fk|flickr|flights|flir|florist|flowers|fly|fm|fo|foo|food|foodnetwork|football|ford|forex|forsale|forum|foundation|fox|fr|free|fresenius|frl|frogans|frontdoor|frontier|ftr|fujitsu|fujixerox|fun|fund|furniture|futbol|fyi|ga|gal|gallery|gallo|gallup|game|games|gap|garden|gb|gbiz|gd|gdn|ge|gea|gent|genting|george|gf|gg|ggee|gh|gi|gift|gifts|gives|giving|gl|glade|glass|gle|global|globo|gm|gmail|gmbh|gmo|gmx|gn|godaddy|gold|goldpoint|golf|goo|goodhands|goodyear|goog|google|gop|got|gov|gp|gq|gr|grainger|graphics|gratis|green|gripe|grocery|group|gs|gt|gu|guardian|gucci|guge|guide|guitars|guru|gw|gy|hair|hamburg|hangout|haus|hbo|hdfc|hdfcbank|health|healthcare|help|helsinki|here|hermes|hgtv|hiphop|hisamitsu|hitachi|hiv|hk|hkt|hm|hn|hockey|holdings|holiday|homedepot|homegoods|homes|homesense|honda|honeywell|horse|hospital|host|hosting|hot|hoteles|hotels|hotmail|house|how|hr|hsbc|ht|htc|hu|hughes|hyatt|hyundai|ibm|icbc|ice|icu|id|ie|ieee|ifm|ikano|il|im|imamat|imdb|immo|immobilien|in|industries|infiniti|info|ing|ink|institute|insurance|insure|int|intel|international|intuit|investments|io|ipiranga|iq|ir|irish|is|iselect|ismaili|ist|istanbul|it|itau|itv|iveco|iwc|jaguar|java|jcb|jcp|je|jeep|jetzt|jewelry|jio|jlc|jll|jm|jmp|jnj|jo|jobs|joburg|jot|joy|jp|jpmorgan|jprs|juegos|juniper|kaufen|kddi|ke|kerryhotels|kerrylogistics|kerryproperties|kfh|kg|kh|ki|kia|kim|kinder|kindle|kitchen|kiwi|km|kn|koeln|komatsu|kosher|kp|kpmg|kpn|kr|krd|kred|kuokgroup|kw|ky|kyoto|kz|la|lacaixa|ladbrokes|lamborghini|lamer|lancaster|lancia|lancome|land|landrover|lanxess|lasalle|lat|latino|latrobe|law|lawyer|lb|lc|lds|lease|leclerc|lefrak|legal|lego|lexus|lgbt|li|liaison|lidl|life|lifeinsurance|lifestyle|lighting|like|lilly|limited|limo|lincoln|linde|link|lipsy|live|living|lixil|lk|loan|loans|locker|locus|loft|lol|london|lotte|lotto|love|lpl|lplfinancial|lr|ls|lt|ltd|ltda|lu|lundbeck|lupin|luxe|luxury|lv|ly|ma|macys|madrid|maif|maison|makeup|man|management|mango|map|market|marketing|markets|marriott|marshalls|maserati|mattel|mba|mc|mckinsey|md|me|med|media|meet|melbourne|meme|memorial|men|menu|meo|merckmsd|metlife|mg|mh|miami|microsoft|mil|mini|mint|mit|mitsubishi|mk|ml|mlb|mls|mm|mma|mn|mo|mobi|mobile|mobily|moda|moe|moi|mom|monash|money|monster|mopar|mormon|mortgage|moscow|moto|motorcycles|mov|movie|movistar|mp|mq|mr|ms|msd|mt|mtn|mtr|mu|museum|mutual|mv|mw|mx|my|mz|na|nab|nadex|nagoya|name|nationwide|natura|navy|nba|nc|ne|nec|net|netbank|netflix|network|neustar|new|newholland|news|next|nextdirect|nexus|nf|nfl|ng|ngo|nhk|ni|nico|nike|nikon|ninja|nissan|nissay|nl|no|nokia|northwesternmutual|norton|now|nowruz|nowtv|np|nr|nra|nrw|ntt|nu|nyc|nz|obi|observer|off|office|okinawa|olayan|olayangroup|oldnavy|ollo|om|omega|one|ong|onl|online|onyourside|ooo|open|oracle|orange|org|organic|origins|osaka|otsuka|ott|ovh|pa|page|panasonic|panerai|paris|pars|partners|parts|party|passagens|pay|pccw|pe|pet|pf|pfizer|pg|ph|pharmacy|phd|philips|phone|photo|photography|photos|physio|piaget|pics|pictet|pictures|pid|pin|ping|pink|pioneer|pizza|pk|pl|place|play|playstation|plumbing|plus|pm|pn|pnc|pohl|poker|politie|porn|post|pr|pramerica|praxi|press|prime|pro|prod|productions|prof|progressive|promo|properties|property|protection|pru|prudential|ps|pt|pub|pw|pwc|py|qa|qpon|quebec|quest|qvc|racing|radio|raid|re|read|realestate|realtor|realty|recipes|red|redstone|redumbrella|rehab|reise|reisen|reit|reliance|ren|rent|rentals|repair|report|republican|rest|restaurant|review|reviews|rexroth|rich|richardli|ricoh|rightathome|ril|rio|rip|rmit|ro|rocher|rocks|rodeo|rogers|room|rs|rsvp|ru|rugby|ruhr|run|rw|rwe|ryukyu|sa|saarland|safe|safety|sakura|sale|salon|samsclub|samsung|sandvik|sandvikcoromant|sanofi|sap|sapo|sarl|sas|save|saxo|sb|sbi|sbs|sc|sca|scb|schaeffler|schmidt|scholarships|school|schule|schwarz|science|scjohnson|scor|scot|sd|se|search|seat|secure|security|seek|select|sener|services|ses|seven|sew|sex|sexy|sfr|sg|sh|shangrila|sharp|shaw|shell|shia|shiksha|shoes|shop|shopping|shouji|show|showtime|shriram|si|silk|sina|singles|site|sj|sk|ski|skin|sky|skype|sl|sling|sm|smart|smile|sn|sncf|so|soccer|social|softbank|software|sohu|solar|solutions|song|sony|soy|space|spiegel|spot|spreadbetting|sr|srl|srt|st|stada|staples|star|starhub|statebank|statefarm|statoil|stc|stcgroup|stockholm|storage|store|stream|studio|study|style|su|sucks|supplies|supply|support|surf|surgery|suzuki|sv|swatch|swiftcover|swiss|sx|sy|sydney|symantec|systems|sz|tab|taipei|talk|taobao|target|tatamotors|tatar|tattoo|tax|taxi|tc|tci|td|tdk|team|tech|technology|tel|telecity|telefonica|temasek|tennis|teva|tf|tg|th|thd|theater|theatre|tiaa|tickets|tienda|tiffany|tips|tires|tirol|tj|tjmaxx|tjx|tk|tkmaxx|tl|tm|tmall|tn|to|today|tokyo|tools|top|toray|toshiba|total|tours|town|toyota|toys|tr|trade|trading|training|travel|travelchannel|travelers|travelersinsurance|trust|trv|tt|tube|tui|tunes|tushu|tv|tvs|tw|tz|ua|ubank|ubs|uconnect|ug|uk|unicom|university|uno|uol|ups|us|uy|uz|va|vacations|vana|vanguard|vc|ve|vegas|ventures|verisign|versicherung|vet|vg|vi|viajes|video|vig|viking|villas|vin|vip|virgin|visa|vision|vista|vistaprint|viva|vivo|vlaanderen|vn|vodka|volkswagen|volvo|vote|voting|voto|voyage|vu|vuelos|wales|walmart|walter|wang|wanggou|warman|watch|watches|weather|weatherchannel|webcam|weber|website|wed|wedding|weibo|weir|wf|whoswho|wien|wiki|williamhill|win|windows|wine|winners|wme|wolterskluwer|woodside|work|works|world|wow|ws|wtc|wtf|xbox|xerox|xfinity|xihuan|xin|xn--11b4c3d|xn--1ck2e1b|xn--1qqw23a|xn--2scrj9c|xn--30rr7y|xn--3bst00m|xn--3ds443g|xn--3e0b707e|xn--3hcrj9c|xn--3oq18vl8pn36a|xn--3pxu8k|xn--42c2d9a|xn--45br5cyl|xn--45brj9c|xn--45q11c|xn--4gbrim|xn--54b7fta0cc|xn--55qw42g|xn--55qx5d|xn--5su34j936bgsg|xn--5tzm5g|xn--6frz82g|xn--6qq986b3xl|xn--80adxhks|xn--80ao21a|xn--80aqecdr1a|xn--80asehdb|xn--80aswg|xn--8y0a063a|xn--90a3ac|xn--90ae|xn--90ais|xn--9dbq2a|xn--9et52u|xn--9krt00a|xn--b4w605ferd|xn--bck1b9a5dre4c|xn--c1avg|xn--c2br7g|xn--cck2b3b|xn--cg4bki|xn--clchc0ea0b2g2a9gcd|xn--czr694b|xn--czrs0t|xn--czru2d|xn--d1acj3b|xn--d1alf|xn--e1a4c|xn--eckvdtc9d|xn--efvy88h|xn--estv75g|xn--fct429k|xn--fhbei|xn--fiq228c5hs|xn--fiq64b|xn--fiqs8s|xn--fiqz9s|xn--fjq720a|xn--flw351e|xn--fpcrj9c3d|xn--fzc2c9e2c|xn--fzys8d69uvgm|xn--g2xx48c|xn--gckr3f0f|xn--gecrj9c|xn--gk3at1e|xn--h2breg3eve|xn--h2brj9c|xn--h2brj9c8c|xn--hxt814e|xn--i1b6b1a6a2e|xn--imr513n|xn--io0a7i|xn--j1aef|xn--j1amh|xn--j6w193g|xn--jlq61u9w7b|xn--jvr189m|xn--kcrx77d1x4a|xn--kprw13d|xn--kpry57d|xn--kpu716f|xn--kput3i|xn--l1acc|xn--lgbbat1ad8j|xn--mgb9awbf|xn--mgba3a3ejt|xn--mgba3a4f16a|xn--mgba7c0bbn0a|xn--mgbaakc7dvf|xn--mgbaam7a8h|xn--mgbab2bd|xn--mgbai9azgqp6j|xn--mgbayh7gpa|xn--mgbb9fbpob|xn--mgbbh1a|xn--mgbbh1a71e|xn--mgbc0a9azcg|xn--mgbca7dzdo|xn--mgberp4a5d4ar|xn--mgbgu82a|xn--mgbi4ecexp|xn--mgbpl2fh|xn--mgbt3dhd|xn--mgbtx2b|xn--mgbx4cd0ab|xn--mix891f|xn--mk1bu44c|xn--mxtq1m|xn--ngbc5azd|xn--ngbe9e0a|xn--ngbrx|xn--node|xn--nqv7f|xn--nqv7fs00ema|xn--nyqy26a|xn--o3cw4h|xn--ogbpf8fl|xn--p1acf|xn--p1ai|xn--pbt977c|xn--pgbs0dh|xn--pssy2u|xn--q9jyb4c|xn--qcka1pmc|xn--qxam|xn--rhqv96g|xn--rovu88b|xn--rvc1e0am3e|xn--s9brj9c|xn--ses554g|xn--t60b56a|xn--tckwe|xn--tiq49xqyj|xn--unup4y|xn--vermgensberater-ctb|xn--vermgensberatung-pwb|xn--vhquv|xn--vuq861b|xn--w4r85el8fhu5dnra|xn--w4rs40l|xn--wgbh1c|xn--wgbl6a|xn--xhq521b|xn--xkc2al3hye2a|xn--xkc2dl3a5ee0h|xn--y9a3aq|xn--yfro4i67o|xn--ygbi2ammx|xn--zfr164b|xperia|xxx|xyz|yachts|yahoo|yamaxun|yandex|ye|yodobashi|yoga|yokohama|you|youtube|yt|yun|za|zappos|zara|zero|zip|zippo|zm|zone|zuerich|zw'.split('|'); // macro, see gulpfile.js

    /**
    	The scanner provides an interface that takes a string of text as input, and
    	outputs an array of tokens instances that can be used for easy URL parsing.

    	@module linkify
    	@submodule scanner
    	@main scanner
    */

    var NUMBERS = '0123456789'.split('');
    var ALPHANUM = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');
    var WHITESPACE = [' ', '\f', '\r', '\t', '\v', '\xA0', '\u1680', '\u180E']; // excluding line breaks

    var domainStates = []; // states that jump to DOMAIN on /[a-z0-9]/
    var makeState = function makeState(tokenClass) {
    	return new state.CharacterState(tokenClass);
    };

    // Frequently used states
    var S_START = makeState();
    var S_NUM = makeState(text.NUM);
    var S_DOMAIN = makeState(text.DOMAIN);
    var S_DOMAIN_HYPHEN = makeState(); // domain followed by 1 or more hyphen characters
    var S_WS = makeState(text.WS);

    // States for special URL symbols
    S_START.on('@', makeState(text.AT)).on('.', makeState(text.DOT)).on('+', makeState(text.PLUS)).on('#', makeState(text.POUND)).on('?', makeState(text.QUERY)).on('/', makeState(text.SLASH)).on('_', makeState(text.UNDERSCORE)).on(':', makeState(text.COLON)).on('{', makeState(text.OPENBRACE)).on('[', makeState(text.OPENBRACKET)).on('<', makeState(text.OPENANGLEBRACKET)).on('(', makeState(text.OPENPAREN)).on('}', makeState(text.CLOSEBRACE)).on(']', makeState(text.CLOSEBRACKET)).on('>', makeState(text.CLOSEANGLEBRACKET)).on(')', makeState(text.CLOSEPAREN)).on('&', makeState(text.AMPERSAND)).on([',', ';', '!', '"', '\''], makeState(text.PUNCTUATION));

    // Whitespace jumps
    // Tokens of only non-newline whitespace are arbitrarily long
    S_START.on('\n', makeState(text.NL)).on(WHITESPACE, S_WS);

    // If any whitespace except newline, more whitespace!
    S_WS.on(WHITESPACE, S_WS);

    // Generates states for top-level domains
    // Note that this is most accurate when tlds are in alphabetical order
    for (var i = 0; i < tlds.length; i++) {
    	var newStates = (0, state.stateify)(tlds[i], S_START, text.TLD, text.DOMAIN);
    	domainStates.push.apply(domainStates, newStates);
    }

    // Collect the states generated by different protocls
    var partialProtocolFileStates = (0, state.stateify)('file', S_START, text.DOMAIN, text.DOMAIN);
    var partialProtocolFtpStates = (0, state.stateify)('ftp', S_START, text.DOMAIN, text.DOMAIN);
    var partialProtocolHttpStates = (0, state.stateify)('http', S_START, text.DOMAIN, text.DOMAIN);
    var partialProtocolMailtoStates = (0, state.stateify)('mailto', S_START, text.DOMAIN, text.DOMAIN);

    // Add the states to the array of DOMAINeric states
    domainStates.push.apply(domainStates, partialProtocolFileStates);
    domainStates.push.apply(domainStates, partialProtocolFtpStates);
    domainStates.push.apply(domainStates, partialProtocolHttpStates);
    domainStates.push.apply(domainStates, partialProtocolMailtoStates);

    // Protocol states
    var S_PROTOCOL_FILE = partialProtocolFileStates.pop();
    var S_PROTOCOL_FTP = partialProtocolFtpStates.pop();
    var S_PROTOCOL_HTTP = partialProtocolHttpStates.pop();
    var S_MAILTO = partialProtocolMailtoStates.pop();
    var S_PROTOCOL_SECURE = makeState(text.DOMAIN);
    var S_FULL_PROTOCOL = makeState(text.PROTOCOL); // Full protocol ends with COLON
    var S_FULL_MAILTO = makeState(text.MAILTO); // Mailto ends with COLON

    // Secure protocols (end with 's')
    S_PROTOCOL_FTP.on('s', S_PROTOCOL_SECURE).on(':', S_FULL_PROTOCOL);

    S_PROTOCOL_HTTP.on('s', S_PROTOCOL_SECURE).on(':', S_FULL_PROTOCOL);

    domainStates.push(S_PROTOCOL_SECURE);

    // Become protocol tokens after a COLON
    S_PROTOCOL_FILE.on(':', S_FULL_PROTOCOL);
    S_PROTOCOL_SECURE.on(':', S_FULL_PROTOCOL);
    S_MAILTO.on(':', S_FULL_MAILTO);

    // Localhost
    var partialLocalhostStates = (0, state.stateify)('localhost', S_START, text.LOCALHOST, text.DOMAIN);
    domainStates.push.apply(domainStates, partialLocalhostStates);

    // Everything else
    // DOMAINs make more DOMAINs
    // Number and character transitions
    S_START.on(NUMBERS, S_NUM);
    S_NUM.on('-', S_DOMAIN_HYPHEN).on(NUMBERS, S_NUM).on(ALPHANUM, S_DOMAIN); // number becomes DOMAIN

    S_DOMAIN.on('-', S_DOMAIN_HYPHEN).on(ALPHANUM, S_DOMAIN);

    // All the generated states should have a jump to DOMAIN
    for (var _i = 0; _i < domainStates.length; _i++) {
    	domainStates[_i].on('-', S_DOMAIN_HYPHEN).on(ALPHANUM, S_DOMAIN);
    }

    S_DOMAIN_HYPHEN.on('-', S_DOMAIN_HYPHEN).on(NUMBERS, S_DOMAIN).on(ALPHANUM, S_DOMAIN);

    // Set default transition
    S_START.defaultTransition = makeState(text.SYM);

    /**
    	Given a string, returns an array of TOKEN instances representing the
    	composition of that string.

    	@method run
    	@param {String} str Input string to scan
    	@return {Array} Array of TOKEN instances
    */
    var run = function run(str) {

    	// The state machine only looks at lowercase strings.
    	// This selective `toLowerCase` is used because lowercasing the entire
    	// string causes the length and character position to vary in some in some
    	// non-English strings. This happens only on V8-based runtimes.
    	var lowerStr = str.replace(/[A-Z]/g, function (c) {
    		return c.toLowerCase();
    	});
    	var len = str.length;
    	var tokens = []; // return value

    	var cursor = 0;

    	// Tokenize the string
    	while (cursor < len) {
    		var state = S_START;
    		var nextState = null;
    		var tokenLength = 0;
    		var latestAccepting = null;
    		var sinceAccepts = -1;

    		while (cursor < len && (nextState = state.next(lowerStr[cursor]))) {
    			state = nextState;

    			// Keep track of the latest accepting state
    			if (state.accepts()) {
    				sinceAccepts = 0;
    				latestAccepting = state;
    			} else if (sinceAccepts >= 0) {
    				sinceAccepts++;
    			}

    			tokenLength++;
    			cursor++;
    		}

    		if (sinceAccepts < 0) {
    			continue;
    		} // Should never happen

    		// Roll back to the latest accepting state
    		cursor -= sinceAccepts;
    		tokenLength -= sinceAccepts;

    		// Get the class for the new token
    		var TOKEN = latestAccepting.emit(); // Current token class

    		// No more jumps, just make a new token
    		tokens.push(new TOKEN(str.substr(cursor - tokenLength, tokenLength)));
    	}

    	return tokens;
    };

    var start = S_START;
    exports.State = state.CharacterState;
    exports.TOKENS = TOKENS;
    exports.run = run;
    exports.start = start;
    });

    unwrapExports(scanner);
    scanner.start;
    scanner.run;
    scanner.TOKENS;
    scanner.State;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var multi = createCommonjsModule$1(function (module, exports) {

    exports.__esModule = true;
    exports.URL = exports.TEXT = exports.NL = exports.EMAIL = exports.MAILTOEMAIL = exports.Base = undefined;







    /******************************************************************************
    	Multi-Tokens
    	Tokens composed of arrays of TextTokens
    ******************************************************************************/

    // Is the given token a valid domain token?
    // Should nums be included here?
    function isDomainToken(token) {
    	return token instanceof text.DOMAIN || token instanceof text.TLD;
    }

    /**
    	Abstract class used for manufacturing tokens of text tokens. That is rather
    	than the value for a token being a small string of text, it's value an array
    	of text tokens.

    	Used for grouping together URLs, emails, hashtags, and other potential
    	creations.

    	@class MultiToken
    	@abstract
    */
    var MultiToken = (0, createTokenClass_1.createTokenClass)();

    MultiToken.prototype = {
    	/**
     	String representing the type for this token
     	@property type
     	@default 'TOKEN'
     */
    	type: 'token',

    	/**
     	Is this multitoken a link?
     	@property isLink
     	@default false
     */
    	isLink: false,

    	/**
     	Return the string this token represents.
     	@method toString
     	@return {String}
     */
    	toString: function toString() {
    		var result = [];
    		for (var i = 0; i < this.v.length; i++) {
    			result.push(this.v[i].toString());
    		}
    		return result.join('');
    	},


    	/**
     	What should the value for this token be in the `href` HTML attribute?
     	Returns the `.toString` value by default.
     		@method toHref
     	@return {String}
     */
    	toHref: function toHref() {
    		return this.toString();
    	},


    	/**
     	Returns a hash of relevant values for this token, which includes keys
     	* type - Kind of token ('url', 'email', etc.)
     	* value - Original text
     	* href - The value that should be added to the anchor tag's href
     		attribute
     		@method toObject
     	@param {String} [protocol] `'http'` by default
     	@return {Object}
     */
    	toObject: function toObject() {
    		var protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http';

    		return {
    			type: this.type,
    			value: this.toString(),
    			href: this.toHref(protocol)
    		};
    	}
    };

    /**
    	Represents an arbitrarily mailto email address with the prefix included
    	@class MAILTO
    	@extends MultiToken
    */
    var MAILTOEMAIL = (0, _class.inherits)(MultiToken, (0, createTokenClass_1.createTokenClass)(), {
    	type: 'email',
    	isLink: true
    });

    /**
    	Represents a list of tokens making up a valid email address
    	@class EMAIL
    	@extends MultiToken
    */
    var EMAIL = (0, _class.inherits)(MultiToken, (0, createTokenClass_1.createTokenClass)(), {
    	type: 'email',
    	isLink: true,
    	toHref: function toHref() {
    		return 'mailto:' + this.toString();
    	}
    });

    /**
    	Represents some plain text
    	@class TEXT
    	@extends MultiToken
    */
    var TEXT = (0, _class.inherits)(MultiToken, (0, createTokenClass_1.createTokenClass)(), { type: 'text' });

    /**
    	Multi-linebreak token - represents a line break
    	@class NL
    	@extends MultiToken
    */
    var NL = (0, _class.inherits)(MultiToken, (0, createTokenClass_1.createTokenClass)(), { type: 'nl' });

    /**
    	Represents a list of tokens making up a valid URL
    	@class URL
    	@extends MultiToken
    */
    var URL = (0, _class.inherits)(MultiToken, (0, createTokenClass_1.createTokenClass)(), {
    	type: 'url',
    	isLink: true,

    	/**
     	Lowercases relevant parts of the domain and adds the protocol if
     	required. Note that this will not escape unsafe HTML characters in the
     	URL.
     		@method href
     	@param {String} protocol
     	@return {String}
     */
    	toHref: function toHref() {
    		var protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http';

    		var hasProtocol = false;
    		var hasSlashSlash = false;
    		var tokens = this.v;
    		var result = [];
    		var i = 0;

    		// Make the first part of the domain lowercase
    		// Lowercase protocol
    		while (tokens[i] instanceof text.PROTOCOL) {
    			hasProtocol = true;
    			result.push(tokens[i].toString().toLowerCase());
    			i++;
    		}

    		// Skip slash-slash
    		while (tokens[i] instanceof text.SLASH) {
    			hasSlashSlash = true;
    			result.push(tokens[i].toString());
    			i++;
    		}

    		// Lowercase all other characters in the domain
    		while (isDomainToken(tokens[i])) {
    			result.push(tokens[i].toString().toLowerCase());
    			i++;
    		}

    		// Leave all other characters as they were written
    		for (; i < tokens.length; i++) {
    			result.push(tokens[i].toString());
    		}

    		result = result.join('');

    		if (!(hasProtocol || hasSlashSlash)) {
    			result = protocol + '://' + result;
    		}

    		return result;
    	},
    	hasProtocol: function hasProtocol() {
    		return this.v[0] instanceof text.PROTOCOL;
    	}
    });

    exports.Base = MultiToken;
    exports.MAILTOEMAIL = MAILTOEMAIL;
    exports.EMAIL = EMAIL;
    exports.NL = NL;
    exports.TEXT = TEXT;
    exports.URL = URL;
    });

    unwrapExports(multi);
    multi.URL;
    multi.TEXT;
    multi.NL;
    multi.EMAIL;
    multi.MAILTOEMAIL;
    multi.Base;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var parser$2 = createCommonjsModule$1(function (module, exports) {

    exports.__esModule = true;
    exports.start = exports.run = exports.TOKENS = exports.State = undefined;





    var MULTI_TOKENS = _interopRequireWildcard(multi);



    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

    /**
    	Not exactly parser, more like the second-stage scanner (although we can
    	theoretically hotswap the code here with a real parser in the future... but
    	for a little URL-finding utility abstract syntax trees may be a little
    	overkill).

    	URL format: http://en.wikipedia.org/wiki/URI_scheme
    	Email format: http://en.wikipedia.org/wiki/Email_address (links to RFC in
    	reference)

    	@module linkify
    	@submodule parser
    	@main parser
    */

    var makeState = function makeState(tokenClass) {
    	return new state.TokenState(tokenClass);
    };

    // The universal starting state.
    var S_START = makeState();

    // Intermediate states for URLs. Note that domains that begin with a protocol
    // are treated slighly differently from those that don't.
    var S_PROTOCOL = makeState(); // e.g., 'http:'
    var S_MAILTO = makeState(); // 'mailto:'
    var S_PROTOCOL_SLASH = makeState(); // e.g., '/', 'http:/''
    var S_PROTOCOL_SLASH_SLASH = makeState(); // e.g., '//', 'http://'
    var S_DOMAIN = makeState(); // parsed string ends with a potential domain name (A)
    var S_DOMAIN_DOT = makeState(); // (A) domain followed by DOT
    var S_TLD = makeState(multi.URL); // (A) Simplest possible URL with no query string
    var S_TLD_COLON = makeState(); // (A) URL followed by colon (potential port number here)
    var S_TLD_PORT = makeState(multi.URL); // TLD followed by a port number
    var S_URL = makeState(multi.URL); // Long URL with optional port and maybe query string
    var S_URL_NON_ACCEPTING = makeState(); // URL followed by some symbols (will not be part of the final URL)
    var S_URL_OPENBRACE = makeState(); // URL followed by {
    var S_URL_OPENBRACKET = makeState(); // URL followed by [
    var S_URL_OPENANGLEBRACKET = makeState(); // URL followed by <
    var S_URL_OPENPAREN = makeState(); // URL followed by (
    var S_URL_OPENBRACE_Q = makeState(multi.URL); // URL followed by { and some symbols that the URL can end it
    var S_URL_OPENBRACKET_Q = makeState(multi.URL); // URL followed by [ and some symbols that the URL can end it
    var S_URL_OPENANGLEBRACKET_Q = makeState(multi.URL); // URL followed by < and some symbols that the URL can end it
    var S_URL_OPENPAREN_Q = makeState(multi.URL); // URL followed by ( and some symbols that the URL can end it
    var S_URL_OPENBRACE_SYMS = makeState(); // S_URL_OPENBRACE_Q followed by some symbols it cannot end it
    var S_URL_OPENBRACKET_SYMS = makeState(); // S_URL_OPENBRACKET_Q followed by some symbols it cannot end it
    var S_URL_OPENANGLEBRACKET_SYMS = makeState(); // S_URL_OPENANGLEBRACKET_Q followed by some symbols it cannot end it
    var S_URL_OPENPAREN_SYMS = makeState(); // S_URL_OPENPAREN_Q followed by some symbols it cannot end it
    var S_EMAIL_DOMAIN = makeState(); // parsed string starts with local email info + @ with a potential domain name (C)
    var S_EMAIL_DOMAIN_DOT = makeState(); // (C) domain followed by DOT
    var S_EMAIL = makeState(multi.EMAIL); // (C) Possible email address (could have more tlds)
    var S_EMAIL_COLON = makeState(); // (C) URL followed by colon (potential port number here)
    var S_EMAIL_PORT = makeState(multi.EMAIL); // (C) Email address with a port
    var S_MAILTO_EMAIL = makeState(multi.MAILTOEMAIL); // Email that begins with the mailto prefix (D)
    var S_MAILTO_EMAIL_NON_ACCEPTING = makeState(); // (D) Followed by some non-query string chars
    var S_LOCALPART = makeState(); // Local part of the email address
    var S_LOCALPART_AT = makeState(); // Local part of the email address plus @
    var S_LOCALPART_DOT = makeState(); // Local part of the email address plus '.' (localpart cannot end in .)
    var S_NL = makeState(multi.NL); // single new line

    // Make path from start to protocol (with '//')
    S_START.on(text.NL, S_NL).on(text.PROTOCOL, S_PROTOCOL).on(text.MAILTO, S_MAILTO).on(text.SLASH, S_PROTOCOL_SLASH);

    S_PROTOCOL.on(text.SLASH, S_PROTOCOL_SLASH);
    S_PROTOCOL_SLASH.on(text.SLASH, S_PROTOCOL_SLASH_SLASH);

    // The very first potential domain name
    S_START.on(text.TLD, S_DOMAIN).on(text.DOMAIN, S_DOMAIN).on(text.LOCALHOST, S_TLD).on(text.NUM, S_DOMAIN);

    // Force URL for protocol followed by anything sane
    S_PROTOCOL_SLASH_SLASH.on(text.TLD, S_URL).on(text.DOMAIN, S_URL).on(text.NUM, S_URL).on(text.LOCALHOST, S_URL);

    // Account for dots and hyphens
    // hyphens are usually parts of domain names
    S_DOMAIN.on(text.DOT, S_DOMAIN_DOT);
    S_EMAIL_DOMAIN.on(text.DOT, S_EMAIL_DOMAIN_DOT);

    // Hyphen can jump back to a domain name

    // After the first domain and a dot, we can find either a URL or another domain
    S_DOMAIN_DOT.on(text.TLD, S_TLD).on(text.DOMAIN, S_DOMAIN).on(text.NUM, S_DOMAIN).on(text.LOCALHOST, S_DOMAIN);

    S_EMAIL_DOMAIN_DOT.on(text.TLD, S_EMAIL).on(text.DOMAIN, S_EMAIL_DOMAIN).on(text.NUM, S_EMAIL_DOMAIN).on(text.LOCALHOST, S_EMAIL_DOMAIN);

    // S_TLD accepts! But the URL could be longer, try to find a match greedily
    // The `run` function should be able to "rollback" to the accepting state
    S_TLD.on(text.DOT, S_DOMAIN_DOT);
    S_EMAIL.on(text.DOT, S_EMAIL_DOMAIN_DOT);

    // Become real URLs after `SLASH` or `COLON NUM SLASH`
    // Here PSS and non-PSS converge
    S_TLD.on(text.COLON, S_TLD_COLON).on(text.SLASH, S_URL);
    S_TLD_COLON.on(text.NUM, S_TLD_PORT);
    S_TLD_PORT.on(text.SLASH, S_URL);
    S_EMAIL.on(text.COLON, S_EMAIL_COLON);
    S_EMAIL_COLON.on(text.NUM, S_EMAIL_PORT);

    // Types of characters the URL can definitely end in
    var qsAccepting = [text.DOMAIN, text.AT, text.LOCALHOST, text.NUM, text.PLUS, text.POUND, text.PROTOCOL, text.SLASH, text.TLD, text.UNDERSCORE, text.SYM, text.AMPERSAND];

    // Types of tokens that can follow a URL and be part of the query string
    // but cannot be the very last characters
    // Characters that cannot appear in the URL at all should be excluded
    var qsNonAccepting = [text.COLON, text.DOT, text.QUERY, text.PUNCTUATION, text.CLOSEBRACE, text.CLOSEBRACKET, text.CLOSEANGLEBRACKET, text.CLOSEPAREN, text.OPENBRACE, text.OPENBRACKET, text.OPENANGLEBRACKET, text.OPENPAREN];

    // These states are responsible primarily for determining whether or not to
    // include the final round bracket.

    // URL, followed by an opening bracket
    S_URL.on(text.OPENBRACE, S_URL_OPENBRACE).on(text.OPENBRACKET, S_URL_OPENBRACKET).on(text.OPENANGLEBRACKET, S_URL_OPENANGLEBRACKET).on(text.OPENPAREN, S_URL_OPENPAREN);

    // URL with extra symbols at the end, followed by an opening bracket
    S_URL_NON_ACCEPTING.on(text.OPENBRACE, S_URL_OPENBRACE).on(text.OPENBRACKET, S_URL_OPENBRACKET).on(text.OPENANGLEBRACKET, S_URL_OPENANGLEBRACKET).on(text.OPENPAREN, S_URL_OPENPAREN);

    // Closing bracket component. This character WILL be included in the URL
    S_URL_OPENBRACE.on(text.CLOSEBRACE, S_URL);
    S_URL_OPENBRACKET.on(text.CLOSEBRACKET, S_URL);
    S_URL_OPENANGLEBRACKET.on(text.CLOSEANGLEBRACKET, S_URL);
    S_URL_OPENPAREN.on(text.CLOSEPAREN, S_URL);
    S_URL_OPENBRACE_Q.on(text.CLOSEBRACE, S_URL);
    S_URL_OPENBRACKET_Q.on(text.CLOSEBRACKET, S_URL);
    S_URL_OPENANGLEBRACKET_Q.on(text.CLOSEANGLEBRACKET, S_URL);
    S_URL_OPENPAREN_Q.on(text.CLOSEPAREN, S_URL);
    S_URL_OPENBRACE_SYMS.on(text.CLOSEBRACE, S_URL);
    S_URL_OPENBRACKET_SYMS.on(text.CLOSEBRACKET, S_URL);
    S_URL_OPENANGLEBRACKET_SYMS.on(text.CLOSEANGLEBRACKET, S_URL);
    S_URL_OPENPAREN_SYMS.on(text.CLOSEPAREN, S_URL);

    // URL that beings with an opening bracket, followed by a symbols.
    // Note that the final state can still be `S_URL_OPENBRACE_Q` (if the URL only
    // has a single opening bracket for some reason).
    S_URL_OPENBRACE.on(qsAccepting, S_URL_OPENBRACE_Q);
    S_URL_OPENBRACKET.on(qsAccepting, S_URL_OPENBRACKET_Q);
    S_URL_OPENANGLEBRACKET.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);
    S_URL_OPENPAREN.on(qsAccepting, S_URL_OPENPAREN_Q);
    S_URL_OPENBRACE.on(qsNonAccepting, S_URL_OPENBRACE_SYMS);
    S_URL_OPENBRACKET.on(qsNonAccepting, S_URL_OPENBRACKET_SYMS);
    S_URL_OPENANGLEBRACKET.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_SYMS);
    S_URL_OPENPAREN.on(qsNonAccepting, S_URL_OPENPAREN_SYMS);

    // URL that begins with an opening bracket, followed by some symbols
    S_URL_OPENBRACE_Q.on(qsAccepting, S_URL_OPENBRACE_Q);
    S_URL_OPENBRACKET_Q.on(qsAccepting, S_URL_OPENBRACKET_Q);
    S_URL_OPENANGLEBRACKET_Q.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);
    S_URL_OPENPAREN_Q.on(qsAccepting, S_URL_OPENPAREN_Q);
    S_URL_OPENBRACE_Q.on(qsNonAccepting, S_URL_OPENBRACE_Q);
    S_URL_OPENBRACKET_Q.on(qsNonAccepting, S_URL_OPENBRACKET_Q);
    S_URL_OPENANGLEBRACKET_Q.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_Q);
    S_URL_OPENPAREN_Q.on(qsNonAccepting, S_URL_OPENPAREN_Q);

    S_URL_OPENBRACE_SYMS.on(qsAccepting, S_URL_OPENBRACE_Q);
    S_URL_OPENBRACKET_SYMS.on(qsAccepting, S_URL_OPENBRACKET_Q);
    S_URL_OPENANGLEBRACKET_SYMS.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);
    S_URL_OPENPAREN_SYMS.on(qsAccepting, S_URL_OPENPAREN_Q);
    S_URL_OPENBRACE_SYMS.on(qsNonAccepting, S_URL_OPENBRACE_SYMS);
    S_URL_OPENBRACKET_SYMS.on(qsNonAccepting, S_URL_OPENBRACKET_SYMS);
    S_URL_OPENANGLEBRACKET_SYMS.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_SYMS);
    S_URL_OPENPAREN_SYMS.on(qsNonAccepting, S_URL_OPENPAREN_SYMS);

    // Account for the query string
    S_URL.on(qsAccepting, S_URL);
    S_URL_NON_ACCEPTING.on(qsAccepting, S_URL);

    S_URL.on(qsNonAccepting, S_URL_NON_ACCEPTING);
    S_URL_NON_ACCEPTING.on(qsNonAccepting, S_URL_NON_ACCEPTING);

    // Email address-specific state definitions
    // Note: We are not allowing '/' in email addresses since this would interfere
    // with real URLs

    // For addresses with the mailto prefix
    // 'mailto:' followed by anything sane is a valid email
    S_MAILTO.on(text.TLD, S_MAILTO_EMAIL).on(text.DOMAIN, S_MAILTO_EMAIL).on(text.NUM, S_MAILTO_EMAIL).on(text.LOCALHOST, S_MAILTO_EMAIL);

    // Greedily get more potential valid email values
    S_MAILTO_EMAIL.on(qsAccepting, S_MAILTO_EMAIL).on(qsNonAccepting, S_MAILTO_EMAIL_NON_ACCEPTING);
    S_MAILTO_EMAIL_NON_ACCEPTING.on(qsAccepting, S_MAILTO_EMAIL).on(qsNonAccepting, S_MAILTO_EMAIL_NON_ACCEPTING);

    // For addresses without the mailto prefix
    // Tokens allowed in the localpart of the email
    var localpartAccepting = [text.DOMAIN, text.NUM, text.PLUS, text.POUND, text.QUERY, text.UNDERSCORE, text.SYM, text.AMPERSAND, text.TLD];

    // Some of the tokens in `localpartAccepting` are already accounted for here and
    // will not be overwritten (don't worry)
    S_DOMAIN.on(localpartAccepting, S_LOCALPART).on(text.AT, S_LOCALPART_AT);
    S_TLD.on(localpartAccepting, S_LOCALPART).on(text.AT, S_LOCALPART_AT);
    S_DOMAIN_DOT.on(localpartAccepting, S_LOCALPART);

    // Okay we're on a localpart. Now what?
    // TODO: IP addresses and what if the email starts with numbers?
    S_LOCALPART.on(localpartAccepting, S_LOCALPART).on(text.AT, S_LOCALPART_AT) // close to an email address now
    .on(text.DOT, S_LOCALPART_DOT);
    S_LOCALPART_DOT.on(localpartAccepting, S_LOCALPART);
    S_LOCALPART_AT.on(text.TLD, S_EMAIL_DOMAIN).on(text.DOMAIN, S_EMAIL_DOMAIN).on(text.LOCALHOST, S_EMAIL);
    // States following `@` defined above

    var run = function run(tokens) {
    	var len = tokens.length;
    	var cursor = 0;
    	var multis = [];
    	var textTokens = [];

    	while (cursor < len) {
    		var state = S_START;
    		var secondState = null;
    		var nextState = null;
    		var multiLength = 0;
    		var latestAccepting = null;
    		var sinceAccepts = -1;

    		while (cursor < len && !(secondState = state.next(tokens[cursor]))) {
    			// Starting tokens with nowhere to jump to.
    			// Consider these to be just plain text
    			textTokens.push(tokens[cursor++]);
    		}

    		while (cursor < len && (nextState = secondState || state.next(tokens[cursor]))) {

    			// Get the next state
    			secondState = null;
    			state = nextState;

    			// Keep track of the latest accepting state
    			if (state.accepts()) {
    				sinceAccepts = 0;
    				latestAccepting = state;
    			} else if (sinceAccepts >= 0) {
    				sinceAccepts++;
    			}

    			cursor++;
    			multiLength++;
    		}

    		if (sinceAccepts < 0) {

    			// No accepting state was found, part of a regular text token
    			// Add all the tokens we looked at to the text tokens array
    			for (var i = cursor - multiLength; i < cursor; i++) {
    				textTokens.push(tokens[i]);
    			}
    		} else {

    			// Accepting state!

    			// First close off the textTokens (if available)
    			if (textTokens.length > 0) {
    				multis.push(new multi.TEXT(textTokens));
    				textTokens = [];
    			}

    			// Roll back to the latest accepting state
    			cursor -= sinceAccepts;
    			multiLength -= sinceAccepts;

    			// Create a new multitoken
    			var MULTI = latestAccepting.emit();
    			multis.push(new MULTI(tokens.slice(cursor - multiLength, cursor)));
    		}
    	}

    	// Finally close off the textTokens (if available)
    	if (textTokens.length > 0) {
    		multis.push(new multi.TEXT(textTokens));
    	}

    	return multis;
    };

    exports.State = state.TokenState;
    exports.TOKENS = MULTI_TOKENS;
    exports.run = run;
    exports.start = S_START;
    });

    unwrapExports(parser$2);
    parser$2.start;
    parser$2.run;
    parser$2.TOKENS;
    parser$2.State;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var linkify = createCommonjsModule$1(function (module, exports) {

    exports.__esModule = true;
    exports.tokenize = exports.test = exports.scanner = exports.parser = exports.options = exports.inherits = exports.find = undefined;





    var options$1 = _interopRequireWildcard(options);



    var scanner$1 = _interopRequireWildcard(scanner);



    var parser = _interopRequireWildcard(parser$2);

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

    if (!Array.isArray) {
    	Array.isArray = function (arg) {
    		return Object.prototype.toString.call(arg) === '[object Array]';
    	};
    }

    /**
    	Converts a string into tokens that represent linkable and non-linkable bits
    	@method tokenize
    	@param {String} str
    	@return {Array} tokens
    */
    var tokenize = function tokenize(str) {
    	return parser.run(scanner$1.run(str));
    };

    /**
    	Returns a list of linkable items in the given string.
    */
    var find = function find(str) {
    	var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    	var tokens = tokenize(str);
    	var filtered = [];

    	for (var i = 0; i < tokens.length; i++) {
    		var token = tokens[i];
    		if (token.isLink && (!type || token.type === type)) {
    			filtered.push(token.toObject());
    		}
    	}

    	return filtered;
    };

    /**
    	Is the given string valid linkable text of some sort
    	Note that this does not trim the text for you.

    	Optionally pass in a second `type` param, which is the type of link to test
    	for.

    	For example,

    		test(str, 'email');

    	Will return `true` if str is a valid email.
    */
    var test = function test(str) {
    	var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    	var tokens = tokenize(str);
    	return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].type === type);
    };

    // Scanner and parser provide states and tokens for the lexicographic stage
    // (will be used to add additional link types)
    exports.find = find;
    exports.inherits = _class.inherits;
    exports.options = options$1;
    exports.parser = parser;
    exports.scanner = scanner$1;
    exports.test = test;
    exports.tokenize = tokenize;
    });

    unwrapExports(linkify);
    linkify.tokenize;
    linkify.test;
    linkify.scanner;
    linkify.parser;
    linkify.options;
    linkify.inherits;
    linkify.find;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var linkifyjs = linkify;
    var linkifyjs_1 = linkifyjs.find;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var convert_1 = convert;

    function convert(test) {
      if (test == null) {
        return ok
      }

      if (typeof test === 'string') {
        return typeFactory(test)
      }

      if (typeof test === 'object') {
        return 'length' in test ? anyFactory(test) : allFactory(test)
      }

      if (typeof test === 'function') {
        return test
      }

      throw new Error('Expected function, string, or object as test')
    }

    // Utility assert each property in `test` is represented in `node`, and each
    // values are strictly equal.
    function allFactory(test) {
      return all

      function all(node) {
        var key;

        for (key in test) {
          if (node[key] !== test[key]) return false
        }

        return true
      }
    }

    function anyFactory(tests) {
      var checks = [];
      var index = -1;

      while (++index < tests.length) {
        checks[index] = convert(tests[index]);
      }

      return any

      function any() {
        var index = -1;

        while (++index < checks.length) {
          if (checks[index].apply(this, arguments)) {
            return true
          }
        }

        return false
      }
    }

    // Utility to convert a string into a function which checks a given node’s type
    // for said string.
    function typeFactory(test) {
      return type

      function type(node) {
        return Boolean(node && node.type === test)
      }
    }

    // Utility to return true.
    function ok() {
      return true
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var color_1 = color;
    function color(d) {
      return '\u001B[33m' + d + '\u001B[39m'
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var unistUtilVisitParents$1 = visitParents$1;




    var CONTINUE$1 = true;
    var SKIP$1 = 'skip';
    var EXIT$1 = false;

    visitParents$1.CONTINUE = CONTINUE$1;
    visitParents$1.SKIP = SKIP$1;
    visitParents$1.EXIT = EXIT$1;

    function visitParents$1(tree, test, visitor, reverse) {
      var step;
      var is;

      if (typeof test === 'function' && typeof visitor !== 'function') {
        reverse = visitor;
        visitor = test;
        test = null;
      }

      is = convert_1(test);
      step = reverse ? -1 : 1;

      factory(tree, null, [])();

      function factory(node, index, parents) {
        var value = typeof node === 'object' && node !== null ? node : {};
        var name;

        if (typeof value.type === 'string') {
          name =
            typeof value.tagName === 'string'
              ? value.tagName
              : typeof value.name === 'string'
              ? value.name
              : undefined;

          visit.displayName =
            'node (' + color_1(value.type + (name ? '<' + name + '>' : '')) + ')';
        }

        return visit

        function visit() {
          var grandparents = parents.concat(node);
          var result = [];
          var subresult;
          var offset;

          if (!test || is(node, index, parents[parents.length - 1] || null)) {
            result = toResult(visitor(node, parents));

            if (result[0] === EXIT$1) {
              return result
            }
          }

          if (node.children && result[0] !== SKIP$1) {
            offset = (reverse ? node.children.length : -1) + step;

            while (offset > -1 && offset < node.children.length) {
              subresult = factory(node.children[offset], offset, grandparents)();

              if (subresult[0] === EXIT$1) {
                return subresult
              }

              offset =
                typeof subresult[1] === 'number' ? subresult[1] : offset + step;
            }
          }

          return result
        }
      }
    }

    function toResult(value) {
      if (value !== null && typeof value === 'object' && 'length' in value) {
        return value
      }

      if (typeof value === 'number') {
        return [CONTINUE$1, value]
      }

      return [value]
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var escapeStringRegexp = string => {
    	if (typeof string !== 'string') {
    		throw new TypeError('Expected a string');
    	}

    	// Escape characters with special meaning either inside or outside character sets.
    	// Use a simple backslash escape when it’s always valid, and a \unnnn escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.
    	return string
    		.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&')
    		.replace(/-/g, '\\x2d');
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var mdastUtilFindAndReplace = findAndReplace;





    var splice$2 = [].splice;

    function findAndReplace(tree, find, replace, options) {
      var settings;
      var schema;

      if (typeof find === 'string' || (find && typeof find.exec === 'function')) {
        schema = [[find, replace]];
      } else {
        schema = find;
        options = replace;
      }

      settings = options || {};

      search$2(tree, settings, handlerFactory(toPairs$1(schema)));

      return tree

      function handlerFactory(pairs) {
        var pair = pairs[0];

        return handler

        function handler(node, parent) {
          var find = pair[0];
          var replace = pair[1];
          var nodes = [];
          var start = 0;
          var index = parent.children.indexOf(node);
          var position;
          var match;
          var subhandler;
          var value;

          find.lastIndex = 0;

          match = find.exec(node.value);

          while (match) {
            position = match.index;
            value = replace.apply(
              null,
              [].concat(match, {index: match.index, input: match.input})
            );

            if (value !== false) {
              if (start !== position) {
                nodes.push({type: 'text', value: node.value.slice(start, position)});
              }

              if (typeof value === 'string' && value.length > 0) {
                value = {type: 'text', value: value};
              }

              if (value) {
                nodes = [].concat(nodes, value);
              }

              start = position + match[0].length;
            }

            if (!find.global) {
              break
            }

            match = find.exec(node.value);
          }

          if (position === undefined) {
            nodes = [node];
            index--;
          } else {
            if (start < node.value.length) {
              nodes.push({type: 'text', value: node.value.slice(start)});
            }

            nodes.unshift(index, 1);
            splice$2.apply(parent.children, nodes);
          }

          if (pairs.length > 1) {
            subhandler = handlerFactory(pairs.slice(1));
            position = -1;

            while (++position < nodes.length) {
              node = nodes[position];

              if (node.type === 'text') {
                subhandler(node, parent);
              } else {
                search$2(node, settings, subhandler);
              }
            }
          }

          return index + nodes.length + 1
        }
      }
    }

    function search$2(tree, settings, handler) {
      var ignored = convert_1(settings.ignore || []);
      var result = [];

      unistUtilVisitParents$1(tree, 'text', visitor);

      return result

      function visitor(node, parents) {
        var index = -1;
        var parent;
        var grandparent;

        while (++index < parents.length) {
          parent = parents[index];

          if (
            ignored(
              parent,
              grandparent ? grandparent.children.indexOf(parent) : undefined,
              grandparent
            )
          ) {
            return
          }

          grandparent = parent;
        }

        return handler(node, grandparent)
      }
    }

    function toPairs$1(schema) {
      var result = [];
      var key;
      var index;

      if (typeof schema !== 'object') {
        throw new Error('Expected array or object as schema')
      }

      if ('length' in schema) {
        index = -1;

        while (++index < schema.length) {
          result.push([
            toExpression(schema[index][0]),
            toFunction(schema[index][1])
          ]);
        }
      } else {
        for (key in schema) {
          result.push([toExpression(key), toFunction(schema[key])]);
        }
      }

      return result
    }

    function toExpression(find) {
      return typeof find === 'string' ? new RegExp(escapeStringRegexp(find), 'g') : find
    }

    function toFunction(replace) {
      return typeof replace === 'function' ? replace : returner

      function returner() {
        return replace
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var immutable = extend$1;

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    function extend$1() {
        var target = {};

        for (var i = 0; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
                if (hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }

        return target
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var bail_1 = bail;

    function bail(err) {
      if (err) {
        throw err
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/*!
     * Determine if an object is a Buffer
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */

    var isBuffer = function isBuffer (obj) {
      return obj != null && obj.constructor != null &&
        typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var defineProperty = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;

    var isArray = function isArray(arr) {
    	if (typeof Array.isArray === 'function') {
    		return Array.isArray(arr);
    	}

    	return toStr.call(arr) === '[object Array]';
    };

    var isPlainObject = function isPlainObject(obj) {
    	if (!obj || toStr.call(obj) !== '[object Object]') {
    		return false;
    	}

    	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
    	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
    	// Not own constructor property must be Object
    	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
    		return false;
    	}

    	// Own properties are enumerated firstly, so to speed up,
    	// if last one is own, then all properties are own.
    	var key;
    	for (key in obj) { /**/ }

    	return typeof key === 'undefined' || hasOwn.call(obj, key);
    };

    // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
    var setProperty = function setProperty(target, options) {
    	if (defineProperty && options.name === '__proto__') {
    		defineProperty(target, options.name, {
    			enumerable: true,
    			configurable: true,
    			value: options.newValue,
    			writable: true
    		});
    	} else {
    		target[options.name] = options.newValue;
    	}
    };

    // Return undefined instead of __proto__ if '__proto__' is not an own property
    var getProperty = function getProperty(obj, name) {
    	if (name === '__proto__') {
    		if (!hasOwn.call(obj, name)) {
    			return void 0;
    		} else if (gOPD) {
    			// In early versions of node, obj['__proto__'] is buggy when obj has
    			// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
    			return gOPD(obj, name).value;
    		}
    	}

    	return obj[name];
    };

    var extend = function extend() {
    	var options, name, src, copy, copyIsArray, clone;
    	var target = arguments[0];
    	var i = 1;
    	var length = arguments.length;
    	var deep = false;

    	// Handle a deep copy situation
    	if (typeof target === 'boolean') {
    		deep = target;
    		target = arguments[1] || {};
    		// skip the boolean and the target
    		i = 2;
    	}
    	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
    		target = {};
    	}

    	for (; i < length; ++i) {
    		options = arguments[i];
    		// Only deal with non-null/undefined values
    		if (options != null) {
    			// Extend the base object
    			for (name in options) {
    				src = getProperty(target, name);
    				copy = getProperty(options, name);

    				// Prevent never-ending loop
    				if (target !== copy) {
    					// Recurse if we're merging plain objects or arrays
    					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
    						if (copyIsArray) {
    							copyIsArray = false;
    							clone = src && isArray(src) ? src : [];
    						} else {
    							clone = src && isPlainObject(src) ? src : {};
    						}

    						// Never move original objects, clone them
    						setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

    					// Don't bring in undefined values
    					} else if (typeof copy !== 'undefined') {
    						setProperty(target, { name: name, newValue: copy });
    					}
    				}
    			}
    		}
    	}

    	// Return the modified object
    	return target;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var isPlainObj = value => {
    	if (Object.prototype.toString.call(value) !== '[object Object]') {
    		return false;
    	}

    	const prototype = Object.getPrototypeOf(value);
    	return prototype === null || prototype === Object.prototype;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var slice$2 = [].slice;

    var wrap_1 = wrap$1;

    // Wrap `fn`.
    // Can be sync or async; return a promise, receive a completion handler, return
    // new values and errors.
    function wrap$1(fn, callback) {
      var invoked;

      return wrapped

      function wrapped() {
        var params = slice$2.call(arguments, 0);
        var callback = fn.length > params.length;
        var result;

        if (callback) {
          params.push(done);
        }

        try {
          result = fn.apply(null, params);
        } catch (error) {
          // Well, this is quite the pickle.
          // `fn` received a callback and invoked it (thus continuing the pipeline),
          // but later also threw an error.
          // We’re not about to restart the pipeline again, so the only thing left
          // to do is to throw the thing instead.
          if (callback && invoked) {
            throw error
          }

          return done(error)
        }

        if (!callback) {
          if (result && typeof result.then === 'function') {
            result.then(then, done);
          } else if (result instanceof Error) {
            done(result);
          } else {
            then(result);
          }
        }
      }

      // Invoke `next`, only once.
      function done() {
        if (!invoked) {
          invoked = true;

          callback.apply(null, arguments);
        }
      }

      // Invoke `done` with one value.
      // Tracks if an error is passed, too.
      function then(value) {
        done(null, value);
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var trough_1 = trough;

    trough.wrap = wrap_1;

    var slice$1 = [].slice;

    // Create new middleware.
    function trough() {
      var fns = [];
      var middleware = {};

      middleware.run = run;
      middleware.use = use;

      return middleware

      // Run `fns`.  Last argument must be a completion handler.
      function run() {
        var index = -1;
        var input = slice$1.call(arguments, 0, -1);
        var done = arguments[arguments.length - 1];

        if (typeof done !== 'function') {
          throw new Error('Expected function as last argument, not ' + done)
        }

        next.apply(null, [null].concat(input));

        // Run the next `fn`, if any.
        function next(err) {
          var fn = fns[++index];
          var params = slice$1.call(arguments, 0);
          var values = params.slice(1);
          var length = input.length;
          var pos = -1;

          if (err) {
            done(err);
            return
          }

          // Copy non-nully input into values.
          while (++pos < length) {
            if (values[pos] === null || values[pos] === undefined) {
              values[pos] = input[pos];
            }
          }

          input = values;

          // Next or done.
          if (fn) {
            wrap_1(fn, next).apply(null, input);
          } else {
            done.apply(null, [null].concat(input));
          }
        }
      }

      // Add `fn` to the list.
      function use(fn) {
        if (typeof fn !== 'function') {
          throw new Error('Expected `fn` to be a function, not ' + fn)
        }

        fns.push(fn);

        return middleware
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var own$4 = {}.hasOwnProperty;

    var unistUtilStringifyPosition = stringify$1;

    function stringify$1(value) {
      // Nothing.
      if (!value || typeof value !== 'object') {
        return ''
      }

      // Node.
      if (own$4.call(value, 'position') || own$4.call(value, 'type')) {
        return position(value.position)
      }

      // Position.
      if (own$4.call(value, 'start') || own$4.call(value, 'end')) {
        return position(value)
      }

      // Point.
      if (own$4.call(value, 'line') || own$4.call(value, 'column')) {
        return point(value)
      }

      // ?
      return ''
    }

    function point(point) {
      if (!point || typeof point !== 'object') {
        point = {};
      }

      return index$3(point.line) + ':' + index$3(point.column)
    }

    function position(pos) {
      if (!pos || typeof pos !== 'object') {
        pos = {};
      }

      return point(pos.start) + '-' + point(pos.end)
    }

    function index$3(value) {
      return value && typeof value === 'number' ? value : 1
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var vfileMessage = VMessage;

    // Inherit from `Error#`.
    function VMessagePrototype() {}
    VMessagePrototype.prototype = Error.prototype;
    VMessage.prototype = new VMessagePrototype();

    // Message properties.
    var proto = VMessage.prototype;

    proto.file = '';
    proto.name = '';
    proto.reason = '';
    proto.message = '';
    proto.stack = '';
    proto.fatal = null;
    proto.column = null;
    proto.line = null;

    // Construct a new VMessage.
    //
    // Note: We cannot invoke `Error` on the created context, as that adds readonly
    // `line` and `column` attributes on Safari 9, thus throwing and failing the
    // data.
    function VMessage(reason, position, origin) {
      var parts;
      var range;
      var location;

      if (typeof position === 'string') {
        origin = position;
        position = null;
      }

      parts = parseOrigin(origin);
      range = unistUtilStringifyPosition(position) || '1:1';

      location = {
        start: {line: null, column: null},
        end: {line: null, column: null}
      };

      // Node.
      if (position && position.position) {
        position = position.position;
      }

      if (position) {
        // Position.
        if (position.start) {
          location = position;
          position = position.start;
        } else {
          // Point.
          location.start = position;
        }
      }

      if (reason.stack) {
        this.stack = reason.stack;
        reason = reason.message;
      }

      this.message = reason;
      this.name = range;
      this.reason = reason;
      this.line = position ? position.line : null;
      this.column = position ? position.column : null;
      this.location = location;
      this.source = parts[0];
      this.ruleId = parts[1];
    }

    function parseOrigin(origin) {
      var result = [null, null];
      var index;

      if (typeof origin === 'string') {
        index = origin.indexOf(':');

        if (index === -1) {
          result[1] = origin;
        } else {
          result[0] = origin.slice(0, index);
          result[1] = origin.slice(index + 1);
        }
      }

      return result
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    // resolves . and .. elements in a path array with directory names there
    // must be no slashes, empty elements, or device names (c:\) in the array
    // (so also no leading and trailing slashes - it does not distinguish
    // relative and absolute paths)
    function normalizeArray(parts, allowAboveRoot) {
      // if the path tries to go above the root, `up` ends up > 0
      var up = 0;
      for (var i = parts.length - 1; i >= 0; i--) {
        var last = parts[i];
        if (last === '.') {
          parts.splice(i, 1);
        } else if (last === '..') {
          parts.splice(i, 1);
          up++;
        } else if (up) {
          parts.splice(i, 1);
          up--;
        }
      }

      // if the path is allowed to go above the root, restore leading ..s
      if (allowAboveRoot) {
        for (; up--; up) {
          parts.unshift('..');
        }
      }

      return parts;
    }

    // Split a filename into [root, dir, basename, ext], unix version
    // 'root' is just a slash, or nothing.
    var splitPathRe =
        /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    var splitPath = function(filename) {
      return splitPathRe.exec(filename).slice(1);
    };

    // path.resolve([from ...], to)
    // posix version
    function resolve() {
      var resolvedPath = '',
          resolvedAbsolute = false;

      for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
        var path = (i >= 0) ? arguments[i] : '/';

        // Skip empty and invalid entries
        if (typeof path !== 'string') {
          throw new TypeError('Arguments to path.resolve must be strings');
        } else if (!path) {
          continue;
        }

        resolvedPath = path + '/' + resolvedPath;
        resolvedAbsolute = path.charAt(0) === '/';
      }

      // At this point the path should be resolved to a full absolute path, but
      // handle relative paths to be safe (might happen when process.cwd() fails)

      // Normalize the path
      resolvedPath = normalizeArray(filter$2(resolvedPath.split('/'), function(p) {
        return !!p;
      }), !resolvedAbsolute).join('/');

      return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
    }
    // path.normalize(path)
    // posix version
    function normalize(path) {
      var isPathAbsolute = isAbsolute(path),
          trailingSlash = substr(path, -1) === '/';

      // Normalize the path
      path = normalizeArray(filter$2(path.split('/'), function(p) {
        return !!p;
      }), !isPathAbsolute).join('/');

      if (!path && !isPathAbsolute) {
        path = '.';
      }
      if (path && trailingSlash) {
        path += '/';
      }

      return (isPathAbsolute ? '/' : '') + path;
    }
    // posix version
    function isAbsolute(path) {
      return path.charAt(0) === '/';
    }

    // posix version
    function join() {
      var paths = Array.prototype.slice.call(arguments, 0);
      return normalize(filter$2(paths, function(p, index) {
        if (typeof p !== 'string') {
          throw new TypeError('Arguments to path.join must be strings');
        }
        return p;
      }).join('/'));
    }


    // path.relative(from, to)
    // posix version
    function relative(from, to) {
      from = resolve(from).substr(1);
      to = resolve(to).substr(1);

      function trim(arr) {
        var start = 0;
        for (; start < arr.length; start++) {
          if (arr[start] !== '') break;
        }

        var end = arr.length - 1;
        for (; end >= 0; end--) {
          if (arr[end] !== '') break;
        }

        if (start > end) return [];
        return arr.slice(start, end - start + 1);
      }

      var fromParts = trim(from.split('/'));
      var toParts = trim(to.split('/'));

      var length = Math.min(fromParts.length, toParts.length);
      var samePartsLength = length;
      for (var i = 0; i < length; i++) {
        if (fromParts[i] !== toParts[i]) {
          samePartsLength = i;
          break;
        }
      }

      var outputParts = [];
      for (var i = samePartsLength; i < fromParts.length; i++) {
        outputParts.push('..');
      }

      outputParts = outputParts.concat(toParts.slice(samePartsLength));

      return outputParts.join('/');
    }

    var sep = '/';
    var delimiter = ':';

    function dirname(path) {
      var result = splitPath(path),
          root = result[0],
          dir = result[1];

      if (!root && !dir) {
        // No dirname whatsoever
        return '.';
      }

      if (dir) {
        // It has a dirname, strip trailing slash
        dir = dir.substr(0, dir.length - 1);
      }

      return root + dir;
    }

    function basename(path, ext) {
      var f = splitPath(path)[2];
      // TODO: make this comparison case-insensitive on windows?
      if (ext && f.substr(-1 * ext.length) === ext) {
        f = f.substr(0, f.length - ext.length);
      }
      return f;
    }


    function extname(path) {
      return splitPath(path)[3];
    }
    var require$$0$2 = {
      extname: extname,
      basename: basename,
      dirname: dirname,
      sep: sep,
      delimiter: delimiter,
      relative: relative,
      join: join,
      isAbsolute: isAbsolute,
      normalize: normalize,
      resolve: resolve
    };
    function filter$2 (xs, f) {
        if (xs.filter) return xs.filter(f);
        var res = [];
        for (var i = 0; i < xs.length; i++) {
            if (f(xs[i], i, xs)) res.push(xs[i]);
        }
        return res;
    }

    // String.prototype.substr - negative index don't work in IE8
    var substr = 'ab'.substr(-1) === 'b' ?
        function (str, start, len) { return str.substr(start, len) } :
        function (str, start, len) {
            if (start < 0) start = str.length + start;
            return str.substr(start, len);
        }
    ;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var minpath = require$$0$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var global$2 = (typeof global !== "undefined" ? global :
                typeof self !== "undefined" ? self :
                typeof window !== "undefined" ? window : {});

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // shim for using process in browser
    // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    var cachedSetTimeout = defaultSetTimout;
    var cachedClearTimeout = defaultClearTimeout;
    if (typeof global$2.setTimeout === 'function') {
        cachedSetTimeout = setTimeout;
    }
    if (typeof global$2.clearTimeout === 'function') {
        cachedClearTimeout = clearTimeout;
    }

    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    function nextTick(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    }
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    var title = 'browser';
    var platform = 'browser';
    var browser = true;
    var env = {};
    var argv = [];
    var version$1 = ''; // empty string to avoid regexp issues
    var versions = {};
    var release = {};
    var config = {};

    function noop$2() {}

    var on$1 = noop$2;
    var addListener = noop$2;
    var once = noop$2;
    var off = noop$2;
    var removeListener = noop$2;
    var removeAllListeners = noop$2;
    var emit = noop$2;

    function binding(name) {
        throw new Error('process.binding is not supported');
    }

    function cwd () { return '/' }
    function chdir (dir) {
        throw new Error('process.chdir is not supported');
    }function umask() { return 0; }

    // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
    var performance = global$2.performance || {};
    var performanceNow =
      performance.now        ||
      performance.mozNow     ||
      performance.msNow      ||
      performance.oNow       ||
      performance.webkitNow  ||
      function(){ return (new Date()).getTime() };

    // generate timestamp or delta
    // see http://nodejs.org/api/process.html#process_process_hrtime
    function hrtime(previousTimestamp){
      var clocktime = performanceNow.call(performance)*1e-3;
      var seconds = Math.floor(clocktime);
      var nanoseconds = Math.floor((clocktime%1)*1e9);
      if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds<0) {
          seconds--;
          nanoseconds += 1e9;
        }
      }
      return [seconds,nanoseconds]
    }

    var startTime = new Date();
    function uptime() {
      var currentTime = new Date();
      var dif = currentTime - startTime;
      return dif / 1000;
    }

    var process$1 = {
      nextTick: nextTick,
      title: title,
      browser: browser,
      env: env,
      argv: argv,
      version: version$1,
      versions: versions,
      on: on$1,
      addListener: addListener,
      once: once,
      off: off,
      removeListener: removeListener,
      removeAllListeners: removeAllListeners,
      emit: emit,
      binding: binding,
      cwd: cwd,
      chdir: chdir,
      umask: umask,
      hrtime: hrtime,
      platform: platform,
      release: release,
      config: config,
      uptime: uptime
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var minproc = process$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};




    var core = VFile;

    var own$3 = {}.hasOwnProperty;

    // Order of setting (least specific to most), we need this because otherwise
    // `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
    // stem can be set.
    var order$2 = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];

    VFile.prototype.toString = toString$4;

    // Access full path (`~/index.min.js`).
    Object.defineProperty(VFile.prototype, 'path', {get: getPath, set: setPath});

    // Access parent path (`~`).
    Object.defineProperty(VFile.prototype, 'dirname', {
      get: getDirname,
      set: setDirname
    });

    // Access basename (`index.min.js`).
    Object.defineProperty(VFile.prototype, 'basename', {
      get: getBasename,
      set: setBasename
    });

    // Access extname (`.js`).
    Object.defineProperty(VFile.prototype, 'extname', {
      get: getExtname,
      set: setExtname
    });

    // Access stem (`index.min`).
    Object.defineProperty(VFile.prototype, 'stem', {get: getStem, set: setStem});

    // Construct a new file.
    function VFile(options) {
      var prop;
      var index;

      if (!options) {
        options = {};
      } else if (typeof options === 'string' || isBuffer(options)) {
        options = {contents: options};
      } else if ('message' in options && 'messages' in options) {
        return options
      }

      if (!(this instanceof VFile)) {
        return new VFile(options)
      }

      this.data = {};
      this.messages = [];
      this.history = [];
      this.cwd = minproc.cwd();

      // Set path related properties in the correct order.
      index = -1;

      while (++index < order$2.length) {
        prop = order$2[index];

        if (own$3.call(options, prop)) {
          this[prop] = options[prop];
        }
      }

      // Set non-path related properties.
      for (prop in options) {
        if (order$2.indexOf(prop) < 0) {
          this[prop] = options[prop];
        }
      }
    }

    function getPath() {
      return this.history[this.history.length - 1]
    }

    function setPath(path) {
      assertNonEmpty(path, 'path');

      if (this.path !== path) {
        this.history.push(path);
      }
    }

    function getDirname() {
      return typeof this.path === 'string' ? minpath.dirname(this.path) : undefined
    }

    function setDirname(dirname) {
      assertPath(this.path, 'dirname');
      this.path = minpath.join(dirname || '', this.basename);
    }

    function getBasename() {
      return typeof this.path === 'string' ? minpath.basename(this.path) : undefined
    }

    function setBasename(basename) {
      assertNonEmpty(basename, 'basename');
      assertPart(basename, 'basename');
      this.path = minpath.join(this.dirname || '', basename);
    }

    function getExtname() {
      return typeof this.path === 'string' ? minpath.extname(this.path) : undefined
    }

    function setExtname(extname) {
      assertPart(extname, 'extname');
      assertPath(this.path, 'extname');

      if (extname) {
        if (extname.charCodeAt(0) !== 46 /* `.` */) {
          throw new Error('`extname` must start with `.`')
        }

        if (extname.indexOf('.', 1) > -1) {
          throw new Error('`extname` cannot contain multiple dots')
        }
      }

      this.path = minpath.join(this.dirname, this.stem + (extname || ''));
    }

    function getStem() {
      return typeof this.path === 'string'
        ? minpath.basename(this.path, this.extname)
        : undefined
    }

    function setStem(stem) {
      assertNonEmpty(stem, 'stem');
      assertPart(stem, 'stem');
      this.path = minpath.join(this.dirname || '', stem + (this.extname || ''));
    }

    // Get the value of the file.
    function toString$4(encoding) {
      return (this.contents || '').toString(encoding)
    }

    // Assert that `part` is not a path (i.e., does not contain `p.sep`).
    function assertPart(part, name) {
      if (part && part.indexOf(minpath.sep) > -1) {
        throw new Error(
          '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'
        )
      }
    }

    // Assert that `part` is not empty.
    function assertNonEmpty(part, name) {
      if (!part) {
        throw new Error('`' + name + '` cannot be empty')
      }
    }

    // Assert `path` exists.
    function assertPath(path, name) {
      if (!path) {
        throw new Error('Setting `' + name + '` requires `path` to be set too')
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};



    var lib$7 = core;

    core.prototype.message = message;
    core.prototype.info = info;
    core.prototype.fail = fail;

    // Create a message with `reason` at `position`.
    // When an error is passed in as `reason`, copies the stack.
    function message(reason, position, origin) {
      var message = new vfileMessage(reason, position, origin);

      if (this.path) {
        message.name = this.path + ':' + message.name;
        message.file = this.path;
      }

      message.fatal = false;

      this.messages.push(message);

      return message
    }

    // Fail: creates a vmessage, associates it with the file, and throws it.
    function fail() {
      var message = this.message.apply(this, arguments);

      message.fatal = true;

      throw message
    }

    // Info: creates a vmessage, associates it with the file, and marks the fatality
    // as null.
    function info() {
      var message = this.message.apply(this, arguments);

      message.fatal = null;

      return message
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var vfile = lib$7;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};







    // Expose a frozen processor.
    var unified_1 = unified().freeze();

    var slice = [].slice;
    var own$2 = {}.hasOwnProperty;

    // Process pipeline.
    var pipeline = trough_1()
      .use(pipelineParse)
      .use(pipelineRun)
      .use(pipelineStringify);

    function pipelineParse(p, ctx) {
      ctx.tree = p.parse(ctx.file);
    }

    function pipelineRun(p, ctx, next) {
      p.run(ctx.tree, ctx.file, done);

      function done(error, tree, file) {
        if (error) {
          next(error);
        } else {
          ctx.tree = tree;
          ctx.file = file;
          next();
        }
      }
    }

    function pipelineStringify(p, ctx) {
      var result = p.stringify(ctx.tree, ctx.file);

      if (result === undefined || result === null) ; else if (typeof result === 'string' || isBuffer(result)) {
        ctx.file.contents = result;
      } else {
        ctx.file.result = result;
      }
    }

    // Function to create the first processor.
    function unified() {
      var attachers = [];
      var transformers = trough_1();
      var namespace = {};
      var freezeIndex = -1;
      var frozen;

      // Data management.
      processor.data = data;

      // Lock.
      processor.freeze = freeze;

      // Plugins.
      processor.attachers = attachers;
      processor.use = use;

      // API.
      processor.parse = parse;
      processor.stringify = stringify;
      processor.run = run;
      processor.runSync = runSync;
      processor.process = process;
      processor.processSync = processSync;

      // Expose.
      return processor

      // Create a new processor based on the processor in the current scope.
      function processor() {
        var destination = unified();
        var index = -1;

        while (++index < attachers.length) {
          destination.use.apply(null, attachers[index]);
        }

        destination.data(extend(true, {}, namespace));

        return destination
      }

      // Freeze: used to signal a processor that has finished configuration.
      //
      // For example, take unified itself: it’s frozen.
      // Plugins should not be added to it.
      // Rather, it should be extended, by invoking it, before modifying it.
      //
      // In essence, always invoke this when exporting a processor.
      function freeze() {
        var values;
        var transformer;

        if (frozen) {
          return processor
        }

        while (++freezeIndex < attachers.length) {
          values = attachers[freezeIndex];

          if (values[1] === false) {
            continue
          }

          if (values[1] === true) {
            values[1] = undefined;
          }

          transformer = values[0].apply(processor, values.slice(1));

          if (typeof transformer === 'function') {
            transformers.use(transformer);
          }
        }

        frozen = true;
        freezeIndex = Infinity;

        return processor
      }

      // Data management.
      // Getter / setter for processor-specific informtion.
      function data(key, value) {
        if (typeof key === 'string') {
          // Set `key`.
          if (arguments.length === 2) {
            assertUnfrozen('data', frozen);
            namespace[key] = value;
            return processor
          }

          // Get `key`.
          return (own$2.call(namespace, key) && namespace[key]) || null
        }

        // Set space.
        if (key) {
          assertUnfrozen('data', frozen);
          namespace = key;
          return processor
        }

        // Get space.
        return namespace
      }

      // Plugin management.
      //
      // Pass it:
      // *   an attacher and options,
      // *   a preset,
      // *   a list of presets, attachers, and arguments (list of attachers and
      //     options).
      function use(value) {
        var settings;

        assertUnfrozen('use', frozen);

        if (value === null || value === undefined) ; else if (typeof value === 'function') {
          addPlugin.apply(null, arguments);
        } else if (typeof value === 'object') {
          if ('length' in value) {
            addList(value);
          } else {
            addPreset(value);
          }
        } else {
          throw new Error('Expected usable value, not `' + value + '`')
        }

        if (settings) {
          namespace.settings = extend(namespace.settings || {}, settings);
        }

        return processor

        function addPreset(result) {
          addList(result.plugins);

          if (result.settings) {
            settings = extend(settings || {}, result.settings);
          }
        }

        function add(value) {
          if (typeof value === 'function') {
            addPlugin(value);
          } else if (typeof value === 'object') {
            if ('length' in value) {
              addPlugin.apply(null, value);
            } else {
              addPreset(value);
            }
          } else {
            throw new Error('Expected usable value, not `' + value + '`')
          }
        }

        function addList(plugins) {
          var index = -1;

          if (plugins === null || plugins === undefined) ; else if (typeof plugins === 'object' && 'length' in plugins) {
            while (++index < plugins.length) {
              add(plugins[index]);
            }
          } else {
            throw new Error('Expected a list of plugins, not `' + plugins + '`')
          }
        }

        function addPlugin(plugin, value) {
          var entry = find(plugin);

          if (entry) {
            if (isPlainObj(entry[1]) && isPlainObj(value)) {
              value = extend(true, entry[1], value);
            }

            entry[1] = value;
          } else {
            attachers.push(slice.call(arguments));
          }
        }
      }

      function find(plugin) {
        var index = -1;

        while (++index < attachers.length) {
          if (attachers[index][0] === plugin) {
            return attachers[index]
          }
        }
      }

      // Parse a file (in string or vfile representation) into a unist node using
      // the `Parser` on the processor.
      function parse(doc) {
        var file = vfile(doc);
        var Parser;

        freeze();
        Parser = processor.Parser;
        assertParser('parse', Parser);

        if (newable(Parser, 'parse')) {
          return new Parser(String(file), file).parse()
        }

        return Parser(String(file), file) // eslint-disable-line new-cap
      }

      // Run transforms on a unist node representation of a file (in string or
      // vfile representation), async.
      function run(node, file, cb) {
        assertNode(node);
        freeze();

        if (!cb && typeof file === 'function') {
          cb = file;
          file = null;
        }

        if (!cb) {
          return new Promise(executor)
        }

        executor(null, cb);

        function executor(resolve, reject) {
          transformers.run(node, vfile(file), done);

          function done(error, tree, file) {
            tree = tree || node;
            if (error) {
              reject(error);
            } else if (resolve) {
              resolve(tree);
            } else {
              cb(null, tree, file);
            }
          }
        }
      }

      // Run transforms on a unist node representation of a file (in string or
      // vfile representation), sync.
      function runSync(node, file) {
        var result;
        var complete;

        run(node, file, done);

        assertDone('runSync', 'run', complete);

        return result

        function done(error, tree) {
          complete = true;
          result = tree;
          bail_1(error);
        }
      }

      // Stringify a unist node representation of a file (in string or vfile
      // representation) into a string using the `Compiler` on the processor.
      function stringify(node, doc) {
        var file = vfile(doc);
        var Compiler;

        freeze();
        Compiler = processor.Compiler;
        assertCompiler('stringify', Compiler);
        assertNode(node);

        if (newable(Compiler, 'compile')) {
          return new Compiler(node, file).compile()
        }

        return Compiler(node, file) // eslint-disable-line new-cap
      }

      // Parse a file (in string or vfile representation) into a unist node using
      // the `Parser` on the processor, then run transforms on that node, and
      // compile the resulting node using the `Compiler` on the processor, and
      // store that result on the vfile.
      function process(doc, cb) {
        freeze();
        assertParser('process', processor.Parser);
        assertCompiler('process', processor.Compiler);

        if (!cb) {
          return new Promise(executor)
        }

        executor(null, cb);

        function executor(resolve, reject) {
          var file = vfile(doc);

          pipeline.run(processor, {file: file}, done);

          function done(error) {
            if (error) {
              reject(error);
            } else if (resolve) {
              resolve(file);
            } else {
              cb(null, file);
            }
          }
        }
      }

      // Process the given document (in string or vfile representation), sync.
      function processSync(doc) {
        var file;
        var complete;

        freeze();
        assertParser('processSync', processor.Parser);
        assertCompiler('processSync', processor.Compiler);
        file = vfile(doc);

        process(file, done);

        assertDone('processSync', 'process', complete);

        return file

        function done(error) {
          complete = true;
          bail_1(error);
        }
      }
    }

    // Check if `value` is a constructor.
    function newable(value, name) {
      return (
        typeof value === 'function' &&
        value.prototype &&
        // A function with keys in its prototype is probably a constructor.
        // Classes’ prototype methods are not enumerable, so we check if some value
        // exists in the prototype.
        (keys$1(value.prototype) || name in value.prototype)
      )
    }

    // Check if `value` is an object with keys.
    function keys$1(value) {
      var key;
      for (key in value) {
        return true
      }

      return false
    }

    // Assert a parser is available.
    function assertParser(name, Parser) {
      if (typeof Parser !== 'function') {
        throw new Error('Cannot `' + name + '` without `Parser`')
      }
    }

    // Assert a compiler is available.
    function assertCompiler(name, Compiler) {
      if (typeof Compiler !== 'function') {
        throw new Error('Cannot `' + name + '` without `Compiler`')
      }
    }

    // Assert the processor is not frozen.
    function assertUnfrozen(name, frozen) {
      if (frozen) {
        throw new Error(
          'Cannot invoke `' +
            name +
            '` on a frozen processor.\nCreate a new processor first, by invoking it: use `processor()` instead of `processor`.'
        )
      }
    }

    // Assert `node` is a unist node.
    function assertNode(node) {
      if (!node || typeof node.type !== 'string') {
        throw new Error('Expected node, got `' + node + '`')
      }
    }

    // Assert that `complete` is `true`.
    function assertDone(name, asyncName, complete) {
      if (!complete) {
        throw new Error(
          '`' + name + '` finished async. Use `' + asyncName + '` instead'
        )
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var mdastUtilToString = toString$3;

    // Get the text content of a node.
    // Prefer the node’s plain-text fields, otherwise serialize its children,
    // and if the given value is an array, serialize the nodes in it.
    function toString$3(node) {
      return (
        (node &&
          (node.value ||
            node.alt ||
            node.title ||
            ('children' in node && all(node.children)) ||
            ('length' in node && all(node)))) ||
        ''
      )
    }

    function all(values) {
      var result = [];
      var index = -1;

      while (++index < values.length) {
        result[index] = toString$3(values[index]);
      }

      return result.join('')
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var assign = Object.assign;

    var assign_1 = assign;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var own$1 = {}.hasOwnProperty;

    var hasOwnProperty_1 = own$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function normalizeIdentifier(value) {
      return (
        value // Collapse Markdown whitespace.
          .replace(/[\t\n\r ]+/g, ' ') // Trim.
          .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase
          // counterpart is uppercased will result in a different uppercase
          // character.
          // Hence, to get that form, we perform both lower- and uppercase.
          // Upper case makes sure keys will not interact with default prototypal
          // methods: no object method is uppercase.
          .toLowerCase()
          .toUpperCase()
      )
    }

    var normalizeIdentifier_1 = normalizeIdentifier;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var fromCharCode = String.fromCharCode;

    var fromCharCode_1 = fromCharCode;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    function safeFromInt(value, base) {
      var code = parseInt(value, base);

      if (
        // C0 except for HT, LF, FF, CR, space
        code < 9 ||
        code === 11 ||
        (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.
        (code > 126 && code < 160) || // Lone high surrogates and low surrogates.
        (code > 55295 && code < 57344) || // Noncharacters.
        (code > 64975 && code < 65008) ||
        (code & 65535) === 65535 ||
        (code & 65535) === 65534 || // Out of range
        code > 1114111
      ) {
        return '\uFFFD'
      }

      return fromCharCode_1(code)
    }

    var safeFromInt_1 = safeFromInt;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function markdownLineEnding(code) {
      return code < -2
    }

    var markdownLineEnding_1 = markdownLineEnding;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function markdownSpace(code) {
      return code === -2 || code === -1 || code === 32
    }

    var markdownSpace_1 = markdownSpace;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    function spaceFactory(effects, ok, type, max) {
      var limit = max ? max - 1 : Infinity;
      var size = 0;
      return start

      function start(code) {
        if (markdownSpace_1(code)) {
          effects.enter(type);
          return prefix(code)
        }

        return ok(code)
      }

      function prefix(code) {
        if (markdownSpace_1(code) && size++ < limit) {
          effects.consume(code);
          return prefix
        }

        effects.exit(type);
        return ok(code)
      }
    }

    var factorySpace = spaceFactory;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var content$1 = createCommonjsModule$1(function (module, exports) {

    Object.defineProperty(exports, '__esModule', {value: true});




    var tokenize = initializeContent;

    function initializeContent(effects) {
      var contentStart = effects.attempt(
        this.parser.constructs.contentInitial,
        afterContentStartConstruct,
        paragraphInitial
      );
      var previous;
      return contentStart

      function afterContentStartConstruct(code) {
        if (code === null) {
          effects.consume(code);
          return
        }

        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return factorySpace(effects, contentStart, 'linePrefix')
      }

      function paragraphInitial(code) {
        effects.enter('paragraph');
        return lineStart(code)
      }

      function lineStart(code) {
        var token = effects.enter('chunkText', {
          contentType: 'text',
          previous: previous
        });

        if (previous) {
          previous.next = token;
        }

        previous = token;
        return data(code)
      }

      function data(code) {
        if (code === null) {
          effects.exit('chunkText');
          effects.exit('paragraph');
          effects.consume(code);
          return
        }

        if (markdownLineEnding_1(code)) {
          effects.consume(code);
          effects.exit('chunkText');
          return lineStart
        } // Data.

        effects.consume(code);
        return data
      }
    }

    exports.tokenize = tokenize;
    });

    unwrapExports(content$1);
    content$1.tokenize;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};



    var partialBlankLine = {
      tokenize: tokenizePartialBlankLine,
      partial: true
    };

    function tokenizePartialBlankLine(effects, ok, nok) {
      return factorySpace(effects, afterWhitespace, 'linePrefix')

      function afterWhitespace(code) {
        return code === null || markdownLineEnding_1(code) ? ok(code) : nok(code)
      }
    }

    var partialBlankLine_1 = partialBlankLine;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var document$1 = createCommonjsModule$1(function (module, exports) {

    Object.defineProperty(exports, '__esModule', {value: true});





    var tokenize = initializeDocument;
    var containerConstruct = {
      tokenize: tokenizeContainer
    };
    var lazyFlowConstruct = {
      tokenize: tokenizeLazyFlow
    };

    function initializeDocument(effects) {
      var self = this;
      var stack = [];
      var continued = 0;
      var inspectConstruct = {
        tokenize: tokenizeInspect,
        partial: true
      };
      var inspectResult;
      var childFlow;
      var childToken;
      return start

      function start(code) {
        if (continued < stack.length) {
          self.containerState = stack[continued][1];
          return effects.attempt(
            stack[continued][0].continuation,
            documentContinue,
            documentContinued
          )(code)
        }

        return documentContinued(code)
      }

      function documentContinue(code) {
        continued++;
        return start(code)
      }

      function documentContinued(code) {
        // If we’re in a concrete construct (such as when expecting another line of
        // HTML, or we resulted in lazy content), we can immediately start flow.
        if (inspectResult && inspectResult.flowContinue) {
          return flowStart(code)
        }

        self.interrupt =
          childFlow &&
          childFlow.currentConstruct &&
          childFlow.currentConstruct.interruptible;
        self.containerState = {};
        return effects.attempt(
          containerConstruct,
          containerContinue,
          flowStart
        )(code)
      }

      function containerContinue(code) {
        stack.push([self.currentConstruct, self.containerState]);
        self.containerState = undefined;
        return documentContinued(code)
      }

      function flowStart(code) {
        if (code === null) {
          exitContainers(0, true);
          effects.consume(code);
          return
        }

        childFlow = childFlow || self.parser.flow(self.now());
        effects.enter('chunkFlow', {
          contentType: 'flow',
          previous: childToken,
          _tokenizer: childFlow
        });
        return flowContinue(code)
      }

      function flowContinue(code) {
        if (code === null) {
          continueFlow(effects.exit('chunkFlow'));
          return flowStart(code)
        }

        if (markdownLineEnding_1(code)) {
          effects.consume(code);
          continueFlow(effects.exit('chunkFlow'));
          return effects.check(inspectConstruct, documentAfterPeek)
        }

        effects.consume(code);
        return flowContinue
      }

      function documentAfterPeek(code) {
        exitContainers(
          inspectResult.continued,
          inspectResult && inspectResult.flowEnd
        );
        continued = 0;
        return start(code)
      }

      function continueFlow(token) {
        if (childToken) childToken.next = token;
        childToken = token;
        childFlow.lazy = inspectResult && inspectResult.lazy;
        childFlow.defineSkip(token.start);
        childFlow.write(self.sliceStream(token));
      }

      function exitContainers(size, end) {
        var index = stack.length; // Close the flow.

        if (childFlow && end) {
          childFlow.write([null]);
          childToken = childFlow = undefined;
        } // Exit open containers.

        while (index-- > size) {
          self.containerState = stack[index][1];
          stack[index][0].exit.call(self, effects);
        }

        stack.length = size;
      }

      function tokenizeInspect(effects, ok) {
        var subcontinued = 0;
        inspectResult = {};
        return inspectStart

        function inspectStart(code) {
          if (subcontinued < stack.length) {
            self.containerState = stack[subcontinued][1];
            return effects.attempt(
              stack[subcontinued][0].continuation,
              inspectContinue,
              inspectLess
            )(code)
          } // If we’re continued but in a concrete flow, we can’t have more
          // containers.

          if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
            inspectResult.flowContinue = true;
            return inspectDone(code)
          }

          self.interrupt =
            childFlow.currentConstruct && childFlow.currentConstruct.interruptible;
          self.containerState = {};
          return effects.attempt(
            containerConstruct,
            inspectFlowEnd,
            inspectDone
          )(code)
        }

        function inspectContinue(code) {
          subcontinued++;
          return self.containerState._closeFlow
            ? inspectFlowEnd(code)
            : inspectStart(code)
        }

        function inspectLess(code) {
          if (childFlow.currentConstruct && childFlow.currentConstruct.lazy) {
            // Maybe another container?
            self.containerState = {};
            return effects.attempt(
              containerConstruct,
              inspectFlowEnd, // Maybe flow, or a blank line?
              effects.attempt(
                lazyFlowConstruct,
                inspectFlowEnd,
                effects.check(partialBlankLine_1, inspectFlowEnd, inspectLazy)
              )
            )(code)
          } // Otherwise we’re interrupting.

          return inspectFlowEnd(code)
        }

        function inspectLazy(code) {
          // Act as if all containers are continued.
          subcontinued = stack.length;
          inspectResult.lazy = true;
          inspectResult.flowContinue = true;
          return inspectDone(code)
        } // We’re done with flow if we have more containers, or an interruption.

        function inspectFlowEnd(code) {
          inspectResult.flowEnd = true;
          return inspectDone(code)
        }

        function inspectDone(code) {
          inspectResult.continued = subcontinued;
          self.interrupt = self.containerState = undefined;
          return ok(code)
        }
      }
    }

    function tokenizeContainer(effects, ok, nok) {
      return factorySpace(
        effects,
        effects.attempt(this.parser.constructs.document, ok, nok),
        'linePrefix',
        this.parser.constructs.disable.null.indexOf('codeIndented') > -1
          ? undefined
          : 4
      )
    }

    function tokenizeLazyFlow(effects, ok, nok) {
      return factorySpace(
        effects,
        effects.lazy(this.parser.constructs.flow, ok, nok),
        'linePrefix',
        this.parser.constructs.disable.null.indexOf('codeIndented') > -1
          ? undefined
          : 4
      )
    }

    exports.tokenize = tokenize;
    });

    unwrapExports(document$1);
    document$1.tokenize;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // Counts tabs based on their expanded size, and CR+LF as one character.

    function sizeChunks(chunks) {
      var index = -1;
      var size = 0;

      while (++index < chunks.length) {
        size += typeof chunks[index] === 'string' ? chunks[index].length : 1;
      }

      return size
    }

    var sizeChunks_1 = sizeChunks;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    function prefixSize(events, type) {
      var tail = events[events.length - 1];
      if (!tail || tail[1].type !== type) return 0
      return sizeChunks_1(tail[2].sliceStream(tail[1]))
    }

    var prefixSize_1 = prefixSize;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var splice$1 = [].splice;

    var splice_1 = splice$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    // causes a stack overflow in V8 when trying to insert 100k items for instance.

    function chunkedSplice(list, start, remove, items) {
      var end = list.length;
      var chunkStart = 0;
      var parameters; // Make start between zero and `end` (included).

      if (start < 0) {
        start = -start > end ? 0 : end + start;
      } else {
        start = start > end ? end : start;
      }

      remove = remove > 0 ? remove : 0; // No need to chunk the items if there’s only a couple (10k) items.

      if (items.length < 10000) {
        parameters = Array.from(items);
        parameters.unshift(start, remove);
        splice_1.apply(list, parameters);
      } else {
        // Delete `remove` items starting from `start`
        if (remove) splice_1.apply(list, [start, remove]); // Insert the items in chunks to not cause stack overflows.

        while (chunkStart < items.length) {
          parameters = items.slice(chunkStart, chunkStart + 10000);
          parameters.unshift(start, 0);
          splice_1.apply(list, parameters);
          chunkStart += 10000;
          start += 10000;
        }
      }
    }

    var chunkedSplice_1 = chunkedSplice;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    function shallow(object) {
      return assign_1({}, object)
    }

    var shallow_1 = shallow;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};




    function subtokenize(events) {
      var jumps = {};
      var index = -1;
      var event;
      var lineIndex;
      var otherIndex;
      var otherEvent;
      var parameters;
      var subevents;
      var more;

      while (++index < events.length) {
        while (index in jumps) {
          index = jumps[index];
        }

        event = events[index]; // Add a hook for the GFM tasklist extension, which needs to know if text
        // is in the first content of a list item.

        if (
          index &&
          event[1].type === 'chunkFlow' &&
          events[index - 1][1].type === 'listItemPrefix'
        ) {
          subevents = event[1]._tokenizer.events;
          otherIndex = 0;

          if (
            otherIndex < subevents.length &&
            subevents[otherIndex][1].type === 'lineEndingBlank'
          ) {
            otherIndex += 2;
          }

          if (
            otherIndex < subevents.length &&
            subevents[otherIndex][1].type === 'content'
          ) {
            while (++otherIndex < subevents.length) {
              if (subevents[otherIndex][1].type === 'content') {
                break
              }

              if (subevents[otherIndex][1].type === 'chunkText') {
                subevents[otherIndex][1].isInFirstContentOfListItem = true;
                otherIndex++;
              }
            }
          }
        } // Enter.

        if (event[0] === 'enter') {
          if (event[1].contentType) {
            assign_1(jumps, subcontent(events, index));
            index = jumps[index];
            more = true;
          }
        } // Exit.
        else if (event[1]._container || event[1]._movePreviousLineEndings) {
          otherIndex = index;
          lineIndex = undefined;

          while (otherIndex--) {
            otherEvent = events[otherIndex];

            if (
              otherEvent[1].type === 'lineEnding' ||
              otherEvent[1].type === 'lineEndingBlank'
            ) {
              if (otherEvent[0] === 'enter') {
                if (lineIndex) {
                  events[lineIndex][1].type = 'lineEndingBlank';
                }

                otherEvent[1].type = 'lineEnding';
                lineIndex = otherIndex;
              }
            } else {
              break
            }
          }

          if (lineIndex) {
            // Fix position.
            event[1].end = shallow_1(events[lineIndex][1].start); // Switch container exit w/ line endings.

            parameters = events.slice(lineIndex, index);
            parameters.unshift(event);
            chunkedSplice_1(events, lineIndex, index - lineIndex + 1, parameters);
          }
        }
      }

      return !more
    }

    function subcontent(events, eventIndex) {
      var token = events[eventIndex][1];
      var context = events[eventIndex][2];
      var startPosition = eventIndex - 1;
      var startPositions = [];
      var tokenizer =
        token._tokenizer || context.parser[token.contentType](token.start);
      var childEvents = tokenizer.events;
      var jumps = [];
      var gaps = {};
      var stream;
      var previous;
      var index;
      var entered;
      var end;
      var adjust; // Loop forward through the linked tokens to pass them in order to the
      // subtokenizer.

      while (token) {
        // Find the position of the event for this token.
        while (events[++startPosition][1] !== token) {
          // Empty.
        }

        startPositions.push(startPosition);

        if (!token._tokenizer) {
          stream = context.sliceStream(token);

          if (!token.next) {
            stream.push(null);
          }

          if (previous) {
            tokenizer.defineSkip(token.start);
          }

          if (token.isInFirstContentOfListItem) {
            tokenizer._gfmTasklistFirstContentOfListItem = true;
          }

          tokenizer.write(stream);

          if (token.isInFirstContentOfListItem) {
            tokenizer._gfmTasklistFirstContentOfListItem = undefined;
          }
        } // Unravel the next token.

        previous = token;
        token = token.next;
      } // Now, loop back through all events (and linked tokens), to figure out which
      // parts belong where.

      token = previous;
      index = childEvents.length;

      while (index--) {
        // Make sure we’ve at least seen something (final eol is part of the last
        // token).
        if (childEvents[index][0] === 'enter') {
          entered = true;
        } else if (
          // Find a void token that includes a break.
          entered &&
          childEvents[index][1].type === childEvents[index - 1][1].type &&
          childEvents[index][1].start.line !== childEvents[index][1].end.line
        ) {
          add(childEvents.slice(index + 1, end));
          // Help GC.
          token._tokenizer = token.next = undefined;
          token = token.previous;
          end = index + 1;
        }
      }

      // Help GC.
      tokenizer.events = token._tokenizer = token.next = undefined; // Do head:

      add(childEvents.slice(0, end));
      index = -1;
      adjust = 0;

      while (++index < jumps.length) {
        gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
        adjust += jumps[index][1] - jumps[index][0] - 1;
      }

      return gaps

      function add(slice) {
        var start = startPositions.pop();
        jumps.unshift([start, start + slice.length - 1]);
        chunkedSplice_1(events, start, 2, slice);
      }
    }

    var subtokenize_1 = subtokenize;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};





    // No name because it must not be turned off.
    var content = {
      tokenize: tokenizeContent,
      resolve: resolveContent,
      interruptible: true,
      lazy: true
    };
    var continuationConstruct = {
      tokenize: tokenizeContinuation,
      partial: true
    }; // Content is transparent: it’s parsed right now. That way, definitions are also
    // parsed right now: before text in paragraphs (specifically, media) are parsed.

    function resolveContent(events) {
      subtokenize_1(events);
      return events
    }

    function tokenizeContent(effects, ok) {
      var previous;
      return start

      function start(code) {
        effects.enter('content');
        previous = effects.enter('chunkContent', {
          contentType: 'content'
        });
        return data(code)
      }

      function data(code) {
        if (code === null) {
          return contentEnd(code)
        }

        if (markdownLineEnding_1(code)) {
          return effects.check(
            continuationConstruct,
            contentContinue,
            contentEnd
          )(code)
        } // Data.

        effects.consume(code);
        return data
      }

      function contentEnd(code) {
        effects.exit('chunkContent');
        effects.exit('content');
        return ok(code)
      }

      function contentContinue(code) {
        effects.consume(code);
        effects.exit('chunkContent');
        previous = previous.next = effects.enter('chunkContent', {
          contentType: 'content',
          previous: previous
        });
        return data
      }
    }

    function tokenizeContinuation(effects, ok, nok) {
      var self = this;
      return startLookahead

      function startLookahead(code) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return factorySpace(effects, prefixed, 'linePrefix')
      }

      function prefixed(code) {
        if (code === null || markdownLineEnding_1(code)) {
          return nok(code)
        }

        if (
          self.parser.constructs.disable.null.indexOf('codeIndented') > -1 ||
          prefixSize_1(self.events, 'linePrefix') < 4
        ) {
          return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)
        }

        return ok(code)
      }
    }

    var content_1 = content;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var flow = createCommonjsModule$1(function (module, exports) {

    Object.defineProperty(exports, '__esModule', {value: true});





    var tokenize = initializeFlow;

    function initializeFlow(effects) {
      var self = this;
      var initial = effects.attempt(
        // Try to parse a blank line.
        partialBlankLine_1,
        atBlankEnding, // Try to parse initial flow (essentially, only code).
        effects.attempt(
          this.parser.constructs.flowInitial,
          afterConstruct,
          factorySpace(
            effects,
            effects.attempt(
              this.parser.constructs.flow,
              afterConstruct,
              effects.attempt(content_1, afterConstruct)
            ),
            'linePrefix'
          )
        )
      );
      return initial

      function atBlankEnding(code) {
        if (code === null) {
          effects.consume(code);
          return
        }

        effects.enter('lineEndingBlank');
        effects.consume(code);
        effects.exit('lineEndingBlank');
        self.currentConstruct = undefined;
        return initial
      }

      function afterConstruct(code) {
        if (code === null) {
          effects.consume(code);
          return
        }

        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        self.currentConstruct = undefined;
        return initial
      }
    }

    exports.tokenize = tokenize;
    });

    unwrapExports(flow);
    flow.tokenize;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var text_1 = createCommonjsModule$1(function (module, exports) {

    Object.defineProperty(exports, '__esModule', {value: true});




    var text = initializeFactory('text');
    var string = initializeFactory('string');
    var resolver = {
      resolveAll: createResolver()
    };

    function initializeFactory(field) {
      return {
        tokenize: initializeText,
        resolveAll: createResolver(
          field === 'text' ? resolveAllLineSuffixes : undefined
        )
      }

      function initializeText(effects) {
        var self = this;
        var constructs = this.parser.constructs[field];
        var text = effects.attempt(constructs, start, notText);
        return start

        function start(code) {
          return atBreak(code) ? text(code) : notText(code)
        }

        function notText(code) {
          if (code === null) {
            effects.consume(code);
            return
          }

          effects.enter('data');
          effects.consume(code);
          return data
        }

        function data(code) {
          if (atBreak(code)) {
            effects.exit('data');
            return text(code)
          } // Data.

          effects.consume(code);
          return data
        }

        function atBreak(code) {
          var list = constructs[code];
          var index = -1;

          if (code === null) {
            return true
          }

          if (list) {
            while (++index < list.length) {
              if (
                !list[index].previous ||
                list[index].previous.call(self, self.previous)
              ) {
                return true
              }
            }
          }
        }
      }
    }

    function createResolver(extraResolver) {
      return resolveAllText

      function resolveAllText(events, context) {
        var index = -1;
        var enter; // A rather boring computation (to merge adjacent `data` events) which
        // improves mm performance by 29%.

        while (++index <= events.length) {
          if (enter === undefined) {
            if (events[index] && events[index][1].type === 'data') {
              enter = index;
              index++;
            }
          } else if (!events[index] || events[index][1].type !== 'data') {
            // Don’t do anything if there is one data token.
            if (index !== enter + 2) {
              events[enter][1].end = events[index - 1][1].end;
              events.splice(enter + 2, index - enter - 2);
              index = enter + 2;
            }

            enter = undefined;
          }
        }

        return extraResolver ? extraResolver(events, context) : events
      }
    } // A rather ugly set of instructions which again looks at chunks in the input
    // stream.
    // The reason to do this here is that it is *much* faster to parse in reverse.
    // And that we can’t hook into `null` to split the line suffix before an EOF.
    // To do: figure out if we can make this into a clean utility, or even in core.
    // As it will be useful for GFMs literal autolink extension (and maybe even
    // tables?)

    function resolveAllLineSuffixes(events, context) {
      var eventIndex = -1;
      var chunks;
      var data;
      var chunk;
      var index;
      var bufferIndex;
      var size;
      var tabs;
      var token;

      while (++eventIndex <= events.length) {
        if (
          (eventIndex === events.length ||
            events[eventIndex][1].type === 'lineEnding') &&
          events[eventIndex - 1][1].type === 'data'
        ) {
          data = events[eventIndex - 1][1];
          chunks = context.sliceStream(data);
          index = chunks.length;
          bufferIndex = -1;
          size = 0;
          tabs = undefined;

          while (index--) {
            chunk = chunks[index];

            if (typeof chunk === 'string') {
              bufferIndex = chunk.length;

              while (chunk.charCodeAt(bufferIndex - 1) === 32) {
                size++;
                bufferIndex--;
              }

              if (bufferIndex) break
              bufferIndex = -1;
            } // Number
            else if (chunk === -2) {
              tabs = true;
              size++;
            } else if (chunk === -1);
            else {
              // Replacement character, exit.
              index++;
              break
            }
          }

          if (size) {
            token = {
              type:
                eventIndex === events.length || tabs || size < 2
                  ? 'lineSuffix'
                  : 'hardBreakTrailing',
              start: {
                line: data.end.line,
                column: data.end.column - size,
                offset: data.end.offset - size,
                _index: data.start._index + index,
                _bufferIndex: index
                  ? bufferIndex
                  : data.start._bufferIndex + bufferIndex
              },
              end: shallow_1(data.end)
            };
            data.end = shallow_1(token.start);

            if (data.start.offset === data.end.offset) {
              assign_1(data, token);
            } else {
              events.splice(
                eventIndex,
                0,
                ['enter', token, context],
                ['exit', token, context]
              );
              eventIndex += 2;
            }
          }

          eventIndex++;
        }
      }

      return events
    }

    exports.resolver = resolver;
    exports.string = string;
    exports.text = text;
    });

    unwrapExports(text_1);
    text_1.resolver;
    text_1.string;
    text_1.text;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function miniflat(value) {
      return value === null || value === undefined
        ? []
        : 'length' in value
        ? value
        : [value]
    }

    var miniflat_1 = miniflat;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};




    function combineExtensions(extensions) {
      var all = {};
      var index = -1;

      while (++index < extensions.length) {
        extension$1(all, extensions[index]);
      }

      return all
    }

    function extension$1(all, extension) {
      var hook;
      var left;
      var right;
      var code;

      for (hook in extension) {
        left = hasOwnProperty_1.call(all, hook) ? all[hook] : (all[hook] = {});
        right = extension[hook];

        for (code in right) {
          left[code] = constructs$1(
            miniflat_1(right[code]),
            hasOwnProperty_1.call(left, code) ? left[code] : []
          );
        }
      }
    }

    function constructs$1(list, existing) {
      var index = -1;
      var before = [];

      while (++index < list.length) {
    (list[index].add === 'after' ? existing : before).push(list[index]);
      }

      chunkedSplice_1(existing, 0, 0, before);
      return existing
    }

    var combineExtensions_1 = combineExtensions;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    function chunkedPush(list, items) {
      if (list.length) {
        chunkedSplice_1(list, list.length, 0, items);
        return list
      }

      return items
    }

    var chunkedPush_1 = chunkedPush;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function resolveAll(constructs, events, context) {
      var called = [];
      var index = -1;
      var resolve;

      while (++index < constructs.length) {
        resolve = constructs[index].resolveAll;

        if (resolve && called.indexOf(resolve) < 0) {
          events = resolve(events, context);
          called.push(resolve);
        }
      }

      return events
    }

    var resolveAll_1 = resolveAll;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    function serializeChunks(chunks) {
      var index = -1;
      var result = [];
      var chunk;
      var value;
      var atTab;

      while (++index < chunks.length) {
        chunk = chunks[index];

        if (typeof chunk === 'string') {
          value = chunk;
        } else if (chunk === -5) {
          value = '\r';
        } else if (chunk === -4) {
          value = '\n';
        } else if (chunk === -3) {
          value = '\r' + '\n';
        } else if (chunk === -2) {
          value = '\t';
        } else if (chunk === -1) {
          if (atTab) continue
          value = ' ';
        } else {
          // Currently only replacement character.
          value = fromCharCode_1(chunk);
        }

        atTab = chunk === -2;
        result.push(value);
      }

      return result.join('')
    }

    var serializeChunks_1 = serializeChunks;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function sliceChunks(chunks, token) {
      var startIndex = token.start._index;
      var startBufferIndex = token.start._bufferIndex;
      var endIndex = token.end._index;
      var endBufferIndex = token.end._bufferIndex;
      var view;

      if (startIndex === endIndex) {
        view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
      } else {
        view = chunks.slice(startIndex, endIndex);

        if (startBufferIndex > -1) {
          view[0] = view[0].slice(startBufferIndex);
        }

        if (endBufferIndex > 0) {
          view.push(chunks[endIndex].slice(0, endBufferIndex));
        }
      }

      return view
    }

    var sliceChunks_1 = sliceChunks;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};










    // Create a tokenizer.
    // Tokenizers deal with one type of data (e.g., containers, flow, text).
    // The parser is the object dealing with it all.
    // `initialize` works like other constructs, except that only its `tokenize`
    // function is used, in which case it doesn’t receive an `ok` or `nok`.
    // `from` can be given to set the point before the first character, although
    // when further lines are indented, they must be set with `defineSkip`.
    function createTokenizer(parser, initialize, from) {
      var point = from
        ? shallow_1(from)
        : {
            line: 1,
            column: 1,
            offset: 0
          };
      var columnStart = {};
      var resolveAllConstructs = [];
      var chunks = [];
      var stack = [];

      var effects = {
        consume: consume,
        enter: enter,
        exit: exit,
        attempt: constructFactory(onsuccessfulconstruct),
        check: constructFactory(onsuccessfulcheck),
        interrupt: constructFactory(onsuccessfulcheck, {
          interrupt: true
        }),
        lazy: constructFactory(onsuccessfulcheck, {
          lazy: true
        })
      }; // State and tools for resolving and serializing.

      var context = {
        previous: null,
        events: [],
        parser: parser,
        sliceStream: sliceStream,
        sliceSerialize: sliceSerialize,
        now: now,
        defineSkip: skip,
        write: write
      }; // The state function.

      var state = initialize.tokenize.call(context, effects); // Track which character we expect to be consumed, to catch bugs.

      if (initialize.resolveAll) {
        resolveAllConstructs.push(initialize);
      } // Store where we are in the input stream.

      point._index = 0;
      point._bufferIndex = -1;
      return context

      function write(slice) {
        chunks = chunkedPush_1(chunks, slice);
        main(); // Exit if we’re not done, resolve might change stuff.

        if (chunks[chunks.length - 1] !== null) {
          return []
        }

        addResult(initialize, 0); // Otherwise, resolve, and exit.

        context.events = resolveAll_1(resolveAllConstructs, context.events, context);
        return context.events
      } //
      // Tools.
      //

      function sliceSerialize(token) {
        return serializeChunks_1(sliceStream(token))
      }

      function sliceStream(token) {
        return sliceChunks_1(chunks, token)
      }

      function now() {
        return shallow_1(point)
      }

      function skip(value) {
        columnStart[value.line] = value.column;
        accountForPotentialSkip();
      } //
      // State management.
      //
      // Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
      // `consume`).
      // Here is where we walk through the chunks, which either include strings of
      // several characters, or numerical character codes.
      // The reason to do this in a loop instead of a call is so the stack can
      // drain.

      function main() {
        var chunkIndex;
        var chunk;

        while (point._index < chunks.length) {
          chunk = chunks[point._index]; // If we’re in a buffer chunk, loop through it.

          if (typeof chunk === 'string') {
            chunkIndex = point._index;

            if (point._bufferIndex < 0) {
              point._bufferIndex = 0;
            }

            while (
              point._index === chunkIndex &&
              point._bufferIndex < chunk.length
            ) {
              go(chunk.charCodeAt(point._bufferIndex));
            }
          } else {
            go(chunk);
          }
        }
      } // Deal with one code.

      function go(code) {
        state = state(code);
      } // Move a character forward.

      function consume(code) {
        if (markdownLineEnding_1(code)) {
          point.line++;
          point.column = 1;
          point.offset += code === -3 ? 2 : 1;
          accountForPotentialSkip();
        } else if (code !== -1) {
          point.column++;
          point.offset++;
        } // Not in a string chunk.

        if (point._bufferIndex < 0) {
          point._index++;
        } else {
          point._bufferIndex++; // At end of string chunk.

          if (point._bufferIndex === chunks[point._index].length) {
            point._bufferIndex = -1;
            point._index++;
          }
        } // Expose the previous character.

        context.previous = code; // Mark as consumed.
      } // Start a token.

      function enter(type, fields) {
        var token = fields || {};
        token.type = type;
        token.start = now();
        context.events.push(['enter', token, context]);
        stack.push(token);
        return token
      } // Stop a token.

      function exit(type) {
        var token = stack.pop();
        token.end = now();
        context.events.push(['exit', token, context]);
        return token
      } // Use results.

      function onsuccessfulconstruct(construct, info) {
        addResult(construct, info.from);
      } // Discard results.

      function onsuccessfulcheck(construct, info) {
        info.restore();
      } // Factory to attempt/check/interrupt.

      function constructFactory(onreturn, fields) {
        return hook // Handle either an object mapping codes to constructs, a list of
        // constructs, or a single construct.

        function hook(constructs, returnState, bogusState) {
          var listOfConstructs;
          var constructIndex;
          var currentConstruct;
          var info;
          return constructs.tokenize || 'length' in constructs
            ? handleListOfConstructs(miniflat_1(constructs))
            : handleMapOfConstructs

          function handleMapOfConstructs(code) {
            if (code in constructs || null in constructs) {
              return handleListOfConstructs(
                constructs.null
                  ? /* c8 ignore next */
                    miniflat_1(constructs[code]).concat(miniflat_1(constructs.null))
                  : constructs[code]
              )(code)
            }

            return bogusState(code)
          }

          function handleListOfConstructs(list) {
            listOfConstructs = list;
            constructIndex = 0;
            return handleConstruct(list[constructIndex])
          }

          function handleConstruct(construct) {
            return start

            function start(code) {
              // To do: not nede to store if there is no bogus state, probably?
              // Currently doesn’t work because `inspect` in document does a check
              // w/o a bogus, which doesn’t make sense. But it does seem to help perf
              // by not storing.
              info = store();
              currentConstruct = construct;

              if (!construct.partial) {
                context.currentConstruct = construct;
              }

              if (
                construct.name &&
                context.parser.constructs.disable.null.indexOf(construct.name) > -1
              ) {
                return nok()
              }

              return construct.tokenize.call(
                fields ? assign_1({}, context, fields) : context,
                effects,
                ok,
                nok
              )(code)
            }
          }

          function ok(code) {
            onreturn(currentConstruct, info);
            return returnState
          }

          function nok(code) {
            info.restore();

            if (++constructIndex < listOfConstructs.length) {
              return handleConstruct(listOfConstructs[constructIndex])
            }

            return bogusState
          }
        }
      }

      function addResult(construct, from) {
        if (construct.resolveAll && resolveAllConstructs.indexOf(construct) < 0) {
          resolveAllConstructs.push(construct);
        }

        if (construct.resolve) {
          chunkedSplice_1(
            context.events,
            from,
            context.events.length - from,
            construct.resolve(context.events.slice(from), context)
          );
        }

        if (construct.resolveTo) {
          context.events = construct.resolveTo(context.events, context);
        }
      }

      function store() {
        var startPoint = now();
        var startPrevious = context.previous;
        var startCurrentConstruct = context.currentConstruct;
        var startEventsIndex = context.events.length;
        var startStack = Array.from(stack);
        return {
          restore: restore,
          from: startEventsIndex
        }

        function restore() {
          point = startPoint;
          context.previous = startPrevious;
          context.currentConstruct = startCurrentConstruct;
          context.events.length = startEventsIndex;
          stack = startStack;
          accountForPotentialSkip();
        }
      }

      function accountForPotentialSkip() {
        if (point.line in columnStart && point.column < 2) {
          point.column = columnStart[point.line];
          point.offset += columnStart[point.line] - 1;
        }
      }
    }

    var createTokenizer_1 = createTokenizer;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function markdownLineEndingOrSpace(code) {
      return code < 0 || code === 32
    }

    var markdownLineEndingOrSpace_1 = markdownLineEndingOrSpace;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // This module is generated by `script/`.
    //
    // CommonMark handles attention (emphasis, strong) markers based on what comes
    // before or after them.
    // One such difference is if those characters are Unicode punctuation.
    // This script is generated from the Unicode data.
    var unicodePunctuation$1 = /[!-\/:-@\[-`\{-~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

    var unicodePunctuationRegex = unicodePunctuation$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    function regexCheck(regex) {
      return check

      function check(code) {
        return regex.test(fromCharCode_1(code))
      }
    }

    var regexCheck_1 = regexCheck;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};



    // In fact adds to the bundle size.

    var unicodePunctuation = regexCheck_1(unicodePunctuationRegex);

    var unicodePunctuation_1 = unicodePunctuation;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var unicodeWhitespace = regexCheck_1(/\s/);

    var unicodeWhitespace_1 = unicodeWhitespace;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};




    // Classify whether a character is unicode whitespace, unicode punctuation, or
    // anything else.
    // Used for attention (emphasis, strong), whose sequences can open or close
    // based on the class of surrounding characters.
    function classifyCharacter(code) {
      if (
        code === null ||
        markdownLineEndingOrSpace_1(code) ||
        unicodeWhitespace_1(code)
      ) {
        return 1
      }

      if (unicodePunctuation_1(code)) {
        return 2
      }
    }

    var classifyCharacter_1 = classifyCharacter;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // chunks (replacement characters, tabs, or line endings).

    function movePoint(point, offset) {
      point.column += offset;
      point.offset += offset;
      point._bufferIndex += offset;
      return point
    }

    var movePoint_1 = movePoint;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};







    var attention = {
      name: 'attention',
      tokenize: tokenizeAttention,
      resolveAll: resolveAllAttention
    };

    function resolveAllAttention(events, context) {
      var index = -1;
      var open;
      var group;
      var text;
      var openingSequence;
      var closingSequence;
      var use;
      var nextEvents;
      var offset; // Walk through all events.
      //
      // Note: performance of this is fine on an mb of normal markdown, but it’s
      // a bottleneck for malicious stuff.

      while (++index < events.length) {
        // Find a token that can close.
        if (
          events[index][0] === 'enter' &&
          events[index][1].type === 'attentionSequence' &&
          events[index][1]._close
        ) {
          open = index; // Now walk back to find an opener.

          while (open--) {
            // Find a token that can open the closer.
            if (
              events[open][0] === 'exit' &&
              events[open][1].type === 'attentionSequence' &&
              events[open][1]._open && // If the markers are the same:
              context.sliceSerialize(events[open][1]).charCodeAt(0) ===
                context.sliceSerialize(events[index][1]).charCodeAt(0)
            ) {
              // If the opening can close or the closing can open,
              // and the close size *is not* a multiple of three,
              // but the sum of the opening and closing size *is* multiple of three,
              // then don’t match.
              if (
                (events[open][1]._close || events[index][1]._open) &&
                (events[index][1].end.offset - events[index][1].start.offset) % 3 &&
                !(
                  (events[open][1].end.offset -
                    events[open][1].start.offset +
                    events[index][1].end.offset -
                    events[index][1].start.offset) %
                  3
                )
              ) {
                continue
              } // Number of markers to use from the sequence.

              use =
                events[open][1].end.offset - events[open][1].start.offset > 1 &&
                events[index][1].end.offset - events[index][1].start.offset > 1
                  ? 2
                  : 1;
              openingSequence = {
                type: use > 1 ? 'strongSequence' : 'emphasisSequence',
                start: movePoint_1(shallow_1(events[open][1].end), -use),
                end: shallow_1(events[open][1].end)
              };
              closingSequence = {
                type: use > 1 ? 'strongSequence' : 'emphasisSequence',
                start: shallow_1(events[index][1].start),
                end: movePoint_1(shallow_1(events[index][1].start), use)
              };
              text = {
                type: use > 1 ? 'strongText' : 'emphasisText',
                start: shallow_1(events[open][1].end),
                end: shallow_1(events[index][1].start)
              };
              group = {
                type: use > 1 ? 'strong' : 'emphasis',
                start: shallow_1(openingSequence.start),
                end: shallow_1(closingSequence.end)
              };
              events[open][1].end = shallow_1(openingSequence.start);
              events[index][1].start = shallow_1(closingSequence.end);
              nextEvents = []; // If there are more markers in the opening, add them before.

              if (events[open][1].end.offset - events[open][1].start.offset) {
                nextEvents = chunkedPush_1(nextEvents, [
                  ['enter', events[open][1], context],
                  ['exit', events[open][1], context]
                ]);
              } // Opening.

              nextEvents = chunkedPush_1(nextEvents, [
                ['enter', group, context],
                ['enter', openingSequence, context],
                ['exit', openingSequence, context],
                ['enter', text, context]
              ]); // Between.

              nextEvents = chunkedPush_1(
                nextEvents,
                resolveAll_1(
                  context.parser.constructs.insideSpan.null,
                  events.slice(open + 1, index),
                  context
                )
              ); // Closing.

              nextEvents = chunkedPush_1(nextEvents, [
                ['exit', text, context],
                ['enter', closingSequence, context],
                ['exit', closingSequence, context],
                ['exit', group, context]
              ]); // If there are more markers in the closing, add them after.

              if (events[index][1].end.offset - events[index][1].start.offset) {
                offset = 2;
                nextEvents = chunkedPush_1(nextEvents, [
                  ['enter', events[index][1], context],
                  ['exit', events[index][1], context]
                ]);
              } else {
                offset = 0;
              }

              chunkedSplice_1(events, open - 1, index - open + 3, nextEvents);
              index = open + nextEvents.length - offset - 2;
              break
            }
          }
        }
      } // Remove remaining sequences.

      index = -1;

      while (++index < events.length) {
        if (events[index][1].type === 'attentionSequence') {
          events[index][1].type = 'data';
        }
      }

      return events
    }

    function tokenizeAttention(effects, ok) {
      var before = classifyCharacter_1(this.previous);
      var marker;
      return start

      function start(code) {
        effects.enter('attentionSequence');
        marker = code;
        return sequence(code)
      }

      function sequence(code) {
        var token;
        var after;
        var open;
        var close;

        if (code === marker) {
          effects.consume(code);
          return sequence
        }

        token = effects.exit('attentionSequence');
        after = classifyCharacter_1(code);
        open = !after || (after === 2 && before);
        close = !before || (before === 2 && after);
        token._open = marker === 42 ? open : open && (before || !close);
        token._close = marker === 42 ? close : close && (after || !open);
        return ok(code)
      }
    }

    var attention_1 = attention;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var asciiAlpha = regexCheck_1(/[A-Za-z]/);

    var asciiAlpha_1 = asciiAlpha;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var asciiAlphanumeric = regexCheck_1(/[\dA-Za-z]/);

    var asciiAlphanumeric_1 = asciiAlphanumeric;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var asciiAtext = regexCheck_1(/[#-'*+\--9=?A-Z^-~]/);

    var asciiAtext_1 = asciiAtext;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // Note: EOF is seen as ASCII control here, because `null < 32 == true`.
    function asciiControl(code) {
      return (
        // Special whitespace codes (which have negative values), C0 and Control
        // character DEL
        code < 32 || code === 127
      )
    }

    var asciiControl_1 = asciiControl;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};





    var autolink = {
      name: 'autolink',
      tokenize: tokenizeAutolink
    };

    function tokenizeAutolink(effects, ok, nok) {
      var size = 1;
      return start

      function start(code) {
        effects.enter('autolink');
        effects.enter('autolinkMarker');
        effects.consume(code);
        effects.exit('autolinkMarker');
        effects.enter('autolinkProtocol');
        return open
      }

      function open(code) {
        if (asciiAlpha_1(code)) {
          effects.consume(code);
          return schemeOrEmailAtext
        }

        return asciiAtext_1(code) ? emailAtext(code) : nok(code)
      }

      function schemeOrEmailAtext(code) {
        return code === 43 || code === 45 || code === 46 || asciiAlphanumeric_1(code)
          ? schemeInsideOrEmailAtext(code)
          : emailAtext(code)
      }

      function schemeInsideOrEmailAtext(code) {
        if (code === 58) {
          effects.consume(code);
          return urlInside
        }

        if (
          (code === 43 || code === 45 || code === 46 || asciiAlphanumeric_1(code)) &&
          size++ < 32
        ) {
          effects.consume(code);
          return schemeInsideOrEmailAtext
        }

        return emailAtext(code)
      }

      function urlInside(code) {
        if (code === 62) {
          effects.exit('autolinkProtocol');
          return end(code)
        }

        if (code === 32 || code === 60 || asciiControl_1(code)) {
          return nok(code)
        }

        effects.consume(code);
        return urlInside
      }

      function emailAtext(code) {
        if (code === 64) {
          effects.consume(code);
          size = 0;
          return emailAtSignOrDot
        }

        if (asciiAtext_1(code)) {
          effects.consume(code);
          return emailAtext
        }

        return nok(code)
      }

      function emailAtSignOrDot(code) {
        return asciiAlphanumeric_1(code) ? emailLabel(code) : nok(code)
      }

      function emailLabel(code) {
        if (code === 46) {
          effects.consume(code);
          size = 0;
          return emailAtSignOrDot
        }

        if (code === 62) {
          // Exit, then change the type.
          effects.exit('autolinkProtocol').type = 'autolinkEmail';
          return end(code)
        }

        return emailValue(code)
      }

      function emailValue(code) {
        if ((code === 45 || asciiAlphanumeric_1(code)) && size++ < 63) {
          effects.consume(code);
          return code === 45 ? emailValue : emailLabel
        }

        return nok(code)
      }

      function end(code) {
        effects.enter('autolinkMarker');
        effects.consume(code);
        effects.exit('autolinkMarker');
        effects.exit('autolink');
        return ok
      }
    }

    var autolink_1 = autolink;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};



    var blockQuote = {
      name: 'blockQuote',
      tokenize: tokenizeBlockQuoteStart,
      continuation: {
        tokenize: tokenizeBlockQuoteContinuation
      },
      exit: exit
    };

    function tokenizeBlockQuoteStart(effects, ok, nok) {
      var self = this;
      return start

      function start(code) {
        if (code === 62) {
          if (!self.containerState.open) {
            effects.enter('blockQuote', {
              _container: true
            });
            self.containerState.open = true;
          }

          effects.enter('blockQuotePrefix');
          effects.enter('blockQuoteMarker');
          effects.consume(code);
          effects.exit('blockQuoteMarker');
          return after
        }

        return nok(code)
      }

      function after(code) {
        if (markdownSpace_1(code)) {
          effects.enter('blockQuotePrefixWhitespace');
          effects.consume(code);
          effects.exit('blockQuotePrefixWhitespace');
          effects.exit('blockQuotePrefix');
          return ok
        }

        effects.exit('blockQuotePrefix');
        return ok(code)
      }
    }

    function tokenizeBlockQuoteContinuation(effects, ok, nok) {
      return factorySpace(
        effects,
        effects.attempt(blockQuote, ok, nok),
        'linePrefix',
        this.parser.constructs.disable.null.indexOf('codeIndented') > -1
          ? undefined
          : 4
      )
    }

    function exit(effects) {
      effects.exit('blockQuote');
    }

    var blockQuote_1 = blockQuote;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var asciiPunctuation = regexCheck_1(/[!-/:-@[-`{-~]/);

    var asciiPunctuation_1 = asciiPunctuation;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var characterEscape = {
      name: 'characterEscape',
      tokenize: tokenizeCharacterEscape
    };

    function tokenizeCharacterEscape(effects, ok, nok) {
      return start

      function start(code) {
        effects.enter('characterEscape');
        effects.enter('escapeMarker');
        effects.consume(code);
        effects.exit('escapeMarker');
        return open
      }

      function open(code) {
        if (asciiPunctuation_1(code)) {
          effects.enter('characterEscapeValue');
          effects.consume(code);
          effects.exit('characterEscapeValue');
          effects.exit('characterEscape');
          return ok
        }

        return nok(code)
      }
    }

    var characterEscape_1 = characterEscape;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var AEli="Æ";var AElig$2="Æ";var AM="&";var AMP$2="&";var Aacut="Á";var Aacute$2="Á";var Abreve$1="Ă";var Acir="Â";var Acirc$2="Â";var Acy$1="А";var Afr$1="𝔄";var Agrav="À";var Agrave$2="À";var Alpha$1="Α";var Amacr$1="Ā";var And$1="⩓";var Aogon$1="Ą";var Aopf$1="𝔸";var ApplyFunction$1="⁡";var Arin="Å";var Aring$2="Å";var Ascr$1="𝒜";var Assign$1="≔";var Atild="Ã";var Atilde$2="Ã";var Aum="Ä";var Auml$2="Ä";var Backslash$1="∖";var Barv$1="⫧";var Barwed$1="⌆";var Bcy$1="Б";var Because$1="∵";var Bernoullis$1="ℬ";var Beta$1="Β";var Bfr$1="𝔅";var Bopf$1="𝔹";var Breve$1="˘";var Bscr$1="ℬ";var Bumpeq$1="≎";var CHcy$1="Ч";var COP="©";var COPY$2="©";var Cacute$1="Ć";var Cap$1="⋒";var CapitalDifferentialD$1="ⅅ";var Cayleys$1="ℭ";var Ccaron$1="Č";var Ccedi="Ç";var Ccedil$2="Ç";var Ccirc$1="Ĉ";var Cconint$1="∰";var Cdot$1="Ċ";var Cedilla$1="¸";var CenterDot$1="·";var Cfr$1="ℭ";var Chi$1="Χ";var CircleDot$1="⊙";var CircleMinus$1="⊖";var CirclePlus$1="⊕";var CircleTimes$1="⊗";var ClockwiseContourIntegral$1="∲";var CloseCurlyDoubleQuote$1="”";var CloseCurlyQuote$1="’";var Colon$1="∷";var Colone$1="⩴";var Congruent$1="≡";var Conint$1="∯";var ContourIntegral$1="∮";var Copf$1="ℂ";var Coproduct$1="∐";var CounterClockwiseContourIntegral$1="∳";var Cross$1="⨯";var Cscr$1="𝒞";var Cup$1="⋓";var CupCap$1="≍";var DD$1="ⅅ";var DDotrahd$1="⤑";var DJcy$1="Ђ";var DScy$1="Ѕ";var DZcy$1="Џ";var Dagger$1="‡";var Darr$1="↡";var Dashv$1="⫤";var Dcaron$1="Ď";var Dcy$1="Д";var Del$1="∇";var Delta$1="Δ";var Dfr$1="𝔇";var DiacriticalAcute$1="´";var DiacriticalDot$1="˙";var DiacriticalDoubleAcute$1="˝";var DiacriticalGrave$1="`";var DiacriticalTilde$1="˜";var Diamond$1="⋄";var DifferentialD$1="ⅆ";var Dopf$1="𝔻";var Dot$1="¨";var DotDot$1="⃜";var DotEqual$1="≐";var DoubleContourIntegral$1="∯";var DoubleDot$1="¨";var DoubleDownArrow$1="⇓";var DoubleLeftArrow$1="⇐";var DoubleLeftRightArrow$1="⇔";var DoubleLeftTee$1="⫤";var DoubleLongLeftArrow$1="⟸";var DoubleLongLeftRightArrow$1="⟺";var DoubleLongRightArrow$1="⟹";var DoubleRightArrow$1="⇒";var DoubleRightTee$1="⊨";var DoubleUpArrow$1="⇑";var DoubleUpDownArrow$1="⇕";var DoubleVerticalBar$1="∥";var DownArrow$1="↓";var DownArrowBar$1="⤓";var DownArrowUpArrow$1="⇵";var DownBreve$1="̑";var DownLeftRightVector$1="⥐";var DownLeftTeeVector$1="⥞";var DownLeftVector$1="↽";var DownLeftVectorBar$1="⥖";var DownRightTeeVector$1="⥟";var DownRightVector$1="⇁";var DownRightVectorBar$1="⥗";var DownTee$1="⊤";var DownTeeArrow$1="↧";var Downarrow$1="⇓";var Dscr$1="𝒟";var Dstrok$1="Đ";var ENG$1="Ŋ";var ET="Ð";var ETH$2="Ð";var Eacut="É";var Eacute$2="É";var Ecaron$1="Ě";var Ecir="Ê";var Ecirc$2="Ê";var Ecy$1="Э";var Edot$1="Ė";var Efr$1="𝔈";var Egrav="È";var Egrave$2="È";var Element$4="∈";var Emacr$1="Ē";var EmptySmallSquare$1="◻";var EmptyVerySmallSquare$1="▫";var Eogon$1="Ę";var Eopf$1="𝔼";var Epsilon$1="Ε";var Equal$1="⩵";var EqualTilde$1="≂";var Equilibrium$1="⇌";var Escr$1="ℰ";var Esim$1="⩳";var Eta$1="Η";var Eum="Ë";var Euml$2="Ë";var Exists$1="∃";var ExponentialE$1="ⅇ";var Fcy$1="Ф";var Ffr$1="𝔉";var FilledSmallSquare$1="◼";var FilledVerySmallSquare$1="▪";var Fopf$1="𝔽";var ForAll$1="∀";var Fouriertrf$1="ℱ";var Fscr$1="ℱ";var GJcy$1="Ѓ";var G$1=">";var GT$2=">";var Gamma$1="Γ";var Gammad$1="Ϝ";var Gbreve$1="Ğ";var Gcedil$1="Ģ";var Gcirc$1="Ĝ";var Gcy$1="Г";var Gdot$1="Ġ";var Gfr$1="𝔊";var Gg$1="⋙";var Gopf$1="𝔾";var GreaterEqual$1="≥";var GreaterEqualLess$1="⋛";var GreaterFullEqual$1="≧";var GreaterGreater$1="⪢";var GreaterLess$1="≷";var GreaterSlantEqual$1="⩾";var GreaterTilde$1="≳";var Gscr$1="𝒢";var Gt$2="≫";var HARDcy$1="Ъ";var Hacek$1="ˇ";var Hat$1="^";var Hcirc$1="Ĥ";var Hfr$1="ℌ";var HilbertSpace$1="ℋ";var Hopf$1="ℍ";var HorizontalLine$1="─";var Hscr$1="ℋ";var Hstrok$1="Ħ";var HumpDownHump$1="≎";var HumpEqual$1="≏";var IEcy$1="Е";var IJlig$1="Ĳ";var IOcy$1="Ё";var Iacut="Í";var Iacute$2="Í";var Icir="Î";var Icirc$2="Î";var Icy$1="И";var Idot$1="İ";var Ifr$1="ℑ";var Igrav="Ì";var Igrave$2="Ì";var Im$1="ℑ";var Imacr$1="Ī";var ImaginaryI$1="ⅈ";var Implies$1="⇒";var Int$1="∬";var Integral$1="∫";var Intersection$1="⋂";var InvisibleComma$1="⁣";var InvisibleTimes$1="⁢";var Iogon$1="Į";var Iopf$1="𝕀";var Iota$1="Ι";var Iscr$1="ℐ";var Itilde$1="Ĩ";var Iukcy$1="І";var Ium="Ï";var Iuml$2="Ï";var Jcirc$1="Ĵ";var Jcy$1="Й";var Jfr$1="𝔍";var Jopf$1="𝕁";var Jscr$1="𝒥";var Jsercy$1="Ј";var Jukcy$1="Є";var KHcy$1="Х";var KJcy$1="Ќ";var Kappa$1="Κ";var Kcedil$1="Ķ";var Kcy$1="К";var Kfr$1="𝔎";var Kopf$1="𝕂";var Kscr$1="𝒦";var LJcy$1="Љ";var L$1="<";var LT$2="<";var Lacute$1="Ĺ";var Lambda$1="Λ";var Lang$1="⟪";var Laplacetrf$1="ℒ";var Larr$1="↞";var Lcaron$1="Ľ";var Lcedil$1="Ļ";var Lcy$1="Л";var LeftAngleBracket$1="⟨";var LeftArrow$1="←";var LeftArrowBar$1="⇤";var LeftArrowRightArrow$1="⇆";var LeftCeiling$1="⌈";var LeftDoubleBracket$1="⟦";var LeftDownTeeVector$1="⥡";var LeftDownVector$1="⇃";var LeftDownVectorBar$1="⥙";var LeftFloor$1="⌊";var LeftRightArrow$1="↔";var LeftRightVector$1="⥎";var LeftTee$1="⊣";var LeftTeeArrow$1="↤";var LeftTeeVector$1="⥚";var LeftTriangle$1="⊲";var LeftTriangleBar$1="⧏";var LeftTriangleEqual$1="⊴";var LeftUpDownVector$1="⥑";var LeftUpTeeVector$1="⥠";var LeftUpVector$1="↿";var LeftUpVectorBar$1="⥘";var LeftVector$1="↼";var LeftVectorBar$1="⥒";var Leftarrow$1="⇐";var Leftrightarrow$1="⇔";var LessEqualGreater$1="⋚";var LessFullEqual$1="≦";var LessGreater$1="≶";var LessLess$1="⪡";var LessSlantEqual$1="⩽";var LessTilde$1="≲";var Lfr$1="𝔏";var Ll$1="⋘";var Lleftarrow$1="⇚";var Lmidot$1="Ŀ";var LongLeftArrow$1="⟵";var LongLeftRightArrow$1="⟷";var LongRightArrow$1="⟶";var Longleftarrow$1="⟸";var Longleftrightarrow$1="⟺";var Longrightarrow$1="⟹";var Lopf$1="𝕃";var LowerLeftArrow$1="↙";var LowerRightArrow$1="↘";var Lscr$1="ℒ";var Lsh$1="↰";var Lstrok$1="Ł";var Lt$2="≪";var Mcy$1="М";var MediumSpace$1=" ";var Mellintrf$1="ℳ";var Mfr$1="𝔐";var MinusPlus$1="∓";var Mopf$1="𝕄";var Mscr$1="ℳ";var Mu$1="Μ";var NJcy$1="Њ";var Nacute$1="Ń";var Ncaron$1="Ň";var Ncedil$1="Ņ";var Ncy$1="Н";var NegativeMediumSpace$1="​";var NegativeThickSpace$1="​";var NegativeThinSpace$1="​";var NegativeVeryThinSpace$1="​";var NestedGreaterGreater$1="≫";var NestedLessLess$1="≪";var NewLine$1="\n";var Nfr$1="𝔑";var NoBreak$1="⁠";var NonBreakingSpace$1=" ";var Nopf$1="ℕ";var Not$1="⫬";var NotCongruent$1="≢";var NotCupCap$1="≭";var NotDoubleVerticalBar$1="∦";var NotElement$1="∉";var NotEqual$1="≠";var NotEqualTilde$1="≂̸";var NotExists$1="∄";var NotGreater$1="≯";var NotGreaterEqual$1="≱";var NotGreaterFullEqual$1="≧̸";var NotGreaterGreater$1="≫̸";var NotGreaterLess$1="≹";var NotGreaterSlantEqual$1="⩾̸";var NotGreaterTilde$1="≵";var NotHumpDownHump$1="≎̸";var NotHumpEqual$1="≏̸";var NotLeftTriangle$1="⋪";var NotLeftTriangleBar$1="⧏̸";var NotLeftTriangleEqual$1="⋬";var NotLess$1="≮";var NotLessEqual$1="≰";var NotLessGreater$1="≸";var NotLessLess$1="≪̸";var NotLessSlantEqual$1="⩽̸";var NotLessTilde$1="≴";var NotNestedGreaterGreater$1="⪢̸";var NotNestedLessLess$1="⪡̸";var NotPrecedes$1="⊀";var NotPrecedesEqual$1="⪯̸";var NotPrecedesSlantEqual$1="⋠";var NotReverseElement$1="∌";var NotRightTriangle$1="⋫";var NotRightTriangleBar$1="⧐̸";var NotRightTriangleEqual$1="⋭";var NotSquareSubset$1="⊏̸";var NotSquareSubsetEqual$1="⋢";var NotSquareSuperset$1="⊐̸";var NotSquareSupersetEqual$1="⋣";var NotSubset$1="⊂⃒";var NotSubsetEqual$1="⊈";var NotSucceeds$1="⊁";var NotSucceedsEqual$1="⪰̸";var NotSucceedsSlantEqual$1="⋡";var NotSucceedsTilde$1="≿̸";var NotSuperset$1="⊃⃒";var NotSupersetEqual$1="⊉";var NotTilde$1="≁";var NotTildeEqual$1="≄";var NotTildeFullEqual$1="≇";var NotTildeTilde$1="≉";var NotVerticalBar$1="∤";var Nscr$1="𝒩";var Ntild="Ñ";var Ntilde$2="Ñ";var Nu$1="Ν";var OElig$1="Œ";var Oacut="Ó";var Oacute$2="Ó";var Ocir="Ô";var Ocirc$2="Ô";var Ocy$1="О";var Odblac$1="Ő";var Ofr$1="𝔒";var Ograv="Ò";var Ograve$2="Ò";var Omacr$1="Ō";var Omega$1="Ω";var Omicron$1="Ο";var Oopf$1="𝕆";var OpenCurlyDoubleQuote$1="“";var OpenCurlyQuote$1="‘";var Or$1="⩔";var Oscr$1="𝒪";var Oslas="Ø";var Oslash$2="Ø";var Otild="Õ";var Otilde$2="Õ";var Otimes$1="⨷";var Oum="Ö";var Ouml$2="Ö";var OverBar$1="‾";var OverBrace$1="⏞";var OverBracket$1="⎴";var OverParenthesis$1="⏜";var PartialD$1="∂";var Pcy$1="П";var Pfr$1="𝔓";var Phi$1="Φ";var Pi$1="Π";var PlusMinus$1="±";var Poincareplane$1="ℌ";var Popf$1="ℙ";var Pr$1="⪻";var Precedes$1="≺";var PrecedesEqual$1="⪯";var PrecedesSlantEqual$1="≼";var PrecedesTilde$1="≾";var Prime$1="″";var Product$1="∏";var Proportion$1="∷";var Proportional$1="∝";var Pscr$1="𝒫";var Psi$1="Ψ";var QUO="\"";var QUOT$2="\"";var Qfr$1="𝔔";var Qopf$1="ℚ";var Qscr$1="𝒬";var RBarr$1="⤐";var RE="®";var REG$2="®";var Racute$1="Ŕ";var Rang$1="⟫";var Rarr$1="↠";var Rarrtl$1="⤖";var Rcaron$1="Ř";var Rcedil$1="Ŗ";var Rcy$1="Р";var Re$2="ℜ";var ReverseElement$1="∋";var ReverseEquilibrium$1="⇋";var ReverseUpEquilibrium$1="⥯";var Rfr$1="ℜ";var Rho$1="Ρ";var RightAngleBracket$1="⟩";var RightArrow$1="→";var RightArrowBar$1="⇥";var RightArrowLeftArrow$1="⇄";var RightCeiling$1="⌉";var RightDoubleBracket$1="⟧";var RightDownTeeVector$1="⥝";var RightDownVector$1="⇂";var RightDownVectorBar$1="⥕";var RightFloor$1="⌋";var RightTee$1="⊢";var RightTeeArrow$1="↦";var RightTeeVector$1="⥛";var RightTriangle$1="⊳";var RightTriangleBar$1="⧐";var RightTriangleEqual$1="⊵";var RightUpDownVector$1="⥏";var RightUpTeeVector$1="⥜";var RightUpVector$1="↾";var RightUpVectorBar$1="⥔";var RightVector$1="⇀";var RightVectorBar$1="⥓";var Rightarrow$1="⇒";var Ropf$1="ℝ";var RoundImplies$1="⥰";var Rrightarrow$1="⇛";var Rscr$1="ℛ";var Rsh$1="↱";var RuleDelayed$1="⧴";var SHCHcy$1="Щ";var SHcy$1="Ш";var SOFTcy$1="Ь";var Sacute$1="Ś";var Sc$1="⪼";var Scaron$1="Š";var Scedil$1="Ş";var Scirc$1="Ŝ";var Scy$1="С";var Sfr$1="𝔖";var ShortDownArrow$1="↓";var ShortLeftArrow$1="←";var ShortRightArrow$1="→";var ShortUpArrow$1="↑";var Sigma$1="Σ";var SmallCircle$1="∘";var Sopf$1="𝕊";var Sqrt$1="√";var Square$1="□";var SquareIntersection$1="⊓";var SquareSubset$1="⊏";var SquareSubsetEqual$1="⊑";var SquareSuperset$1="⊐";var SquareSupersetEqual$1="⊒";var SquareUnion$1="⊔";var Sscr$1="𝒮";var Star$1="⋆";var Sub$1="⋐";var Subset$1="⋐";var SubsetEqual$1="⊆";var Succeeds$1="≻";var SucceedsEqual$1="⪰";var SucceedsSlantEqual$1="≽";var SucceedsTilde$1="≿";var SuchThat$1="∋";var Sum$1="∑";var Sup$1="⋑";var Superset$1="⊃";var SupersetEqual$1="⊇";var Supset$1="⋑";var THOR="Þ";var THORN$2="Þ";var TRADE$1="™";var TSHcy$1="Ћ";var TScy$1="Ц";var Tab$1="\t";var Tau$1="Τ";var Tcaron$1="Ť";var Tcedil$1="Ţ";var Tcy$1="Т";var Tfr$1="𝔗";var Therefore$1="∴";var Theta$1="Θ";var ThickSpace$1="  ";var ThinSpace$1=" ";var Tilde$1="∼";var TildeEqual$1="≃";var TildeFullEqual$1="≅";var TildeTilde$1="≈";var Topf$1="𝕋";var TripleDot$1="⃛";var Tscr$1="𝒯";var Tstrok$1="Ŧ";var Uacut="Ú";var Uacute$2="Ú";var Uarr$1="↟";var Uarrocir$1="⥉";var Ubrcy$1="Ў";var Ubreve$1="Ŭ";var Ucir="Û";var Ucirc$2="Û";var Ucy$1="У";var Udblac$1="Ű";var Ufr$1="𝔘";var Ugrav="Ù";var Ugrave$2="Ù";var Umacr$1="Ū";var UnderBar$1="_";var UnderBrace$1="⏟";var UnderBracket$1="⎵";var UnderParenthesis$1="⏝";var Union$1="⋃";var UnionPlus$1="⊎";var Uogon$1="Ų";var Uopf$1="𝕌";var UpArrow$1="↑";var UpArrowBar$1="⤒";var UpArrowDownArrow$1="⇅";var UpDownArrow$1="↕";var UpEquilibrium$1="⥮";var UpTee$1="⊥";var UpTeeArrow$1="↥";var Uparrow$1="⇑";var Updownarrow$1="⇕";var UpperLeftArrow$1="↖";var UpperRightArrow$1="↗";var Upsi$1="ϒ";var Upsilon$1="Υ";var Uring$1="Ů";var Uscr$1="𝒰";var Utilde$1="Ũ";var Uum="Ü";var Uuml$2="Ü";var VDash$1="⊫";var Vbar$1="⫫";var Vcy$1="В";var Vdash$1="⊩";var Vdashl$1="⫦";var Vee$1="⋁";var Verbar$1="‖";var Vert$1="‖";var VerticalBar$1="∣";var VerticalLine$1="|";var VerticalSeparator$1="❘";var VerticalTilde$1="≀";var VeryThinSpace$1=" ";var Vfr$1="𝔙";var Vopf$1="𝕍";var Vscr$1="𝒱";var Vvdash$1="⊪";var Wcirc$1="Ŵ";var Wedge$1="⋀";var Wfr$1="𝔚";var Wopf$1="𝕎";var Wscr$1="𝒲";var Xfr$1="𝔛";var Xi$1="Ξ";var Xopf$1="𝕏";var Xscr$1="𝒳";var YAcy$1="Я";var YIcy$1="Ї";var YUcy$1="Ю";var Yacut="Ý";var Yacute$2="Ý";var Ycirc$1="Ŷ";var Ycy$1="Ы";var Yfr$1="𝔜";var Yopf$1="𝕐";var Yscr$1="𝒴";var Yuml$1="Ÿ";var ZHcy$1="Ж";var Zacute$1="Ź";var Zcaron$1="Ž";var Zcy$1="З";var Zdot$1="Ż";var ZeroWidthSpace$1="​";var Zeta$1="Ζ";var Zfr$1="ℨ";var Zopf$1="ℤ";var Zscr$1="𝒵";var aacut="á";var aacute$2="á";var abreve$1="ă";var ac$1="∾";var acE$1="∾̳";var acd$1="∿";var acir="â";var acirc$2="â";var acut="´";var acute$2="´";var acy$1="а";var aeli="æ";var aelig$2="æ";var af$1="⁡";var afr$1="𝔞";var agrav="à";var agrave$2="à";var alefsym$1="ℵ";var aleph$1="ℵ";var alpha$1="α";var amacr$1="ā";var amalg$1="⨿";var am="&";var amp$3="&";var and$1="∧";var andand$1="⩕";var andd$1="⩜";var andslope$1="⩘";var andv$1="⩚";var ang$1="∠";var ange$1="⦤";var angle$1="∠";var angmsd$1="∡";var angmsdaa$1="⦨";var angmsdab$1="⦩";var angmsdac$1="⦪";var angmsdad$1="⦫";var angmsdae$1="⦬";var angmsdaf$1="⦭";var angmsdag$1="⦮";var angmsdah$1="⦯";var angrt$1="∟";var angrtvb$1="⊾";var angrtvbd$1="⦝";var angsph$1="∢";var angst$1="Å";var angzarr$1="⍼";var aogon$1="ą";var aopf$1="𝕒";var ap$1="≈";var apE$1="⩰";var apacir$1="⩯";var ape$1="≊";var apid$1="≋";var apos$2="'";var approx$1="≈";var approxeq$1="≊";var arin="å";var aring$2="å";var ascr$1="𝒶";var ast$1="*";var asymp$1="≈";var asympeq$1="≍";var atild="ã";var atilde$2="ã";var aum="ä";var auml$2="ä";var awconint$1="∳";var awint$1="⨑";var bNot$1="⫭";var backcong$1="≌";var backepsilon$1="϶";var backprime$1="‵";var backsim$1="∽";var backsimeq$1="⋍";var barvee$1="⊽";var barwed$1="⌅";var barwedge$1="⌅";var bbrk$1="⎵";var bbrktbrk$1="⎶";var bcong$1="≌";var bcy$1="б";var bdquo$1="„";var becaus$1="∵";var because$1="∵";var bemptyv$1="⦰";var bepsi$1="϶";var bernou$1="ℬ";var beta$1="β";var beth$1="ℶ";var between$1="≬";var bfr$1="𝔟";var bigcap$1="⋂";var bigcirc$1="◯";var bigcup$1="⋃";var bigodot$1="⨀";var bigoplus$1="⨁";var bigotimes$1="⨂";var bigsqcup$1="⨆";var bigstar$1="★";var bigtriangledown$1="▽";var bigtriangleup$1="△";var biguplus$1="⨄";var bigvee$1="⋁";var bigwedge$1="⋀";var bkarow$1="⤍";var blacklozenge$1="⧫";var blacksquare$1="▪";var blacktriangle$1="▴";var blacktriangledown$1="▾";var blacktriangleleft$1="◂";var blacktriangleright$1="▸";var blank$1="␣";var blk12$1="▒";var blk14$1="░";var blk34$1="▓";var block$1="█";var bne$1="=⃥";var bnequiv$1="≡⃥";var bnot$1="⌐";var bopf$1="𝕓";var bot$1="⊥";var bottom$1="⊥";var bowtie$1="⋈";var boxDL$1="╗";var boxDR$1="╔";var boxDl$1="╖";var boxDr$1="╓";var boxH$1="═";var boxHD$1="╦";var boxHU$1="╩";var boxHd$1="╤";var boxHu$1="╧";var boxUL$1="╝";var boxUR$1="╚";var boxUl$1="╜";var boxUr$1="╙";var boxV$1="║";var boxVH$1="╬";var boxVL$1="╣";var boxVR$1="╠";var boxVh$1="╫";var boxVl$1="╢";var boxVr$1="╟";var boxbox$1="⧉";var boxdL$1="╕";var boxdR$1="╒";var boxdl$1="┐";var boxdr$1="┌";var boxh$1="─";var boxhD$1="╥";var boxhU$1="╨";var boxhd$1="┬";var boxhu$1="┴";var boxminus$1="⊟";var boxplus$1="⊞";var boxtimes$1="⊠";var boxuL$1="╛";var boxuR$1="╘";var boxul$1="┘";var boxur$1="└";var boxv$1="│";var boxvH$1="╪";var boxvL$1="╡";var boxvR$1="╞";var boxvh$1="┼";var boxvl$1="┤";var boxvr$1="├";var bprime$1="‵";var breve$1="˘";var brvba="¦";var brvbar$2="¦";var bscr$1="𝒷";var bsemi$1="⁏";var bsim$1="∽";var bsime$1="⋍";var bsol$1="\\";var bsolb$1="⧅";var bsolhsub$1="⟈";var bull$1="•";var bullet$1="•";var bump$1="≎";var bumpE$1="⪮";var bumpe$1="≏";var bumpeq$1="≏";var cacute$1="ć";var cap$1="∩";var capand$1="⩄";var capbrcup$1="⩉";var capcap$1="⩋";var capcup$1="⩇";var capdot$1="⩀";var caps$1="∩︀";var caret$1="⁁";var caron$1="ˇ";var ccaps$1="⩍";var ccaron$1="č";var ccedi="ç";var ccedil$2="ç";var ccirc$1="ĉ";var ccups$1="⩌";var ccupssm$1="⩐";var cdot$1="ċ";var cedi="¸";var cedil$2="¸";var cemptyv$1="⦲";var cen="¢";var cent$2="¢";var centerdot$1="·";var cfr$1="𝔠";var chcy$1="ч";var check$1="✓";var checkmark$1="✓";var chi$1="χ";var cir$1="○";var cirE$1="⧃";var circ$1="ˆ";var circeq$1="≗";var circlearrowleft$1="↺";var circlearrowright$1="↻";var circledR$1="®";var circledS$1="Ⓢ";var circledast$1="⊛";var circledcirc$1="⊚";var circleddash$1="⊝";var cire$1="≗";var cirfnint$1="⨐";var cirmid$1="⫯";var cirscir$1="⧂";var clubs$1="♣";var clubsuit$1="♣";var colon$1=":";var colone$1="≔";var coloneq$1="≔";var comma$1=",";var commat$1="@";var comp$1="∁";var compfn$1="∘";var complement$1="∁";var complexes$1="ℂ";var cong$1="≅";var congdot$1="⩭";var conint$1="∮";var copf$1="𝕔";var coprod$1="∐";var cop="©";var copy$2="©";var copysr$1="℗";var crarr$1="↵";var cross$1="✗";var cscr$1="𝒸";var csub$1="⫏";var csube$1="⫑";var csup$1="⫐";var csupe$1="⫒";var ctdot$1="⋯";var cudarrl$1="⤸";var cudarrr$1="⤵";var cuepr$1="⋞";var cuesc$1="⋟";var cularr$1="↶";var cularrp$1="⤽";var cup$1="∪";var cupbrcap$1="⩈";var cupcap$1="⩆";var cupcup$1="⩊";var cupdot$1="⊍";var cupor$1="⩅";var cups$1="∪︀";var curarr$1="↷";var curarrm$1="⤼";var curlyeqprec$1="⋞";var curlyeqsucc$1="⋟";var curlyvee$1="⋎";var curlywedge$1="⋏";var curre="¤";var curren$2="¤";var curvearrowleft$1="↶";var curvearrowright$1="↷";var cuvee$1="⋎";var cuwed$1="⋏";var cwconint$1="∲";var cwint$1="∱";var cylcty$1="⌭";var dArr$1="⇓";var dHar$1="⥥";var dagger$1="†";var daleth$1="ℸ";var darr$1="↓";var dash$1="‐";var dashv$1="⊣";var dbkarow$1="⤏";var dblac$1="˝";var dcaron$1="ď";var dcy$1="д";var dd$1="ⅆ";var ddagger$1="‡";var ddarr$1="⇊";var ddotseq$1="⩷";var de$1="°";var deg$2="°";var delta$1="δ";var demptyv$1="⦱";var dfisht$1="⥿";var dfr$1="𝔡";var dharl$1="⇃";var dharr$1="⇂";var diam$1="⋄";var diamond$1="⋄";var diamondsuit$1="♦";var diams$1="♦";var die$1="¨";var digamma$1="ϝ";var disin$1="⋲";var div$1="÷";var divid="÷";var divide$2="÷";var divideontimes$1="⋇";var divonx$1="⋇";var djcy$1="ђ";var dlcorn$1="⌞";var dlcrop$1="⌍";var dollar$1="$";var dopf$1="𝕕";var dot$1="˙";var doteq$1="≐";var doteqdot$1="≑";var dotminus$1="∸";var dotplus$1="∔";var dotsquare$1="⊡";var doublebarwedge$1="⌆";var downarrow$1="↓";var downdownarrows$1="⇊";var downharpoonleft$1="⇃";var downharpoonright$1="⇂";var drbkarow$1="⤐";var drcorn$1="⌟";var drcrop$1="⌌";var dscr$1="𝒹";var dscy$1="ѕ";var dsol$1="⧶";var dstrok$1="đ";var dtdot$1="⋱";var dtri$1="▿";var dtrif$1="▾";var duarr$1="⇵";var duhar$1="⥯";var dwangle$1="⦦";var dzcy$1="џ";var dzigrarr$1="⟿";var eDDot$1="⩷";var eDot$1="≑";var eacut="é";var eacute$2="é";var easter$1="⩮";var ecaron$1="ě";var ecir$1="ê";var ecirc$2="ê";var ecolon$1="≕";var ecy$1="э";var edot$1="ė";var ee$2="ⅇ";var efDot$1="≒";var efr$1="𝔢";var eg$1="⪚";var egrav="è";var egrave$2="è";var egs$1="⪖";var egsdot$1="⪘";var el$1="⪙";var elinters$1="⏧";var ell$1="ℓ";var els$1="⪕";var elsdot$1="⪗";var emacr$1="ē";var empty$1="∅";var emptyset$1="∅";var emptyv$1="∅";var emsp13$1=" ";var emsp14$1=" ";var emsp$1=" ";var eng$1="ŋ";var ensp$1=" ";var eogon$1="ę";var eopf$1="𝕖";var epar$1="⋕";var eparsl$1="⧣";var eplus$1="⩱";var epsi$1="ε";var epsilon$1="ε";var epsiv$1="ϵ";var eqcirc$1="≖";var eqcolon$1="≕";var eqsim$1="≂";var eqslantgtr$1="⪖";var eqslantless$1="⪕";var equals$2="=";var equest$1="≟";var equiv$1="≡";var equivDD$1="⩸";var eqvparsl$1="⧥";var erDot$1="≓";var erarr$1="⥱";var escr$1="ℯ";var esdot$1="≐";var esim$1="≂";var eta$1="η";var et$1="ð";var eth$2="ð";var eum="ë";var euml$2="ë";var euro$1="€";var excl$1="!";var exist$1="∃";var expectation$1="ℰ";var exponentiale$1="ⅇ";var fallingdotseq$1="≒";var fcy$1="ф";var female$1="♀";var ffilig$1="ﬃ";var fflig$1="ﬀ";var ffllig$1="ﬄ";var ffr$1="𝔣";var filig$1="ﬁ";var fjlig$1="fj";var flat$1="♭";var fllig$1="ﬂ";var fltns$1="▱";var fnof$1="ƒ";var fopf$1="𝕗";var forall$1="∀";var fork$1="⋔";var forkv$1="⫙";var fpartint$1="⨍";var frac1="¼";var frac12$2="½";var frac13$1="⅓";var frac14$2="¼";var frac15$1="⅕";var frac16$1="⅙";var frac18$1="⅛";var frac23$1="⅔";var frac25$1="⅖";var frac3="¾";var frac34$2="¾";var frac35$1="⅗";var frac38$1="⅜";var frac45$1="⅘";var frac56$1="⅚";var frac58$1="⅝";var frac78$1="⅞";var frasl$1="⁄";var frown$1="⌢";var fscr$1="𝒻";var gE$1="≧";var gEl$1="⪌";var gacute$1="ǵ";var gamma$1="γ";var gammad$1="ϝ";var gap$1="⪆";var gbreve$1="ğ";var gcirc$1="ĝ";var gcy$1="г";var gdot$1="ġ";var ge$2="≥";var gel$1="⋛";var geq$1="≥";var geqq$1="≧";var geqslant$1="⩾";var ges$1="⩾";var gescc$1="⪩";var gesdot$1="⪀";var gesdoto$1="⪂";var gesdotol$1="⪄";var gesl$1="⋛︀";var gesles$1="⪔";var gfr$1="𝔤";var gg$1="≫";var ggg$1="⋙";var gimel$1="ℷ";var gjcy$1="ѓ";var gl$1="≷";var glE$1="⪒";var gla$1="⪥";var glj$1="⪤";var gnE$1="≩";var gnap$1="⪊";var gnapprox$1="⪊";var gne$1="⪈";var gneq$1="⪈";var gneqq$1="≩";var gnsim$1="⋧";var gopf$1="𝕘";var grave$1="`";var gscr$1="ℊ";var gsim$1="≳";var gsime$1="⪎";var gsiml$1="⪐";var g$2=">";var gt$4=">";var gtcc$1="⪧";var gtcir$1="⩺";var gtdot$1="⋗";var gtlPar$1="⦕";var gtquest$1="⩼";var gtrapprox$1="⪆";var gtrarr$1="⥸";var gtrdot$1="⋗";var gtreqless$1="⋛";var gtreqqless$1="⪌";var gtrless$1="≷";var gtrsim$1="≳";var gvertneqq$1="≩︀";var gvnE$1="≩︀";var hArr$1="⇔";var hairsp$1=" ";var half$1="½";var hamilt$1="ℋ";var hardcy$1="ъ";var harr$1="↔";var harrcir$1="⥈";var harrw$1="↭";var hbar$1="ℏ";var hcirc$1="ĥ";var hearts$1="♥";var heartsuit$1="♥";var hellip$1="…";var hercon$1="⊹";var hfr$1="𝔥";var hksearow$1="⤥";var hkswarow$1="⤦";var hoarr$1="⇿";var homtht$1="∻";var hookleftarrow$1="↩";var hookrightarrow$1="↪";var hopf$1="𝕙";var horbar$1="―";var hscr$1="𝒽";var hslash$1="ℏ";var hstrok$1="ħ";var hybull$1="⁃";var hyphen$1="‐";var iacut="í";var iacute$2="í";var ic$1="⁣";var icir="î";var icirc$2="î";var icy$1="и";var iecy$1="е";var iexc="¡";var iexcl$2="¡";var iff$1="⇔";var ifr$1="𝔦";var igrav="ì";var igrave$2="ì";var ii$1="ⅈ";var iiiint$1="⨌";var iiint$1="∭";var iinfin$1="⧜";var iiota$1="℩";var ijlig$1="ĳ";var imacr$1="ī";var image$1="ℑ";var imagline$1="ℐ";var imagpart$1="ℑ";var imath$1="ı";var imof$1="⊷";var imped$1="Ƶ";var incare$1="℅";var infin$1="∞";var infintie$1="⧝";var inodot$1="ı";var int$1="∫";var intcal$1="⊺";var integers$1="ℤ";var intercal$1="⊺";var intlarhk$1="⨗";var intprod$1="⨼";var iocy$1="ё";var iogon$1="į";var iopf$1="𝕚";var iota$1="ι";var iprod$1="⨼";var iques="¿";var iquest$2="¿";var iscr$1="𝒾";var isin$1="∈";var isinE$1="⋹";var isindot$1="⋵";var isins$1="⋴";var isinsv$1="⋳";var isinv$1="∈";var it$2="⁢";var itilde$1="ĩ";var iukcy$1="і";var ium="ï";var iuml$2="ï";var jcirc$1="ĵ";var jcy$1="й";var jfr$1="𝔧";var jmath$1="ȷ";var jopf$1="𝕛";var jscr$1="𝒿";var jsercy$1="ј";var jukcy$1="є";var kappa$1="κ";var kappav$1="ϰ";var kcedil$1="ķ";var kcy$1="к";var kfr$1="𝔨";var kgreen$1="ĸ";var khcy$1="х";var kjcy$1="ќ";var kopf$1="𝕜";var kscr$1="𝓀";var lAarr$1="⇚";var lArr$1="⇐";var lAtail$1="⤛";var lBarr$1="⤎";var lE$1="≦";var lEg$1="⪋";var lHar$1="⥢";var lacute$1="ĺ";var laemptyv$1="⦴";var lagran$1="ℒ";var lambda$1="λ";var lang$1="⟨";var langd$1="⦑";var langle$1="⟨";var lap$1="⪅";var laqu="«";var laquo$2="«";var larr$1="←";var larrb$1="⇤";var larrbfs$1="⤟";var larrfs$1="⤝";var larrhk$1="↩";var larrlp$1="↫";var larrpl$1="⤹";var larrsim$1="⥳";var larrtl$1="↢";var lat$1="⪫";var latail$1="⤙";var late$1="⪭";var lates$1="⪭︀";var lbarr$1="⤌";var lbbrk$1="❲";var lbrace$1="{";var lbrack$1="[";var lbrke$1="⦋";var lbrksld$1="⦏";var lbrkslu$1="⦍";var lcaron$1="ľ";var lcedil$1="ļ";var lceil$1="⌈";var lcub$1="{";var lcy$1="л";var ldca$1="⤶";var ldquo$1="“";var ldquor$1="„";var ldrdhar$1="⥧";var ldrushar$1="⥋";var ldsh$1="↲";var le$2="≤";var leftarrow$1="←";var leftarrowtail$1="↢";var leftharpoondown$1="↽";var leftharpoonup$1="↼";var leftleftarrows$1="⇇";var leftrightarrow$1="↔";var leftrightarrows$1="⇆";var leftrightharpoons$1="⇋";var leftrightsquigarrow$1="↭";var leftthreetimes$1="⋋";var leg$1="⋚";var leq$1="≤";var leqq$1="≦";var leqslant$1="⩽";var les$1="⩽";var lescc$1="⪨";var lesdot$1="⩿";var lesdoto$1="⪁";var lesdotor$1="⪃";var lesg$1="⋚︀";var lesges$1="⪓";var lessapprox$1="⪅";var lessdot$1="⋖";var lesseqgtr$1="⋚";var lesseqqgtr$1="⪋";var lessgtr$1="≶";var lesssim$1="≲";var lfisht$1="⥼";var lfloor$1="⌊";var lfr$1="𝔩";var lg$1="≶";var lgE$1="⪑";var lhard$1="↽";var lharu$1="↼";var lharul$1="⥪";var lhblk$1="▄";var ljcy$1="љ";var ll$1="≪";var llarr$1="⇇";var llcorner$1="⌞";var llhard$1="⥫";var lltri$1="◺";var lmidot$1="ŀ";var lmoust$1="⎰";var lmoustache$1="⎰";var lnE$1="≨";var lnap$1="⪉";var lnapprox$1="⪉";var lne$1="⪇";var lneq$1="⪇";var lneqq$1="≨";var lnsim$1="⋦";var loang$1="⟬";var loarr$1="⇽";var lobrk$1="⟦";var longleftarrow$1="⟵";var longleftrightarrow$1="⟷";var longmapsto$1="⟼";var longrightarrow$1="⟶";var looparrowleft$1="↫";var looparrowright$1="↬";var lopar$1="⦅";var lopf$1="𝕝";var loplus$1="⨭";var lotimes$1="⨴";var lowast$1="∗";var lowbar$1="_";var loz$1="◊";var lozenge$1="◊";var lozf$1="⧫";var lpar$1="(";var lparlt$1="⦓";var lrarr$1="⇆";var lrcorner$1="⌟";var lrhar$1="⇋";var lrhard$1="⥭";var lrm$1="‎";var lrtri$1="⊿";var lsaquo$1="‹";var lscr$1="𝓁";var lsh$1="↰";var lsim$1="≲";var lsime$1="⪍";var lsimg$1="⪏";var lsqb$1="[";var lsquo$1="‘";var lsquor$1="‚";var lstrok$1="ł";var l$2="<";var lt$4="<";var ltcc$1="⪦";var ltcir$1="⩹";var ltdot$1="⋖";var lthree$1="⋋";var ltimes$1="⋉";var ltlarr$1="⥶";var ltquest$1="⩻";var ltrPar$1="⦖";var ltri$1="◃";var ltrie$1="⊴";var ltrif$1="◂";var lurdshar$1="⥊";var luruhar$1="⥦";var lvertneqq$1="≨︀";var lvnE$1="≨︀";var mDDot$1="∺";var mac="¯";var macr$2="¯";var male$1="♂";var malt$1="✠";var maltese$1="✠";var map$3="↦";var mapsto$1="↦";var mapstodown$1="↧";var mapstoleft$1="↤";var mapstoup$1="↥";var marker$1="▮";var mcomma$1="⨩";var mcy$1="м";var mdash$1="—";var measuredangle$1="∡";var mfr$1="𝔪";var mho$1="℧";var micr="µ";var micro$2="µ";var mid$1="∣";var midast$1="*";var midcir$1="⫰";var middo="·";var middot$2="·";var minus$1="−";var minusb$1="⊟";var minusd$1="∸";var minusdu$1="⨪";var mlcp$1="⫛";var mldr$1="…";var mnplus$1="∓";var models$1="⊧";var mopf$1="𝕞";var mp$1="∓";var mscr$1="𝓂";var mstpos$1="∾";var mu$1="μ";var multimap$1="⊸";var mumap$1="⊸";var nGg$1="⋙̸";var nGt$1="≫⃒";var nGtv$1="≫̸";var nLeftarrow$1="⇍";var nLeftrightarrow$1="⇎";var nLl$1="⋘̸";var nLt$1="≪⃒";var nLtv$1="≪̸";var nRightarrow$1="⇏";var nVDash$1="⊯";var nVdash$1="⊮";var nabla$1="∇";var nacute$1="ń";var nang$1="∠⃒";var nap$1="≉";var napE$1="⩰̸";var napid$1="≋̸";var napos$1="ŉ";var napprox$1="≉";var natur$1="♮";var natural$1="♮";var naturals$1="ℕ";var nbs=" ";var nbsp$2=" ";var nbump$1="≎̸";var nbumpe$1="≏̸";var ncap$1="⩃";var ncaron$1="ň";var ncedil$1="ņ";var ncong$1="≇";var ncongdot$1="⩭̸";var ncup$1="⩂";var ncy$1="н";var ndash$1="–";var ne$2="≠";var neArr$1="⇗";var nearhk$1="⤤";var nearr$1="↗";var nearrow$1="↗";var nedot$1="≐̸";var nequiv$1="≢";var nesear$1="⤨";var nesim$1="≂̸";var nexist$1="∄";var nexists$1="∄";var nfr$1="𝔫";var ngE$1="≧̸";var nge$1="≱";var ngeq$1="≱";var ngeqq$1="≧̸";var ngeqslant$1="⩾̸";var nges$1="⩾̸";var ngsim$1="≵";var ngt$1="≯";var ngtr$1="≯";var nhArr$1="⇎";var nharr$1="↮";var nhpar$1="⫲";var ni$1="∋";var nis$1="⋼";var nisd$1="⋺";var niv$1="∋";var njcy$1="њ";var nlArr$1="⇍";var nlE$1="≦̸";var nlarr$1="↚";var nldr$1="‥";var nle$1="≰";var nleftarrow$1="↚";var nleftrightarrow$1="↮";var nleq$1="≰";var nleqq$1="≦̸";var nleqslant$1="⩽̸";var nles$1="⩽̸";var nless$1="≮";var nlsim$1="≴";var nlt$1="≮";var nltri$1="⋪";var nltrie$1="⋬";var nmid$1="∤";var nopf$1="𝕟";var no="¬";var not$2="¬";var notin$1="∉";var notinE$1="⋹̸";var notindot$1="⋵̸";var notinva$1="∉";var notinvb$1="⋷";var notinvc$1="⋶";var notni$1="∌";var notniva$1="∌";var notnivb$1="⋾";var notnivc$1="⋽";var npar$1="∦";var nparallel$1="∦";var nparsl$1="⫽⃥";var npart$1="∂̸";var npolint$1="⨔";var npr$1="⊀";var nprcue$1="⋠";var npre$1="⪯̸";var nprec$1="⊀";var npreceq$1="⪯̸";var nrArr$1="⇏";var nrarr$1="↛";var nrarrc$1="⤳̸";var nrarrw$1="↝̸";var nrightarrow$1="↛";var nrtri$1="⋫";var nrtrie$1="⋭";var nsc$1="⊁";var nsccue$1="⋡";var nsce$1="⪰̸";var nscr$1="𝓃";var nshortmid$1="∤";var nshortparallel$1="∦";var nsim$1="≁";var nsime$1="≄";var nsimeq$1="≄";var nsmid$1="∤";var nspar$1="∦";var nsqsube$1="⋢";var nsqsupe$1="⋣";var nsub$1="⊄";var nsubE$1="⫅̸";var nsube$1="⊈";var nsubset$1="⊂⃒";var nsubseteq$1="⊈";var nsubseteqq$1="⫅̸";var nsucc$1="⊁";var nsucceq$1="⪰̸";var nsup$1="⊅";var nsupE$1="⫆̸";var nsupe$1="⊉";var nsupset$1="⊃⃒";var nsupseteq$1="⊉";var nsupseteqq$1="⫆̸";var ntgl$1="≹";var ntild="ñ";var ntilde$2="ñ";var ntlg$1="≸";var ntriangleleft$1="⋪";var ntrianglelefteq$1="⋬";var ntriangleright$1="⋫";var ntrianglerighteq$1="⋭";var nu$1="ν";var num$1="#";var numero$1="№";var numsp$1=" ";var nvDash$1="⊭";var nvHarr$1="⤄";var nvap$1="≍⃒";var nvdash$1="⊬";var nvge$1="≥⃒";var nvgt$1=">⃒";var nvinfin$1="⧞";var nvlArr$1="⤂";var nvle$1="≤⃒";var nvlt$1="<⃒";var nvltrie$1="⊴⃒";var nvrArr$1="⤃";var nvrtrie$1="⊵⃒";var nvsim$1="∼⃒";var nwArr$1="⇖";var nwarhk$1="⤣";var nwarr$1="↖";var nwarrow$1="↖";var nwnear$1="⤧";var oS$1="Ⓢ";var oacut="ó";var oacute$2="ó";var oast$1="⊛";var ocir$1="ô";var ocirc$2="ô";var ocy$1="о";var odash$1="⊝";var odblac$1="ő";var odiv$1="⨸";var odot$1="⊙";var odsold$1="⦼";var oelig$1="œ";var ofcir$1="⦿";var ofr$1="𝔬";var ogon$1="˛";var ograv="ò";var ograve$2="ò";var ogt$1="⧁";var ohbar$1="⦵";var ohm$1="Ω";var oint$1="∮";var olarr$1="↺";var olcir$1="⦾";var olcross$1="⦻";var oline$1="‾";var olt$1="⧀";var omacr$1="ō";var omega$1="ω";var omicron$1="ο";var omid$1="⦶";var ominus$1="⊖";var oopf$1="𝕠";var opar$1="⦷";var operp$1="⦹";var oplus$1="⊕";var or$1="∨";var orarr$1="↻";var ord$1="º";var order$1="ℴ";var orderof$1="ℴ";var ordf$2="ª";var ordm$2="º";var origof$1="⊶";var oror$1="⩖";var orslope$1="⩗";var orv$1="⩛";var oscr$1="ℴ";var oslas="ø";var oslash$2="ø";var osol$1="⊘";var otild="õ";var otilde$2="õ";var otimes$1="⊗";var otimesas$1="⨶";var oum="ö";var ouml$2="ö";var ovbar$1="⌽";var par$1="¶";var para$2="¶";var parallel$1="∥";var parsim$1="⫳";var parsl$1="⫽";var part$1="∂";var pcy$1="п";var percnt$1="%";var period$1=".";var permil$1="‰";var perp$1="⊥";var pertenk$1="‱";var pfr$1="𝔭";var phi$1="φ";var phiv$1="ϕ";var phmmat$1="ℳ";var phone$1="☎";var pi$1="π";var pitchfork$1="⋔";var piv$1="ϖ";var planck$1="ℏ";var planckh$1="ℎ";var plankv$1="ℏ";var plus$1="+";var plusacir$1="⨣";var plusb$1="⊞";var pluscir$1="⨢";var plusdo$1="∔";var plusdu$1="⨥";var pluse$1="⩲";var plusm="±";var plusmn$2="±";var plussim$1="⨦";var plustwo$1="⨧";var pm$1="±";var pointint$1="⨕";var popf$1="𝕡";var poun="£";var pound$2="£";var pr$1="≺";var prE$1="⪳";var prap$1="⪷";var prcue$1="≼";var pre$1="⪯";var prec$1="≺";var precapprox$1="⪷";var preccurlyeq$1="≼";var preceq$1="⪯";var precnapprox$1="⪹";var precneqq$1="⪵";var precnsim$1="⋨";var precsim$1="≾";var prime$1="′";var primes$1="ℙ";var prnE$1="⪵";var prnap$1="⪹";var prnsim$1="⋨";var prod$1="∏";var profalar$1="⌮";var profline$1="⌒";var profsurf$1="⌓";var prop$2="∝";var propto$1="∝";var prsim$1="≾";var prurel$1="⊰";var pscr$1="𝓅";var psi$1="ψ";var puncsp$1=" ";var qfr$1="𝔮";var qint$1="⨌";var qopf$1="𝕢";var qprime$1="⁗";var qscr$1="𝓆";var quaternions$1="ℍ";var quatint$1="⨖";var quest$1="?";var questeq$1="≟";var quo="\"";var quot$3="\"";var rAarr$1="⇛";var rArr$1="⇒";var rAtail$1="⤜";var rBarr$1="⤏";var rHar$1="⥤";var race$1="∽̱";var racute$1="ŕ";var radic$1="√";var raemptyv$1="⦳";var rang$1="⟩";var rangd$1="⦒";var range$1="⦥";var rangle$1="⟩";var raqu="»";var raquo$2="»";var rarr$1="→";var rarrap$1="⥵";var rarrb$1="⇥";var rarrbfs$1="⤠";var rarrc$1="⤳";var rarrfs$1="⤞";var rarrhk$1="↪";var rarrlp$1="↬";var rarrpl$1="⥅";var rarrsim$1="⥴";var rarrtl$1="↣";var rarrw$1="↝";var ratail$1="⤚";var ratio$1="∶";var rationals$1="ℚ";var rbarr$1="⤍";var rbbrk$1="❳";var rbrace$1="}";var rbrack$1="]";var rbrke$1="⦌";var rbrksld$1="⦎";var rbrkslu$1="⦐";var rcaron$1="ř";var rcedil$1="ŗ";var rceil$1="⌉";var rcub$1="}";var rcy$1="р";var rdca$1="⤷";var rdldhar$1="⥩";var rdquo$1="”";var rdquor$1="”";var rdsh$1="↳";var real$1="ℜ";var realine$1="ℛ";var realpart$1="ℜ";var reals$1="ℝ";var rect$1="▭";var re$1="®";var reg$2="®";var rfisht$1="⥽";var rfloor$1="⌋";var rfr$1="𝔯";var rhard$1="⇁";var rharu$1="⇀";var rharul$1="⥬";var rho$1="ρ";var rhov$1="ϱ";var rightarrow$1="→";var rightarrowtail$1="↣";var rightharpoondown$1="⇁";var rightharpoonup$1="⇀";var rightleftarrows$1="⇄";var rightleftharpoons$1="⇌";var rightrightarrows$1="⇉";var rightsquigarrow$1="↝";var rightthreetimes$1="⋌";var ring$1="˚";var risingdotseq$1="≓";var rlarr$1="⇄";var rlhar$1="⇌";var rlm$1="‏";var rmoust$1="⎱";var rmoustache$1="⎱";var rnmid$1="⫮";var roang$1="⟭";var roarr$1="⇾";var robrk$1="⟧";var ropar$1="⦆";var ropf$1="𝕣";var roplus$1="⨮";var rotimes$1="⨵";var rpar$1=")";var rpargt$1="⦔";var rppolint$1="⨒";var rrarr$1="⇉";var rsaquo$1="›";var rscr$1="𝓇";var rsh$1="↱";var rsqb$1="]";var rsquo$1="’";var rsquor$1="’";var rthree$1="⋌";var rtimes$1="⋊";var rtri$1="▹";var rtrie$1="⊵";var rtrif$1="▸";var rtriltri$1="⧎";var ruluhar$1="⥨";var rx$1="℞";var sacute$1="ś";var sbquo$1="‚";var sc$1="≻";var scE$1="⪴";var scap$1="⪸";var scaron$1="š";var sccue$1="≽";var sce$1="⪰";var scedil$1="ş";var scirc$1="ŝ";var scnE$1="⪶";var scnap$1="⪺";var scnsim$1="⋩";var scpolint$1="⨓";var scsim$1="≿";var scy$1="с";var sdot$1="⋅";var sdotb$1="⊡";var sdote$1="⩦";var seArr$1="⇘";var searhk$1="⤥";var searr$1="↘";var searrow$1="↘";var sec="§";var sect$2="§";var semi$1=";";var seswar$1="⤩";var setminus$1="∖";var setmn$1="∖";var sext$1="✶";var sfr$1="𝔰";var sfrown$1="⌢";var sharp$1="♯";var shchcy$1="щ";var shcy$1="ш";var shortmid$1="∣";var shortparallel$1="∥";var sh="­";var shy$2="­";var sigma$1="σ";var sigmaf$1="ς";var sigmav$1="ς";var sim$1="∼";var simdot$1="⩪";var sime$1="≃";var simeq$1="≃";var simg$1="⪞";var simgE$1="⪠";var siml$1="⪝";var simlE$1="⪟";var simne$1="≆";var simplus$1="⨤";var simrarr$1="⥲";var slarr$1="←";var smallsetminus$1="∖";var smashp$1="⨳";var smeparsl$1="⧤";var smid$1="∣";var smile$1="⌣";var smt$1="⪪";var smte$1="⪬";var smtes$1="⪬︀";var softcy$1="ь";var sol$1="/";var solb$1="⧄";var solbar$1="⌿";var sopf$1="𝕤";var spades$1="♠";var spadesuit$1="♠";var spar$1="∥";var sqcap$1="⊓";var sqcaps$1="⊓︀";var sqcup$1="⊔";var sqcups$1="⊔︀";var sqsub$1="⊏";var sqsube$1="⊑";var sqsubset$1="⊏";var sqsubseteq$1="⊑";var sqsup$1="⊐";var sqsupe$1="⊒";var sqsupset$1="⊐";var sqsupseteq$1="⊒";var squ$1="□";var square$1="□";var squarf$1="▪";var squf$1="▪";var srarr$1="→";var sscr$1="𝓈";var ssetmn$1="∖";var ssmile$1="⌣";var sstarf$1="⋆";var star$1="☆";var starf$1="★";var straightepsilon$1="ϵ";var straightphi$1="ϕ";var strns$1="¯";var sub$1="⊂";var subE$1="⫅";var subdot$1="⪽";var sube$1="⊆";var subedot$1="⫃";var submult$1="⫁";var subnE$1="⫋";var subne$1="⊊";var subplus$1="⪿";var subrarr$1="⥹";var subset$1="⊂";var subseteq$1="⊆";var subseteqq$1="⫅";var subsetneq$1="⊊";var subsetneqq$1="⫋";var subsim$1="⫇";var subsub$1="⫕";var subsup$1="⫓";var succ$1="≻";var succapprox$1="⪸";var succcurlyeq$1="≽";var succeq$1="⪰";var succnapprox$1="⪺";var succneqq$1="⪶";var succnsim$1="⋩";var succsim$1="≿";var sum$1="∑";var sung$1="♪";var sup$1="⊃";var sup1$2="¹";var sup2$2="²";var sup3$2="³";var supE$1="⫆";var supdot$1="⪾";var supdsub$1="⫘";var supe$1="⊇";var supedot$1="⫄";var suphsol$1="⟉";var suphsub$1="⫗";var suplarr$1="⥻";var supmult$1="⫂";var supnE$1="⫌";var supne$1="⊋";var supplus$1="⫀";var supset$1="⊃";var supseteq$1="⊇";var supseteqq$1="⫆";var supsetneq$1="⊋";var supsetneqq$1="⫌";var supsim$1="⫈";var supsub$1="⫔";var supsup$1="⫖";var swArr$1="⇙";var swarhk$1="⤦";var swarr$1="↙";var swarrow$1="↙";var swnwar$1="⤪";var szli="ß";var szlig$2="ß";var target$1="⌖";var tau$1="τ";var tbrk$1="⎴";var tcaron$1="ť";var tcedil$1="ţ";var tcy$1="т";var tdot$1="⃛";var telrec$1="⌕";var tfr$1="𝔱";var there4$1="∴";var therefore$1="∴";var theta$1="θ";var thetasym$1="ϑ";var thetav$1="ϑ";var thickapprox$1="≈";var thicksim$1="∼";var thinsp$1=" ";var thkap$1="≈";var thksim$1="∼";var thor="þ";var thorn$2="þ";var tilde$1="˜";var time$1="×";var times$2="×";var timesb$1="⊠";var timesbar$1="⨱";var timesd$1="⨰";var tint$1="∭";var toea$1="⤨";var top$1="⊤";var topbot$1="⌶";var topcir$1="⫱";var topf$1="𝕥";var topfork$1="⫚";var tosa$1="⤩";var tprime$1="‴";var trade$1="™";var triangle$1="▵";var triangledown$1="▿";var triangleleft$1="◃";var trianglelefteq$1="⊴";var triangleq$1="≜";var triangleright$1="▹";var trianglerighteq$1="⊵";var tridot$1="◬";var trie$1="≜";var triminus$1="⨺";var triplus$1="⨹";var trisb$1="⧍";var tritime$1="⨻";var trpezium$1="⏢";var tscr$1="𝓉";var tscy$1="ц";var tshcy$1="ћ";var tstrok$1="ŧ";var twixt$1="≬";var twoheadleftarrow$1="↞";var twoheadrightarrow$1="↠";var uArr$1="⇑";var uHar$1="⥣";var uacut="ú";var uacute$2="ú";var uarr$1="↑";var ubrcy$1="ў";var ubreve$1="ŭ";var ucir="û";var ucirc$2="û";var ucy$1="у";var udarr$1="⇅";var udblac$1="ű";var udhar$1="⥮";var ufisht$1="⥾";var ufr$1="𝔲";var ugrav="ù";var ugrave$2="ù";var uharl$1="↿";var uharr$1="↾";var uhblk$1="▀";var ulcorn$1="⌜";var ulcorner$1="⌜";var ulcrop$1="⌏";var ultri$1="◸";var umacr$1="ū";var um="¨";var uml$2="¨";var uogon$1="ų";var uopf$1="𝕦";var uparrow$1="↑";var updownarrow$1="↕";var upharpoonleft$1="↿";var upharpoonright$1="↾";var uplus$1="⊎";var upsi$1="υ";var upsih$1="ϒ";var upsilon$1="υ";var upuparrows$1="⇈";var urcorn$1="⌝";var urcorner$1="⌝";var urcrop$1="⌎";var uring$1="ů";var urtri$1="◹";var uscr$1="𝓊";var utdot$1="⋰";var utilde$1="ũ";var utri$1="▵";var utrif$1="▴";var uuarr$1="⇈";var uum="ü";var uuml$2="ü";var uwangle$1="⦧";var vArr$1="⇕";var vBar$1="⫨";var vBarv$1="⫩";var vDash$1="⊨";var vangrt$1="⦜";var varepsilon$1="ϵ";var varkappa$1="ϰ";var varnothing$1="∅";var varphi$1="ϕ";var varpi$1="ϖ";var varpropto$1="∝";var varr$1="↕";var varrho$1="ϱ";var varsigma$1="ς";var varsubsetneq$1="⊊︀";var varsubsetneqq$1="⫋︀";var varsupsetneq$1="⊋︀";var varsupsetneqq$1="⫌︀";var vartheta$1="ϑ";var vartriangleleft$1="⊲";var vartriangleright$1="⊳";var vcy$1="в";var vdash$1="⊢";var vee$1="∨";var veebar$1="⊻";var veeeq$1="≚";var vellip$1="⋮";var verbar$1="|";var vert$1="|";var vfr$1="𝔳";var vltri$1="⊲";var vnsub$1="⊂⃒";var vnsup$1="⊃⃒";var vopf$1="𝕧";var vprop$1="∝";var vrtri$1="⊳";var vscr$1="𝓋";var vsubnE$1="⫋︀";var vsubne$1="⊊︀";var vsupnE$1="⫌︀";var vsupne$1="⊋︀";var vzigzag$1="⦚";var wcirc$1="ŵ";var wedbar$1="⩟";var wedge$1="∧";var wedgeq$1="≙";var weierp$1="℘";var wfr$1="𝔴";var wopf$1="𝕨";var wp$1="℘";var wr$1="≀";var wreath$1="≀";var wscr$1="𝓌";var xcap$1="⋂";var xcirc$1="◯";var xcup$1="⋃";var xdtri$1="▽";var xfr$1="𝔵";var xhArr$1="⟺";var xharr$1="⟷";var xi$1="ξ";var xlArr$1="⟸";var xlarr$1="⟵";var xmap$1="⟼";var xnis$1="⋻";var xodot$1="⨀";var xopf$1="𝕩";var xoplus$1="⨁";var xotime$1="⨂";var xrArr$1="⟹";var xrarr$1="⟶";var xscr$1="𝓍";var xsqcup$1="⨆";var xuplus$1="⨄";var xutri$1="△";var xvee$1="⋁";var xwedge$1="⋀";var yacut="ý";var yacute$2="ý";var yacy$1="я";var ycirc$1="ŷ";var ycy$1="ы";var ye$1="¥";var yen$2="¥";var yfr$1="𝔶";var yicy$1="ї";var yopf$1="𝕪";var yscr$1="𝓎";var yucy$1="ю";var yum="ÿ";var yuml$2="ÿ";var zacute$1="ź";var zcaron$1="ž";var zcy$1="з";var zdot$1="ż";var zeetrf$1="ℨ";var zeta$1="ζ";var zfr$1="𝔷";var zhcy$1="ж";var zigrarr$1="⇝";var zopf$1="𝕫";var zscr$1="𝓏";var zwj$1="‍";var zwnj$1="‌";var index$2 = {AEli:AEli,AElig:AElig$2,AM:AM,AMP:AMP$2,Aacut:Aacut,Aacute:Aacute$2,Abreve:Abreve$1,Acir:Acir,Acirc:Acirc$2,Acy:Acy$1,Afr:Afr$1,Agrav:Agrav,Agrave:Agrave$2,Alpha:Alpha$1,Amacr:Amacr$1,And:And$1,Aogon:Aogon$1,Aopf:Aopf$1,ApplyFunction:ApplyFunction$1,Arin:Arin,Aring:Aring$2,Ascr:Ascr$1,Assign:Assign$1,Atild:Atild,Atilde:Atilde$2,Aum:Aum,Auml:Auml$2,Backslash:Backslash$1,Barv:Barv$1,Barwed:Barwed$1,Bcy:Bcy$1,Because:Because$1,Bernoullis:Bernoullis$1,Beta:Beta$1,Bfr:Bfr$1,Bopf:Bopf$1,Breve:Breve$1,Bscr:Bscr$1,Bumpeq:Bumpeq$1,CHcy:CHcy$1,COP:COP,COPY:COPY$2,Cacute:Cacute$1,Cap:Cap$1,CapitalDifferentialD:CapitalDifferentialD$1,Cayleys:Cayleys$1,Ccaron:Ccaron$1,Ccedi:Ccedi,Ccedil:Ccedil$2,Ccirc:Ccirc$1,Cconint:Cconint$1,Cdot:Cdot$1,Cedilla:Cedilla$1,CenterDot:CenterDot$1,Cfr:Cfr$1,Chi:Chi$1,CircleDot:CircleDot$1,CircleMinus:CircleMinus$1,CirclePlus:CirclePlus$1,CircleTimes:CircleTimes$1,ClockwiseContourIntegral:ClockwiseContourIntegral$1,CloseCurlyDoubleQuote:CloseCurlyDoubleQuote$1,CloseCurlyQuote:CloseCurlyQuote$1,Colon:Colon$1,Colone:Colone$1,Congruent:Congruent$1,Conint:Conint$1,ContourIntegral:ContourIntegral$1,Copf:Copf$1,Coproduct:Coproduct$1,CounterClockwiseContourIntegral:CounterClockwiseContourIntegral$1,Cross:Cross$1,Cscr:Cscr$1,Cup:Cup$1,CupCap:CupCap$1,DD:DD$1,DDotrahd:DDotrahd$1,DJcy:DJcy$1,DScy:DScy$1,DZcy:DZcy$1,Dagger:Dagger$1,Darr:Darr$1,Dashv:Dashv$1,Dcaron:Dcaron$1,Dcy:Dcy$1,Del:Del$1,Delta:Delta$1,Dfr:Dfr$1,DiacriticalAcute:DiacriticalAcute$1,DiacriticalDot:DiacriticalDot$1,DiacriticalDoubleAcute:DiacriticalDoubleAcute$1,DiacriticalGrave:DiacriticalGrave$1,DiacriticalTilde:DiacriticalTilde$1,Diamond:Diamond$1,DifferentialD:DifferentialD$1,Dopf:Dopf$1,Dot:Dot$1,DotDot:DotDot$1,DotEqual:DotEqual$1,DoubleContourIntegral:DoubleContourIntegral$1,DoubleDot:DoubleDot$1,DoubleDownArrow:DoubleDownArrow$1,DoubleLeftArrow:DoubleLeftArrow$1,DoubleLeftRightArrow:DoubleLeftRightArrow$1,DoubleLeftTee:DoubleLeftTee$1,DoubleLongLeftArrow:DoubleLongLeftArrow$1,DoubleLongLeftRightArrow:DoubleLongLeftRightArrow$1,DoubleLongRightArrow:DoubleLongRightArrow$1,DoubleRightArrow:DoubleRightArrow$1,DoubleRightTee:DoubleRightTee$1,DoubleUpArrow:DoubleUpArrow$1,DoubleUpDownArrow:DoubleUpDownArrow$1,DoubleVerticalBar:DoubleVerticalBar$1,DownArrow:DownArrow$1,DownArrowBar:DownArrowBar$1,DownArrowUpArrow:DownArrowUpArrow$1,DownBreve:DownBreve$1,DownLeftRightVector:DownLeftRightVector$1,DownLeftTeeVector:DownLeftTeeVector$1,DownLeftVector:DownLeftVector$1,DownLeftVectorBar:DownLeftVectorBar$1,DownRightTeeVector:DownRightTeeVector$1,DownRightVector:DownRightVector$1,DownRightVectorBar:DownRightVectorBar$1,DownTee:DownTee$1,DownTeeArrow:DownTeeArrow$1,Downarrow:Downarrow$1,Dscr:Dscr$1,Dstrok:Dstrok$1,ENG:ENG$1,ET:ET,ETH:ETH$2,Eacut:Eacut,Eacute:Eacute$2,Ecaron:Ecaron$1,Ecir:Ecir,Ecirc:Ecirc$2,Ecy:Ecy$1,Edot:Edot$1,Efr:Efr$1,Egrav:Egrav,Egrave:Egrave$2,Element:Element$4,Emacr:Emacr$1,EmptySmallSquare:EmptySmallSquare$1,EmptyVerySmallSquare:EmptyVerySmallSquare$1,Eogon:Eogon$1,Eopf:Eopf$1,Epsilon:Epsilon$1,Equal:Equal$1,EqualTilde:EqualTilde$1,Equilibrium:Equilibrium$1,Escr:Escr$1,Esim:Esim$1,Eta:Eta$1,Eum:Eum,Euml:Euml$2,Exists:Exists$1,ExponentialE:ExponentialE$1,Fcy:Fcy$1,Ffr:Ffr$1,FilledSmallSquare:FilledSmallSquare$1,FilledVerySmallSquare:FilledVerySmallSquare$1,Fopf:Fopf$1,ForAll:ForAll$1,Fouriertrf:Fouriertrf$1,Fscr:Fscr$1,GJcy:GJcy$1,G:G$1,GT:GT$2,Gamma:Gamma$1,Gammad:Gammad$1,Gbreve:Gbreve$1,Gcedil:Gcedil$1,Gcirc:Gcirc$1,Gcy:Gcy$1,Gdot:Gdot$1,Gfr:Gfr$1,Gg:Gg$1,Gopf:Gopf$1,GreaterEqual:GreaterEqual$1,GreaterEqualLess:GreaterEqualLess$1,GreaterFullEqual:GreaterFullEqual$1,GreaterGreater:GreaterGreater$1,GreaterLess:GreaterLess$1,GreaterSlantEqual:GreaterSlantEqual$1,GreaterTilde:GreaterTilde$1,Gscr:Gscr$1,Gt:Gt$2,HARDcy:HARDcy$1,Hacek:Hacek$1,Hat:Hat$1,Hcirc:Hcirc$1,Hfr:Hfr$1,HilbertSpace:HilbertSpace$1,Hopf:Hopf$1,HorizontalLine:HorizontalLine$1,Hscr:Hscr$1,Hstrok:Hstrok$1,HumpDownHump:HumpDownHump$1,HumpEqual:HumpEqual$1,IEcy:IEcy$1,IJlig:IJlig$1,IOcy:IOcy$1,Iacut:Iacut,Iacute:Iacute$2,Icir:Icir,Icirc:Icirc$2,Icy:Icy$1,Idot:Idot$1,Ifr:Ifr$1,Igrav:Igrav,Igrave:Igrave$2,Im:Im$1,Imacr:Imacr$1,ImaginaryI:ImaginaryI$1,Implies:Implies$1,Int:Int$1,Integral:Integral$1,Intersection:Intersection$1,InvisibleComma:InvisibleComma$1,InvisibleTimes:InvisibleTimes$1,Iogon:Iogon$1,Iopf:Iopf$1,Iota:Iota$1,Iscr:Iscr$1,Itilde:Itilde$1,Iukcy:Iukcy$1,Ium:Ium,Iuml:Iuml$2,Jcirc:Jcirc$1,Jcy:Jcy$1,Jfr:Jfr$1,Jopf:Jopf$1,Jscr:Jscr$1,Jsercy:Jsercy$1,Jukcy:Jukcy$1,KHcy:KHcy$1,KJcy:KJcy$1,Kappa:Kappa$1,Kcedil:Kcedil$1,Kcy:Kcy$1,Kfr:Kfr$1,Kopf:Kopf$1,Kscr:Kscr$1,LJcy:LJcy$1,L:L$1,LT:LT$2,Lacute:Lacute$1,Lambda:Lambda$1,Lang:Lang$1,Laplacetrf:Laplacetrf$1,Larr:Larr$1,Lcaron:Lcaron$1,Lcedil:Lcedil$1,Lcy:Lcy$1,LeftAngleBracket:LeftAngleBracket$1,LeftArrow:LeftArrow$1,LeftArrowBar:LeftArrowBar$1,LeftArrowRightArrow:LeftArrowRightArrow$1,LeftCeiling:LeftCeiling$1,LeftDoubleBracket:LeftDoubleBracket$1,LeftDownTeeVector:LeftDownTeeVector$1,LeftDownVector:LeftDownVector$1,LeftDownVectorBar:LeftDownVectorBar$1,LeftFloor:LeftFloor$1,LeftRightArrow:LeftRightArrow$1,LeftRightVector:LeftRightVector$1,LeftTee:LeftTee$1,LeftTeeArrow:LeftTeeArrow$1,LeftTeeVector:LeftTeeVector$1,LeftTriangle:LeftTriangle$1,LeftTriangleBar:LeftTriangleBar$1,LeftTriangleEqual:LeftTriangleEqual$1,LeftUpDownVector:LeftUpDownVector$1,LeftUpTeeVector:LeftUpTeeVector$1,LeftUpVector:LeftUpVector$1,LeftUpVectorBar:LeftUpVectorBar$1,LeftVector:LeftVector$1,LeftVectorBar:LeftVectorBar$1,Leftarrow:Leftarrow$1,Leftrightarrow:Leftrightarrow$1,LessEqualGreater:LessEqualGreater$1,LessFullEqual:LessFullEqual$1,LessGreater:LessGreater$1,LessLess:LessLess$1,LessSlantEqual:LessSlantEqual$1,LessTilde:LessTilde$1,Lfr:Lfr$1,Ll:Ll$1,Lleftarrow:Lleftarrow$1,Lmidot:Lmidot$1,LongLeftArrow:LongLeftArrow$1,LongLeftRightArrow:LongLeftRightArrow$1,LongRightArrow:LongRightArrow$1,Longleftarrow:Longleftarrow$1,Longleftrightarrow:Longleftrightarrow$1,Longrightarrow:Longrightarrow$1,Lopf:Lopf$1,LowerLeftArrow:LowerLeftArrow$1,LowerRightArrow:LowerRightArrow$1,Lscr:Lscr$1,Lsh:Lsh$1,Lstrok:Lstrok$1,Lt:Lt$2,"Map":"⤅",Mcy:Mcy$1,MediumSpace:MediumSpace$1,Mellintrf:Mellintrf$1,Mfr:Mfr$1,MinusPlus:MinusPlus$1,Mopf:Mopf$1,Mscr:Mscr$1,Mu:Mu$1,NJcy:NJcy$1,Nacute:Nacute$1,Ncaron:Ncaron$1,Ncedil:Ncedil$1,Ncy:Ncy$1,NegativeMediumSpace:NegativeMediumSpace$1,NegativeThickSpace:NegativeThickSpace$1,NegativeThinSpace:NegativeThinSpace$1,NegativeVeryThinSpace:NegativeVeryThinSpace$1,NestedGreaterGreater:NestedGreaterGreater$1,NestedLessLess:NestedLessLess$1,NewLine:NewLine$1,Nfr:Nfr$1,NoBreak:NoBreak$1,NonBreakingSpace:NonBreakingSpace$1,Nopf:Nopf$1,Not:Not$1,NotCongruent:NotCongruent$1,NotCupCap:NotCupCap$1,NotDoubleVerticalBar:NotDoubleVerticalBar$1,NotElement:NotElement$1,NotEqual:NotEqual$1,NotEqualTilde:NotEqualTilde$1,NotExists:NotExists$1,NotGreater:NotGreater$1,NotGreaterEqual:NotGreaterEqual$1,NotGreaterFullEqual:NotGreaterFullEqual$1,NotGreaterGreater:NotGreaterGreater$1,NotGreaterLess:NotGreaterLess$1,NotGreaterSlantEqual:NotGreaterSlantEqual$1,NotGreaterTilde:NotGreaterTilde$1,NotHumpDownHump:NotHumpDownHump$1,NotHumpEqual:NotHumpEqual$1,NotLeftTriangle:NotLeftTriangle$1,NotLeftTriangleBar:NotLeftTriangleBar$1,NotLeftTriangleEqual:NotLeftTriangleEqual$1,NotLess:NotLess$1,NotLessEqual:NotLessEqual$1,NotLessGreater:NotLessGreater$1,NotLessLess:NotLessLess$1,NotLessSlantEqual:NotLessSlantEqual$1,NotLessTilde:NotLessTilde$1,NotNestedGreaterGreater:NotNestedGreaterGreater$1,NotNestedLessLess:NotNestedLessLess$1,NotPrecedes:NotPrecedes$1,NotPrecedesEqual:NotPrecedesEqual$1,NotPrecedesSlantEqual:NotPrecedesSlantEqual$1,NotReverseElement:NotReverseElement$1,NotRightTriangle:NotRightTriangle$1,NotRightTriangleBar:NotRightTriangleBar$1,NotRightTriangleEqual:NotRightTriangleEqual$1,NotSquareSubset:NotSquareSubset$1,NotSquareSubsetEqual:NotSquareSubsetEqual$1,NotSquareSuperset:NotSquareSuperset$1,NotSquareSupersetEqual:NotSquareSupersetEqual$1,NotSubset:NotSubset$1,NotSubsetEqual:NotSubsetEqual$1,NotSucceeds:NotSucceeds$1,NotSucceedsEqual:NotSucceedsEqual$1,NotSucceedsSlantEqual:NotSucceedsSlantEqual$1,NotSucceedsTilde:NotSucceedsTilde$1,NotSuperset:NotSuperset$1,NotSupersetEqual:NotSupersetEqual$1,NotTilde:NotTilde$1,NotTildeEqual:NotTildeEqual$1,NotTildeFullEqual:NotTildeFullEqual$1,NotTildeTilde:NotTildeTilde$1,NotVerticalBar:NotVerticalBar$1,Nscr:Nscr$1,Ntild:Ntild,Ntilde:Ntilde$2,Nu:Nu$1,OElig:OElig$1,Oacut:Oacut,Oacute:Oacute$2,Ocir:Ocir,Ocirc:Ocirc$2,Ocy:Ocy$1,Odblac:Odblac$1,Ofr:Ofr$1,Ograv:Ograv,Ograve:Ograve$2,Omacr:Omacr$1,Omega:Omega$1,Omicron:Omicron$1,Oopf:Oopf$1,OpenCurlyDoubleQuote:OpenCurlyDoubleQuote$1,OpenCurlyQuote:OpenCurlyQuote$1,Or:Or$1,Oscr:Oscr$1,Oslas:Oslas,Oslash:Oslash$2,Otild:Otild,Otilde:Otilde$2,Otimes:Otimes$1,Oum:Oum,Ouml:Ouml$2,OverBar:OverBar$1,OverBrace:OverBrace$1,OverBracket:OverBracket$1,OverParenthesis:OverParenthesis$1,PartialD:PartialD$1,Pcy:Pcy$1,Pfr:Pfr$1,Phi:Phi$1,Pi:Pi$1,PlusMinus:PlusMinus$1,Poincareplane:Poincareplane$1,Popf:Popf$1,Pr:Pr$1,Precedes:Precedes$1,PrecedesEqual:PrecedesEqual$1,PrecedesSlantEqual:PrecedesSlantEqual$1,PrecedesTilde:PrecedesTilde$1,Prime:Prime$1,Product:Product$1,Proportion:Proportion$1,Proportional:Proportional$1,Pscr:Pscr$1,Psi:Psi$1,QUO:QUO,QUOT:QUOT$2,Qfr:Qfr$1,Qopf:Qopf$1,Qscr:Qscr$1,RBarr:RBarr$1,RE:RE,REG:REG$2,Racute:Racute$1,Rang:Rang$1,Rarr:Rarr$1,Rarrtl:Rarrtl$1,Rcaron:Rcaron$1,Rcedil:Rcedil$1,Rcy:Rcy$1,Re:Re$2,ReverseElement:ReverseElement$1,ReverseEquilibrium:ReverseEquilibrium$1,ReverseUpEquilibrium:ReverseUpEquilibrium$1,Rfr:Rfr$1,Rho:Rho$1,RightAngleBracket:RightAngleBracket$1,RightArrow:RightArrow$1,RightArrowBar:RightArrowBar$1,RightArrowLeftArrow:RightArrowLeftArrow$1,RightCeiling:RightCeiling$1,RightDoubleBracket:RightDoubleBracket$1,RightDownTeeVector:RightDownTeeVector$1,RightDownVector:RightDownVector$1,RightDownVectorBar:RightDownVectorBar$1,RightFloor:RightFloor$1,RightTee:RightTee$1,RightTeeArrow:RightTeeArrow$1,RightTeeVector:RightTeeVector$1,RightTriangle:RightTriangle$1,RightTriangleBar:RightTriangleBar$1,RightTriangleEqual:RightTriangleEqual$1,RightUpDownVector:RightUpDownVector$1,RightUpTeeVector:RightUpTeeVector$1,RightUpVector:RightUpVector$1,RightUpVectorBar:RightUpVectorBar$1,RightVector:RightVector$1,RightVectorBar:RightVectorBar$1,Rightarrow:Rightarrow$1,Ropf:Ropf$1,RoundImplies:RoundImplies$1,Rrightarrow:Rrightarrow$1,Rscr:Rscr$1,Rsh:Rsh$1,RuleDelayed:RuleDelayed$1,SHCHcy:SHCHcy$1,SHcy:SHcy$1,SOFTcy:SOFTcy$1,Sacute:Sacute$1,Sc:Sc$1,Scaron:Scaron$1,Scedil:Scedil$1,Scirc:Scirc$1,Scy:Scy$1,Sfr:Sfr$1,ShortDownArrow:ShortDownArrow$1,ShortLeftArrow:ShortLeftArrow$1,ShortRightArrow:ShortRightArrow$1,ShortUpArrow:ShortUpArrow$1,Sigma:Sigma$1,SmallCircle:SmallCircle$1,Sopf:Sopf$1,Sqrt:Sqrt$1,Square:Square$1,SquareIntersection:SquareIntersection$1,SquareSubset:SquareSubset$1,SquareSubsetEqual:SquareSubsetEqual$1,SquareSuperset:SquareSuperset$1,SquareSupersetEqual:SquareSupersetEqual$1,SquareUnion:SquareUnion$1,Sscr:Sscr$1,Star:Star$1,Sub:Sub$1,Subset:Subset$1,SubsetEqual:SubsetEqual$1,Succeeds:Succeeds$1,SucceedsEqual:SucceedsEqual$1,SucceedsSlantEqual:SucceedsSlantEqual$1,SucceedsTilde:SucceedsTilde$1,SuchThat:SuchThat$1,Sum:Sum$1,Sup:Sup$1,Superset:Superset$1,SupersetEqual:SupersetEqual$1,Supset:Supset$1,THOR:THOR,THORN:THORN$2,TRADE:TRADE$1,TSHcy:TSHcy$1,TScy:TScy$1,Tab:Tab$1,Tau:Tau$1,Tcaron:Tcaron$1,Tcedil:Tcedil$1,Tcy:Tcy$1,Tfr:Tfr$1,Therefore:Therefore$1,Theta:Theta$1,ThickSpace:ThickSpace$1,ThinSpace:ThinSpace$1,Tilde:Tilde$1,TildeEqual:TildeEqual$1,TildeFullEqual:TildeFullEqual$1,TildeTilde:TildeTilde$1,Topf:Topf$1,TripleDot:TripleDot$1,Tscr:Tscr$1,Tstrok:Tstrok$1,Uacut:Uacut,Uacute:Uacute$2,Uarr:Uarr$1,Uarrocir:Uarrocir$1,Ubrcy:Ubrcy$1,Ubreve:Ubreve$1,Ucir:Ucir,Ucirc:Ucirc$2,Ucy:Ucy$1,Udblac:Udblac$1,Ufr:Ufr$1,Ugrav:Ugrav,Ugrave:Ugrave$2,Umacr:Umacr$1,UnderBar:UnderBar$1,UnderBrace:UnderBrace$1,UnderBracket:UnderBracket$1,UnderParenthesis:UnderParenthesis$1,Union:Union$1,UnionPlus:UnionPlus$1,Uogon:Uogon$1,Uopf:Uopf$1,UpArrow:UpArrow$1,UpArrowBar:UpArrowBar$1,UpArrowDownArrow:UpArrowDownArrow$1,UpDownArrow:UpDownArrow$1,UpEquilibrium:UpEquilibrium$1,UpTee:UpTee$1,UpTeeArrow:UpTeeArrow$1,Uparrow:Uparrow$1,Updownarrow:Updownarrow$1,UpperLeftArrow:UpperLeftArrow$1,UpperRightArrow:UpperRightArrow$1,Upsi:Upsi$1,Upsilon:Upsilon$1,Uring:Uring$1,Uscr:Uscr$1,Utilde:Utilde$1,Uum:Uum,Uuml:Uuml$2,VDash:VDash$1,Vbar:Vbar$1,Vcy:Vcy$1,Vdash:Vdash$1,Vdashl:Vdashl$1,Vee:Vee$1,Verbar:Verbar$1,Vert:Vert$1,VerticalBar:VerticalBar$1,VerticalLine:VerticalLine$1,VerticalSeparator:VerticalSeparator$1,VerticalTilde:VerticalTilde$1,VeryThinSpace:VeryThinSpace$1,Vfr:Vfr$1,Vopf:Vopf$1,Vscr:Vscr$1,Vvdash:Vvdash$1,Wcirc:Wcirc$1,Wedge:Wedge$1,Wfr:Wfr$1,Wopf:Wopf$1,Wscr:Wscr$1,Xfr:Xfr$1,Xi:Xi$1,Xopf:Xopf$1,Xscr:Xscr$1,YAcy:YAcy$1,YIcy:YIcy$1,YUcy:YUcy$1,Yacut:Yacut,Yacute:Yacute$2,Ycirc:Ycirc$1,Ycy:Ycy$1,Yfr:Yfr$1,Yopf:Yopf$1,Yscr:Yscr$1,Yuml:Yuml$1,ZHcy:ZHcy$1,Zacute:Zacute$1,Zcaron:Zcaron$1,Zcy:Zcy$1,Zdot:Zdot$1,ZeroWidthSpace:ZeroWidthSpace$1,Zeta:Zeta$1,Zfr:Zfr$1,Zopf:Zopf$1,Zscr:Zscr$1,aacut:aacut,aacute:aacute$2,abreve:abreve$1,ac:ac$1,acE:acE$1,acd:acd$1,acir:acir,acirc:acirc$2,acut:acut,acute:acute$2,acy:acy$1,aeli:aeli,aelig:aelig$2,af:af$1,afr:afr$1,agrav:agrav,agrave:agrave$2,alefsym:alefsym$1,aleph:aleph$1,alpha:alpha$1,amacr:amacr$1,amalg:amalg$1,am:am,amp:amp$3,and:and$1,andand:andand$1,andd:andd$1,andslope:andslope$1,andv:andv$1,ang:ang$1,ange:ange$1,angle:angle$1,angmsd:angmsd$1,angmsdaa:angmsdaa$1,angmsdab:angmsdab$1,angmsdac:angmsdac$1,angmsdad:angmsdad$1,angmsdae:angmsdae$1,angmsdaf:angmsdaf$1,angmsdag:angmsdag$1,angmsdah:angmsdah$1,angrt:angrt$1,angrtvb:angrtvb$1,angrtvbd:angrtvbd$1,angsph:angsph$1,angst:angst$1,angzarr:angzarr$1,aogon:aogon$1,aopf:aopf$1,ap:ap$1,apE:apE$1,apacir:apacir$1,ape:ape$1,apid:apid$1,apos:apos$2,approx:approx$1,approxeq:approxeq$1,arin:arin,aring:aring$2,ascr:ascr$1,ast:ast$1,asymp:asymp$1,asympeq:asympeq$1,atild:atild,atilde:atilde$2,aum:aum,auml:auml$2,awconint:awconint$1,awint:awint$1,bNot:bNot$1,backcong:backcong$1,backepsilon:backepsilon$1,backprime:backprime$1,backsim:backsim$1,backsimeq:backsimeq$1,barvee:barvee$1,barwed:barwed$1,barwedge:barwedge$1,bbrk:bbrk$1,bbrktbrk:bbrktbrk$1,bcong:bcong$1,bcy:bcy$1,bdquo:bdquo$1,becaus:becaus$1,because:because$1,bemptyv:bemptyv$1,bepsi:bepsi$1,bernou:bernou$1,beta:beta$1,beth:beth$1,between:between$1,bfr:bfr$1,bigcap:bigcap$1,bigcirc:bigcirc$1,bigcup:bigcup$1,bigodot:bigodot$1,bigoplus:bigoplus$1,bigotimes:bigotimes$1,bigsqcup:bigsqcup$1,bigstar:bigstar$1,bigtriangledown:bigtriangledown$1,bigtriangleup:bigtriangleup$1,biguplus:biguplus$1,bigvee:bigvee$1,bigwedge:bigwedge$1,bkarow:bkarow$1,blacklozenge:blacklozenge$1,blacksquare:blacksquare$1,blacktriangle:blacktriangle$1,blacktriangledown:blacktriangledown$1,blacktriangleleft:blacktriangleleft$1,blacktriangleright:blacktriangleright$1,blank:blank$1,blk12:blk12$1,blk14:blk14$1,blk34:blk34$1,block:block$1,bne:bne$1,bnequiv:bnequiv$1,bnot:bnot$1,bopf:bopf$1,bot:bot$1,bottom:bottom$1,bowtie:bowtie$1,boxDL:boxDL$1,boxDR:boxDR$1,boxDl:boxDl$1,boxDr:boxDr$1,boxH:boxH$1,boxHD:boxHD$1,boxHU:boxHU$1,boxHd:boxHd$1,boxHu:boxHu$1,boxUL:boxUL$1,boxUR:boxUR$1,boxUl:boxUl$1,boxUr:boxUr$1,boxV:boxV$1,boxVH:boxVH$1,boxVL:boxVL$1,boxVR:boxVR$1,boxVh:boxVh$1,boxVl:boxVl$1,boxVr:boxVr$1,boxbox:boxbox$1,boxdL:boxdL$1,boxdR:boxdR$1,boxdl:boxdl$1,boxdr:boxdr$1,boxh:boxh$1,boxhD:boxhD$1,boxhU:boxhU$1,boxhd:boxhd$1,boxhu:boxhu$1,boxminus:boxminus$1,boxplus:boxplus$1,boxtimes:boxtimes$1,boxuL:boxuL$1,boxuR:boxuR$1,boxul:boxul$1,boxur:boxur$1,boxv:boxv$1,boxvH:boxvH$1,boxvL:boxvL$1,boxvR:boxvR$1,boxvh:boxvh$1,boxvl:boxvl$1,boxvr:boxvr$1,bprime:bprime$1,breve:breve$1,brvba:brvba,brvbar:brvbar$2,bscr:bscr$1,bsemi:bsemi$1,bsim:bsim$1,bsime:bsime$1,bsol:bsol$1,bsolb:bsolb$1,bsolhsub:bsolhsub$1,bull:bull$1,bullet:bullet$1,bump:bump$1,bumpE:bumpE$1,bumpe:bumpe$1,bumpeq:bumpeq$1,cacute:cacute$1,cap:cap$1,capand:capand$1,capbrcup:capbrcup$1,capcap:capcap$1,capcup:capcup$1,capdot:capdot$1,caps:caps$1,caret:caret$1,caron:caron$1,ccaps:ccaps$1,ccaron:ccaron$1,ccedi:ccedi,ccedil:ccedil$2,ccirc:ccirc$1,ccups:ccups$1,ccupssm:ccupssm$1,cdot:cdot$1,cedi:cedi,cedil:cedil$2,cemptyv:cemptyv$1,cen:cen,cent:cent$2,centerdot:centerdot$1,cfr:cfr$1,chcy:chcy$1,check:check$1,checkmark:checkmark$1,chi:chi$1,cir:cir$1,cirE:cirE$1,circ:circ$1,circeq:circeq$1,circlearrowleft:circlearrowleft$1,circlearrowright:circlearrowright$1,circledR:circledR$1,circledS:circledS$1,circledast:circledast$1,circledcirc:circledcirc$1,circleddash:circleddash$1,cire:cire$1,cirfnint:cirfnint$1,cirmid:cirmid$1,cirscir:cirscir$1,clubs:clubs$1,clubsuit:clubsuit$1,colon:colon$1,colone:colone$1,coloneq:coloneq$1,comma:comma$1,commat:commat$1,comp:comp$1,compfn:compfn$1,complement:complement$1,complexes:complexes$1,cong:cong$1,congdot:congdot$1,conint:conint$1,copf:copf$1,coprod:coprod$1,cop:cop,copy:copy$2,copysr:copysr$1,crarr:crarr$1,cross:cross$1,cscr:cscr$1,csub:csub$1,csube:csube$1,csup:csup$1,csupe:csupe$1,ctdot:ctdot$1,cudarrl:cudarrl$1,cudarrr:cudarrr$1,cuepr:cuepr$1,cuesc:cuesc$1,cularr:cularr$1,cularrp:cularrp$1,cup:cup$1,cupbrcap:cupbrcap$1,cupcap:cupcap$1,cupcup:cupcup$1,cupdot:cupdot$1,cupor:cupor$1,cups:cups$1,curarr:curarr$1,curarrm:curarrm$1,curlyeqprec:curlyeqprec$1,curlyeqsucc:curlyeqsucc$1,curlyvee:curlyvee$1,curlywedge:curlywedge$1,curre:curre,curren:curren$2,curvearrowleft:curvearrowleft$1,curvearrowright:curvearrowright$1,cuvee:cuvee$1,cuwed:cuwed$1,cwconint:cwconint$1,cwint:cwint$1,cylcty:cylcty$1,dArr:dArr$1,dHar:dHar$1,dagger:dagger$1,daleth:daleth$1,darr:darr$1,dash:dash$1,dashv:dashv$1,dbkarow:dbkarow$1,dblac:dblac$1,dcaron:dcaron$1,dcy:dcy$1,dd:dd$1,ddagger:ddagger$1,ddarr:ddarr$1,ddotseq:ddotseq$1,de:de$1,deg:deg$2,delta:delta$1,demptyv:demptyv$1,dfisht:dfisht$1,dfr:dfr$1,dharl:dharl$1,dharr:dharr$1,diam:diam$1,diamond:diamond$1,diamondsuit:diamondsuit$1,diams:diams$1,die:die$1,digamma:digamma$1,disin:disin$1,div:div$1,divid:divid,divide:divide$2,divideontimes:divideontimes$1,divonx:divonx$1,djcy:djcy$1,dlcorn:dlcorn$1,dlcrop:dlcrop$1,dollar:dollar$1,dopf:dopf$1,dot:dot$1,doteq:doteq$1,doteqdot:doteqdot$1,dotminus:dotminus$1,dotplus:dotplus$1,dotsquare:dotsquare$1,doublebarwedge:doublebarwedge$1,downarrow:downarrow$1,downdownarrows:downdownarrows$1,downharpoonleft:downharpoonleft$1,downharpoonright:downharpoonright$1,drbkarow:drbkarow$1,drcorn:drcorn$1,drcrop:drcrop$1,dscr:dscr$1,dscy:dscy$1,dsol:dsol$1,dstrok:dstrok$1,dtdot:dtdot$1,dtri:dtri$1,dtrif:dtrif$1,duarr:duarr$1,duhar:duhar$1,dwangle:dwangle$1,dzcy:dzcy$1,dzigrarr:dzigrarr$1,eDDot:eDDot$1,eDot:eDot$1,eacut:eacut,eacute:eacute$2,easter:easter$1,ecaron:ecaron$1,ecir:ecir$1,ecirc:ecirc$2,ecolon:ecolon$1,ecy:ecy$1,edot:edot$1,ee:ee$2,efDot:efDot$1,efr:efr$1,eg:eg$1,egrav:egrav,egrave:egrave$2,egs:egs$1,egsdot:egsdot$1,el:el$1,elinters:elinters$1,ell:ell$1,els:els$1,elsdot:elsdot$1,emacr:emacr$1,empty:empty$1,emptyset:emptyset$1,emptyv:emptyv$1,emsp13:emsp13$1,emsp14:emsp14$1,emsp:emsp$1,eng:eng$1,ensp:ensp$1,eogon:eogon$1,eopf:eopf$1,epar:epar$1,eparsl:eparsl$1,eplus:eplus$1,epsi:epsi$1,epsilon:epsilon$1,epsiv:epsiv$1,eqcirc:eqcirc$1,eqcolon:eqcolon$1,eqsim:eqsim$1,eqslantgtr:eqslantgtr$1,eqslantless:eqslantless$1,equals:equals$2,equest:equest$1,equiv:equiv$1,equivDD:equivDD$1,eqvparsl:eqvparsl$1,erDot:erDot$1,erarr:erarr$1,escr:escr$1,esdot:esdot$1,esim:esim$1,eta:eta$1,et:et$1,eth:eth$2,eum:eum,euml:euml$2,euro:euro$1,excl:excl$1,exist:exist$1,expectation:expectation$1,exponentiale:exponentiale$1,fallingdotseq:fallingdotseq$1,fcy:fcy$1,female:female$1,ffilig:ffilig$1,fflig:fflig$1,ffllig:ffllig$1,ffr:ffr$1,filig:filig$1,fjlig:fjlig$1,flat:flat$1,fllig:fllig$1,fltns:fltns$1,fnof:fnof$1,fopf:fopf$1,forall:forall$1,fork:fork$1,forkv:forkv$1,fpartint:fpartint$1,frac1:frac1,frac12:frac12$2,frac13:frac13$1,frac14:frac14$2,frac15:frac15$1,frac16:frac16$1,frac18:frac18$1,frac23:frac23$1,frac25:frac25$1,frac3:frac3,frac34:frac34$2,frac35:frac35$1,frac38:frac38$1,frac45:frac45$1,frac56:frac56$1,frac58:frac58$1,frac78:frac78$1,frasl:frasl$1,frown:frown$1,fscr:fscr$1,gE:gE$1,gEl:gEl$1,gacute:gacute$1,gamma:gamma$1,gammad:gammad$1,gap:gap$1,gbreve:gbreve$1,gcirc:gcirc$1,gcy:gcy$1,gdot:gdot$1,ge:ge$2,gel:gel$1,geq:geq$1,geqq:geqq$1,geqslant:geqslant$1,ges:ges$1,gescc:gescc$1,gesdot:gesdot$1,gesdoto:gesdoto$1,gesdotol:gesdotol$1,gesl:gesl$1,gesles:gesles$1,gfr:gfr$1,gg:gg$1,ggg:ggg$1,gimel:gimel$1,gjcy:gjcy$1,gl:gl$1,glE:glE$1,gla:gla$1,glj:glj$1,gnE:gnE$1,gnap:gnap$1,gnapprox:gnapprox$1,gne:gne$1,gneq:gneq$1,gneqq:gneqq$1,gnsim:gnsim$1,gopf:gopf$1,grave:grave$1,gscr:gscr$1,gsim:gsim$1,gsime:gsime$1,gsiml:gsiml$1,g:g$2,gt:gt$4,gtcc:gtcc$1,gtcir:gtcir$1,gtdot:gtdot$1,gtlPar:gtlPar$1,gtquest:gtquest$1,gtrapprox:gtrapprox$1,gtrarr:gtrarr$1,gtrdot:gtrdot$1,gtreqless:gtreqless$1,gtreqqless:gtreqqless$1,gtrless:gtrless$1,gtrsim:gtrsim$1,gvertneqq:gvertneqq$1,gvnE:gvnE$1,hArr:hArr$1,hairsp:hairsp$1,half:half$1,hamilt:hamilt$1,hardcy:hardcy$1,harr:harr$1,harrcir:harrcir$1,harrw:harrw$1,hbar:hbar$1,hcirc:hcirc$1,hearts:hearts$1,heartsuit:heartsuit$1,hellip:hellip$1,hercon:hercon$1,hfr:hfr$1,hksearow:hksearow$1,hkswarow:hkswarow$1,hoarr:hoarr$1,homtht:homtht$1,hookleftarrow:hookleftarrow$1,hookrightarrow:hookrightarrow$1,hopf:hopf$1,horbar:horbar$1,hscr:hscr$1,hslash:hslash$1,hstrok:hstrok$1,hybull:hybull$1,hyphen:hyphen$1,iacut:iacut,iacute:iacute$2,ic:ic$1,icir:icir,icirc:icirc$2,icy:icy$1,iecy:iecy$1,iexc:iexc,iexcl:iexcl$2,iff:iff$1,ifr:ifr$1,igrav:igrav,igrave:igrave$2,ii:ii$1,iiiint:iiiint$1,iiint:iiint$1,iinfin:iinfin$1,iiota:iiota$1,ijlig:ijlig$1,imacr:imacr$1,image:image$1,imagline:imagline$1,imagpart:imagpart$1,imath:imath$1,imof:imof$1,imped:imped$1,"in":"∈",incare:incare$1,infin:infin$1,infintie:infintie$1,inodot:inodot$1,int:int$1,intcal:intcal$1,integers:integers$1,intercal:intercal$1,intlarhk:intlarhk$1,intprod:intprod$1,iocy:iocy$1,iogon:iogon$1,iopf:iopf$1,iota:iota$1,iprod:iprod$1,iques:iques,iquest:iquest$2,iscr:iscr$1,isin:isin$1,isinE:isinE$1,isindot:isindot$1,isins:isins$1,isinsv:isinsv$1,isinv:isinv$1,it:it$2,itilde:itilde$1,iukcy:iukcy$1,ium:ium,iuml:iuml$2,jcirc:jcirc$1,jcy:jcy$1,jfr:jfr$1,jmath:jmath$1,jopf:jopf$1,jscr:jscr$1,jsercy:jsercy$1,jukcy:jukcy$1,kappa:kappa$1,kappav:kappav$1,kcedil:kcedil$1,kcy:kcy$1,kfr:kfr$1,kgreen:kgreen$1,khcy:khcy$1,kjcy:kjcy$1,kopf:kopf$1,kscr:kscr$1,lAarr:lAarr$1,lArr:lArr$1,lAtail:lAtail$1,lBarr:lBarr$1,lE:lE$1,lEg:lEg$1,lHar:lHar$1,lacute:lacute$1,laemptyv:laemptyv$1,lagran:lagran$1,lambda:lambda$1,lang:lang$1,langd:langd$1,langle:langle$1,lap:lap$1,laqu:laqu,laquo:laquo$2,larr:larr$1,larrb:larrb$1,larrbfs:larrbfs$1,larrfs:larrfs$1,larrhk:larrhk$1,larrlp:larrlp$1,larrpl:larrpl$1,larrsim:larrsim$1,larrtl:larrtl$1,lat:lat$1,latail:latail$1,late:late$1,lates:lates$1,lbarr:lbarr$1,lbbrk:lbbrk$1,lbrace:lbrace$1,lbrack:lbrack$1,lbrke:lbrke$1,lbrksld:lbrksld$1,lbrkslu:lbrkslu$1,lcaron:lcaron$1,lcedil:lcedil$1,lceil:lceil$1,lcub:lcub$1,lcy:lcy$1,ldca:ldca$1,ldquo:ldquo$1,ldquor:ldquor$1,ldrdhar:ldrdhar$1,ldrushar:ldrushar$1,ldsh:ldsh$1,le:le$2,leftarrow:leftarrow$1,leftarrowtail:leftarrowtail$1,leftharpoondown:leftharpoondown$1,leftharpoonup:leftharpoonup$1,leftleftarrows:leftleftarrows$1,leftrightarrow:leftrightarrow$1,leftrightarrows:leftrightarrows$1,leftrightharpoons:leftrightharpoons$1,leftrightsquigarrow:leftrightsquigarrow$1,leftthreetimes:leftthreetimes$1,leg:leg$1,leq:leq$1,leqq:leqq$1,leqslant:leqslant$1,les:les$1,lescc:lescc$1,lesdot:lesdot$1,lesdoto:lesdoto$1,lesdotor:lesdotor$1,lesg:lesg$1,lesges:lesges$1,lessapprox:lessapprox$1,lessdot:lessdot$1,lesseqgtr:lesseqgtr$1,lesseqqgtr:lesseqqgtr$1,lessgtr:lessgtr$1,lesssim:lesssim$1,lfisht:lfisht$1,lfloor:lfloor$1,lfr:lfr$1,lg:lg$1,lgE:lgE$1,lhard:lhard$1,lharu:lharu$1,lharul:lharul$1,lhblk:lhblk$1,ljcy:ljcy$1,ll:ll$1,llarr:llarr$1,llcorner:llcorner$1,llhard:llhard$1,lltri:lltri$1,lmidot:lmidot$1,lmoust:lmoust$1,lmoustache:lmoustache$1,lnE:lnE$1,lnap:lnap$1,lnapprox:lnapprox$1,lne:lne$1,lneq:lneq$1,lneqq:lneqq$1,lnsim:lnsim$1,loang:loang$1,loarr:loarr$1,lobrk:lobrk$1,longleftarrow:longleftarrow$1,longleftrightarrow:longleftrightarrow$1,longmapsto:longmapsto$1,longrightarrow:longrightarrow$1,looparrowleft:looparrowleft$1,looparrowright:looparrowright$1,lopar:lopar$1,lopf:lopf$1,loplus:loplus$1,lotimes:lotimes$1,lowast:lowast$1,lowbar:lowbar$1,loz:loz$1,lozenge:lozenge$1,lozf:lozf$1,lpar:lpar$1,lparlt:lparlt$1,lrarr:lrarr$1,lrcorner:lrcorner$1,lrhar:lrhar$1,lrhard:lrhard$1,lrm:lrm$1,lrtri:lrtri$1,lsaquo:lsaquo$1,lscr:lscr$1,lsh:lsh$1,lsim:lsim$1,lsime:lsime$1,lsimg:lsimg$1,lsqb:lsqb$1,lsquo:lsquo$1,lsquor:lsquor$1,lstrok:lstrok$1,l:l$2,lt:lt$4,ltcc:ltcc$1,ltcir:ltcir$1,ltdot:ltdot$1,lthree:lthree$1,ltimes:ltimes$1,ltlarr:ltlarr$1,ltquest:ltquest$1,ltrPar:ltrPar$1,ltri:ltri$1,ltrie:ltrie$1,ltrif:ltrif$1,lurdshar:lurdshar$1,luruhar:luruhar$1,lvertneqq:lvertneqq$1,lvnE:lvnE$1,mDDot:mDDot$1,mac:mac,macr:macr$2,male:male$1,malt:malt$1,maltese:maltese$1,map:map$3,mapsto:mapsto$1,mapstodown:mapstodown$1,mapstoleft:mapstoleft$1,mapstoup:mapstoup$1,marker:marker$1,mcomma:mcomma$1,mcy:mcy$1,mdash:mdash$1,measuredangle:measuredangle$1,mfr:mfr$1,mho:mho$1,micr:micr,micro:micro$2,mid:mid$1,midast:midast$1,midcir:midcir$1,middo:middo,middot:middot$2,minus:minus$1,minusb:minusb$1,minusd:minusd$1,minusdu:minusdu$1,mlcp:mlcp$1,mldr:mldr$1,mnplus:mnplus$1,models:models$1,mopf:mopf$1,mp:mp$1,mscr:mscr$1,mstpos:mstpos$1,mu:mu$1,multimap:multimap$1,mumap:mumap$1,nGg:nGg$1,nGt:nGt$1,nGtv:nGtv$1,nLeftarrow:nLeftarrow$1,nLeftrightarrow:nLeftrightarrow$1,nLl:nLl$1,nLt:nLt$1,nLtv:nLtv$1,nRightarrow:nRightarrow$1,nVDash:nVDash$1,nVdash:nVdash$1,nabla:nabla$1,nacute:nacute$1,nang:nang$1,nap:nap$1,napE:napE$1,napid:napid$1,napos:napos$1,napprox:napprox$1,natur:natur$1,natural:natural$1,naturals:naturals$1,nbs:nbs,nbsp:nbsp$2,nbump:nbump$1,nbumpe:nbumpe$1,ncap:ncap$1,ncaron:ncaron$1,ncedil:ncedil$1,ncong:ncong$1,ncongdot:ncongdot$1,ncup:ncup$1,ncy:ncy$1,ndash:ndash$1,ne:ne$2,neArr:neArr$1,nearhk:nearhk$1,nearr:nearr$1,nearrow:nearrow$1,nedot:nedot$1,nequiv:nequiv$1,nesear:nesear$1,nesim:nesim$1,nexist:nexist$1,nexists:nexists$1,nfr:nfr$1,ngE:ngE$1,nge:nge$1,ngeq:ngeq$1,ngeqq:ngeqq$1,ngeqslant:ngeqslant$1,nges:nges$1,ngsim:ngsim$1,ngt:ngt$1,ngtr:ngtr$1,nhArr:nhArr$1,nharr:nharr$1,nhpar:nhpar$1,ni:ni$1,nis:nis$1,nisd:nisd$1,niv:niv$1,njcy:njcy$1,nlArr:nlArr$1,nlE:nlE$1,nlarr:nlarr$1,nldr:nldr$1,nle:nle$1,nleftarrow:nleftarrow$1,nleftrightarrow:nleftrightarrow$1,nleq:nleq$1,nleqq:nleqq$1,nleqslant:nleqslant$1,nles:nles$1,nless:nless$1,nlsim:nlsim$1,nlt:nlt$1,nltri:nltri$1,nltrie:nltrie$1,nmid:nmid$1,nopf:nopf$1,no:no,not:not$2,notin:notin$1,notinE:notinE$1,notindot:notindot$1,notinva:notinva$1,notinvb:notinvb$1,notinvc:notinvc$1,notni:notni$1,notniva:notniva$1,notnivb:notnivb$1,notnivc:notnivc$1,npar:npar$1,nparallel:nparallel$1,nparsl:nparsl$1,npart:npart$1,npolint:npolint$1,npr:npr$1,nprcue:nprcue$1,npre:npre$1,nprec:nprec$1,npreceq:npreceq$1,nrArr:nrArr$1,nrarr:nrarr$1,nrarrc:nrarrc$1,nrarrw:nrarrw$1,nrightarrow:nrightarrow$1,nrtri:nrtri$1,nrtrie:nrtrie$1,nsc:nsc$1,nsccue:nsccue$1,nsce:nsce$1,nscr:nscr$1,nshortmid:nshortmid$1,nshortparallel:nshortparallel$1,nsim:nsim$1,nsime:nsime$1,nsimeq:nsimeq$1,nsmid:nsmid$1,nspar:nspar$1,nsqsube:nsqsube$1,nsqsupe:nsqsupe$1,nsub:nsub$1,nsubE:nsubE$1,nsube:nsube$1,nsubset:nsubset$1,nsubseteq:nsubseteq$1,nsubseteqq:nsubseteqq$1,nsucc:nsucc$1,nsucceq:nsucceq$1,nsup:nsup$1,nsupE:nsupE$1,nsupe:nsupe$1,nsupset:nsupset$1,nsupseteq:nsupseteq$1,nsupseteqq:nsupseteqq$1,ntgl:ntgl$1,ntild:ntild,ntilde:ntilde$2,ntlg:ntlg$1,ntriangleleft:ntriangleleft$1,ntrianglelefteq:ntrianglelefteq$1,ntriangleright:ntriangleright$1,ntrianglerighteq:ntrianglerighteq$1,nu:nu$1,num:num$1,numero:numero$1,numsp:numsp$1,nvDash:nvDash$1,nvHarr:nvHarr$1,nvap:nvap$1,nvdash:nvdash$1,nvge:nvge$1,nvgt:nvgt$1,nvinfin:nvinfin$1,nvlArr:nvlArr$1,nvle:nvle$1,nvlt:nvlt$1,nvltrie:nvltrie$1,nvrArr:nvrArr$1,nvrtrie:nvrtrie$1,nvsim:nvsim$1,nwArr:nwArr$1,nwarhk:nwarhk$1,nwarr:nwarr$1,nwarrow:nwarrow$1,nwnear:nwnear$1,oS:oS$1,oacut:oacut,oacute:oacute$2,oast:oast$1,ocir:ocir$1,ocirc:ocirc$2,ocy:ocy$1,odash:odash$1,odblac:odblac$1,odiv:odiv$1,odot:odot$1,odsold:odsold$1,oelig:oelig$1,ofcir:ofcir$1,ofr:ofr$1,ogon:ogon$1,ograv:ograv,ograve:ograve$2,ogt:ogt$1,ohbar:ohbar$1,ohm:ohm$1,oint:oint$1,olarr:olarr$1,olcir:olcir$1,olcross:olcross$1,oline:oline$1,olt:olt$1,omacr:omacr$1,omega:omega$1,omicron:omicron$1,omid:omid$1,ominus:ominus$1,oopf:oopf$1,opar:opar$1,operp:operp$1,oplus:oplus$1,or:or$1,orarr:orarr$1,ord:ord$1,order:order$1,orderof:orderof$1,ordf:ordf$2,ordm:ordm$2,origof:origof$1,oror:oror$1,orslope:orslope$1,orv:orv$1,oscr:oscr$1,oslas:oslas,oslash:oslash$2,osol:osol$1,otild:otild,otilde:otilde$2,otimes:otimes$1,otimesas:otimesas$1,oum:oum,ouml:ouml$2,ovbar:ovbar$1,par:par$1,para:para$2,parallel:parallel$1,parsim:parsim$1,parsl:parsl$1,part:part$1,pcy:pcy$1,percnt:percnt$1,period:period$1,permil:permil$1,perp:perp$1,pertenk:pertenk$1,pfr:pfr$1,phi:phi$1,phiv:phiv$1,phmmat:phmmat$1,phone:phone$1,pi:pi$1,pitchfork:pitchfork$1,piv:piv$1,planck:planck$1,planckh:planckh$1,plankv:plankv$1,plus:plus$1,plusacir:plusacir$1,plusb:plusb$1,pluscir:pluscir$1,plusdo:plusdo$1,plusdu:plusdu$1,pluse:pluse$1,plusm:plusm,plusmn:plusmn$2,plussim:plussim$1,plustwo:plustwo$1,pm:pm$1,pointint:pointint$1,popf:popf$1,poun:poun,pound:pound$2,pr:pr$1,prE:prE$1,prap:prap$1,prcue:prcue$1,pre:pre$1,prec:prec$1,precapprox:precapprox$1,preccurlyeq:preccurlyeq$1,preceq:preceq$1,precnapprox:precnapprox$1,precneqq:precneqq$1,precnsim:precnsim$1,precsim:precsim$1,prime:prime$1,primes:primes$1,prnE:prnE$1,prnap:prnap$1,prnsim:prnsim$1,prod:prod$1,profalar:profalar$1,profline:profline$1,profsurf:profsurf$1,prop:prop$2,propto:propto$1,prsim:prsim$1,prurel:prurel$1,pscr:pscr$1,psi:psi$1,puncsp:puncsp$1,qfr:qfr$1,qint:qint$1,qopf:qopf$1,qprime:qprime$1,qscr:qscr$1,quaternions:quaternions$1,quatint:quatint$1,quest:quest$1,questeq:questeq$1,quo:quo,quot:quot$3,rAarr:rAarr$1,rArr:rArr$1,rAtail:rAtail$1,rBarr:rBarr$1,rHar:rHar$1,race:race$1,racute:racute$1,radic:radic$1,raemptyv:raemptyv$1,rang:rang$1,rangd:rangd$1,range:range$1,rangle:rangle$1,raqu:raqu,raquo:raquo$2,rarr:rarr$1,rarrap:rarrap$1,rarrb:rarrb$1,rarrbfs:rarrbfs$1,rarrc:rarrc$1,rarrfs:rarrfs$1,rarrhk:rarrhk$1,rarrlp:rarrlp$1,rarrpl:rarrpl$1,rarrsim:rarrsim$1,rarrtl:rarrtl$1,rarrw:rarrw$1,ratail:ratail$1,ratio:ratio$1,rationals:rationals$1,rbarr:rbarr$1,rbbrk:rbbrk$1,rbrace:rbrace$1,rbrack:rbrack$1,rbrke:rbrke$1,rbrksld:rbrksld$1,rbrkslu:rbrkslu$1,rcaron:rcaron$1,rcedil:rcedil$1,rceil:rceil$1,rcub:rcub$1,rcy:rcy$1,rdca:rdca$1,rdldhar:rdldhar$1,rdquo:rdquo$1,rdquor:rdquor$1,rdsh:rdsh$1,real:real$1,realine:realine$1,realpart:realpart$1,reals:reals$1,rect:rect$1,re:re$1,reg:reg$2,rfisht:rfisht$1,rfloor:rfloor$1,rfr:rfr$1,rhard:rhard$1,rharu:rharu$1,rharul:rharul$1,rho:rho$1,rhov:rhov$1,rightarrow:rightarrow$1,rightarrowtail:rightarrowtail$1,rightharpoondown:rightharpoondown$1,rightharpoonup:rightharpoonup$1,rightleftarrows:rightleftarrows$1,rightleftharpoons:rightleftharpoons$1,rightrightarrows:rightrightarrows$1,rightsquigarrow:rightsquigarrow$1,rightthreetimes:rightthreetimes$1,ring:ring$1,risingdotseq:risingdotseq$1,rlarr:rlarr$1,rlhar:rlhar$1,rlm:rlm$1,rmoust:rmoust$1,rmoustache:rmoustache$1,rnmid:rnmid$1,roang:roang$1,roarr:roarr$1,robrk:robrk$1,ropar:ropar$1,ropf:ropf$1,roplus:roplus$1,rotimes:rotimes$1,rpar:rpar$1,rpargt:rpargt$1,rppolint:rppolint$1,rrarr:rrarr$1,rsaquo:rsaquo$1,rscr:rscr$1,rsh:rsh$1,rsqb:rsqb$1,rsquo:rsquo$1,rsquor:rsquor$1,rthree:rthree$1,rtimes:rtimes$1,rtri:rtri$1,rtrie:rtrie$1,rtrif:rtrif$1,rtriltri:rtriltri$1,ruluhar:ruluhar$1,rx:rx$1,sacute:sacute$1,sbquo:sbquo$1,sc:sc$1,scE:scE$1,scap:scap$1,scaron:scaron$1,sccue:sccue$1,sce:sce$1,scedil:scedil$1,scirc:scirc$1,scnE:scnE$1,scnap:scnap$1,scnsim:scnsim$1,scpolint:scpolint$1,scsim:scsim$1,scy:scy$1,sdot:sdot$1,sdotb:sdotb$1,sdote:sdote$1,seArr:seArr$1,searhk:searhk$1,searr:searr$1,searrow:searrow$1,sec:sec,sect:sect$2,semi:semi$1,seswar:seswar$1,setminus:setminus$1,setmn:setmn$1,sext:sext$1,sfr:sfr$1,sfrown:sfrown$1,sharp:sharp$1,shchcy:shchcy$1,shcy:shcy$1,shortmid:shortmid$1,shortparallel:shortparallel$1,sh:sh,shy:shy$2,sigma:sigma$1,sigmaf:sigmaf$1,sigmav:sigmav$1,sim:sim$1,simdot:simdot$1,sime:sime$1,simeq:simeq$1,simg:simg$1,simgE:simgE$1,siml:siml$1,simlE:simlE$1,simne:simne$1,simplus:simplus$1,simrarr:simrarr$1,slarr:slarr$1,smallsetminus:smallsetminus$1,smashp:smashp$1,smeparsl:smeparsl$1,smid:smid$1,smile:smile$1,smt:smt$1,smte:smte$1,smtes:smtes$1,softcy:softcy$1,sol:sol$1,solb:solb$1,solbar:solbar$1,sopf:sopf$1,spades:spades$1,spadesuit:spadesuit$1,spar:spar$1,sqcap:sqcap$1,sqcaps:sqcaps$1,sqcup:sqcup$1,sqcups:sqcups$1,sqsub:sqsub$1,sqsube:sqsube$1,sqsubset:sqsubset$1,sqsubseteq:sqsubseteq$1,sqsup:sqsup$1,sqsupe:sqsupe$1,sqsupset:sqsupset$1,sqsupseteq:sqsupseteq$1,squ:squ$1,square:square$1,squarf:squarf$1,squf:squf$1,srarr:srarr$1,sscr:sscr$1,ssetmn:ssetmn$1,ssmile:ssmile$1,sstarf:sstarf$1,star:star$1,starf:starf$1,straightepsilon:straightepsilon$1,straightphi:straightphi$1,strns:strns$1,sub:sub$1,subE:subE$1,subdot:subdot$1,sube:sube$1,subedot:subedot$1,submult:submult$1,subnE:subnE$1,subne:subne$1,subplus:subplus$1,subrarr:subrarr$1,subset:subset$1,subseteq:subseteq$1,subseteqq:subseteqq$1,subsetneq:subsetneq$1,subsetneqq:subsetneqq$1,subsim:subsim$1,subsub:subsub$1,subsup:subsup$1,succ:succ$1,succapprox:succapprox$1,succcurlyeq:succcurlyeq$1,succeq:succeq$1,succnapprox:succnapprox$1,succneqq:succneqq$1,succnsim:succnsim$1,succsim:succsim$1,sum:sum$1,sung:sung$1,sup:sup$1,sup1:sup1$2,sup2:sup2$2,sup3:sup3$2,supE:supE$1,supdot:supdot$1,supdsub:supdsub$1,supe:supe$1,supedot:supedot$1,suphsol:suphsol$1,suphsub:suphsub$1,suplarr:suplarr$1,supmult:supmult$1,supnE:supnE$1,supne:supne$1,supplus:supplus$1,supset:supset$1,supseteq:supseteq$1,supseteqq:supseteqq$1,supsetneq:supsetneq$1,supsetneqq:supsetneqq$1,supsim:supsim$1,supsub:supsub$1,supsup:supsup$1,swArr:swArr$1,swarhk:swarhk$1,swarr:swarr$1,swarrow:swarrow$1,swnwar:swnwar$1,szli:szli,szlig:szlig$2,target:target$1,tau:tau$1,tbrk:tbrk$1,tcaron:tcaron$1,tcedil:tcedil$1,tcy:tcy$1,tdot:tdot$1,telrec:telrec$1,tfr:tfr$1,there4:there4$1,therefore:therefore$1,theta:theta$1,thetasym:thetasym$1,thetav:thetav$1,thickapprox:thickapprox$1,thicksim:thicksim$1,thinsp:thinsp$1,thkap:thkap$1,thksim:thksim$1,thor:thor,thorn:thorn$2,tilde:tilde$1,time:time$1,times:times$2,timesb:timesb$1,timesbar:timesbar$1,timesd:timesd$1,tint:tint$1,toea:toea$1,top:top$1,topbot:topbot$1,topcir:topcir$1,topf:topf$1,topfork:topfork$1,tosa:tosa$1,tprime:tprime$1,trade:trade$1,triangle:triangle$1,triangledown:triangledown$1,triangleleft:triangleleft$1,trianglelefteq:trianglelefteq$1,triangleq:triangleq$1,triangleright:triangleright$1,trianglerighteq:trianglerighteq$1,tridot:tridot$1,trie:trie$1,triminus:triminus$1,triplus:triplus$1,trisb:trisb$1,tritime:tritime$1,trpezium:trpezium$1,tscr:tscr$1,tscy:tscy$1,tshcy:tshcy$1,tstrok:tstrok$1,twixt:twixt$1,twoheadleftarrow:twoheadleftarrow$1,twoheadrightarrow:twoheadrightarrow$1,uArr:uArr$1,uHar:uHar$1,uacut:uacut,uacute:uacute$2,uarr:uarr$1,ubrcy:ubrcy$1,ubreve:ubreve$1,ucir:ucir,ucirc:ucirc$2,ucy:ucy$1,udarr:udarr$1,udblac:udblac$1,udhar:udhar$1,ufisht:ufisht$1,ufr:ufr$1,ugrav:ugrav,ugrave:ugrave$2,uharl:uharl$1,uharr:uharr$1,uhblk:uhblk$1,ulcorn:ulcorn$1,ulcorner:ulcorner$1,ulcrop:ulcrop$1,ultri:ultri$1,umacr:umacr$1,um:um,uml:uml$2,uogon:uogon$1,uopf:uopf$1,uparrow:uparrow$1,updownarrow:updownarrow$1,upharpoonleft:upharpoonleft$1,upharpoonright:upharpoonright$1,uplus:uplus$1,upsi:upsi$1,upsih:upsih$1,upsilon:upsilon$1,upuparrows:upuparrows$1,urcorn:urcorn$1,urcorner:urcorner$1,urcrop:urcrop$1,uring:uring$1,urtri:urtri$1,uscr:uscr$1,utdot:utdot$1,utilde:utilde$1,utri:utri$1,utrif:utrif$1,uuarr:uuarr$1,uum:uum,uuml:uuml$2,uwangle:uwangle$1,vArr:vArr$1,vBar:vBar$1,vBarv:vBarv$1,vDash:vDash$1,vangrt:vangrt$1,varepsilon:varepsilon$1,varkappa:varkappa$1,varnothing:varnothing$1,varphi:varphi$1,varpi:varpi$1,varpropto:varpropto$1,varr:varr$1,varrho:varrho$1,varsigma:varsigma$1,varsubsetneq:varsubsetneq$1,varsubsetneqq:varsubsetneqq$1,varsupsetneq:varsupsetneq$1,varsupsetneqq:varsupsetneqq$1,vartheta:vartheta$1,vartriangleleft:vartriangleleft$1,vartriangleright:vartriangleright$1,vcy:vcy$1,vdash:vdash$1,vee:vee$1,veebar:veebar$1,veeeq:veeeq$1,vellip:vellip$1,verbar:verbar$1,vert:vert$1,vfr:vfr$1,vltri:vltri$1,vnsub:vnsub$1,vnsup:vnsup$1,vopf:vopf$1,vprop:vprop$1,vrtri:vrtri$1,vscr:vscr$1,vsubnE:vsubnE$1,vsubne:vsubne$1,vsupnE:vsupnE$1,vsupne:vsupne$1,vzigzag:vzigzag$1,wcirc:wcirc$1,wedbar:wedbar$1,wedge:wedge$1,wedgeq:wedgeq$1,weierp:weierp$1,wfr:wfr$1,wopf:wopf$1,wp:wp$1,wr:wr$1,wreath:wreath$1,wscr:wscr$1,xcap:xcap$1,xcirc:xcirc$1,xcup:xcup$1,xdtri:xdtri$1,xfr:xfr$1,xhArr:xhArr$1,xharr:xharr$1,xi:xi$1,xlArr:xlArr$1,xlarr:xlarr$1,xmap:xmap$1,xnis:xnis$1,xodot:xodot$1,xopf:xopf$1,xoplus:xoplus$1,xotime:xotime$1,xrArr:xrArr$1,xrarr:xrarr$1,xscr:xscr$1,xsqcup:xsqcup$1,xuplus:xuplus$1,xutri:xutri$1,xvee:xvee$1,xwedge:xwedge$1,yacut:yacut,yacute:yacute$2,yacy:yacy$1,ycirc:ycirc$1,ycy:ycy$1,ye:ye$1,yen:yen$2,yfr:yfr$1,yicy:yicy$1,yopf:yopf$1,yscr:yscr$1,yucy:yucy$1,yum:yum,yuml:yuml$2,zacute:zacute$1,zcaron:zcaron$1,zcy:zcy$1,zdot:zdot$1,zeetrf:zeetrf$1,zeta:zeta$1,zfr:zfr$1,zhcy:zhcy$1,zigrarr:zigrarr$1,zopf:zopf$1,zscr:zscr$1,zwj:zwj$1,zwnj:zwnj$1};

    var characterEntities$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AEli: AEli,
        AElig: AElig$2,
        AM: AM,
        AMP: AMP$2,
        Aacut: Aacut,
        Aacute: Aacute$2,
        Abreve: Abreve$1,
        Acir: Acir,
        Acirc: Acirc$2,
        Acy: Acy$1,
        Afr: Afr$1,
        Agrav: Agrav,
        Agrave: Agrave$2,
        Alpha: Alpha$1,
        Amacr: Amacr$1,
        And: And$1,
        Aogon: Aogon$1,
        Aopf: Aopf$1,
        ApplyFunction: ApplyFunction$1,
        Arin: Arin,
        Aring: Aring$2,
        Ascr: Ascr$1,
        Assign: Assign$1,
        Atild: Atild,
        Atilde: Atilde$2,
        Aum: Aum,
        Auml: Auml$2,
        Backslash: Backslash$1,
        Barv: Barv$1,
        Barwed: Barwed$1,
        Bcy: Bcy$1,
        Because: Because$1,
        Bernoullis: Bernoullis$1,
        Beta: Beta$1,
        Bfr: Bfr$1,
        Bopf: Bopf$1,
        Breve: Breve$1,
        Bscr: Bscr$1,
        Bumpeq: Bumpeq$1,
        CHcy: CHcy$1,
        COP: COP,
        COPY: COPY$2,
        Cacute: Cacute$1,
        Cap: Cap$1,
        CapitalDifferentialD: CapitalDifferentialD$1,
        Cayleys: Cayleys$1,
        Ccaron: Ccaron$1,
        Ccedi: Ccedi,
        Ccedil: Ccedil$2,
        Ccirc: Ccirc$1,
        Cconint: Cconint$1,
        Cdot: Cdot$1,
        Cedilla: Cedilla$1,
        CenterDot: CenterDot$1,
        Cfr: Cfr$1,
        Chi: Chi$1,
        CircleDot: CircleDot$1,
        CircleMinus: CircleMinus$1,
        CirclePlus: CirclePlus$1,
        CircleTimes: CircleTimes$1,
        ClockwiseContourIntegral: ClockwiseContourIntegral$1,
        CloseCurlyDoubleQuote: CloseCurlyDoubleQuote$1,
        CloseCurlyQuote: CloseCurlyQuote$1,
        Colon: Colon$1,
        Colone: Colone$1,
        Congruent: Congruent$1,
        Conint: Conint$1,
        ContourIntegral: ContourIntegral$1,
        Copf: Copf$1,
        Coproduct: Coproduct$1,
        CounterClockwiseContourIntegral: CounterClockwiseContourIntegral$1,
        Cross: Cross$1,
        Cscr: Cscr$1,
        Cup: Cup$1,
        CupCap: CupCap$1,
        DD: DD$1,
        DDotrahd: DDotrahd$1,
        DJcy: DJcy$1,
        DScy: DScy$1,
        DZcy: DZcy$1,
        Dagger: Dagger$1,
        Darr: Darr$1,
        Dashv: Dashv$1,
        Dcaron: Dcaron$1,
        Dcy: Dcy$1,
        Del: Del$1,
        Delta: Delta$1,
        Dfr: Dfr$1,
        DiacriticalAcute: DiacriticalAcute$1,
        DiacriticalDot: DiacriticalDot$1,
        DiacriticalDoubleAcute: DiacriticalDoubleAcute$1,
        DiacriticalGrave: DiacriticalGrave$1,
        DiacriticalTilde: DiacriticalTilde$1,
        Diamond: Diamond$1,
        DifferentialD: DifferentialD$1,
        Dopf: Dopf$1,
        Dot: Dot$1,
        DotDot: DotDot$1,
        DotEqual: DotEqual$1,
        DoubleContourIntegral: DoubleContourIntegral$1,
        DoubleDot: DoubleDot$1,
        DoubleDownArrow: DoubleDownArrow$1,
        DoubleLeftArrow: DoubleLeftArrow$1,
        DoubleLeftRightArrow: DoubleLeftRightArrow$1,
        DoubleLeftTee: DoubleLeftTee$1,
        DoubleLongLeftArrow: DoubleLongLeftArrow$1,
        DoubleLongLeftRightArrow: DoubleLongLeftRightArrow$1,
        DoubleLongRightArrow: DoubleLongRightArrow$1,
        DoubleRightArrow: DoubleRightArrow$1,
        DoubleRightTee: DoubleRightTee$1,
        DoubleUpArrow: DoubleUpArrow$1,
        DoubleUpDownArrow: DoubleUpDownArrow$1,
        DoubleVerticalBar: DoubleVerticalBar$1,
        DownArrow: DownArrow$1,
        DownArrowBar: DownArrowBar$1,
        DownArrowUpArrow: DownArrowUpArrow$1,
        DownBreve: DownBreve$1,
        DownLeftRightVector: DownLeftRightVector$1,
        DownLeftTeeVector: DownLeftTeeVector$1,
        DownLeftVector: DownLeftVector$1,
        DownLeftVectorBar: DownLeftVectorBar$1,
        DownRightTeeVector: DownRightTeeVector$1,
        DownRightVector: DownRightVector$1,
        DownRightVectorBar: DownRightVectorBar$1,
        DownTee: DownTee$1,
        DownTeeArrow: DownTeeArrow$1,
        Downarrow: Downarrow$1,
        Dscr: Dscr$1,
        Dstrok: Dstrok$1,
        ENG: ENG$1,
        ET: ET,
        ETH: ETH$2,
        Eacut: Eacut,
        Eacute: Eacute$2,
        Ecaron: Ecaron$1,
        Ecir: Ecir,
        Ecirc: Ecirc$2,
        Ecy: Ecy$1,
        Edot: Edot$1,
        Efr: Efr$1,
        Egrav: Egrav,
        Egrave: Egrave$2,
        Element: Element$4,
        Emacr: Emacr$1,
        EmptySmallSquare: EmptySmallSquare$1,
        EmptyVerySmallSquare: EmptyVerySmallSquare$1,
        Eogon: Eogon$1,
        Eopf: Eopf$1,
        Epsilon: Epsilon$1,
        Equal: Equal$1,
        EqualTilde: EqualTilde$1,
        Equilibrium: Equilibrium$1,
        Escr: Escr$1,
        Esim: Esim$1,
        Eta: Eta$1,
        Eum: Eum,
        Euml: Euml$2,
        Exists: Exists$1,
        ExponentialE: ExponentialE$1,
        Fcy: Fcy$1,
        Ffr: Ffr$1,
        FilledSmallSquare: FilledSmallSquare$1,
        FilledVerySmallSquare: FilledVerySmallSquare$1,
        Fopf: Fopf$1,
        ForAll: ForAll$1,
        Fouriertrf: Fouriertrf$1,
        Fscr: Fscr$1,
        GJcy: GJcy$1,
        G: G$1,
        GT: GT$2,
        Gamma: Gamma$1,
        Gammad: Gammad$1,
        Gbreve: Gbreve$1,
        Gcedil: Gcedil$1,
        Gcirc: Gcirc$1,
        Gcy: Gcy$1,
        Gdot: Gdot$1,
        Gfr: Gfr$1,
        Gg: Gg$1,
        Gopf: Gopf$1,
        GreaterEqual: GreaterEqual$1,
        GreaterEqualLess: GreaterEqualLess$1,
        GreaterFullEqual: GreaterFullEqual$1,
        GreaterGreater: GreaterGreater$1,
        GreaterLess: GreaterLess$1,
        GreaterSlantEqual: GreaterSlantEqual$1,
        GreaterTilde: GreaterTilde$1,
        Gscr: Gscr$1,
        Gt: Gt$2,
        HARDcy: HARDcy$1,
        Hacek: Hacek$1,
        Hat: Hat$1,
        Hcirc: Hcirc$1,
        Hfr: Hfr$1,
        HilbertSpace: HilbertSpace$1,
        Hopf: Hopf$1,
        HorizontalLine: HorizontalLine$1,
        Hscr: Hscr$1,
        Hstrok: Hstrok$1,
        HumpDownHump: HumpDownHump$1,
        HumpEqual: HumpEqual$1,
        IEcy: IEcy$1,
        IJlig: IJlig$1,
        IOcy: IOcy$1,
        Iacut: Iacut,
        Iacute: Iacute$2,
        Icir: Icir,
        Icirc: Icirc$2,
        Icy: Icy$1,
        Idot: Idot$1,
        Ifr: Ifr$1,
        Igrav: Igrav,
        Igrave: Igrave$2,
        Im: Im$1,
        Imacr: Imacr$1,
        ImaginaryI: ImaginaryI$1,
        Implies: Implies$1,
        Int: Int$1,
        Integral: Integral$1,
        Intersection: Intersection$1,
        InvisibleComma: InvisibleComma$1,
        InvisibleTimes: InvisibleTimes$1,
        Iogon: Iogon$1,
        Iopf: Iopf$1,
        Iota: Iota$1,
        Iscr: Iscr$1,
        Itilde: Itilde$1,
        Iukcy: Iukcy$1,
        Ium: Ium,
        Iuml: Iuml$2,
        Jcirc: Jcirc$1,
        Jcy: Jcy$1,
        Jfr: Jfr$1,
        Jopf: Jopf$1,
        Jscr: Jscr$1,
        Jsercy: Jsercy$1,
        Jukcy: Jukcy$1,
        KHcy: KHcy$1,
        KJcy: KJcy$1,
        Kappa: Kappa$1,
        Kcedil: Kcedil$1,
        Kcy: Kcy$1,
        Kfr: Kfr$1,
        Kopf: Kopf$1,
        Kscr: Kscr$1,
        LJcy: LJcy$1,
        L: L$1,
        LT: LT$2,
        Lacute: Lacute$1,
        Lambda: Lambda$1,
        Lang: Lang$1,
        Laplacetrf: Laplacetrf$1,
        Larr: Larr$1,
        Lcaron: Lcaron$1,
        Lcedil: Lcedil$1,
        Lcy: Lcy$1,
        LeftAngleBracket: LeftAngleBracket$1,
        LeftArrow: LeftArrow$1,
        LeftArrowBar: LeftArrowBar$1,
        LeftArrowRightArrow: LeftArrowRightArrow$1,
        LeftCeiling: LeftCeiling$1,
        LeftDoubleBracket: LeftDoubleBracket$1,
        LeftDownTeeVector: LeftDownTeeVector$1,
        LeftDownVector: LeftDownVector$1,
        LeftDownVectorBar: LeftDownVectorBar$1,
        LeftFloor: LeftFloor$1,
        LeftRightArrow: LeftRightArrow$1,
        LeftRightVector: LeftRightVector$1,
        LeftTee: LeftTee$1,
        LeftTeeArrow: LeftTeeArrow$1,
        LeftTeeVector: LeftTeeVector$1,
        LeftTriangle: LeftTriangle$1,
        LeftTriangleBar: LeftTriangleBar$1,
        LeftTriangleEqual: LeftTriangleEqual$1,
        LeftUpDownVector: LeftUpDownVector$1,
        LeftUpTeeVector: LeftUpTeeVector$1,
        LeftUpVector: LeftUpVector$1,
        LeftUpVectorBar: LeftUpVectorBar$1,
        LeftVector: LeftVector$1,
        LeftVectorBar: LeftVectorBar$1,
        Leftarrow: Leftarrow$1,
        Leftrightarrow: Leftrightarrow$1,
        LessEqualGreater: LessEqualGreater$1,
        LessFullEqual: LessFullEqual$1,
        LessGreater: LessGreater$1,
        LessLess: LessLess$1,
        LessSlantEqual: LessSlantEqual$1,
        LessTilde: LessTilde$1,
        Lfr: Lfr$1,
        Ll: Ll$1,
        Lleftarrow: Lleftarrow$1,
        Lmidot: Lmidot$1,
        LongLeftArrow: LongLeftArrow$1,
        LongLeftRightArrow: LongLeftRightArrow$1,
        LongRightArrow: LongRightArrow$1,
        Longleftarrow: Longleftarrow$1,
        Longleftrightarrow: Longleftrightarrow$1,
        Longrightarrow: Longrightarrow$1,
        Lopf: Lopf$1,
        LowerLeftArrow: LowerLeftArrow$1,
        LowerRightArrow: LowerRightArrow$1,
        Lscr: Lscr$1,
        Lsh: Lsh$1,
        Lstrok: Lstrok$1,
        Lt: Lt$2,
        Mcy: Mcy$1,
        MediumSpace: MediumSpace$1,
        Mellintrf: Mellintrf$1,
        Mfr: Mfr$1,
        MinusPlus: MinusPlus$1,
        Mopf: Mopf$1,
        Mscr: Mscr$1,
        Mu: Mu$1,
        NJcy: NJcy$1,
        Nacute: Nacute$1,
        Ncaron: Ncaron$1,
        Ncedil: Ncedil$1,
        Ncy: Ncy$1,
        NegativeMediumSpace: NegativeMediumSpace$1,
        NegativeThickSpace: NegativeThickSpace$1,
        NegativeThinSpace: NegativeThinSpace$1,
        NegativeVeryThinSpace: NegativeVeryThinSpace$1,
        NestedGreaterGreater: NestedGreaterGreater$1,
        NestedLessLess: NestedLessLess$1,
        NewLine: NewLine$1,
        Nfr: Nfr$1,
        NoBreak: NoBreak$1,
        NonBreakingSpace: NonBreakingSpace$1,
        Nopf: Nopf$1,
        Not: Not$1,
        NotCongruent: NotCongruent$1,
        NotCupCap: NotCupCap$1,
        NotDoubleVerticalBar: NotDoubleVerticalBar$1,
        NotElement: NotElement$1,
        NotEqual: NotEqual$1,
        NotEqualTilde: NotEqualTilde$1,
        NotExists: NotExists$1,
        NotGreater: NotGreater$1,
        NotGreaterEqual: NotGreaterEqual$1,
        NotGreaterFullEqual: NotGreaterFullEqual$1,
        NotGreaterGreater: NotGreaterGreater$1,
        NotGreaterLess: NotGreaterLess$1,
        NotGreaterSlantEqual: NotGreaterSlantEqual$1,
        NotGreaterTilde: NotGreaterTilde$1,
        NotHumpDownHump: NotHumpDownHump$1,
        NotHumpEqual: NotHumpEqual$1,
        NotLeftTriangle: NotLeftTriangle$1,
        NotLeftTriangleBar: NotLeftTriangleBar$1,
        NotLeftTriangleEqual: NotLeftTriangleEqual$1,
        NotLess: NotLess$1,
        NotLessEqual: NotLessEqual$1,
        NotLessGreater: NotLessGreater$1,
        NotLessLess: NotLessLess$1,
        NotLessSlantEqual: NotLessSlantEqual$1,
        NotLessTilde: NotLessTilde$1,
        NotNestedGreaterGreater: NotNestedGreaterGreater$1,
        NotNestedLessLess: NotNestedLessLess$1,
        NotPrecedes: NotPrecedes$1,
        NotPrecedesEqual: NotPrecedesEqual$1,
        NotPrecedesSlantEqual: NotPrecedesSlantEqual$1,
        NotReverseElement: NotReverseElement$1,
        NotRightTriangle: NotRightTriangle$1,
        NotRightTriangleBar: NotRightTriangleBar$1,
        NotRightTriangleEqual: NotRightTriangleEqual$1,
        NotSquareSubset: NotSquareSubset$1,
        NotSquareSubsetEqual: NotSquareSubsetEqual$1,
        NotSquareSuperset: NotSquareSuperset$1,
        NotSquareSupersetEqual: NotSquareSupersetEqual$1,
        NotSubset: NotSubset$1,
        NotSubsetEqual: NotSubsetEqual$1,
        NotSucceeds: NotSucceeds$1,
        NotSucceedsEqual: NotSucceedsEqual$1,
        NotSucceedsSlantEqual: NotSucceedsSlantEqual$1,
        NotSucceedsTilde: NotSucceedsTilde$1,
        NotSuperset: NotSuperset$1,
        NotSupersetEqual: NotSupersetEqual$1,
        NotTilde: NotTilde$1,
        NotTildeEqual: NotTildeEqual$1,
        NotTildeFullEqual: NotTildeFullEqual$1,
        NotTildeTilde: NotTildeTilde$1,
        NotVerticalBar: NotVerticalBar$1,
        Nscr: Nscr$1,
        Ntild: Ntild,
        Ntilde: Ntilde$2,
        Nu: Nu$1,
        OElig: OElig$1,
        Oacut: Oacut,
        Oacute: Oacute$2,
        Ocir: Ocir,
        Ocirc: Ocirc$2,
        Ocy: Ocy$1,
        Odblac: Odblac$1,
        Ofr: Ofr$1,
        Ograv: Ograv,
        Ograve: Ograve$2,
        Omacr: Omacr$1,
        Omega: Omega$1,
        Omicron: Omicron$1,
        Oopf: Oopf$1,
        OpenCurlyDoubleQuote: OpenCurlyDoubleQuote$1,
        OpenCurlyQuote: OpenCurlyQuote$1,
        Or: Or$1,
        Oscr: Oscr$1,
        Oslas: Oslas,
        Oslash: Oslash$2,
        Otild: Otild,
        Otilde: Otilde$2,
        Otimes: Otimes$1,
        Oum: Oum,
        Ouml: Ouml$2,
        OverBar: OverBar$1,
        OverBrace: OverBrace$1,
        OverBracket: OverBracket$1,
        OverParenthesis: OverParenthesis$1,
        PartialD: PartialD$1,
        Pcy: Pcy$1,
        Pfr: Pfr$1,
        Phi: Phi$1,
        Pi: Pi$1,
        PlusMinus: PlusMinus$1,
        Poincareplane: Poincareplane$1,
        Popf: Popf$1,
        Pr: Pr$1,
        Precedes: Precedes$1,
        PrecedesEqual: PrecedesEqual$1,
        PrecedesSlantEqual: PrecedesSlantEqual$1,
        PrecedesTilde: PrecedesTilde$1,
        Prime: Prime$1,
        Product: Product$1,
        Proportion: Proportion$1,
        Proportional: Proportional$1,
        Pscr: Pscr$1,
        Psi: Psi$1,
        QUO: QUO,
        QUOT: QUOT$2,
        Qfr: Qfr$1,
        Qopf: Qopf$1,
        Qscr: Qscr$1,
        RBarr: RBarr$1,
        RE: RE,
        REG: REG$2,
        Racute: Racute$1,
        Rang: Rang$1,
        Rarr: Rarr$1,
        Rarrtl: Rarrtl$1,
        Rcaron: Rcaron$1,
        Rcedil: Rcedil$1,
        Rcy: Rcy$1,
        Re: Re$2,
        ReverseElement: ReverseElement$1,
        ReverseEquilibrium: ReverseEquilibrium$1,
        ReverseUpEquilibrium: ReverseUpEquilibrium$1,
        Rfr: Rfr$1,
        Rho: Rho$1,
        RightAngleBracket: RightAngleBracket$1,
        RightArrow: RightArrow$1,
        RightArrowBar: RightArrowBar$1,
        RightArrowLeftArrow: RightArrowLeftArrow$1,
        RightCeiling: RightCeiling$1,
        RightDoubleBracket: RightDoubleBracket$1,
        RightDownTeeVector: RightDownTeeVector$1,
        RightDownVector: RightDownVector$1,
        RightDownVectorBar: RightDownVectorBar$1,
        RightFloor: RightFloor$1,
        RightTee: RightTee$1,
        RightTeeArrow: RightTeeArrow$1,
        RightTeeVector: RightTeeVector$1,
        RightTriangle: RightTriangle$1,
        RightTriangleBar: RightTriangleBar$1,
        RightTriangleEqual: RightTriangleEqual$1,
        RightUpDownVector: RightUpDownVector$1,
        RightUpTeeVector: RightUpTeeVector$1,
        RightUpVector: RightUpVector$1,
        RightUpVectorBar: RightUpVectorBar$1,
        RightVector: RightVector$1,
        RightVectorBar: RightVectorBar$1,
        Rightarrow: Rightarrow$1,
        Ropf: Ropf$1,
        RoundImplies: RoundImplies$1,
        Rrightarrow: Rrightarrow$1,
        Rscr: Rscr$1,
        Rsh: Rsh$1,
        RuleDelayed: RuleDelayed$1,
        SHCHcy: SHCHcy$1,
        SHcy: SHcy$1,
        SOFTcy: SOFTcy$1,
        Sacute: Sacute$1,
        Sc: Sc$1,
        Scaron: Scaron$1,
        Scedil: Scedil$1,
        Scirc: Scirc$1,
        Scy: Scy$1,
        Sfr: Sfr$1,
        ShortDownArrow: ShortDownArrow$1,
        ShortLeftArrow: ShortLeftArrow$1,
        ShortRightArrow: ShortRightArrow$1,
        ShortUpArrow: ShortUpArrow$1,
        Sigma: Sigma$1,
        SmallCircle: SmallCircle$1,
        Sopf: Sopf$1,
        Sqrt: Sqrt$1,
        Square: Square$1,
        SquareIntersection: SquareIntersection$1,
        SquareSubset: SquareSubset$1,
        SquareSubsetEqual: SquareSubsetEqual$1,
        SquareSuperset: SquareSuperset$1,
        SquareSupersetEqual: SquareSupersetEqual$1,
        SquareUnion: SquareUnion$1,
        Sscr: Sscr$1,
        Star: Star$1,
        Sub: Sub$1,
        Subset: Subset$1,
        SubsetEqual: SubsetEqual$1,
        Succeeds: Succeeds$1,
        SucceedsEqual: SucceedsEqual$1,
        SucceedsSlantEqual: SucceedsSlantEqual$1,
        SucceedsTilde: SucceedsTilde$1,
        SuchThat: SuchThat$1,
        Sum: Sum$1,
        Sup: Sup$1,
        Superset: Superset$1,
        SupersetEqual: SupersetEqual$1,
        Supset: Supset$1,
        THOR: THOR,
        THORN: THORN$2,
        TRADE: TRADE$1,
        TSHcy: TSHcy$1,
        TScy: TScy$1,
        Tab: Tab$1,
        Tau: Tau$1,
        Tcaron: Tcaron$1,
        Tcedil: Tcedil$1,
        Tcy: Tcy$1,
        Tfr: Tfr$1,
        Therefore: Therefore$1,
        Theta: Theta$1,
        ThickSpace: ThickSpace$1,
        ThinSpace: ThinSpace$1,
        Tilde: Tilde$1,
        TildeEqual: TildeEqual$1,
        TildeFullEqual: TildeFullEqual$1,
        TildeTilde: TildeTilde$1,
        Topf: Topf$1,
        TripleDot: TripleDot$1,
        Tscr: Tscr$1,
        Tstrok: Tstrok$1,
        Uacut: Uacut,
        Uacute: Uacute$2,
        Uarr: Uarr$1,
        Uarrocir: Uarrocir$1,
        Ubrcy: Ubrcy$1,
        Ubreve: Ubreve$1,
        Ucir: Ucir,
        Ucirc: Ucirc$2,
        Ucy: Ucy$1,
        Udblac: Udblac$1,
        Ufr: Ufr$1,
        Ugrav: Ugrav,
        Ugrave: Ugrave$2,
        Umacr: Umacr$1,
        UnderBar: UnderBar$1,
        UnderBrace: UnderBrace$1,
        UnderBracket: UnderBracket$1,
        UnderParenthesis: UnderParenthesis$1,
        Union: Union$1,
        UnionPlus: UnionPlus$1,
        Uogon: Uogon$1,
        Uopf: Uopf$1,
        UpArrow: UpArrow$1,
        UpArrowBar: UpArrowBar$1,
        UpArrowDownArrow: UpArrowDownArrow$1,
        UpDownArrow: UpDownArrow$1,
        UpEquilibrium: UpEquilibrium$1,
        UpTee: UpTee$1,
        UpTeeArrow: UpTeeArrow$1,
        Uparrow: Uparrow$1,
        Updownarrow: Updownarrow$1,
        UpperLeftArrow: UpperLeftArrow$1,
        UpperRightArrow: UpperRightArrow$1,
        Upsi: Upsi$1,
        Upsilon: Upsilon$1,
        Uring: Uring$1,
        Uscr: Uscr$1,
        Utilde: Utilde$1,
        Uum: Uum,
        Uuml: Uuml$2,
        VDash: VDash$1,
        Vbar: Vbar$1,
        Vcy: Vcy$1,
        Vdash: Vdash$1,
        Vdashl: Vdashl$1,
        Vee: Vee$1,
        Verbar: Verbar$1,
        Vert: Vert$1,
        VerticalBar: VerticalBar$1,
        VerticalLine: VerticalLine$1,
        VerticalSeparator: VerticalSeparator$1,
        VerticalTilde: VerticalTilde$1,
        VeryThinSpace: VeryThinSpace$1,
        Vfr: Vfr$1,
        Vopf: Vopf$1,
        Vscr: Vscr$1,
        Vvdash: Vvdash$1,
        Wcirc: Wcirc$1,
        Wedge: Wedge$1,
        Wfr: Wfr$1,
        Wopf: Wopf$1,
        Wscr: Wscr$1,
        Xfr: Xfr$1,
        Xi: Xi$1,
        Xopf: Xopf$1,
        Xscr: Xscr$1,
        YAcy: YAcy$1,
        YIcy: YIcy$1,
        YUcy: YUcy$1,
        Yacut: Yacut,
        Yacute: Yacute$2,
        Ycirc: Ycirc$1,
        Ycy: Ycy$1,
        Yfr: Yfr$1,
        Yopf: Yopf$1,
        Yscr: Yscr$1,
        Yuml: Yuml$1,
        ZHcy: ZHcy$1,
        Zacute: Zacute$1,
        Zcaron: Zcaron$1,
        Zcy: Zcy$1,
        Zdot: Zdot$1,
        ZeroWidthSpace: ZeroWidthSpace$1,
        Zeta: Zeta$1,
        Zfr: Zfr$1,
        Zopf: Zopf$1,
        Zscr: Zscr$1,
        aacut: aacut,
        aacute: aacute$2,
        abreve: abreve$1,
        ac: ac$1,
        acE: acE$1,
        acd: acd$1,
        acir: acir,
        acirc: acirc$2,
        acut: acut,
        acute: acute$2,
        acy: acy$1,
        aeli: aeli,
        aelig: aelig$2,
        af: af$1,
        afr: afr$1,
        agrav: agrav,
        agrave: agrave$2,
        alefsym: alefsym$1,
        aleph: aleph$1,
        alpha: alpha$1,
        amacr: amacr$1,
        amalg: amalg$1,
        am: am,
        amp: amp$3,
        and: and$1,
        andand: andand$1,
        andd: andd$1,
        andslope: andslope$1,
        andv: andv$1,
        ang: ang$1,
        ange: ange$1,
        angle: angle$1,
        angmsd: angmsd$1,
        angmsdaa: angmsdaa$1,
        angmsdab: angmsdab$1,
        angmsdac: angmsdac$1,
        angmsdad: angmsdad$1,
        angmsdae: angmsdae$1,
        angmsdaf: angmsdaf$1,
        angmsdag: angmsdag$1,
        angmsdah: angmsdah$1,
        angrt: angrt$1,
        angrtvb: angrtvb$1,
        angrtvbd: angrtvbd$1,
        angsph: angsph$1,
        angst: angst$1,
        angzarr: angzarr$1,
        aogon: aogon$1,
        aopf: aopf$1,
        ap: ap$1,
        apE: apE$1,
        apacir: apacir$1,
        ape: ape$1,
        apid: apid$1,
        apos: apos$2,
        approx: approx$1,
        approxeq: approxeq$1,
        arin: arin,
        aring: aring$2,
        ascr: ascr$1,
        ast: ast$1,
        asymp: asymp$1,
        asympeq: asympeq$1,
        atild: atild,
        atilde: atilde$2,
        aum: aum,
        auml: auml$2,
        awconint: awconint$1,
        awint: awint$1,
        bNot: bNot$1,
        backcong: backcong$1,
        backepsilon: backepsilon$1,
        backprime: backprime$1,
        backsim: backsim$1,
        backsimeq: backsimeq$1,
        barvee: barvee$1,
        barwed: barwed$1,
        barwedge: barwedge$1,
        bbrk: bbrk$1,
        bbrktbrk: bbrktbrk$1,
        bcong: bcong$1,
        bcy: bcy$1,
        bdquo: bdquo$1,
        becaus: becaus$1,
        because: because$1,
        bemptyv: bemptyv$1,
        bepsi: bepsi$1,
        bernou: bernou$1,
        beta: beta$1,
        beth: beth$1,
        between: between$1,
        bfr: bfr$1,
        bigcap: bigcap$1,
        bigcirc: bigcirc$1,
        bigcup: bigcup$1,
        bigodot: bigodot$1,
        bigoplus: bigoplus$1,
        bigotimes: bigotimes$1,
        bigsqcup: bigsqcup$1,
        bigstar: bigstar$1,
        bigtriangledown: bigtriangledown$1,
        bigtriangleup: bigtriangleup$1,
        biguplus: biguplus$1,
        bigvee: bigvee$1,
        bigwedge: bigwedge$1,
        bkarow: bkarow$1,
        blacklozenge: blacklozenge$1,
        blacksquare: blacksquare$1,
        blacktriangle: blacktriangle$1,
        blacktriangledown: blacktriangledown$1,
        blacktriangleleft: blacktriangleleft$1,
        blacktriangleright: blacktriangleright$1,
        blank: blank$1,
        blk12: blk12$1,
        blk14: blk14$1,
        blk34: blk34$1,
        block: block$1,
        bne: bne$1,
        bnequiv: bnequiv$1,
        bnot: bnot$1,
        bopf: bopf$1,
        bot: bot$1,
        bottom: bottom$1,
        bowtie: bowtie$1,
        boxDL: boxDL$1,
        boxDR: boxDR$1,
        boxDl: boxDl$1,
        boxDr: boxDr$1,
        boxH: boxH$1,
        boxHD: boxHD$1,
        boxHU: boxHU$1,
        boxHd: boxHd$1,
        boxHu: boxHu$1,
        boxUL: boxUL$1,
        boxUR: boxUR$1,
        boxUl: boxUl$1,
        boxUr: boxUr$1,
        boxV: boxV$1,
        boxVH: boxVH$1,
        boxVL: boxVL$1,
        boxVR: boxVR$1,
        boxVh: boxVh$1,
        boxVl: boxVl$1,
        boxVr: boxVr$1,
        boxbox: boxbox$1,
        boxdL: boxdL$1,
        boxdR: boxdR$1,
        boxdl: boxdl$1,
        boxdr: boxdr$1,
        boxh: boxh$1,
        boxhD: boxhD$1,
        boxhU: boxhU$1,
        boxhd: boxhd$1,
        boxhu: boxhu$1,
        boxminus: boxminus$1,
        boxplus: boxplus$1,
        boxtimes: boxtimes$1,
        boxuL: boxuL$1,
        boxuR: boxuR$1,
        boxul: boxul$1,
        boxur: boxur$1,
        boxv: boxv$1,
        boxvH: boxvH$1,
        boxvL: boxvL$1,
        boxvR: boxvR$1,
        boxvh: boxvh$1,
        boxvl: boxvl$1,
        boxvr: boxvr$1,
        bprime: bprime$1,
        breve: breve$1,
        brvba: brvba,
        brvbar: brvbar$2,
        bscr: bscr$1,
        bsemi: bsemi$1,
        bsim: bsim$1,
        bsime: bsime$1,
        bsol: bsol$1,
        bsolb: bsolb$1,
        bsolhsub: bsolhsub$1,
        bull: bull$1,
        bullet: bullet$1,
        bump: bump$1,
        bumpE: bumpE$1,
        bumpe: bumpe$1,
        bumpeq: bumpeq$1,
        cacute: cacute$1,
        cap: cap$1,
        capand: capand$1,
        capbrcup: capbrcup$1,
        capcap: capcap$1,
        capcup: capcup$1,
        capdot: capdot$1,
        caps: caps$1,
        caret: caret$1,
        caron: caron$1,
        ccaps: ccaps$1,
        ccaron: ccaron$1,
        ccedi: ccedi,
        ccedil: ccedil$2,
        ccirc: ccirc$1,
        ccups: ccups$1,
        ccupssm: ccupssm$1,
        cdot: cdot$1,
        cedi: cedi,
        cedil: cedil$2,
        cemptyv: cemptyv$1,
        cen: cen,
        cent: cent$2,
        centerdot: centerdot$1,
        cfr: cfr$1,
        chcy: chcy$1,
        check: check$1,
        checkmark: checkmark$1,
        chi: chi$1,
        cir: cir$1,
        cirE: cirE$1,
        circ: circ$1,
        circeq: circeq$1,
        circlearrowleft: circlearrowleft$1,
        circlearrowright: circlearrowright$1,
        circledR: circledR$1,
        circledS: circledS$1,
        circledast: circledast$1,
        circledcirc: circledcirc$1,
        circleddash: circleddash$1,
        cire: cire$1,
        cirfnint: cirfnint$1,
        cirmid: cirmid$1,
        cirscir: cirscir$1,
        clubs: clubs$1,
        clubsuit: clubsuit$1,
        colon: colon$1,
        colone: colone$1,
        coloneq: coloneq$1,
        comma: comma$1,
        commat: commat$1,
        comp: comp$1,
        compfn: compfn$1,
        complement: complement$1,
        complexes: complexes$1,
        cong: cong$1,
        congdot: congdot$1,
        conint: conint$1,
        copf: copf$1,
        coprod: coprod$1,
        cop: cop,
        copy: copy$2,
        copysr: copysr$1,
        crarr: crarr$1,
        cross: cross$1,
        cscr: cscr$1,
        csub: csub$1,
        csube: csube$1,
        csup: csup$1,
        csupe: csupe$1,
        ctdot: ctdot$1,
        cudarrl: cudarrl$1,
        cudarrr: cudarrr$1,
        cuepr: cuepr$1,
        cuesc: cuesc$1,
        cularr: cularr$1,
        cularrp: cularrp$1,
        cup: cup$1,
        cupbrcap: cupbrcap$1,
        cupcap: cupcap$1,
        cupcup: cupcup$1,
        cupdot: cupdot$1,
        cupor: cupor$1,
        cups: cups$1,
        curarr: curarr$1,
        curarrm: curarrm$1,
        curlyeqprec: curlyeqprec$1,
        curlyeqsucc: curlyeqsucc$1,
        curlyvee: curlyvee$1,
        curlywedge: curlywedge$1,
        curre: curre,
        curren: curren$2,
        curvearrowleft: curvearrowleft$1,
        curvearrowright: curvearrowright$1,
        cuvee: cuvee$1,
        cuwed: cuwed$1,
        cwconint: cwconint$1,
        cwint: cwint$1,
        cylcty: cylcty$1,
        dArr: dArr$1,
        dHar: dHar$1,
        dagger: dagger$1,
        daleth: daleth$1,
        darr: darr$1,
        dash: dash$1,
        dashv: dashv$1,
        dbkarow: dbkarow$1,
        dblac: dblac$1,
        dcaron: dcaron$1,
        dcy: dcy$1,
        dd: dd$1,
        ddagger: ddagger$1,
        ddarr: ddarr$1,
        ddotseq: ddotseq$1,
        de: de$1,
        deg: deg$2,
        delta: delta$1,
        demptyv: demptyv$1,
        dfisht: dfisht$1,
        dfr: dfr$1,
        dharl: dharl$1,
        dharr: dharr$1,
        diam: diam$1,
        diamond: diamond$1,
        diamondsuit: diamondsuit$1,
        diams: diams$1,
        die: die$1,
        digamma: digamma$1,
        disin: disin$1,
        div: div$1,
        divid: divid,
        divide: divide$2,
        divideontimes: divideontimes$1,
        divonx: divonx$1,
        djcy: djcy$1,
        dlcorn: dlcorn$1,
        dlcrop: dlcrop$1,
        dollar: dollar$1,
        dopf: dopf$1,
        dot: dot$1,
        doteq: doteq$1,
        doteqdot: doteqdot$1,
        dotminus: dotminus$1,
        dotplus: dotplus$1,
        dotsquare: dotsquare$1,
        doublebarwedge: doublebarwedge$1,
        downarrow: downarrow$1,
        downdownarrows: downdownarrows$1,
        downharpoonleft: downharpoonleft$1,
        downharpoonright: downharpoonright$1,
        drbkarow: drbkarow$1,
        drcorn: drcorn$1,
        drcrop: drcrop$1,
        dscr: dscr$1,
        dscy: dscy$1,
        dsol: dsol$1,
        dstrok: dstrok$1,
        dtdot: dtdot$1,
        dtri: dtri$1,
        dtrif: dtrif$1,
        duarr: duarr$1,
        duhar: duhar$1,
        dwangle: dwangle$1,
        dzcy: dzcy$1,
        dzigrarr: dzigrarr$1,
        eDDot: eDDot$1,
        eDot: eDot$1,
        eacut: eacut,
        eacute: eacute$2,
        easter: easter$1,
        ecaron: ecaron$1,
        ecir: ecir$1,
        ecirc: ecirc$2,
        ecolon: ecolon$1,
        ecy: ecy$1,
        edot: edot$1,
        ee: ee$2,
        efDot: efDot$1,
        efr: efr$1,
        eg: eg$1,
        egrav: egrav,
        egrave: egrave$2,
        egs: egs$1,
        egsdot: egsdot$1,
        el: el$1,
        elinters: elinters$1,
        ell: ell$1,
        els: els$1,
        elsdot: elsdot$1,
        emacr: emacr$1,
        empty: empty$1,
        emptyset: emptyset$1,
        emptyv: emptyv$1,
        emsp13: emsp13$1,
        emsp14: emsp14$1,
        emsp: emsp$1,
        eng: eng$1,
        ensp: ensp$1,
        eogon: eogon$1,
        eopf: eopf$1,
        epar: epar$1,
        eparsl: eparsl$1,
        eplus: eplus$1,
        epsi: epsi$1,
        epsilon: epsilon$1,
        epsiv: epsiv$1,
        eqcirc: eqcirc$1,
        eqcolon: eqcolon$1,
        eqsim: eqsim$1,
        eqslantgtr: eqslantgtr$1,
        eqslantless: eqslantless$1,
        equals: equals$2,
        equest: equest$1,
        equiv: equiv$1,
        equivDD: equivDD$1,
        eqvparsl: eqvparsl$1,
        erDot: erDot$1,
        erarr: erarr$1,
        escr: escr$1,
        esdot: esdot$1,
        esim: esim$1,
        eta: eta$1,
        et: et$1,
        eth: eth$2,
        eum: eum,
        euml: euml$2,
        euro: euro$1,
        excl: excl$1,
        exist: exist$1,
        expectation: expectation$1,
        exponentiale: exponentiale$1,
        fallingdotseq: fallingdotseq$1,
        fcy: fcy$1,
        female: female$1,
        ffilig: ffilig$1,
        fflig: fflig$1,
        ffllig: ffllig$1,
        ffr: ffr$1,
        filig: filig$1,
        fjlig: fjlig$1,
        flat: flat$1,
        fllig: fllig$1,
        fltns: fltns$1,
        fnof: fnof$1,
        fopf: fopf$1,
        forall: forall$1,
        fork: fork$1,
        forkv: forkv$1,
        fpartint: fpartint$1,
        frac1: frac1,
        frac12: frac12$2,
        frac13: frac13$1,
        frac14: frac14$2,
        frac15: frac15$1,
        frac16: frac16$1,
        frac18: frac18$1,
        frac23: frac23$1,
        frac25: frac25$1,
        frac3: frac3,
        frac34: frac34$2,
        frac35: frac35$1,
        frac38: frac38$1,
        frac45: frac45$1,
        frac56: frac56$1,
        frac58: frac58$1,
        frac78: frac78$1,
        frasl: frasl$1,
        frown: frown$1,
        fscr: fscr$1,
        gE: gE$1,
        gEl: gEl$1,
        gacute: gacute$1,
        gamma: gamma$1,
        gammad: gammad$1,
        gap: gap$1,
        gbreve: gbreve$1,
        gcirc: gcirc$1,
        gcy: gcy$1,
        gdot: gdot$1,
        ge: ge$2,
        gel: gel$1,
        geq: geq$1,
        geqq: geqq$1,
        geqslant: geqslant$1,
        ges: ges$1,
        gescc: gescc$1,
        gesdot: gesdot$1,
        gesdoto: gesdoto$1,
        gesdotol: gesdotol$1,
        gesl: gesl$1,
        gesles: gesles$1,
        gfr: gfr$1,
        gg: gg$1,
        ggg: ggg$1,
        gimel: gimel$1,
        gjcy: gjcy$1,
        gl: gl$1,
        glE: glE$1,
        gla: gla$1,
        glj: glj$1,
        gnE: gnE$1,
        gnap: gnap$1,
        gnapprox: gnapprox$1,
        gne: gne$1,
        gneq: gneq$1,
        gneqq: gneqq$1,
        gnsim: gnsim$1,
        gopf: gopf$1,
        grave: grave$1,
        gscr: gscr$1,
        gsim: gsim$1,
        gsime: gsime$1,
        gsiml: gsiml$1,
        g: g$2,
        gt: gt$4,
        gtcc: gtcc$1,
        gtcir: gtcir$1,
        gtdot: gtdot$1,
        gtlPar: gtlPar$1,
        gtquest: gtquest$1,
        gtrapprox: gtrapprox$1,
        gtrarr: gtrarr$1,
        gtrdot: gtrdot$1,
        gtreqless: gtreqless$1,
        gtreqqless: gtreqqless$1,
        gtrless: gtrless$1,
        gtrsim: gtrsim$1,
        gvertneqq: gvertneqq$1,
        gvnE: gvnE$1,
        hArr: hArr$1,
        hairsp: hairsp$1,
        half: half$1,
        hamilt: hamilt$1,
        hardcy: hardcy$1,
        harr: harr$1,
        harrcir: harrcir$1,
        harrw: harrw$1,
        hbar: hbar$1,
        hcirc: hcirc$1,
        hearts: hearts$1,
        heartsuit: heartsuit$1,
        hellip: hellip$1,
        hercon: hercon$1,
        hfr: hfr$1,
        hksearow: hksearow$1,
        hkswarow: hkswarow$1,
        hoarr: hoarr$1,
        homtht: homtht$1,
        hookleftarrow: hookleftarrow$1,
        hookrightarrow: hookrightarrow$1,
        hopf: hopf$1,
        horbar: horbar$1,
        hscr: hscr$1,
        hslash: hslash$1,
        hstrok: hstrok$1,
        hybull: hybull$1,
        hyphen: hyphen$1,
        iacut: iacut,
        iacute: iacute$2,
        ic: ic$1,
        icir: icir,
        icirc: icirc$2,
        icy: icy$1,
        iecy: iecy$1,
        iexc: iexc,
        iexcl: iexcl$2,
        iff: iff$1,
        ifr: ifr$1,
        igrav: igrav,
        igrave: igrave$2,
        ii: ii$1,
        iiiint: iiiint$1,
        iiint: iiint$1,
        iinfin: iinfin$1,
        iiota: iiota$1,
        ijlig: ijlig$1,
        imacr: imacr$1,
        image: image$1,
        imagline: imagline$1,
        imagpart: imagpart$1,
        imath: imath$1,
        imof: imof$1,
        imped: imped$1,
        incare: incare$1,
        infin: infin$1,
        infintie: infintie$1,
        inodot: inodot$1,
        int: int$1,
        intcal: intcal$1,
        integers: integers$1,
        intercal: intercal$1,
        intlarhk: intlarhk$1,
        intprod: intprod$1,
        iocy: iocy$1,
        iogon: iogon$1,
        iopf: iopf$1,
        iota: iota$1,
        iprod: iprod$1,
        iques: iques,
        iquest: iquest$2,
        iscr: iscr$1,
        isin: isin$1,
        isinE: isinE$1,
        isindot: isindot$1,
        isins: isins$1,
        isinsv: isinsv$1,
        isinv: isinv$1,
        it: it$2,
        itilde: itilde$1,
        iukcy: iukcy$1,
        ium: ium,
        iuml: iuml$2,
        jcirc: jcirc$1,
        jcy: jcy$1,
        jfr: jfr$1,
        jmath: jmath$1,
        jopf: jopf$1,
        jscr: jscr$1,
        jsercy: jsercy$1,
        jukcy: jukcy$1,
        kappa: kappa$1,
        kappav: kappav$1,
        kcedil: kcedil$1,
        kcy: kcy$1,
        kfr: kfr$1,
        kgreen: kgreen$1,
        khcy: khcy$1,
        kjcy: kjcy$1,
        kopf: kopf$1,
        kscr: kscr$1,
        lAarr: lAarr$1,
        lArr: lArr$1,
        lAtail: lAtail$1,
        lBarr: lBarr$1,
        lE: lE$1,
        lEg: lEg$1,
        lHar: lHar$1,
        lacute: lacute$1,
        laemptyv: laemptyv$1,
        lagran: lagran$1,
        lambda: lambda$1,
        lang: lang$1,
        langd: langd$1,
        langle: langle$1,
        lap: lap$1,
        laqu: laqu,
        laquo: laquo$2,
        larr: larr$1,
        larrb: larrb$1,
        larrbfs: larrbfs$1,
        larrfs: larrfs$1,
        larrhk: larrhk$1,
        larrlp: larrlp$1,
        larrpl: larrpl$1,
        larrsim: larrsim$1,
        larrtl: larrtl$1,
        lat: lat$1,
        latail: latail$1,
        late: late$1,
        lates: lates$1,
        lbarr: lbarr$1,
        lbbrk: lbbrk$1,
        lbrace: lbrace$1,
        lbrack: lbrack$1,
        lbrke: lbrke$1,
        lbrksld: lbrksld$1,
        lbrkslu: lbrkslu$1,
        lcaron: lcaron$1,
        lcedil: lcedil$1,
        lceil: lceil$1,
        lcub: lcub$1,
        lcy: lcy$1,
        ldca: ldca$1,
        ldquo: ldquo$1,
        ldquor: ldquor$1,
        ldrdhar: ldrdhar$1,
        ldrushar: ldrushar$1,
        ldsh: ldsh$1,
        le: le$2,
        leftarrow: leftarrow$1,
        leftarrowtail: leftarrowtail$1,
        leftharpoondown: leftharpoondown$1,
        leftharpoonup: leftharpoonup$1,
        leftleftarrows: leftleftarrows$1,
        leftrightarrow: leftrightarrow$1,
        leftrightarrows: leftrightarrows$1,
        leftrightharpoons: leftrightharpoons$1,
        leftrightsquigarrow: leftrightsquigarrow$1,
        leftthreetimes: leftthreetimes$1,
        leg: leg$1,
        leq: leq$1,
        leqq: leqq$1,
        leqslant: leqslant$1,
        les: les$1,
        lescc: lescc$1,
        lesdot: lesdot$1,
        lesdoto: lesdoto$1,
        lesdotor: lesdotor$1,
        lesg: lesg$1,
        lesges: lesges$1,
        lessapprox: lessapprox$1,
        lessdot: lessdot$1,
        lesseqgtr: lesseqgtr$1,
        lesseqqgtr: lesseqqgtr$1,
        lessgtr: lessgtr$1,
        lesssim: lesssim$1,
        lfisht: lfisht$1,
        lfloor: lfloor$1,
        lfr: lfr$1,
        lg: lg$1,
        lgE: lgE$1,
        lhard: lhard$1,
        lharu: lharu$1,
        lharul: lharul$1,
        lhblk: lhblk$1,
        ljcy: ljcy$1,
        ll: ll$1,
        llarr: llarr$1,
        llcorner: llcorner$1,
        llhard: llhard$1,
        lltri: lltri$1,
        lmidot: lmidot$1,
        lmoust: lmoust$1,
        lmoustache: lmoustache$1,
        lnE: lnE$1,
        lnap: lnap$1,
        lnapprox: lnapprox$1,
        lne: lne$1,
        lneq: lneq$1,
        lneqq: lneqq$1,
        lnsim: lnsim$1,
        loang: loang$1,
        loarr: loarr$1,
        lobrk: lobrk$1,
        longleftarrow: longleftarrow$1,
        longleftrightarrow: longleftrightarrow$1,
        longmapsto: longmapsto$1,
        longrightarrow: longrightarrow$1,
        looparrowleft: looparrowleft$1,
        looparrowright: looparrowright$1,
        lopar: lopar$1,
        lopf: lopf$1,
        loplus: loplus$1,
        lotimes: lotimes$1,
        lowast: lowast$1,
        lowbar: lowbar$1,
        loz: loz$1,
        lozenge: lozenge$1,
        lozf: lozf$1,
        lpar: lpar$1,
        lparlt: lparlt$1,
        lrarr: lrarr$1,
        lrcorner: lrcorner$1,
        lrhar: lrhar$1,
        lrhard: lrhard$1,
        lrm: lrm$1,
        lrtri: lrtri$1,
        lsaquo: lsaquo$1,
        lscr: lscr$1,
        lsh: lsh$1,
        lsim: lsim$1,
        lsime: lsime$1,
        lsimg: lsimg$1,
        lsqb: lsqb$1,
        lsquo: lsquo$1,
        lsquor: lsquor$1,
        lstrok: lstrok$1,
        l: l$2,
        lt: lt$4,
        ltcc: ltcc$1,
        ltcir: ltcir$1,
        ltdot: ltdot$1,
        lthree: lthree$1,
        ltimes: ltimes$1,
        ltlarr: ltlarr$1,
        ltquest: ltquest$1,
        ltrPar: ltrPar$1,
        ltri: ltri$1,
        ltrie: ltrie$1,
        ltrif: ltrif$1,
        lurdshar: lurdshar$1,
        luruhar: luruhar$1,
        lvertneqq: lvertneqq$1,
        lvnE: lvnE$1,
        mDDot: mDDot$1,
        mac: mac,
        macr: macr$2,
        male: male$1,
        malt: malt$1,
        maltese: maltese$1,
        map: map$3,
        mapsto: mapsto$1,
        mapstodown: mapstodown$1,
        mapstoleft: mapstoleft$1,
        mapstoup: mapstoup$1,
        marker: marker$1,
        mcomma: mcomma$1,
        mcy: mcy$1,
        mdash: mdash$1,
        measuredangle: measuredangle$1,
        mfr: mfr$1,
        mho: mho$1,
        micr: micr,
        micro: micro$2,
        mid: mid$1,
        midast: midast$1,
        midcir: midcir$1,
        middo: middo,
        middot: middot$2,
        minus: minus$1,
        minusb: minusb$1,
        minusd: minusd$1,
        minusdu: minusdu$1,
        mlcp: mlcp$1,
        mldr: mldr$1,
        mnplus: mnplus$1,
        models: models$1,
        mopf: mopf$1,
        mp: mp$1,
        mscr: mscr$1,
        mstpos: mstpos$1,
        mu: mu$1,
        multimap: multimap$1,
        mumap: mumap$1,
        nGg: nGg$1,
        nGt: nGt$1,
        nGtv: nGtv$1,
        nLeftarrow: nLeftarrow$1,
        nLeftrightarrow: nLeftrightarrow$1,
        nLl: nLl$1,
        nLt: nLt$1,
        nLtv: nLtv$1,
        nRightarrow: nRightarrow$1,
        nVDash: nVDash$1,
        nVdash: nVdash$1,
        nabla: nabla$1,
        nacute: nacute$1,
        nang: nang$1,
        nap: nap$1,
        napE: napE$1,
        napid: napid$1,
        napos: napos$1,
        napprox: napprox$1,
        natur: natur$1,
        natural: natural$1,
        naturals: naturals$1,
        nbs: nbs,
        nbsp: nbsp$2,
        nbump: nbump$1,
        nbumpe: nbumpe$1,
        ncap: ncap$1,
        ncaron: ncaron$1,
        ncedil: ncedil$1,
        ncong: ncong$1,
        ncongdot: ncongdot$1,
        ncup: ncup$1,
        ncy: ncy$1,
        ndash: ndash$1,
        ne: ne$2,
        neArr: neArr$1,
        nearhk: nearhk$1,
        nearr: nearr$1,
        nearrow: nearrow$1,
        nedot: nedot$1,
        nequiv: nequiv$1,
        nesear: nesear$1,
        nesim: nesim$1,
        nexist: nexist$1,
        nexists: nexists$1,
        nfr: nfr$1,
        ngE: ngE$1,
        nge: nge$1,
        ngeq: ngeq$1,
        ngeqq: ngeqq$1,
        ngeqslant: ngeqslant$1,
        nges: nges$1,
        ngsim: ngsim$1,
        ngt: ngt$1,
        ngtr: ngtr$1,
        nhArr: nhArr$1,
        nharr: nharr$1,
        nhpar: nhpar$1,
        ni: ni$1,
        nis: nis$1,
        nisd: nisd$1,
        niv: niv$1,
        njcy: njcy$1,
        nlArr: nlArr$1,
        nlE: nlE$1,
        nlarr: nlarr$1,
        nldr: nldr$1,
        nle: nle$1,
        nleftarrow: nleftarrow$1,
        nleftrightarrow: nleftrightarrow$1,
        nleq: nleq$1,
        nleqq: nleqq$1,
        nleqslant: nleqslant$1,
        nles: nles$1,
        nless: nless$1,
        nlsim: nlsim$1,
        nlt: nlt$1,
        nltri: nltri$1,
        nltrie: nltrie$1,
        nmid: nmid$1,
        nopf: nopf$1,
        no: no,
        not: not$2,
        notin: notin$1,
        notinE: notinE$1,
        notindot: notindot$1,
        notinva: notinva$1,
        notinvb: notinvb$1,
        notinvc: notinvc$1,
        notni: notni$1,
        notniva: notniva$1,
        notnivb: notnivb$1,
        notnivc: notnivc$1,
        npar: npar$1,
        nparallel: nparallel$1,
        nparsl: nparsl$1,
        npart: npart$1,
        npolint: npolint$1,
        npr: npr$1,
        nprcue: nprcue$1,
        npre: npre$1,
        nprec: nprec$1,
        npreceq: npreceq$1,
        nrArr: nrArr$1,
        nrarr: nrarr$1,
        nrarrc: nrarrc$1,
        nrarrw: nrarrw$1,
        nrightarrow: nrightarrow$1,
        nrtri: nrtri$1,
        nrtrie: nrtrie$1,
        nsc: nsc$1,
        nsccue: nsccue$1,
        nsce: nsce$1,
        nscr: nscr$1,
        nshortmid: nshortmid$1,
        nshortparallel: nshortparallel$1,
        nsim: nsim$1,
        nsime: nsime$1,
        nsimeq: nsimeq$1,
        nsmid: nsmid$1,
        nspar: nspar$1,
        nsqsube: nsqsube$1,
        nsqsupe: nsqsupe$1,
        nsub: nsub$1,
        nsubE: nsubE$1,
        nsube: nsube$1,
        nsubset: nsubset$1,
        nsubseteq: nsubseteq$1,
        nsubseteqq: nsubseteqq$1,
        nsucc: nsucc$1,
        nsucceq: nsucceq$1,
        nsup: nsup$1,
        nsupE: nsupE$1,
        nsupe: nsupe$1,
        nsupset: nsupset$1,
        nsupseteq: nsupseteq$1,
        nsupseteqq: nsupseteqq$1,
        ntgl: ntgl$1,
        ntild: ntild,
        ntilde: ntilde$2,
        ntlg: ntlg$1,
        ntriangleleft: ntriangleleft$1,
        ntrianglelefteq: ntrianglelefteq$1,
        ntriangleright: ntriangleright$1,
        ntrianglerighteq: ntrianglerighteq$1,
        nu: nu$1,
        num: num$1,
        numero: numero$1,
        numsp: numsp$1,
        nvDash: nvDash$1,
        nvHarr: nvHarr$1,
        nvap: nvap$1,
        nvdash: nvdash$1,
        nvge: nvge$1,
        nvgt: nvgt$1,
        nvinfin: nvinfin$1,
        nvlArr: nvlArr$1,
        nvle: nvle$1,
        nvlt: nvlt$1,
        nvltrie: nvltrie$1,
        nvrArr: nvrArr$1,
        nvrtrie: nvrtrie$1,
        nvsim: nvsim$1,
        nwArr: nwArr$1,
        nwarhk: nwarhk$1,
        nwarr: nwarr$1,
        nwarrow: nwarrow$1,
        nwnear: nwnear$1,
        oS: oS$1,
        oacut: oacut,
        oacute: oacute$2,
        oast: oast$1,
        ocir: ocir$1,
        ocirc: ocirc$2,
        ocy: ocy$1,
        odash: odash$1,
        odblac: odblac$1,
        odiv: odiv$1,
        odot: odot$1,
        odsold: odsold$1,
        oelig: oelig$1,
        ofcir: ofcir$1,
        ofr: ofr$1,
        ogon: ogon$1,
        ograv: ograv,
        ograve: ograve$2,
        ogt: ogt$1,
        ohbar: ohbar$1,
        ohm: ohm$1,
        oint: oint$1,
        olarr: olarr$1,
        olcir: olcir$1,
        olcross: olcross$1,
        oline: oline$1,
        olt: olt$1,
        omacr: omacr$1,
        omega: omega$1,
        omicron: omicron$1,
        omid: omid$1,
        ominus: ominus$1,
        oopf: oopf$1,
        opar: opar$1,
        operp: operp$1,
        oplus: oplus$1,
        or: or$1,
        orarr: orarr$1,
        ord: ord$1,
        order: order$1,
        orderof: orderof$1,
        ordf: ordf$2,
        ordm: ordm$2,
        origof: origof$1,
        oror: oror$1,
        orslope: orslope$1,
        orv: orv$1,
        oscr: oscr$1,
        oslas: oslas,
        oslash: oslash$2,
        osol: osol$1,
        otild: otild,
        otilde: otilde$2,
        otimes: otimes$1,
        otimesas: otimesas$1,
        oum: oum,
        ouml: ouml$2,
        ovbar: ovbar$1,
        par: par$1,
        para: para$2,
        parallel: parallel$1,
        parsim: parsim$1,
        parsl: parsl$1,
        part: part$1,
        pcy: pcy$1,
        percnt: percnt$1,
        period: period$1,
        permil: permil$1,
        perp: perp$1,
        pertenk: pertenk$1,
        pfr: pfr$1,
        phi: phi$1,
        phiv: phiv$1,
        phmmat: phmmat$1,
        phone: phone$1,
        pi: pi$1,
        pitchfork: pitchfork$1,
        piv: piv$1,
        planck: planck$1,
        planckh: planckh$1,
        plankv: plankv$1,
        plus: plus$1,
        plusacir: plusacir$1,
        plusb: plusb$1,
        pluscir: pluscir$1,
        plusdo: plusdo$1,
        plusdu: plusdu$1,
        pluse: pluse$1,
        plusm: plusm,
        plusmn: plusmn$2,
        plussim: plussim$1,
        plustwo: plustwo$1,
        pm: pm$1,
        pointint: pointint$1,
        popf: popf$1,
        poun: poun,
        pound: pound$2,
        pr: pr$1,
        prE: prE$1,
        prap: prap$1,
        prcue: prcue$1,
        pre: pre$1,
        prec: prec$1,
        precapprox: precapprox$1,
        preccurlyeq: preccurlyeq$1,
        preceq: preceq$1,
        precnapprox: precnapprox$1,
        precneqq: precneqq$1,
        precnsim: precnsim$1,
        precsim: precsim$1,
        prime: prime$1,
        primes: primes$1,
        prnE: prnE$1,
        prnap: prnap$1,
        prnsim: prnsim$1,
        prod: prod$1,
        profalar: profalar$1,
        profline: profline$1,
        profsurf: profsurf$1,
        prop: prop$2,
        propto: propto$1,
        prsim: prsim$1,
        prurel: prurel$1,
        pscr: pscr$1,
        psi: psi$1,
        puncsp: puncsp$1,
        qfr: qfr$1,
        qint: qint$1,
        qopf: qopf$1,
        qprime: qprime$1,
        qscr: qscr$1,
        quaternions: quaternions$1,
        quatint: quatint$1,
        quest: quest$1,
        questeq: questeq$1,
        quo: quo,
        quot: quot$3,
        rAarr: rAarr$1,
        rArr: rArr$1,
        rAtail: rAtail$1,
        rBarr: rBarr$1,
        rHar: rHar$1,
        race: race$1,
        racute: racute$1,
        radic: radic$1,
        raemptyv: raemptyv$1,
        rang: rang$1,
        rangd: rangd$1,
        range: range$1,
        rangle: rangle$1,
        raqu: raqu,
        raquo: raquo$2,
        rarr: rarr$1,
        rarrap: rarrap$1,
        rarrb: rarrb$1,
        rarrbfs: rarrbfs$1,
        rarrc: rarrc$1,
        rarrfs: rarrfs$1,
        rarrhk: rarrhk$1,
        rarrlp: rarrlp$1,
        rarrpl: rarrpl$1,
        rarrsim: rarrsim$1,
        rarrtl: rarrtl$1,
        rarrw: rarrw$1,
        ratail: ratail$1,
        ratio: ratio$1,
        rationals: rationals$1,
        rbarr: rbarr$1,
        rbbrk: rbbrk$1,
        rbrace: rbrace$1,
        rbrack: rbrack$1,
        rbrke: rbrke$1,
        rbrksld: rbrksld$1,
        rbrkslu: rbrkslu$1,
        rcaron: rcaron$1,
        rcedil: rcedil$1,
        rceil: rceil$1,
        rcub: rcub$1,
        rcy: rcy$1,
        rdca: rdca$1,
        rdldhar: rdldhar$1,
        rdquo: rdquo$1,
        rdquor: rdquor$1,
        rdsh: rdsh$1,
        real: real$1,
        realine: realine$1,
        realpart: realpart$1,
        reals: reals$1,
        rect: rect$1,
        re: re$1,
        reg: reg$2,
        rfisht: rfisht$1,
        rfloor: rfloor$1,
        rfr: rfr$1,
        rhard: rhard$1,
        rharu: rharu$1,
        rharul: rharul$1,
        rho: rho$1,
        rhov: rhov$1,
        rightarrow: rightarrow$1,
        rightarrowtail: rightarrowtail$1,
        rightharpoondown: rightharpoondown$1,
        rightharpoonup: rightharpoonup$1,
        rightleftarrows: rightleftarrows$1,
        rightleftharpoons: rightleftharpoons$1,
        rightrightarrows: rightrightarrows$1,
        rightsquigarrow: rightsquigarrow$1,
        rightthreetimes: rightthreetimes$1,
        ring: ring$1,
        risingdotseq: risingdotseq$1,
        rlarr: rlarr$1,
        rlhar: rlhar$1,
        rlm: rlm$1,
        rmoust: rmoust$1,
        rmoustache: rmoustache$1,
        rnmid: rnmid$1,
        roang: roang$1,
        roarr: roarr$1,
        robrk: robrk$1,
        ropar: ropar$1,
        ropf: ropf$1,
        roplus: roplus$1,
        rotimes: rotimes$1,
        rpar: rpar$1,
        rpargt: rpargt$1,
        rppolint: rppolint$1,
        rrarr: rrarr$1,
        rsaquo: rsaquo$1,
        rscr: rscr$1,
        rsh: rsh$1,
        rsqb: rsqb$1,
        rsquo: rsquo$1,
        rsquor: rsquor$1,
        rthree: rthree$1,
        rtimes: rtimes$1,
        rtri: rtri$1,
        rtrie: rtrie$1,
        rtrif: rtrif$1,
        rtriltri: rtriltri$1,
        ruluhar: ruluhar$1,
        rx: rx$1,
        sacute: sacute$1,
        sbquo: sbquo$1,
        sc: sc$1,
        scE: scE$1,
        scap: scap$1,
        scaron: scaron$1,
        sccue: sccue$1,
        sce: sce$1,
        scedil: scedil$1,
        scirc: scirc$1,
        scnE: scnE$1,
        scnap: scnap$1,
        scnsim: scnsim$1,
        scpolint: scpolint$1,
        scsim: scsim$1,
        scy: scy$1,
        sdot: sdot$1,
        sdotb: sdotb$1,
        sdote: sdote$1,
        seArr: seArr$1,
        searhk: searhk$1,
        searr: searr$1,
        searrow: searrow$1,
        sec: sec,
        sect: sect$2,
        semi: semi$1,
        seswar: seswar$1,
        setminus: setminus$1,
        setmn: setmn$1,
        sext: sext$1,
        sfr: sfr$1,
        sfrown: sfrown$1,
        sharp: sharp$1,
        shchcy: shchcy$1,
        shcy: shcy$1,
        shortmid: shortmid$1,
        shortparallel: shortparallel$1,
        sh: sh,
        shy: shy$2,
        sigma: sigma$1,
        sigmaf: sigmaf$1,
        sigmav: sigmav$1,
        sim: sim$1,
        simdot: simdot$1,
        sime: sime$1,
        simeq: simeq$1,
        simg: simg$1,
        simgE: simgE$1,
        siml: siml$1,
        simlE: simlE$1,
        simne: simne$1,
        simplus: simplus$1,
        simrarr: simrarr$1,
        slarr: slarr$1,
        smallsetminus: smallsetminus$1,
        smashp: smashp$1,
        smeparsl: smeparsl$1,
        smid: smid$1,
        smile: smile$1,
        smt: smt$1,
        smte: smte$1,
        smtes: smtes$1,
        softcy: softcy$1,
        sol: sol$1,
        solb: solb$1,
        solbar: solbar$1,
        sopf: sopf$1,
        spades: spades$1,
        spadesuit: spadesuit$1,
        spar: spar$1,
        sqcap: sqcap$1,
        sqcaps: sqcaps$1,
        sqcup: sqcup$1,
        sqcups: sqcups$1,
        sqsub: sqsub$1,
        sqsube: sqsube$1,
        sqsubset: sqsubset$1,
        sqsubseteq: sqsubseteq$1,
        sqsup: sqsup$1,
        sqsupe: sqsupe$1,
        sqsupset: sqsupset$1,
        sqsupseteq: sqsupseteq$1,
        squ: squ$1,
        square: square$1,
        squarf: squarf$1,
        squf: squf$1,
        srarr: srarr$1,
        sscr: sscr$1,
        ssetmn: ssetmn$1,
        ssmile: ssmile$1,
        sstarf: sstarf$1,
        star: star$1,
        starf: starf$1,
        straightepsilon: straightepsilon$1,
        straightphi: straightphi$1,
        strns: strns$1,
        sub: sub$1,
        subE: subE$1,
        subdot: subdot$1,
        sube: sube$1,
        subedot: subedot$1,
        submult: submult$1,
        subnE: subnE$1,
        subne: subne$1,
        subplus: subplus$1,
        subrarr: subrarr$1,
        subset: subset$1,
        subseteq: subseteq$1,
        subseteqq: subseteqq$1,
        subsetneq: subsetneq$1,
        subsetneqq: subsetneqq$1,
        subsim: subsim$1,
        subsub: subsub$1,
        subsup: subsup$1,
        succ: succ$1,
        succapprox: succapprox$1,
        succcurlyeq: succcurlyeq$1,
        succeq: succeq$1,
        succnapprox: succnapprox$1,
        succneqq: succneqq$1,
        succnsim: succnsim$1,
        succsim: succsim$1,
        sum: sum$1,
        sung: sung$1,
        sup: sup$1,
        sup1: sup1$2,
        sup2: sup2$2,
        sup3: sup3$2,
        supE: supE$1,
        supdot: supdot$1,
        supdsub: supdsub$1,
        supe: supe$1,
        supedot: supedot$1,
        suphsol: suphsol$1,
        suphsub: suphsub$1,
        suplarr: suplarr$1,
        supmult: supmult$1,
        supnE: supnE$1,
        supne: supne$1,
        supplus: supplus$1,
        supset: supset$1,
        supseteq: supseteq$1,
        supseteqq: supseteqq$1,
        supsetneq: supsetneq$1,
        supsetneqq: supsetneqq$1,
        supsim: supsim$1,
        supsub: supsub$1,
        supsup: supsup$1,
        swArr: swArr$1,
        swarhk: swarhk$1,
        swarr: swarr$1,
        swarrow: swarrow$1,
        swnwar: swnwar$1,
        szli: szli,
        szlig: szlig$2,
        target: target$1,
        tau: tau$1,
        tbrk: tbrk$1,
        tcaron: tcaron$1,
        tcedil: tcedil$1,
        tcy: tcy$1,
        tdot: tdot$1,
        telrec: telrec$1,
        tfr: tfr$1,
        there4: there4$1,
        therefore: therefore$1,
        theta: theta$1,
        thetasym: thetasym$1,
        thetav: thetav$1,
        thickapprox: thickapprox$1,
        thicksim: thicksim$1,
        thinsp: thinsp$1,
        thkap: thkap$1,
        thksim: thksim$1,
        thor: thor,
        thorn: thorn$2,
        tilde: tilde$1,
        time: time$1,
        times: times$2,
        timesb: timesb$1,
        timesbar: timesbar$1,
        timesd: timesd$1,
        tint: tint$1,
        toea: toea$1,
        top: top$1,
        topbot: topbot$1,
        topcir: topcir$1,
        topf: topf$1,
        topfork: topfork$1,
        tosa: tosa$1,
        tprime: tprime$1,
        trade: trade$1,
        triangle: triangle$1,
        triangledown: triangledown$1,
        triangleleft: triangleleft$1,
        trianglelefteq: trianglelefteq$1,
        triangleq: triangleq$1,
        triangleright: triangleright$1,
        trianglerighteq: trianglerighteq$1,
        tridot: tridot$1,
        trie: trie$1,
        triminus: triminus$1,
        triplus: triplus$1,
        trisb: trisb$1,
        tritime: tritime$1,
        trpezium: trpezium$1,
        tscr: tscr$1,
        tscy: tscy$1,
        tshcy: tshcy$1,
        tstrok: tstrok$1,
        twixt: twixt$1,
        twoheadleftarrow: twoheadleftarrow$1,
        twoheadrightarrow: twoheadrightarrow$1,
        uArr: uArr$1,
        uHar: uHar$1,
        uacut: uacut,
        uacute: uacute$2,
        uarr: uarr$1,
        ubrcy: ubrcy$1,
        ubreve: ubreve$1,
        ucir: ucir,
        ucirc: ucirc$2,
        ucy: ucy$1,
        udarr: udarr$1,
        udblac: udblac$1,
        udhar: udhar$1,
        ufisht: ufisht$1,
        ufr: ufr$1,
        ugrav: ugrav,
        ugrave: ugrave$2,
        uharl: uharl$1,
        uharr: uharr$1,
        uhblk: uhblk$1,
        ulcorn: ulcorn$1,
        ulcorner: ulcorner$1,
        ulcrop: ulcrop$1,
        ultri: ultri$1,
        umacr: umacr$1,
        um: um,
        uml: uml$2,
        uogon: uogon$1,
        uopf: uopf$1,
        uparrow: uparrow$1,
        updownarrow: updownarrow$1,
        upharpoonleft: upharpoonleft$1,
        upharpoonright: upharpoonright$1,
        uplus: uplus$1,
        upsi: upsi$1,
        upsih: upsih$1,
        upsilon: upsilon$1,
        upuparrows: upuparrows$1,
        urcorn: urcorn$1,
        urcorner: urcorner$1,
        urcrop: urcrop$1,
        uring: uring$1,
        urtri: urtri$1,
        uscr: uscr$1,
        utdot: utdot$1,
        utilde: utilde$1,
        utri: utri$1,
        utrif: utrif$1,
        uuarr: uuarr$1,
        uum: uum,
        uuml: uuml$2,
        uwangle: uwangle$1,
        vArr: vArr$1,
        vBar: vBar$1,
        vBarv: vBarv$1,
        vDash: vDash$1,
        vangrt: vangrt$1,
        varepsilon: varepsilon$1,
        varkappa: varkappa$1,
        varnothing: varnothing$1,
        varphi: varphi$1,
        varpi: varpi$1,
        varpropto: varpropto$1,
        varr: varr$1,
        varrho: varrho$1,
        varsigma: varsigma$1,
        varsubsetneq: varsubsetneq$1,
        varsubsetneqq: varsubsetneqq$1,
        varsupsetneq: varsupsetneq$1,
        varsupsetneqq: varsupsetneqq$1,
        vartheta: vartheta$1,
        vartriangleleft: vartriangleleft$1,
        vartriangleright: vartriangleright$1,
        vcy: vcy$1,
        vdash: vdash$1,
        vee: vee$1,
        veebar: veebar$1,
        veeeq: veeeq$1,
        vellip: vellip$1,
        verbar: verbar$1,
        vert: vert$1,
        vfr: vfr$1,
        vltri: vltri$1,
        vnsub: vnsub$1,
        vnsup: vnsup$1,
        vopf: vopf$1,
        vprop: vprop$1,
        vrtri: vrtri$1,
        vscr: vscr$1,
        vsubnE: vsubnE$1,
        vsubne: vsubne$1,
        vsupnE: vsupnE$1,
        vsupne: vsupne$1,
        vzigzag: vzigzag$1,
        wcirc: wcirc$1,
        wedbar: wedbar$1,
        wedge: wedge$1,
        wedgeq: wedgeq$1,
        weierp: weierp$1,
        wfr: wfr$1,
        wopf: wopf$1,
        wp: wp$1,
        wr: wr$1,
        wreath: wreath$1,
        wscr: wscr$1,
        xcap: xcap$1,
        xcirc: xcirc$1,
        xcup: xcup$1,
        xdtri: xdtri$1,
        xfr: xfr$1,
        xhArr: xhArr$1,
        xharr: xharr$1,
        xi: xi$1,
        xlArr: xlArr$1,
        xlarr: xlarr$1,
        xmap: xmap$1,
        xnis: xnis$1,
        xodot: xodot$1,
        xopf: xopf$1,
        xoplus: xoplus$1,
        xotime: xotime$1,
        xrArr: xrArr$1,
        xrarr: xrarr$1,
        xscr: xscr$1,
        xsqcup: xsqcup$1,
        xuplus: xuplus$1,
        xutri: xutri$1,
        xvee: xvee$1,
        xwedge: xwedge$1,
        yacut: yacut,
        yacute: yacute$2,
        yacy: yacy$1,
        ycirc: ycirc$1,
        ycy: ycy$1,
        ye: ye$1,
        yen: yen$2,
        yfr: yfr$1,
        yicy: yicy$1,
        yopf: yopf$1,
        yscr: yscr$1,
        yucy: yucy$1,
        yum: yum,
        yuml: yuml$2,
        zacute: zacute$1,
        zcaron: zcaron$1,
        zcy: zcy$1,
        zdot: zdot$1,
        zeetrf: zeetrf$1,
        zeta: zeta$1,
        zfr: zfr$1,
        zhcy: zhcy$1,
        zigrarr: zigrarr$1,
        zopf: zopf$1,
        zscr: zscr$1,
        zwj: zwj$1,
        zwnj: zwnj$1,
        'default': index$2
    });

    var characterEntities = getCjsExportFromNamespace(characterEntities$1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var decodeEntity_1 = decodeEntity;

    var own = {}.hasOwnProperty;

    function decodeEntity(characters) {
      return own.call(characterEntities, characters)
        ? characterEntities[characters]
        : false
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var asciiDigit = regexCheck_1(/\d/);

    var asciiDigit_1 = asciiDigit;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var asciiHexDigit = regexCheck_1(/[\dA-Fa-f]/);

    var asciiHexDigit_1 = asciiHexDigit;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};





    function _interopDefaultLegacy$1(e) {
      return e && typeof e === 'object' && 'default' in e ? e : {default: e}
    }

    var decodeEntity__default = /*#__PURE__*/ _interopDefaultLegacy$1(decodeEntity_1);

    var characterReference = {
      name: 'characterReference',
      tokenize: tokenizeCharacterReference
    };

    function tokenizeCharacterReference(effects, ok, nok) {
      var self = this;
      var size = 0;
      var max;
      var test;
      return start

      function start(code) {
        effects.enter('characterReference');
        effects.enter('characterReferenceMarker');
        effects.consume(code);
        effects.exit('characterReferenceMarker');
        return open
      }

      function open(code) {
        if (code === 35) {
          effects.enter('characterReferenceMarkerNumeric');
          effects.consume(code);
          effects.exit('characterReferenceMarkerNumeric');
          return numeric
        }

        effects.enter('characterReferenceValue');
        max = 31;
        test = asciiAlphanumeric_1;
        return value(code)
      }

      function numeric(code) {
        if (code === 88 || code === 120) {
          effects.enter('characterReferenceMarkerHexadecimal');
          effects.consume(code);
          effects.exit('characterReferenceMarkerHexadecimal');
          effects.enter('characterReferenceValue');
          max = 6;
          test = asciiHexDigit_1;
          return value
        }

        effects.enter('characterReferenceValue');
        max = 7;
        test = asciiDigit_1;
        return value(code)
      }

      function value(code) {
        var token;

        if (code === 59 && size) {
          token = effects.exit('characterReferenceValue');

          if (
            test === asciiAlphanumeric_1 &&
            !decodeEntity__default['default'](self.sliceSerialize(token))
          ) {
            return nok(code)
          }

          effects.enter('characterReferenceMarker');
          effects.consume(code);
          effects.exit('characterReferenceMarker');
          effects.exit('characterReference');
          return ok
        }

        if (test(code) && size++ < max) {
          effects.consume(code);
          return value
        }

        return nok(code)
      }
    }

    var characterReference_1 = characterReference;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};





    var codeFenced = {
      name: 'codeFenced',
      tokenize: tokenizeCodeFenced,
      concrete: true
    };

    function tokenizeCodeFenced(effects, ok, nok) {
      var self = this;
      var closingFenceConstruct = {
        tokenize: tokenizeClosingFence,
        partial: true
      };
      var initialPrefix = prefixSize_1(this.events, 'linePrefix');
      var sizeOpen = 0;
      var marker;
      return start

      function start(code) {
        effects.enter('codeFenced');
        effects.enter('codeFencedFence');
        effects.enter('codeFencedFenceSequence');
        marker = code;
        return sequenceOpen(code)
      }

      function sequenceOpen(code) {
        if (code === marker) {
          effects.consume(code);
          sizeOpen++;
          return sequenceOpen
        }

        effects.exit('codeFencedFenceSequence');
        return sizeOpen < 3
          ? nok(code)
          : factorySpace(effects, infoOpen, 'whitespace')(code)
      }

      function infoOpen(code) {
        if (code === null || markdownLineEnding_1(code)) {
          return openAfter(code)
        }

        effects.enter('codeFencedFenceInfo');
        effects.enter('chunkString', {
          contentType: 'string'
        });
        return info(code)
      }

      function info(code) {
        if (code === null || markdownLineEndingOrSpace_1(code)) {
          effects.exit('chunkString');
          effects.exit('codeFencedFenceInfo');
          return factorySpace(effects, infoAfter, 'whitespace')(code)
        }

        if (code === 96 && code === marker) return nok(code)
        effects.consume(code);
        return info
      }

      function infoAfter(code) {
        if (code === null || markdownLineEnding_1(code)) {
          return openAfter(code)
        }

        effects.enter('codeFencedFenceMeta');
        effects.enter('chunkString', {
          contentType: 'string'
        });
        return meta(code)
      }

      function meta(code) {
        if (code === null || markdownLineEnding_1(code)) {
          effects.exit('chunkString');
          effects.exit('codeFencedFenceMeta');
          return openAfter(code)
        }

        if (code === 96 && code === marker) return nok(code)
        effects.consume(code);
        return meta
      }

      function openAfter(code) {
        effects.exit('codeFencedFence');
        return self.interrupt ? ok(code) : content(code)
      }

      function content(code) {
        if (code === null) {
          return after(code)
        }

        if (markdownLineEnding_1(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return effects.attempt(
            closingFenceConstruct,
            after,
            initialPrefix
              ? factorySpace(effects, content, 'linePrefix', initialPrefix + 1)
              : content
          )
        }

        effects.enter('codeFlowValue');
        return contentContinue(code)
      }

      function contentContinue(code) {
        if (code === null || markdownLineEnding_1(code)) {
          effects.exit('codeFlowValue');
          return content(code)
        }

        effects.consume(code);
        return contentContinue
      }

      function after(code) {
        effects.exit('codeFenced');
        return ok(code)
      }

      function tokenizeClosingFence(effects, ok, nok) {
        var size = 0;
        return factorySpace(
          effects,
          closingSequenceStart,
          'linePrefix',
          this.parser.constructs.disable.null.indexOf('codeIndented') > -1
            ? undefined
            : 4
        )

        function closingSequenceStart(code) {
          effects.enter('codeFencedFence');
          effects.enter('codeFencedFenceSequence');
          return closingSequence(code)
        }

        function closingSequence(code) {
          if (code === marker) {
            effects.consume(code);
            size++;
            return closingSequence
          }

          if (size < sizeOpen) return nok(code)
          effects.exit('codeFencedFenceSequence');
          return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)
        }

        function closingSequenceEnd(code) {
          if (code === null || markdownLineEnding_1(code)) {
            effects.exit('codeFencedFence');
            return ok(code)
          }

          return nok(code)
        }
      }
    }

    var codeFenced_1 = codeFenced;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};





    var codeIndented = {
      name: 'codeIndented',
      tokenize: tokenizeCodeIndented,
      resolve: resolveCodeIndented
    };
    var indentedContentConstruct = {
      tokenize: tokenizeIndentedContent,
      partial: true
    };

    function resolveCodeIndented(events, context) {
      var code = {
        type: 'codeIndented',
        start: events[0][1].start,
        end: events[events.length - 1][1].end
      };
      chunkedSplice_1(events, 0, 0, [['enter', code, context]]);
      chunkedSplice_1(events, events.length, 0, [['exit', code, context]]);
      return events
    }

    function tokenizeCodeIndented(effects, ok, nok) {
      return effects.attempt(indentedContentConstruct, afterPrefix, nok)

      function afterPrefix(code) {
        if (code === null) {
          return ok(code)
        }

        if (markdownLineEnding_1(code)) {
          return effects.attempt(indentedContentConstruct, afterPrefix, ok)(code)
        }

        effects.enter('codeFlowValue');
        return content(code)
      }

      function content(code) {
        if (code === null || markdownLineEnding_1(code)) {
          effects.exit('codeFlowValue');
          return afterPrefix(code)
        }

        effects.consume(code);
        return content
      }
    }

    function tokenizeIndentedContent(effects, ok, nok) {
      var self = this;
      return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)

      function afterPrefix(code) {
        if (markdownLineEnding_1(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)
        }

        return prefixSize_1(self.events, 'linePrefix') < 4 ? nok(code) : ok(code)
      }
    }

    var codeIndented_1 = codeIndented;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var codeText = {
      name: 'codeText',
      tokenize: tokenizeCodeText,
      resolve: resolveCodeText,
      previous: previous
    };

    function resolveCodeText(events) {
      var tailExitIndex = events.length - 4;
      var headEnterIndex = 3;
      var index;
      var enter; // If we start and end with an EOL or a space.

      if (
        (events[headEnterIndex][1].type === 'lineEnding' ||
          events[headEnterIndex][1].type === 'space') &&
        (events[tailExitIndex][1].type === 'lineEnding' ||
          events[tailExitIndex][1].type === 'space')
      ) {
        index = headEnterIndex; // And we have data.

        while (++index < tailExitIndex) {
          if (events[index][1].type === 'codeTextData') {
            // Then we have padding.
            events[tailExitIndex][1].type = events[headEnterIndex][1].type =
              'codeTextPadding';
            headEnterIndex += 2;
            tailExitIndex -= 2;
            break
          }
        }
      } // Merge adjacent spaces and data.

      index = headEnterIndex - 1;
      tailExitIndex++;

      while (++index <= tailExitIndex) {
        if (enter === undefined) {
          if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {
            enter = index;
          }
        } else if (
          index === tailExitIndex ||
          events[index][1].type === 'lineEnding'
        ) {
          events[enter][1].type = 'codeTextData';

          if (index !== enter + 2) {
            events[enter][1].end = events[index - 1][1].end;
            events.splice(enter + 2, index - enter - 2);
            tailExitIndex -= index - enter - 2;
            index = enter + 2;
          }

          enter = undefined;
        }
      }

      return events
    }

    function previous(code) {
      // If there is a previous code, there will always be a tail.
      return (
        code !== 96 ||
        this.events[this.events.length - 1][1].type === 'characterEscape'
      )
    }

    function tokenizeCodeText(effects, ok, nok) {
      var sizeOpen = 0;
      var size;
      var token;
      return start

      function start(code) {
        effects.enter('codeText');
        effects.enter('codeTextSequence');
        return openingSequence(code)
      }

      function openingSequence(code) {
        if (code === 96) {
          effects.consume(code);
          sizeOpen++;
          return openingSequence
        }

        effects.exit('codeTextSequence');
        return gap(code)
      }

      function gap(code) {
        // EOF.
        if (code === null) {
          return nok(code)
        } // Closing fence?
        // Could also be data.

        if (code === 96) {
          token = effects.enter('codeTextSequence');
          size = 0;
          return closingSequence(code)
        } // Tabs don’t work, and virtual spaces don’t make sense.

        if (code === 32) {
          effects.enter('space');
          effects.consume(code);
          effects.exit('space');
          return gap
        }

        if (markdownLineEnding_1(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return gap
        } // Data.

        effects.enter('codeTextData');
        return data(code)
      } // In code.

      function data(code) {
        if (
          code === null ||
          code === 32 ||
          code === 96 ||
          markdownLineEnding_1(code)
        ) {
          effects.exit('codeTextData');
          return gap(code)
        }

        effects.consume(code);
        return data
      } // Closing fence.

      function closingSequence(code) {
        // More.
        if (code === 96) {
          effects.consume(code);
          size++;
          return closingSequence
        } // Done!

        if (size === sizeOpen) {
          effects.exit('codeTextSequence');
          effects.exit('codeText');
          return ok(code)
        } // More or less accents: mark as data.

        token.type = 'codeTextData';
        return data(code)
      }
    }

    var codeText_1 = codeText;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};




    // eslint-disable-next-line max-params
    function destinationFactory(
      effects,
      ok,
      nok,
      type,
      literalType,
      literalMarkerType,
      rawType,
      stringType,
      max
    ) {
      var limit = max || Infinity;
      var balance = 0;
      return start

      function start(code) {
        if (code === 60) {
          effects.enter(type);
          effects.enter(literalType);
          effects.enter(literalMarkerType);
          effects.consume(code);
          effects.exit(literalMarkerType);
          return destinationEnclosedBefore
        }

        if (asciiControl_1(code) || code === 41) {
          return nok(code)
        }

        effects.enter(type);
        effects.enter(rawType);
        effects.enter(stringType);
        effects.enter('chunkString', {
          contentType: 'string'
        });
        return destinationRaw(code)
      }

      function destinationEnclosedBefore(code) {
        if (code === 62) {
          effects.enter(literalMarkerType);
          effects.consume(code);
          effects.exit(literalMarkerType);
          effects.exit(literalType);
          effects.exit(type);
          return ok
        }

        effects.enter(stringType);
        effects.enter('chunkString', {
          contentType: 'string'
        });
        return destinationEnclosed(code)
      }

      function destinationEnclosed(code) {
        if (code === 62) {
          effects.exit('chunkString');
          effects.exit(stringType);
          return destinationEnclosedBefore(code)
        }

        if (code === null || code === 60 || markdownLineEnding_1(code)) {
          return nok(code)
        }

        effects.consume(code);
        return code === 92 ? destinationEnclosedEscape : destinationEnclosed
      }

      function destinationEnclosedEscape(code) {
        if (code === 60 || code === 62 || code === 92) {
          effects.consume(code);
          return destinationEnclosed
        }

        return destinationEnclosed(code)
      }

      function destinationRaw(code) {
        if (code === 40) {
          if (++balance > limit) return nok(code)
          effects.consume(code);
          return destinationRaw
        }

        if (code === 41) {
          if (!balance--) {
            effects.exit('chunkString');
            effects.exit(stringType);
            effects.exit(rawType);
            effects.exit(type);
            return ok(code)
          }

          effects.consume(code);
          return destinationRaw
        }

        if (code === null || markdownLineEndingOrSpace_1(code)) {
          if (balance) return nok(code)
          effects.exit('chunkString');
          effects.exit(stringType);
          effects.exit(rawType);
          effects.exit(type);
          return ok(code)
        }

        if (asciiControl_1(code)) return nok(code)
        effects.consume(code);
        return code === 92 ? destinationRawEscape : destinationRaw
      }

      function destinationRawEscape(code) {
        if (code === 40 || code === 41 || code === 92) {
          effects.consume(code);
          return destinationRaw
        }

        return destinationRaw(code)
      }
    }

    var factoryDestination = destinationFactory;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};



    // eslint-disable-next-line max-params
    function labelFactory(effects, ok, nok, type, markerType, stringType) {
      var self = this;
      var size = 0;
      var data;
      return start

      function start(code) {
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        effects.enter(stringType);
        return atBreak
      }

      function atBreak(code) {
        if (
          code === null ||
          code === 91 ||
          (code === 93 && !data) ||
          /* c8 ignore next */
          (code === 94 &&
            /* c8 ignore next */
            !size &&
            /* c8 ignore next */
            '_hiddenFootnoteSupport' in self.parser.constructs) ||
          size > 999
        ) {
          return nok(code)
        }

        if (code === 93) {
          effects.exit(stringType);
          effects.enter(markerType);
          effects.consume(code);
          effects.exit(markerType);
          effects.exit(type);
          return ok
        }

        if (markdownLineEnding_1(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return atBreak
        }

        effects.enter('chunkString', {
          contentType: 'string'
        });
        return label(code)
      }

      function label(code) {
        if (
          code === null ||
          code === 91 ||
          code === 93 ||
          markdownLineEnding_1(code) ||
          size++ > 999
        ) {
          effects.exit('chunkString');
          return atBreak(code)
        }

        effects.consume(code);
        data = data || !markdownSpace_1(code);
        return code === 92 ? labelEscape : label
      }

      function labelEscape(code) {
        if (code === 91 || code === 92 || code === 93) {
          effects.consume(code);
          size++;
          return label
        }

        return label(code)
      }
    }

    var factoryLabel = labelFactory;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};




    function whitespaceFactory(effects, ok) {
      var seen;
      return start

      function start(code) {
        if (markdownLineEnding_1(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          seen = true;
          return start
        }

        if (markdownSpace_1(code)) {
          return factorySpace(
            effects,
            start,
            seen ? 'linePrefix' : 'lineSuffix'
          )(code)
        }

        return ok(code)
      }
    }

    var factoryWhitespace = whitespaceFactory;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};



    function titleFactory(effects, ok, nok, type, markerType, stringType) {
      var marker;
      return start

      function start(code) {
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        marker = code === 40 ? 41 : code;
        return atFirstTitleBreak
      }

      function atFirstTitleBreak(code) {
        if (code === marker) {
          effects.enter(markerType);
          effects.consume(code);
          effects.exit(markerType);
          effects.exit(type);
          return ok
        }

        effects.enter(stringType);
        return atTitleBreak(code)
      }

      function atTitleBreak(code) {
        if (code === marker) {
          effects.exit(stringType);
          return atFirstTitleBreak(marker)
        }

        if (code === null) {
          return nok(code)
        } // Note: blank lines can’t exist in content.

        if (markdownLineEnding_1(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return factorySpace(effects, atTitleBreak, 'linePrefix')
        }

        effects.enter('chunkString', {
          contentType: 'string'
        });
        return title(code)
      }

      function title(code) {
        if (code === marker || code === null || markdownLineEnding_1(code)) {
          effects.exit('chunkString');
          return atTitleBreak(code)
        }

        effects.consume(code);
        return code === 92 ? titleEscape : title
      }

      function titleEscape(code) {
        if (code === marker || code === 92) {
          effects.consume(code);
          return title
        }

        return title(code)
      }
    }

    var factoryTitle = titleFactory;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};









    var definition = {
      name: 'definition',
      tokenize: tokenizeDefinition
    };
    var titleConstruct = {
      tokenize: tokenizeTitle,
      partial: true
    };

    function tokenizeDefinition(effects, ok, nok) {
      var self = this;
      var identifier;
      return start

      function start(code) {
        effects.enter('definition');
        return factoryLabel.call(
          self,
          effects,
          labelAfter,
          nok,
          'definitionLabel',
          'definitionLabelMarker',
          'definitionLabelString'
        )(code)
      }

      function labelAfter(code) {
        identifier = normalizeIdentifier_1(
          self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
        );

        if (code === 58) {
          effects.enter('definitionMarker');
          effects.consume(code);
          effects.exit('definitionMarker'); // Note: blank lines can’t exist in content.

          return factoryWhitespace(
            effects,
            factoryDestination(
              effects,
              effects.attempt(
                titleConstruct,
                factorySpace(effects, after, 'whitespace'),
                factorySpace(effects, after, 'whitespace')
              ),
              nok,
              'definitionDestination',
              'definitionDestinationLiteral',
              'definitionDestinationLiteralMarker',
              'definitionDestinationRaw',
              'definitionDestinationString'
            )
          )
        }

        return nok(code)
      }

      function after(code) {
        if (code === null || markdownLineEnding_1(code)) {
          effects.exit('definition');

          if (self.parser.defined.indexOf(identifier) < 0) {
            self.parser.defined.push(identifier);
          }

          return ok(code)
        }

        return nok(code)
      }
    }

    function tokenizeTitle(effects, ok, nok) {
      return start

      function start(code) {
        return markdownLineEndingOrSpace_1(code)
          ? factoryWhitespace(effects, before)(code)
          : nok(code)
      }

      function before(code) {
        if (code === 34 || code === 39 || code === 40) {
          return factoryTitle(
            effects,
            factorySpace(effects, after, 'whitespace'),
            nok,
            'definitionTitle',
            'definitionTitleMarker',
            'definitionTitleString'
          )(code)
        }

        return nok(code)
      }

      function after(code) {
        return code === null || markdownLineEnding_1(code) ? ok(code) : nok(code)
      }
    }

    var definition_1 = definition;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var hardBreakEscape = {
      name: 'hardBreakEscape',
      tokenize: tokenizeHardBreakEscape
    };

    function tokenizeHardBreakEscape(effects, ok, nok) {
      return start

      function start(code) {
        effects.enter('hardBreakEscape');
        effects.enter('escapeMarker');
        effects.consume(code);
        return open
      }

      function open(code) {
        if (markdownLineEnding_1(code)) {
          effects.exit('escapeMarker');
          effects.exit('hardBreakEscape');
          return ok(code)
        }

        return nok(code)
      }
    }

    var hardBreakEscape_1 = hardBreakEscape;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};






    var headingAtx = {
      name: 'headingAtx',
      tokenize: tokenizeHeadingAtx,
      resolve: resolveHeadingAtx
    };

    function resolveHeadingAtx(events, context) {
      var contentEnd = events.length - 2;
      var contentStart = 3;
      var content;
      var text; // Prefix whitespace, part of the opening.

      if (events[contentStart][1].type === 'whitespace') {
        contentStart += 2;
      } // Suffix whitespace, part of the closing.

      if (
        contentEnd - 2 > contentStart &&
        events[contentEnd][1].type === 'whitespace'
      ) {
        contentEnd -= 2;
      }

      if (
        events[contentEnd][1].type === 'atxHeadingSequence' &&
        (contentStart === contentEnd - 1 ||
          (contentEnd - 4 > contentStart &&
            events[contentEnd - 2][1].type === 'whitespace'))
      ) {
        contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
      }

      if (contentEnd > contentStart) {
        content = {
          type: 'atxHeadingText',
          start: events[contentStart][1].start,
          end: events[contentEnd][1].end
        };
        text = {
          type: 'chunkText',
          start: events[contentStart][1].start,
          end: events[contentEnd][1].end,
          contentType: 'text'
        };
        chunkedSplice_1(events, contentStart, contentEnd - contentStart + 1, [
          ['enter', content, context],
          ['enter', text, context],
          ['exit', text, context],
          ['exit', content, context]
        ]);
      }

      return events
    }

    function tokenizeHeadingAtx(effects, ok, nok) {
      var self = this;
      var size = 0;
      return start

      function start(code) {
        effects.enter('atxHeading');
        effects.enter('atxHeadingSequence');
        return fenceOpenInside(code)
      }

      function fenceOpenInside(code) {
        if (code === 35 && size++ < 6) {
          effects.consume(code);
          return fenceOpenInside
        }

        if (code === null || markdownLineEndingOrSpace_1(code)) {
          effects.exit('atxHeadingSequence');
          return self.interrupt ? ok(code) : headingBreak(code)
        }

        return nok(code)
      }

      function headingBreak(code) {
        if (code === 35) {
          effects.enter('atxHeadingSequence');
          return sequence(code)
        }

        if (code === null || markdownLineEnding_1(code)) {
          effects.exit('atxHeading');
          return ok(code)
        }

        if (markdownSpace_1(code)) {
          return factorySpace(effects, headingBreak, 'whitespace')(code)
        }

        effects.enter('atxHeadingText');
        return data(code)
      }

      function sequence(code) {
        if (code === 35) {
          effects.consume(code);
          return sequence
        }

        effects.exit('atxHeadingSequence');
        return headingBreak(code)
      }

      function data(code) {
        if (code === null || code === 35 || markdownLineEndingOrSpace_1(code)) {
          effects.exit('atxHeadingText');
          return headingBreak(code)
        }

        effects.consume(code);
        return data
      }
    }

    var headingAtx_1 = headingAtx;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // This module is copied from <https://spec.commonmark.org/0.29/#html-blocks>.
    var basics = [
      'address',
      'article',
      'aside',
      'base',
      'basefont',
      'blockquote',
      'body',
      'caption',
      'center',
      'col',
      'colgroup',
      'dd',
      'details',
      'dialog',
      'dir',
      'div',
      'dl',
      'dt',
      'fieldset',
      'figcaption',
      'figure',
      'footer',
      'form',
      'frame',
      'frameset',
      'h1',
      'h2',
      'h3',
      'h4',
      'h5',
      'h6',
      'head',
      'header',
      'hr',
      'html',
      'iframe',
      'legend',
      'li',
      'link',
      'main',
      'menu',
      'menuitem',
      'nav',
      'noframes',
      'ol',
      'optgroup',
      'option',
      'p',
      'param',
      'section',
      'source',
      'summary',
      'table',
      'tbody',
      'td',
      'tfoot',
      'th',
      'thead',
      'title',
      'tr',
      'track',
      'ul'
    ];

    var htmlBlockNames = basics;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // This module is copied from <https://spec.commonmark.org/0.29/#html-blocks>.
    var raws = ['pre', 'script', 'style', 'textarea'];

    var htmlRawNames = raws;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};










    var htmlFlow = {
      name: 'htmlFlow',
      tokenize: tokenizeHtmlFlow,
      resolveTo: resolveToHtmlFlow,
      concrete: true
    };
    var nextBlankConstruct = {
      tokenize: tokenizeNextBlank,
      partial: true
    };

    function resolveToHtmlFlow(events) {
      var index = events.length;

      while (index--) {
        if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {
          break
        }
      }

      if (index > 1 && events[index - 2][1].type === 'linePrefix') {
        // Add the prefix start to the HTML token.
        events[index][1].start = events[index - 2][1].start; // Add the prefix start to the HTML line token.

        events[index + 1][1].start = events[index - 2][1].start; // Remove the line prefix.

        events.splice(index - 2, 2);
      }

      return events
    }

    function tokenizeHtmlFlow(effects, ok, nok) {
      var self = this;
      var kind;
      var startTag;
      var buffer;
      var index;
      var marker;
      return start

      function start(code) {
        effects.enter('htmlFlow');
        effects.enter('htmlFlowData');
        effects.consume(code);
        return open
      }

      function open(code) {
        if (code === 33) {
          effects.consume(code);
          return declarationStart
        }

        if (code === 47) {
          effects.consume(code);
          return tagCloseStart
        }

        if (code === 63) {
          effects.consume(code);
          kind = 3; // While we’re in an instruction instead of a declaration, we’re on a `?`
          // right now, so we do need to search for `>`, similar to declarations.

          return self.interrupt ? ok : continuationDeclarationInside
        }

        if (asciiAlpha_1(code)) {
          effects.consume(code);
          buffer = fromCharCode_1(code);
          startTag = true;
          return tagName
        }

        return nok(code)
      }

      function declarationStart(code) {
        if (code === 45) {
          effects.consume(code);
          kind = 2;
          return commentOpenInside
        }

        if (code === 91) {
          effects.consume(code);
          kind = 5;
          buffer = 'CDATA[';
          index = 0;
          return cdataOpenInside
        }

        if (asciiAlpha_1(code)) {
          effects.consume(code);
          kind = 4;
          return self.interrupt ? ok : continuationDeclarationInside
        }

        return nok(code)
      }

      function commentOpenInside(code) {
        if (code === 45) {
          effects.consume(code);
          return self.interrupt ? ok : continuationDeclarationInside
        }

        return nok(code)
      }

      function cdataOpenInside(code) {
        if (code === buffer.charCodeAt(index++)) {
          effects.consume(code);
          return index === buffer.length
            ? self.interrupt
              ? ok
              : continuation
            : cdataOpenInside
        }

        return nok(code)
      }

      function tagCloseStart(code) {
        if (asciiAlpha_1(code)) {
          effects.consume(code);
          buffer = fromCharCode_1(code);
          return tagName
        }

        return nok(code)
      }

      function tagName(code) {
        if (
          code === null ||
          code === 47 ||
          code === 62 ||
          markdownLineEndingOrSpace_1(code)
        ) {
          if (
            code !== 47 &&
            startTag &&
            htmlRawNames.indexOf(buffer.toLowerCase()) > -1
          ) {
            kind = 1;
            return self.interrupt ? ok(code) : continuation(code)
          }

          if (htmlBlockNames.indexOf(buffer.toLowerCase()) > -1) {
            kind = 6;

            if (code === 47) {
              effects.consume(code);
              return basicSelfClosing
            }

            return self.interrupt ? ok(code) : continuation(code)
          }

          kind = 7; // Do not support complete HTML when interrupting.

          return self.interrupt
            ? nok(code)
            : startTag
            ? completeAttributeNameBefore(code)
            : completeClosingTagAfter(code)
        }

        if (code === 45 || asciiAlphanumeric_1(code)) {
          effects.consume(code);
          buffer += fromCharCode_1(code);
          return tagName
        }

        return nok(code)
      }

      function basicSelfClosing(code) {
        if (code === 62) {
          effects.consume(code);
          return self.interrupt ? ok : continuation
        }

        return nok(code)
      }

      function completeClosingTagAfter(code) {
        if (markdownSpace_1(code)) {
          effects.consume(code);
          return completeClosingTagAfter
        }

        return completeEnd(code)
      }

      function completeAttributeNameBefore(code) {
        if (code === 47) {
          effects.consume(code);
          return completeEnd
        }

        if (code === 58 || code === 95 || asciiAlpha_1(code)) {
          effects.consume(code);
          return completeAttributeName
        }

        if (markdownSpace_1(code)) {
          effects.consume(code);
          return completeAttributeNameBefore
        }

        return completeEnd(code)
      }

      function completeAttributeName(code) {
        if (
          code === 45 ||
          code === 46 ||
          code === 58 ||
          code === 95 ||
          asciiAlphanumeric_1(code)
        ) {
          effects.consume(code);
          return completeAttributeName
        }

        return completeAttributeNameAfter(code)
      }

      function completeAttributeNameAfter(code) {
        if (code === 61) {
          effects.consume(code);
          return completeAttributeValueBefore
        }

        if (markdownSpace_1(code)) {
          effects.consume(code);
          return completeAttributeNameAfter
        }

        return completeAttributeNameBefore(code)
      }

      function completeAttributeValueBefore(code) {
        if (
          code === null ||
          code === 60 ||
          code === 61 ||
          code === 62 ||
          code === 96
        ) {
          return nok(code)
        }

        if (code === 34 || code === 39) {
          effects.consume(code);
          marker = code;
          return completeAttributeValueQuoted
        }

        if (markdownSpace_1(code)) {
          effects.consume(code);
          return completeAttributeValueBefore
        }

        marker = undefined;
        return completeAttributeValueUnquoted(code)
      }

      function completeAttributeValueQuoted(code) {
        if (code === marker) {
          effects.consume(code);
          return completeAttributeValueQuotedAfter
        }

        if (code === null || markdownLineEnding_1(code)) {
          return nok(code)
        }

        effects.consume(code);
        return completeAttributeValueQuoted
      }

      function completeAttributeValueUnquoted(code) {
        if (
          code === null ||
          code === 34 ||
          code === 39 ||
          code === 60 ||
          code === 61 ||
          code === 62 ||
          code === 96 ||
          markdownLineEndingOrSpace_1(code)
        ) {
          return completeAttributeNameAfter(code)
        }

        effects.consume(code);
        return completeAttributeValueUnquoted
      }

      function completeAttributeValueQuotedAfter(code) {
        if (code === 47 || code === 62 || markdownSpace_1(code)) {
          return completeAttributeNameBefore(code)
        }

        return nok(code)
      }

      function completeEnd(code) {
        if (code === 62) {
          effects.consume(code);
          return completeAfter
        }

        return nok(code)
      }

      function completeAfter(code) {
        if (markdownSpace_1(code)) {
          effects.consume(code);
          return completeAfter
        }

        return code === null || markdownLineEnding_1(code)
          ? continuation(code)
          : nok(code)
      }

      function continuation(code) {
        if (code === 45 && kind === 2) {
          effects.consume(code);
          return continuationCommentInside
        }

        if (code === 60 && kind === 1) {
          effects.consume(code);
          return continuationRawTagOpen
        }

        if (code === 62 && kind === 4) {
          effects.consume(code);
          return continuationClose
        }

        if (code === 63 && kind === 3) {
          effects.consume(code);
          return continuationDeclarationInside
        }

        if (code === 93 && kind === 5) {
          effects.consume(code);
          return continuationCharacterDataInside
        }

        if (markdownLineEnding_1(code) && (kind === 6 || kind === 7)) {
          return effects.check(
            nextBlankConstruct,
            continuationClose,
            continuationAtLineEnding
          )(code)
        }

        if (code === null || markdownLineEnding_1(code)) {
          return continuationAtLineEnding(code)
        }

        effects.consume(code);
        return continuation
      }

      function continuationAtLineEnding(code) {
        effects.exit('htmlFlowData');
        return htmlContinueStart(code)
      }

      function htmlContinueStart(code) {
        if (code === null) {
          return done(code)
        }

        if (markdownLineEnding_1(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return htmlContinueStart
        }

        effects.enter('htmlFlowData');
        return continuation(code)
      }

      function continuationCommentInside(code) {
        if (code === 45) {
          effects.consume(code);
          return continuationDeclarationInside
        }

        return continuation(code)
      }

      function continuationRawTagOpen(code) {
        if (code === 47) {
          effects.consume(code);
          buffer = '';
          return continuationRawEndTag
        }

        return continuation(code)
      }

      function continuationRawEndTag(code) {
        if (code === 62 && htmlRawNames.indexOf(buffer.toLowerCase()) > -1) {
          effects.consume(code);
          return continuationClose
        }

        if (asciiAlpha_1(code) && buffer.length < 8) {
          effects.consume(code);
          buffer += fromCharCode_1(code);
          return continuationRawEndTag
        }

        return continuation(code)
      }

      function continuationCharacterDataInside(code) {
        if (code === 93) {
          effects.consume(code);
          return continuationDeclarationInside
        }

        return continuation(code)
      }

      function continuationDeclarationInside(code) {
        if (code === 62) {
          effects.consume(code);
          return continuationClose
        }

        return continuation(code)
      }

      function continuationClose(code) {
        if (code === null || markdownLineEnding_1(code)) {
          effects.exit('htmlFlowData');
          return done(code)
        }

        effects.consume(code);
        return continuationClose
      }

      function done(code) {
        effects.exit('htmlFlow');
        return ok(code)
      }
    }

    function tokenizeNextBlank(effects, ok, nok) {
      return start

      function start(code) {
        effects.exit('htmlFlowData');
        effects.enter('lineEndingBlank');
        effects.consume(code);
        effects.exit('lineEndingBlank');
        return effects.attempt(partialBlankLine_1, ok, nok)
      }
    }

    var htmlFlow_1 = htmlFlow;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};







    var htmlText = {
      name: 'htmlText',
      tokenize: tokenizeHtmlText
    };

    function tokenizeHtmlText(effects, ok, nok) {
      var self = this;
      var marker;
      var buffer;
      var index;
      var returnState;
      return start

      function start(code) {
        effects.enter('htmlText');
        effects.enter('htmlTextData');
        effects.consume(code);
        return open
      }

      function open(code) {
        if (code === 33) {
          effects.consume(code);
          return declarationOpen
        }

        if (code === 47) {
          effects.consume(code);
          return tagCloseStart
        }

        if (code === 63) {
          effects.consume(code);
          return instruction
        }

        if (asciiAlpha_1(code)) {
          effects.consume(code);
          return tagOpen
        }

        return nok(code)
      }

      function declarationOpen(code) {
        if (code === 45) {
          effects.consume(code);
          return commentOpen
        }

        if (code === 91) {
          effects.consume(code);
          buffer = 'CDATA[';
          index = 0;
          return cdataOpen
        }

        if (asciiAlpha_1(code)) {
          effects.consume(code);
          return declaration
        }

        return nok(code)
      }

      function commentOpen(code) {
        if (code === 45) {
          effects.consume(code);
          return commentStart
        }

        return nok(code)
      }

      function commentStart(code) {
        if (code === null || code === 62) {
          return nok(code)
        }

        if (code === 45) {
          effects.consume(code);
          return commentStartDash
        }

        return comment(code)
      }

      function commentStartDash(code) {
        if (code === null || code === 62) {
          return nok(code)
        }

        return comment(code)
      }

      function comment(code) {
        if (code === null) {
          return nok(code)
        }

        if (code === 45) {
          effects.consume(code);
          return commentClose
        }

        if (markdownLineEnding_1(code)) {
          returnState = comment;
          return atLineEnding(code)
        }

        effects.consume(code);
        return comment
      }

      function commentClose(code) {
        if (code === 45) {
          effects.consume(code);
          return end
        }

        return comment(code)
      }

      function cdataOpen(code) {
        if (code === buffer.charCodeAt(index++)) {
          effects.consume(code);
          return index === buffer.length ? cdata : cdataOpen
        }

        return nok(code)
      }

      function cdata(code) {
        if (code === null) {
          return nok(code)
        }

        if (code === 93) {
          effects.consume(code);
          return cdataClose
        }

        if (markdownLineEnding_1(code)) {
          returnState = cdata;
          return atLineEnding(code)
        }

        effects.consume(code);
        return cdata
      }

      function cdataClose(code) {
        if (code === 93) {
          effects.consume(code);
          return cdataEnd
        }

        return cdata(code)
      }

      function cdataEnd(code) {
        if (code === 62) {
          return end(code)
        }

        if (code === 93) {
          effects.consume(code);
          return cdataEnd
        }

        return cdata(code)
      }

      function declaration(code) {
        if (code === null || code === 62) {
          return end(code)
        }

        if (markdownLineEnding_1(code)) {
          returnState = declaration;
          return atLineEnding(code)
        }

        effects.consume(code);
        return declaration
      }

      function instruction(code) {
        if (code === null) {
          return nok(code)
        }

        if (code === 63) {
          effects.consume(code);
          return instructionClose
        }

        if (markdownLineEnding_1(code)) {
          returnState = instruction;
          return atLineEnding(code)
        }

        effects.consume(code);
        return instruction
      }

      function instructionClose(code) {
        return code === 62 ? end(code) : instruction(code)
      }

      function tagCloseStart(code) {
        if (asciiAlpha_1(code)) {
          effects.consume(code);
          return tagClose
        }

        return nok(code)
      }

      function tagClose(code) {
        if (code === 45 || asciiAlphanumeric_1(code)) {
          effects.consume(code);
          return tagClose
        }

        return tagCloseBetween(code)
      }

      function tagCloseBetween(code) {
        if (markdownLineEnding_1(code)) {
          returnState = tagCloseBetween;
          return atLineEnding(code)
        }

        if (markdownSpace_1(code)) {
          effects.consume(code);
          return tagCloseBetween
        }

        return end(code)
      }

      function tagOpen(code) {
        if (code === 45 || asciiAlphanumeric_1(code)) {
          effects.consume(code);
          return tagOpen
        }

        if (code === 47 || code === 62 || markdownLineEndingOrSpace_1(code)) {
          return tagOpenBetween(code)
        }

        return nok(code)
      }

      function tagOpenBetween(code) {
        if (code === 47) {
          effects.consume(code);
          return end
        }

        if (code === 58 || code === 95 || asciiAlpha_1(code)) {
          effects.consume(code);
          return tagOpenAttributeName
        }

        if (markdownLineEnding_1(code)) {
          returnState = tagOpenBetween;
          return atLineEnding(code)
        }

        if (markdownSpace_1(code)) {
          effects.consume(code);
          return tagOpenBetween
        }

        return end(code)
      }

      function tagOpenAttributeName(code) {
        if (
          code === 45 ||
          code === 46 ||
          code === 58 ||
          code === 95 ||
          asciiAlphanumeric_1(code)
        ) {
          effects.consume(code);
          return tagOpenAttributeName
        }

        return tagOpenAttributeNameAfter(code)
      }

      function tagOpenAttributeNameAfter(code) {
        if (code === 61) {
          effects.consume(code);
          return tagOpenAttributeValueBefore
        }

        if (markdownLineEnding_1(code)) {
          returnState = tagOpenAttributeNameAfter;
          return atLineEnding(code)
        }

        if (markdownSpace_1(code)) {
          effects.consume(code);
          return tagOpenAttributeNameAfter
        }

        return tagOpenBetween(code)
      }

      function tagOpenAttributeValueBefore(code) {
        if (
          code === null ||
          code === 60 ||
          code === 61 ||
          code === 62 ||
          code === 96
        ) {
          return nok(code)
        }

        if (code === 34 || code === 39) {
          effects.consume(code);
          marker = code;
          return tagOpenAttributeValueQuoted
        }

        if (markdownLineEnding_1(code)) {
          returnState = tagOpenAttributeValueBefore;
          return atLineEnding(code)
        }

        if (markdownSpace_1(code)) {
          effects.consume(code);
          return tagOpenAttributeValueBefore
        }

        effects.consume(code);
        marker = undefined;
        return tagOpenAttributeValueUnquoted
      }

      function tagOpenAttributeValueQuoted(code) {
        if (code === marker) {
          effects.consume(code);
          return tagOpenAttributeValueQuotedAfter
        }

        if (code === null) {
          return nok(code)
        }

        if (markdownLineEnding_1(code)) {
          returnState = tagOpenAttributeValueQuoted;
          return atLineEnding(code)
        }

        effects.consume(code);
        return tagOpenAttributeValueQuoted
      }

      function tagOpenAttributeValueQuotedAfter(code) {
        if (code === 62 || code === 47 || markdownLineEndingOrSpace_1(code)) {
          return tagOpenBetween(code)
        }

        return nok(code)
      }

      function tagOpenAttributeValueUnquoted(code) {
        if (
          code === null ||
          code === 34 ||
          code === 39 ||
          code === 60 ||
          code === 61 ||
          code === 96
        ) {
          return nok(code)
        }

        if (code === 62 || markdownLineEndingOrSpace_1(code)) {
          return tagOpenBetween(code)
        }

        effects.consume(code);
        return tagOpenAttributeValueUnquoted
      } // We can’t have blank lines in content, so no need to worry about empty
      // tokens.

      function atLineEnding(code) {
        effects.exit('htmlTextData');
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return factorySpace(
          effects,
          afterPrefix,
          'linePrefix',
          self.parser.constructs.disable.null.indexOf('codeIndented') > -1
            ? undefined
            : 4
        )
      }

      function afterPrefix(code) {
        effects.enter('htmlTextData');
        return returnState(code)
      }

      function end(code) {
        if (code === 62) {
          effects.consume(code);
          effects.exit('htmlTextData');
          effects.exit('htmlText');
          return ok
        }

        return nok(code)
      }
    }

    var htmlText_1 = htmlText;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};











    var labelEnd = {
      name: 'labelEnd',
      tokenize: tokenizeLabelEnd,
      resolveTo: resolveToLabelEnd,
      resolveAll: resolveAllLabelEnd
    };
    var resourceConstruct = {
      tokenize: tokenizeResource
    };
    var fullReferenceConstruct = {
      tokenize: tokenizeFullReference
    };
    var collapsedReferenceConstruct = {
      tokenize: tokenizeCollapsedReference
    };

    function resolveAllLabelEnd(events) {
      var index = -1;
      var token;

      while (++index < events.length) {
        token = events[index][1];

        if (
          !token._used &&
          (token.type === 'labelImage' ||
            token.type === 'labelLink' ||
            token.type === 'labelEnd')
        ) {
          // Remove the marker.
          events.splice(index + 1, token.type === 'labelImage' ? 4 : 2);
          token.type = 'data';
          index++;
        }
      }

      return events
    }

    function resolveToLabelEnd(events, context) {
      var index = events.length;
      var offset = 0;
      var group;
      var label;
      var text;
      var token;
      var open;
      var close;
      var media; // Find an opening.

      while (index--) {
        token = events[index][1];

        if (open) {
          // If we see another link, or inactive link label, we’ve been here before.
          if (
            token.type === 'link' ||
            (token.type === 'labelLink' && token._inactive)
          ) {
            break
          } // Mark other link openings as inactive, as we can’t have links in
          // links.

          if (events[index][0] === 'enter' && token.type === 'labelLink') {
            token._inactive = true;
          }
        } else if (close) {
          if (
            events[index][0] === 'enter' &&
            (token.type === 'labelImage' || token.type === 'labelLink') &&
            !token._balanced
          ) {
            open = index;

            if (token.type !== 'labelLink') {
              offset = 2;
              break
            }
          }
        } else if (token.type === 'labelEnd') {
          close = index;
        }
      }

      group = {
        type: events[open][1].type === 'labelLink' ? 'link' : 'image',
        start: shallow_1(events[open][1].start),
        end: shallow_1(events[events.length - 1][1].end)
      };
      label = {
        type: 'label',
        start: shallow_1(events[open][1].start),
        end: shallow_1(events[close][1].end)
      };
      text = {
        type: 'labelText',
        start: shallow_1(events[open + offset + 2][1].end),
        end: shallow_1(events[close - 2][1].start)
      };
      media = [
        ['enter', group, context],
        ['enter', label, context]
      ]; // Opening marker.

      media = chunkedPush_1(media, events.slice(open + 1, open + offset + 3)); // Text open.

      media = chunkedPush_1(media, [['enter', text, context]]); // Between.

      media = chunkedPush_1(
        media,
        resolveAll_1(
          context.parser.constructs.insideSpan.null,
          events.slice(open + offset + 4, close - 3),
          context
        )
      ); // Text close, marker close, label close.

      media = chunkedPush_1(media, [
        ['exit', text, context],
        events[close - 2],
        events[close - 1],
        ['exit', label, context]
      ]); // Reference, resource, or so.

      media = chunkedPush_1(media, events.slice(close + 1)); // Media close.

      media = chunkedPush_1(media, [['exit', group, context]]);
      chunkedSplice_1(events, open, events.length, media);
      return events
    }

    function tokenizeLabelEnd(effects, ok, nok) {
      var self = this;
      var index = self.events.length;
      var labelStart;
      var defined; // Find an opening.

      while (index--) {
        if (
          (self.events[index][1].type === 'labelImage' ||
            self.events[index][1].type === 'labelLink') &&
          !self.events[index][1]._balanced
        ) {
          labelStart = self.events[index][1];
          break
        }
      }

      return start

      function start(code) {
        if (!labelStart) {
          return nok(code)
        } // It’s a balanced bracket, but contains a link.

        if (labelStart._inactive) return balanced(code)
        defined =
          self.parser.defined.indexOf(
            normalizeIdentifier_1(
              self.sliceSerialize({
                start: labelStart.end,
                end: self.now()
              })
            )
          ) > -1;
        effects.enter('labelEnd');
        effects.enter('labelMarker');
        effects.consume(code);
        effects.exit('labelMarker');
        effects.exit('labelEnd');
        return afterLabelEnd
      }

      function afterLabelEnd(code) {
        // Resource: `[asd](fgh)`.
        if (code === 40) {
          return effects.attempt(
            resourceConstruct,
            ok,
            defined ? ok : balanced
          )(code)
        } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?

        if (code === 91) {
          return effects.attempt(
            fullReferenceConstruct,
            ok,
            defined
              ? effects.attempt(collapsedReferenceConstruct, ok, balanced)
              : balanced
          )(code)
        } // Shortcut reference: `[asd]`?

        return defined ? ok(code) : balanced(code)
      }

      function balanced(code) {
        labelStart._balanced = true;
        return nok(code)
      }
    }

    function tokenizeResource(effects, ok, nok) {
      return start

      function start(code) {
        effects.enter('resource');
        effects.enter('resourceMarker');
        effects.consume(code);
        effects.exit('resourceMarker');
        return factoryWhitespace(effects, open)
      }

      function open(code) {
        if (code === 41) {
          return end(code)
        }

        return factoryDestination(
          effects,
          destinationAfter,
          nok,
          'resourceDestination',
          'resourceDestinationLiteral',
          'resourceDestinationLiteralMarker',
          'resourceDestinationRaw',
          'resourceDestinationString',
          3
        )(code)
      }

      function destinationAfter(code) {
        return markdownLineEndingOrSpace_1(code)
          ? factoryWhitespace(effects, between)(code)
          : end(code)
      }

      function between(code) {
        if (code === 34 || code === 39 || code === 40) {
          return factoryTitle(
            effects,
            factoryWhitespace(effects, end),
            nok,
            'resourceTitle',
            'resourceTitleMarker',
            'resourceTitleString'
          )(code)
        }

        return end(code)
      }

      function end(code) {
        if (code === 41) {
          effects.enter('resourceMarker');
          effects.consume(code);
          effects.exit('resourceMarker');
          effects.exit('resource');
          return ok
        }

        return nok(code)
      }
    }

    function tokenizeFullReference(effects, ok, nok) {
      var self = this;
      return start

      function start(code) {
        return factoryLabel.call(
          self,
          effects,
          afterLabel,
          nok,
          'reference',
          'referenceMarker',
          'referenceString'
        )(code)
      }

      function afterLabel(code) {
        return self.parser.defined.indexOf(
          normalizeIdentifier_1(
            self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
          )
        ) < 0
          ? nok(code)
          : ok(code)
      }
    }

    function tokenizeCollapsedReference(effects, ok, nok) {
      return start

      function start(code) {
        effects.enter('reference');
        effects.enter('referenceMarker');
        effects.consume(code);
        effects.exit('referenceMarker');
        return open
      }

      function open(code) {
        if (code === 93) {
          effects.enter('referenceMarker');
          effects.consume(code);
          effects.exit('referenceMarker');
          effects.exit('reference');
          return ok
        }

        return nok(code)
      }
    }

    var labelEnd_1 = labelEnd;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var labelStartImage = {
      name: 'labelStartImage',
      tokenize: tokenizeLabelStartImage,
      resolveAll: labelEnd_1.resolveAll
    };

    function tokenizeLabelStartImage(effects, ok, nok) {
      var self = this;
      return start

      function start(code) {
        effects.enter('labelImage');
        effects.enter('labelImageMarker');
        effects.consume(code);
        effects.exit('labelImageMarker');
        return open
      }

      function open(code) {
        if (code === 91) {
          effects.enter('labelMarker');
          effects.consume(code);
          effects.exit('labelMarker');
          effects.exit('labelImage');
          return after
        }

        return nok(code)
      }

      function after(code) {
        /* c8 ignore next */
        return code === 94 &&
          /* c8 ignore next */
          '_hiddenFootnoteSupport' in self.parser.constructs
          ? /* c8 ignore next */
            nok(code)
          : ok(code)
      }
    }

    var labelStartImage_1 = labelStartImage;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var labelStartLink = {
      name: 'labelStartLink',
      tokenize: tokenizeLabelStartLink,
      resolveAll: labelEnd_1.resolveAll
    };

    function tokenizeLabelStartLink(effects, ok, nok) {
      var self = this;
      return start

      function start(code) {
        effects.enter('labelLink');
        effects.enter('labelMarker');
        effects.consume(code);
        effects.exit('labelMarker');
        effects.exit('labelLink');
        return after
      }

      function after(code) {
        /* c8 ignore next */
        return code === 94 &&
          /* c8 ignore next */
          '_hiddenFootnoteSupport' in self.parser.constructs
          ? /* c8 ignore next */
            nok(code)
          : ok(code)
      }
    }

    var labelStartLink_1 = labelStartLink;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var lineEnding = {
      name: 'lineEnding',
      tokenize: tokenizeLineEnding
    };

    function tokenizeLineEnding(effects, ok) {
      return start

      function start(code) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return factorySpace(effects, ok, 'linePrefix')
      }
    }

    var lineEnding_1 = lineEnding;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};




    var thematicBreak = {
      name: 'thematicBreak',
      tokenize: tokenizeThematicBreak
    };

    function tokenizeThematicBreak(effects, ok, nok) {
      var size = 0;
      var marker;
      return start

      function start(code) {
        effects.enter('thematicBreak');
        marker = code;
        return atBreak(code)
      }

      function atBreak(code) {
        if (code === marker) {
          effects.enter('thematicBreakSequence');
          return sequence(code)
        }

        if (markdownSpace_1(code)) {
          return factorySpace(effects, atBreak, 'whitespace')(code)
        }

        if (size < 3 || (code !== null && !markdownLineEnding_1(code))) {
          return nok(code)
        }

        effects.exit('thematicBreak');
        return ok(code)
      }

      function sequence(code) {
        if (code === marker) {
          effects.consume(code);
          size++;
          return sequence
        }

        effects.exit('thematicBreakSequence');
        return atBreak(code)
      }
    }

    var thematicBreak_1 = thematicBreak;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};








    var list = {
      name: 'list',
      tokenize: tokenizeListStart,
      continuation: {
        tokenize: tokenizeListContinuation
      },
      exit: tokenizeListEnd
    };
    var listItemPrefixWhitespaceConstruct = {
      tokenize: tokenizeListItemPrefixWhitespace,
      partial: true
    };
    var indentConstruct = {
      tokenize: tokenizeIndent,
      partial: true
    };

    function tokenizeListStart(effects, ok, nok) {
      var self = this;
      var initialSize = prefixSize_1(self.events, 'linePrefix');
      var size = 0;
      return start

      function start(code) {
        var kind =
          self.containerState.type ||
          (code === 42 || code === 43 || code === 45
            ? 'listUnordered'
            : 'listOrdered');

        if (
          kind === 'listUnordered'
            ? !self.containerState.marker || code === self.containerState.marker
            : asciiDigit_1(code)
        ) {
          if (!self.containerState.type) {
            self.containerState.type = kind;
            effects.enter(kind, {
              _container: true
            });
          }

          if (kind === 'listUnordered') {
            effects.enter('listItemPrefix');
            return code === 42 || code === 45
              ? effects.check(thematicBreak_1, nok, atMarker)(code)
              : atMarker(code)
          }

          if (!self.interrupt || code === 49) {
            effects.enter('listItemPrefix');
            effects.enter('listItemValue');
            return inside(code)
          }
        }

        return nok(code)
      }

      function inside(code) {
        if (asciiDigit_1(code) && ++size < 10) {
          effects.consume(code);
          return inside
        }

        if (
          (!self.interrupt || size < 2) &&
          (self.containerState.marker
            ? code === self.containerState.marker
            : code === 41 || code === 46)
        ) {
          effects.exit('listItemValue');
          return atMarker(code)
        }

        return nok(code)
      }

      function atMarker(code) {
        effects.enter('listItemMarker');
        effects.consume(code);
        effects.exit('listItemMarker');
        self.containerState.marker = self.containerState.marker || code;
        return effects.check(
          partialBlankLine_1, // Can’t be empty when interrupting.
          self.interrupt ? nok : onBlank,
          effects.attempt(
            listItemPrefixWhitespaceConstruct,
            endOfPrefix,
            otherPrefix
          )
        )
      }

      function onBlank(code) {
        self.containerState.initialBlankLine = true;
        initialSize++;
        return endOfPrefix(code)
      }

      function otherPrefix(code) {
        if (markdownSpace_1(code)) {
          effects.enter('listItemPrefixWhitespace');
          effects.consume(code);
          effects.exit('listItemPrefixWhitespace');
          return endOfPrefix
        }

        return nok(code)
      }

      function endOfPrefix(code) {
        self.containerState.size =
          initialSize + sizeChunks_1(self.sliceStream(effects.exit('listItemPrefix')));
        return ok(code)
      }
    }

    function tokenizeListContinuation(effects, ok, nok) {
      var self = this;
      self.containerState._closeFlow = undefined;
      return effects.check(partialBlankLine_1, onBlank, notBlank)

      function onBlank(code) {
        self.containerState.furtherBlankLines =
          self.containerState.furtherBlankLines ||
          self.containerState.initialBlankLine; // We have a blank line.
        // Still, try to consume at most the items size.

        return factorySpace(
          effects,
          ok,
          'listItemIndent',
          self.containerState.size + 1
        )(code)
      }

      function notBlank(code) {
        if (self.containerState.furtherBlankLines || !markdownSpace_1(code)) {
          self.containerState.furtherBlankLines = self.containerState.initialBlankLine = undefined;
          return notInCurrentItem(code)
        }

        self.containerState.furtherBlankLines = self.containerState.initialBlankLine = undefined;
        return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)
      }

      function notInCurrentItem(code) {
        // While we do continue, we signal that the flow should be closed.
        self.containerState._closeFlow = true; // As we’re closing flow, we’re no longer interrupting.

        self.interrupt = undefined;
        return factorySpace(
          effects,
          effects.attempt(list, ok, nok),
          'linePrefix',
          self.parser.constructs.disable.null.indexOf('codeIndented') > -1
            ? undefined
            : 4
        )(code)
      }
    }

    function tokenizeIndent(effects, ok, nok) {
      var self = this;
      return factorySpace(
        effects,
        afterPrefix,
        'listItemIndent',
        self.containerState.size + 1
      )

      function afterPrefix(code) {
        return prefixSize_1(self.events, 'listItemIndent') ===
          self.containerState.size
          ? ok(code)
          : nok(code)
      }
    }

    function tokenizeListEnd(effects) {
      effects.exit(this.containerState.type);
    }

    function tokenizeListItemPrefixWhitespace(effects, ok, nok) {
      var self = this;
      return factorySpace(
        effects,
        afterPrefix,
        'listItemPrefixWhitespace',
        self.parser.constructs.disable.null.indexOf('codeIndented') > -1
          ? undefined
          : 4 + 1
      )

      function afterPrefix(code) {
        return markdownSpace_1(code) ||
          !prefixSize_1(self.events, 'listItemPrefixWhitespace')
          ? nok(code)
          : ok(code)
      }
    }

    var list_1 = list;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};




    var setextUnderline = {
      name: 'setextUnderline',
      tokenize: tokenizeSetextUnderline,
      resolveTo: resolveToSetextUnderline
    };

    function resolveToSetextUnderline(events, context) {
      var index = events.length;
      var content;
      var text;
      var definition;
      var heading; // Find the opening of the content.
      // It’ll always exist: we don’t tokenize if it isn’t there.

      while (index--) {
        if (events[index][0] === 'enter') {
          if (events[index][1].type === 'content') {
            content = index;
            break
          }

          if (events[index][1].type === 'paragraph') {
            text = index;
          }
        } // Exit
        else {
          if (events[index][1].type === 'content') {
            // Remove the content end (if needed we’ll add it later)
            events.splice(index, 1);
          }

          if (!definition && events[index][1].type === 'definition') {
            definition = index;
          }
        }
      }

      heading = {
        type: 'setextHeading',
        start: shallow_1(events[text][1].start),
        end: shallow_1(events[events.length - 1][1].end)
      }; // Change the paragraph to setext heading text.

      events[text][1].type = 'setextHeadingText'; // If we have definitions in the content, we’ll keep on having content,
      // but we need move it.

      if (definition) {
        events.splice(text, 0, ['enter', heading, context]);
        events.splice(definition + 1, 0, ['exit', events[content][1], context]);
        events[content][1].end = shallow_1(events[definition][1].end);
      } else {
        events[content][1] = heading;
      } // Add the heading exit at the end.

      events.push(['exit', heading, context]);
      return events
    }

    function tokenizeSetextUnderline(effects, ok, nok) {
      var self = this;
      var index = self.events.length;
      var marker;
      var paragraph; // Find an opening.

      while (index--) {
        // Skip enter/exit of line ending, line prefix, and content.
        // We can now either have a definition or a paragraph.
        if (
          self.events[index][1].type !== 'lineEnding' &&
          self.events[index][1].type !== 'linePrefix' &&
          self.events[index][1].type !== 'content'
        ) {
          paragraph = self.events[index][1].type === 'paragraph';
          break
        }
      }

      return start

      function start(code) {
        if (!self.lazy && (self.interrupt || paragraph)) {
          effects.enter('setextHeadingLine');
          effects.enter('setextHeadingLineSequence');
          marker = code;
          return closingSequence(code)
        }

        return nok(code)
      }

      function closingSequence(code) {
        if (code === marker) {
          effects.consume(code);
          return closingSequence
        }

        effects.exit('setextHeadingLineSequence');
        return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)
      }

      function closingSequenceEnd(code) {
        if (code === null || markdownLineEnding_1(code)) {
          effects.exit('setextHeadingLine');
          return ok(code)
        }

        return nok(code)
      }
    }

    var setextUnderline_1 = setextUnderline;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var constructs = createCommonjsModule$1(function (module, exports) {

    Object.defineProperty(exports, '__esModule', {value: true});























    var document = {
      42: list_1,
      // Asterisk
      43: list_1,
      // Plus sign
      45: list_1,
      // Dash
      48: list_1,
      // 0
      49: list_1,
      // 1
      50: list_1,
      // 2
      51: list_1,
      // 3
      52: list_1,
      // 4
      53: list_1,
      // 5
      54: list_1,
      // 6
      55: list_1,
      // 7
      56: list_1,
      // 8
      57: list_1,
      // 9
      62: blockQuote_1 // Greater than
    };
    var contentInitial = {
      91: definition_1 // Left square bracket
    };
    var flowInitial = {
      '-2': codeIndented_1,
      // Horizontal tab
      '-1': codeIndented_1,
      // Virtual space
      32: codeIndented_1 // Space
    };
    var flow = {
      35: headingAtx_1,
      // Number sign
      42: thematicBreak_1,
      // Asterisk
      45: [setextUnderline_1, thematicBreak_1],
      // Dash
      60: htmlFlow_1,
      // Less than
      61: setextUnderline_1,
      // Equals to
      95: thematicBreak_1,
      // Underscore
      96: codeFenced_1,
      // Grave accent
      126: codeFenced_1 // Tilde
    };
    var string = {
      38: characterReference_1,
      // Ampersand
      92: characterEscape_1 // Backslash
    };
    var text = {
      '-5': lineEnding_1,
      // Carriage return
      '-4': lineEnding_1,
      // Line feed
      '-3': lineEnding_1,
      // Carriage return + line feed
      33: labelStartImage_1,
      // Exclamation mark
      38: characterReference_1,
      // Ampersand
      42: attention_1,
      // Asterisk
      60: [autolink_1, htmlText_1],
      // Less than
      91: labelStartLink_1,
      // Left square bracket
      92: [hardBreakEscape_1, characterEscape_1],
      // Backslash
      93: labelEnd_1,
      // Right square bracket
      95: attention_1,
      // Underscore
      96: codeText_1 // Grave accent
    };
    var insideSpan = {
      null: [attention_1, text_1.resolver]
    };
    var disable = {
      null: []
    };

    exports.contentInitial = contentInitial;
    exports.disable = disable;
    exports.document = document;
    exports.flow = flow;
    exports.flowInitial = flowInitial;
    exports.insideSpan = insideSpan;
    exports.string = string;
    exports.text = text;
    });

    unwrapExports(constructs);
    constructs.contentInitial;
    constructs.disable;
    constructs.document;
    constructs.flow;
    constructs.flowInitial;
    constructs.insideSpan;
    constructs.string;
    constructs.text;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};









    function parse$1(options) {
      var settings = options || {};
      var parser = {
        defined: [],
        constructs: combineExtensions_1(
          [constructs].concat(miniflat_1(settings.extensions))
        ),
        content: create(content$1),
        document: create(document$1),
        flow: create(flow),
        string: create(text_1.string),
        text: create(text_1.text)
      };
      return parser

      function create(initializer) {
        return creator

        function creator(from) {
          return createTokenizer_1(parser, initializer, from)
        }
      }
    }

    var parse_1 = parse$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var search$1 = /[\0\t\n\r]/g;

    function preprocess() {
      var start = true;
      var column = 1;
      var buffer = '';
      var atCarriageReturn;
      return preprocessor

      function preprocessor(value, encoding, end) {
        var chunks = [];
        var match;
        var next;
        var startPosition;
        var endPosition;
        var code;
        value = buffer + value.toString(encoding);
        startPosition = 0;
        buffer = '';

        if (start) {
          if (value.charCodeAt(0) === 65279) {
            startPosition++;
          }

          start = undefined;
        }

        while (startPosition < value.length) {
          search$1.lastIndex = startPosition;
          match = search$1.exec(value);
          endPosition = match ? match.index : value.length;
          code = value.charCodeAt(endPosition);

          if (!match) {
            buffer = value.slice(startPosition);
            break
          }

          if (code === 10 && startPosition === endPosition && atCarriageReturn) {
            chunks.push(-3);
            atCarriageReturn = undefined;
          } else {
            if (atCarriageReturn) {
              chunks.push(-5);
              atCarriageReturn = undefined;
            }

            if (startPosition < endPosition) {
              chunks.push(value.slice(startPosition, endPosition));
              column += endPosition - startPosition;
            }

            if (code === 0) {
              chunks.push(65533);
              column++;
            } else if (code === 9) {
              next = Math.ceil(column / 4) * 4;
              chunks.push(-2);

              while (column++ < next) chunks.push(-1);
            } else if (code === 10) {
              chunks.push(-4);
              column = 1;
            } // Must be carriage return.
            else {
              atCarriageReturn = true;
              column = 1;
            }
          }

          startPosition = endPosition + 1;
        }

        if (end) {
          if (atCarriageReturn) chunks.push(-5);
          if (buffer) chunks.push(buffer);
          chunks.push(null);
        }

        return chunks
      }
    }

    var preprocess_1 = preprocess;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    function postprocess(events) {
      while (!subtokenize_1(events)) {
        // Empty
      }

      return events
    }

    var postprocess_1 = postprocess;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var dist = fromMarkdown;

    // These three are compiled away in the `dist/`












    function fromMarkdown(value, encoding, options) {
      if (typeof encoding !== 'string') {
        options = encoding;
        encoding = undefined;
      }

      return compiler(options)(
        postprocess_1(
          parse_1(options).document().write(preprocess_1()(value, encoding, true))
        )
      )
    }

    // Note this compiler only understand complete buffering, not streaming.
    function compiler(options) {
      var settings = options || {};
      var config = configure(
        {
          transforms: [],
          canContainEols: [
            'emphasis',
            'fragment',
            'heading',
            'paragraph',
            'strong'
          ],

          enter: {
            autolink: opener(link),
            autolinkProtocol: onenterdata,
            autolinkEmail: onenterdata,
            atxHeading: opener(heading),
            blockQuote: opener(blockQuote),
            characterEscape: onenterdata,
            characterReference: onenterdata,
            codeFenced: opener(codeFlow),
            codeFencedFenceInfo: buffer,
            codeFencedFenceMeta: buffer,
            codeIndented: opener(codeFlow, buffer),
            codeText: opener(codeText, buffer),
            codeTextData: onenterdata,
            data: onenterdata,
            codeFlowValue: onenterdata,
            definition: opener(definition),
            definitionDestinationString: buffer,
            definitionLabelString: buffer,
            definitionTitleString: buffer,
            emphasis: opener(emphasis),
            hardBreakEscape: opener(hardBreak),
            hardBreakTrailing: opener(hardBreak),
            htmlFlow: opener(html, buffer),
            htmlFlowData: onenterdata,
            htmlText: opener(html, buffer),
            htmlTextData: onenterdata,
            image: opener(image),
            label: buffer,
            link: opener(link),
            listItem: opener(listItem),
            listItemValue: onenterlistitemvalue,
            listOrdered: opener(list, onenterlistordered),
            listUnordered: opener(list),
            paragraph: opener(paragraph),
            reference: onenterreference,
            referenceString: buffer,
            resourceDestinationString: buffer,
            resourceTitleString: buffer,
            setextHeading: opener(heading),
            strong: opener(strong),
            thematicBreak: opener(thematicBreak)
          },

          exit: {
            atxHeading: closer(),
            atxHeadingSequence: onexitatxheadingsequence,
            autolink: closer(),
            autolinkEmail: onexitautolinkemail,
            autolinkProtocol: onexitautolinkprotocol,
            blockQuote: closer(),
            characterEscapeValue: onexitdata,
            characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
            characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
            characterReferenceValue: onexitcharacterreferencevalue,
            codeFenced: closer(onexitcodefenced),
            codeFencedFence: onexitcodefencedfence,
            codeFencedFenceInfo: onexitcodefencedfenceinfo,
            codeFencedFenceMeta: onexitcodefencedfencemeta,
            codeFlowValue: onexitdata,
            codeIndented: closer(onexitcodeindented),
            codeText: closer(onexitcodetext),
            codeTextData: onexitdata,
            data: onexitdata,
            definition: closer(),
            definitionDestinationString: onexitdefinitiondestinationstring,
            definitionLabelString: onexitdefinitionlabelstring,
            definitionTitleString: onexitdefinitiontitlestring,
            emphasis: closer(),
            hardBreakEscape: closer(onexithardbreak),
            hardBreakTrailing: closer(onexithardbreak),
            htmlFlow: closer(onexithtmlflow),
            htmlFlowData: onexitdata,
            htmlText: closer(onexithtmltext),
            htmlTextData: onexitdata,
            image: closer(onexitimage),
            label: onexitlabel,
            labelText: onexitlabeltext,
            lineEnding: onexitlineending,
            link: closer(onexitlink),
            listItem: closer(),
            listOrdered: closer(),
            listUnordered: closer(),
            paragraph: closer(),
            referenceString: onexitreferencestring,
            resourceDestinationString: onexitresourcedestinationstring,
            resourceTitleString: onexitresourcetitlestring,
            resource: onexitresource,
            setextHeading: closer(onexitsetextheading),
            setextHeadingLineSequence: onexitsetextheadinglinesequence,
            setextHeadingText: onexitsetextheadingtext,
            strong: closer(),
            thematicBreak: closer()
          }
        },

        settings.mdastExtensions || []
      );

      var data = {};

      return compile

      function compile(events) {
        var tree = {type: 'root', children: []};
        var stack = [tree];
        var tokenStack = [];
        var listStack = [];
        var index = -1;
        var handler;
        var listStart;

        var context = {
          stack: stack,
          tokenStack: tokenStack,
          config: config,
          enter: enter,
          exit: exit,
          buffer: buffer,
          resume: resume,
          setData: setData,
          getData: getData
        };

        while (++index < events.length) {
          // We preprocess lists to add `listItem` tokens, and to infer whether
          // items the list itself are spread out.
          if (
            events[index][1].type === 'listOrdered' ||
            events[index][1].type === 'listUnordered'
          ) {
            if (events[index][0] === 'enter') {
              listStack.push(index);
            } else {
              listStart = listStack.pop(index);
              index = prepareList(events, listStart, index);
            }
          }
        }

        index = -1;

        while (++index < events.length) {
          handler = config[events[index][0]];

          if (hasOwnProperty_1.call(handler, events[index][1].type)) {
            handler[events[index][1].type].call(
              assign_1({sliceSerialize: events[index][2].sliceSerialize}, context),
              events[index][1]
            );
          }
        }

        if (tokenStack.length) {
          throw new Error(
            'Cannot close document, a token (`' +
              tokenStack[tokenStack.length - 1].type +
              '`, ' +
              unistUtilStringifyPosition({
                start: tokenStack[tokenStack.length - 1].start,
                end: tokenStack[tokenStack.length - 1].end
              }) +
              ') is still open'
          )
        }

        // Figure out `root` position.
        tree.position = {
          start: point(
            events.length ? events[0][1].start : {line: 1, column: 1, offset: 0}
          ),

          end: point(
            events.length
              ? events[events.length - 2][1].end
              : {line: 1, column: 1, offset: 0}
          )
        };

        index = -1;
        while (++index < config.transforms.length) {
          tree = config.transforms[index](tree) || tree;
        }

        return tree
      }

      function prepareList(events, start, length) {
        var index = start - 1;
        var containerBalance = -1;
        var listSpread = false;
        var listItem;
        var tailIndex;
        var lineIndex;
        var tailEvent;
        var event;
        var firstBlankLineIndex;
        var atMarker;

        while (++index <= length) {
          event = events[index];

          if (
            event[1].type === 'listUnordered' ||
            event[1].type === 'listOrdered' ||
            event[1].type === 'blockQuote'
          ) {
            if (event[0] === 'enter') {
              containerBalance++;
            } else {
              containerBalance--;
            }

            atMarker = undefined;
          } else if (event[1].type === 'lineEndingBlank') {
            if (event[0] === 'enter') {
              if (
                listItem &&
                !atMarker &&
                !containerBalance &&
                !firstBlankLineIndex
              ) {
                firstBlankLineIndex = index;
              }

              atMarker = undefined;
            }
          } else if (
            event[1].type === 'linePrefix' ||
            event[1].type === 'listItemValue' ||
            event[1].type === 'listItemMarker' ||
            event[1].type === 'listItemPrefix' ||
            event[1].type === 'listItemPrefixWhitespace'
          ) ; else {
            atMarker = undefined;
          }

          if (
            (!containerBalance &&
              event[0] === 'enter' &&
              event[1].type === 'listItemPrefix') ||
            (containerBalance === -1 &&
              event[0] === 'exit' &&
              (event[1].type === 'listUnordered' ||
                event[1].type === 'listOrdered'))
          ) {
            if (listItem) {
              tailIndex = index;
              lineIndex = undefined;

              while (tailIndex--) {
                tailEvent = events[tailIndex];

                if (
                  tailEvent[1].type === 'lineEnding' ||
                  tailEvent[1].type === 'lineEndingBlank'
                ) {
                  if (tailEvent[0] === 'exit') continue

                  if (lineIndex) {
                    events[lineIndex][1].type = 'lineEndingBlank';
                    listSpread = true;
                  }

                  tailEvent[1].type = 'lineEnding';
                  lineIndex = tailIndex;
                } else if (
                  tailEvent[1].type === 'linePrefix' ||
                  tailEvent[1].type === 'blockQuotePrefix' ||
                  tailEvent[1].type === 'blockQuotePrefixWhitespace' ||
                  tailEvent[1].type === 'blockQuoteMarker' ||
                  tailEvent[1].type === 'listItemIndent'
                ) ; else {
                  break
                }
              }

              if (
                firstBlankLineIndex &&
                (!lineIndex || firstBlankLineIndex < lineIndex)
              ) {
                listItem._spread = true;
              }

              // Fix position.
              listItem.end = point(
                lineIndex ? events[lineIndex][1].start : event[1].end
              );

              events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);
              index++;
              length++;
            }

            // Create a new list item.
            if (event[1].type === 'listItemPrefix') {
              listItem = {
                type: 'listItem',
                _spread: false,
                start: point(event[1].start)
              };

              events.splice(index, 0, ['enter', listItem, event[2]]);
              index++;
              length++;
              firstBlankLineIndex = undefined;
              atMarker = true;
            }
          }
        }

        events[start][1]._spread = listSpread;
        return length
      }

      function setData(key, value) {
        data[key] = value;
      }

      function getData(key) {
        return data[key]
      }

      function point(d) {
        return {line: d.line, column: d.column, offset: d.offset}
      }

      function opener(create, and) {
        return open

        function open(token) {
          enter.call(this, create(token), token);
          if (and) and.call(this, token);
        }
      }

      function buffer() {
        this.stack.push({type: 'fragment', children: []});
      }

      function enter(node, token) {
        this.stack[this.stack.length - 1].children.push(node);
        this.stack.push(node);
        this.tokenStack.push(token);
        node.position = {start: point(token.start)};
        return node
      }

      function closer(and) {
        return close

        function close(token) {
          if (and) and.call(this, token);
          exit.call(this, token);
        }
      }

      function exit(token) {
        var node = this.stack.pop();
        var open = this.tokenStack.pop();

        if (!open) {
          throw new Error(
            'Cannot close `' +
              token.type +
              '` (' +
              unistUtilStringifyPosition({start: token.start, end: token.end}) +
              '): it’s not open'
          )
        } else if (open.type !== token.type) {
          throw new Error(
            'Cannot close `' +
              token.type +
              '` (' +
              unistUtilStringifyPosition({start: token.start, end: token.end}) +
              '): a different token (`' +
              open.type +
              '`, ' +
              unistUtilStringifyPosition({start: open.start, end: open.end}) +
              ') is open'
          )
        }

        node.position.end = point(token.end);
        return node
      }

      function resume() {
        return mdastUtilToString(this.stack.pop())
      }

      //
      // Handlers.
      //

      function onenterlistordered() {
        setData('expectingFirstListItemValue', true);
      }

      function onenterlistitemvalue(token) {
        if (getData('expectingFirstListItemValue')) {
          this.stack[this.stack.length - 2].start = parseInt(
            this.sliceSerialize(token),
            10
          );

          setData('expectingFirstListItemValue');
        }
      }

      function onexitcodefencedfenceinfo() {
        var data = this.resume();
        this.stack[this.stack.length - 1].lang = data;
      }

      function onexitcodefencedfencemeta() {
        var data = this.resume();
        this.stack[this.stack.length - 1].meta = data;
      }

      function onexitcodefencedfence() {
        // Exit if this is the closing fence.
        if (getData('flowCodeInside')) return
        this.buffer();
        setData('flowCodeInside', true);
      }

      function onexitcodefenced() {
        var data = this.resume();
        this.stack[this.stack.length - 1].value = data.replace(
          /^(\r?\n|\r)|(\r?\n|\r)$/g,
          ''
        );

        setData('flowCodeInside');
      }

      function onexitcodeindented() {
        var data = this.resume();
        this.stack[this.stack.length - 1].value = data;
      }

      function onexitdefinitionlabelstring(token) {
        // Discard label, use the source content instead.
        var label = this.resume();
        this.stack[this.stack.length - 1].label = label;
        this.stack[this.stack.length - 1].identifier = normalizeIdentifier_1(
          this.sliceSerialize(token)
        ).toLowerCase();
      }

      function onexitdefinitiontitlestring() {
        var data = this.resume();
        this.stack[this.stack.length - 1].title = data;
      }

      function onexitdefinitiondestinationstring() {
        var data = this.resume();
        this.stack[this.stack.length - 1].url = data;
      }

      function onexitatxheadingsequence(token) {
        if (!this.stack[this.stack.length - 1].depth) {
          this.stack[this.stack.length - 1].depth = this.sliceSerialize(
            token
          ).length;
        }
      }

      function onexitsetextheadingtext() {
        setData('setextHeadingSlurpLineEnding', true);
      }

      function onexitsetextheadinglinesequence(token) {
        this.stack[this.stack.length - 1].depth =
          this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;
      }

      function onexitsetextheading() {
        setData('setextHeadingSlurpLineEnding');
      }

      function onenterdata(token) {
        var siblings = this.stack[this.stack.length - 1].children;
        var tail = siblings[siblings.length - 1];

        if (!tail || tail.type !== 'text') {
          // Add a new text node.
          tail = text();
          tail.position = {start: point(token.start)};
          this.stack[this.stack.length - 1].children.push(tail);
        }

        this.stack.push(tail);
      }

      function onexitdata(token) {
        var tail = this.stack.pop();
        tail.value += this.sliceSerialize(token);
        tail.position.end = point(token.end);
      }

      function onexitlineending(token) {
        var context = this.stack[this.stack.length - 1];

        // If we’re at a hard break, include the line ending in there.
        if (getData('atHardBreak')) {
          context.children[context.children.length - 1].position.end = point(
            token.end
          );

          setData('atHardBreak');
          return
        }

        if (
          !getData('setextHeadingSlurpLineEnding') &&
          config.canContainEols.indexOf(context.type) > -1
        ) {
          onenterdata.call(this, token);
          onexitdata.call(this, token);
        }
      }

      function onexithardbreak() {
        setData('atHardBreak', true);
      }

      function onexithtmlflow() {
        var data = this.resume();
        this.stack[this.stack.length - 1].value = data;
      }

      function onexithtmltext() {
        var data = this.resume();
        this.stack[this.stack.length - 1].value = data;
      }

      function onexitcodetext() {
        var data = this.resume();
        this.stack[this.stack.length - 1].value = data;
      }

      function onexitlink() {
        var context = this.stack[this.stack.length - 1];

        // To do: clean.
        if (getData('inReference')) {
          context.type += 'Reference';
          context.referenceType = getData('referenceType') || 'shortcut';
          delete context.url;
          delete context.title;
        } else {
          delete context.identifier;
          delete context.label;
          delete context.referenceType;
        }

        setData('referenceType');
      }

      function onexitimage() {
        var context = this.stack[this.stack.length - 1];

        // To do: clean.
        if (getData('inReference')) {
          context.type += 'Reference';
          context.referenceType = getData('referenceType') || 'shortcut';
          delete context.url;
          delete context.title;
        } else {
          delete context.identifier;
          delete context.label;
          delete context.referenceType;
        }

        setData('referenceType');
      }

      function onexitlabeltext(token) {
        this.stack[this.stack.length - 2].identifier = normalizeIdentifier_1(
          this.sliceSerialize(token)
        ).toLowerCase();
      }

      function onexitlabel() {
        var fragment = this.stack[this.stack.length - 1];
        var value = this.resume();

        this.stack[this.stack.length - 1].label = value;

        // Assume a reference.
        setData('inReference', true);

        if (this.stack[this.stack.length - 1].type === 'link') {
          this.stack[this.stack.length - 1].children = fragment.children;
        } else {
          this.stack[this.stack.length - 1].alt = value;
        }
      }

      function onexitresourcedestinationstring() {
        var data = this.resume();
        this.stack[this.stack.length - 1].url = data;
      }

      function onexitresourcetitlestring() {
        var data = this.resume();
        this.stack[this.stack.length - 1].title = data;
      }

      function onexitresource() {
        setData('inReference');
      }

      function onenterreference() {
        setData('referenceType', 'collapsed');
      }

      function onexitreferencestring(token) {
        var label = this.resume();
        this.stack[this.stack.length - 1].label = label;
        this.stack[this.stack.length - 1].identifier = normalizeIdentifier_1(
          this.sliceSerialize(token)
        ).toLowerCase();
        setData('referenceType', 'full');
      }

      function onexitcharacterreferencemarker(token) {
        setData('characterReferenceType', token.type);
      }

      function onexitcharacterreferencevalue(token) {
        var data = this.sliceSerialize(token);
        var type = getData('characterReferenceType');
        var value;
        var tail;

        if (type) {
          value = safeFromInt_1(
            data,
            type === 'characterReferenceMarkerNumeric' ? 10 : 16
          );

          setData('characterReferenceType');
        } else {
          value = decodeEntity_1(data);
        }

        tail = this.stack.pop();
        tail.value += value;
        tail.position.end = point(token.end);
      }

      function onexitautolinkprotocol(token) {
        onexitdata.call(this, token);
        this.stack[this.stack.length - 1].url = this.sliceSerialize(token);
      }

      function onexitautolinkemail(token) {
        onexitdata.call(this, token);
        this.stack[this.stack.length - 1].url =
          'mailto:' + this.sliceSerialize(token);
      }

      //
      // Creaters.
      //

      function blockQuote() {
        return {type: 'blockquote', children: []}
      }

      function codeFlow() {
        return {type: 'code', lang: null, meta: null, value: ''}
      }

      function codeText() {
        return {type: 'inlineCode', value: ''}
      }

      function definition() {
        return {
          type: 'definition',
          identifier: '',
          label: null,
          title: null,
          url: ''
        }
      }

      function emphasis() {
        return {type: 'emphasis', children: []}
      }

      function heading() {
        return {type: 'heading', depth: undefined, children: []}
      }

      function hardBreak() {
        return {type: 'break'}
      }

      function html() {
        return {type: 'html', value: ''}
      }

      function image() {
        return {type: 'image', title: null, url: '', alt: null}
      }

      function link() {
        return {type: 'link', title: null, url: '', children: []}
      }

      function list(token) {
        return {
          type: 'list',
          ordered: token.type === 'listOrdered',
          start: null,
          spread: token._spread,
          children: []
        }
      }

      function listItem(token) {
        return {
          type: 'listItem',
          spread: token._spread,
          checked: null,
          children: []
        }
      }

      function paragraph() {
        return {type: 'paragraph', children: []}
      }

      function strong() {
        return {type: 'strong', children: []}
      }

      function text() {
        return {type: 'text', value: ''}
      }

      function thematicBreak() {
        return {type: 'thematicBreak'}
      }
    }

    function configure(config, extensions) {
      var index = -1;

      while (++index < extensions.length) {
        extension(config, extensions[index]);
      }

      return config
    }

    function extension(config, extension) {
      var key;
      var left;

      for (key in extension) {
        left = hasOwnProperty_1.call(config, key) ? config[key] : (config[key] = {});

        if (key === 'canContainEols' || key === 'transforms') {
          config[key] = [].concat(left, extension[key]);
        } else {
          Object.assign(left, extension[key]);
        }
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var mdastUtilFromMarkdown = dist;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var remarkParse = parse;



    function parse(options) {
      var self = this;

      this.Parser = parse;

      function parse(doc) {
        return mdastUtilFromMarkdown(
          doc,
          Object.assign({}, self.data('settings'), options, {
            // Note: these options are not in the readme.
            // The goal is for them to be set by plugins on `data` instead of being
            // passed by users.
            extensions: self.data('micromarkExtensions') || [],
            mdastExtensions: self.data('fromMarkdownExtensions') || []
          })
        )
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /* Expose. */
    var unistUtilVisitParents = visitParents;

    /* Visit. */
    function visitParents(tree, type, visitor) {
      var stack = [];

      if (typeof type === 'function') {
        visitor = type;
        type = null;
      }

      one(tree);

      /* Visit a single node. */
      function one(node) {
        var result;

        if (!type || node.type === type) {
          result = visitor(node, stack.concat());
        }

        if (node.children && result !== false) {
          return all(node.children, node)
        }

        return result
      }

      /* Visit children in `parent`. */
      function all(children, parent) {
        var length = children.length;
        var index = -1;
        var child;

        stack.push(parent);

        while (++index < length) {
          child = children[index];

          if (child && one(child) === false) {
            return false
          }
        }

        stack.pop();

        return true
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function addListMetadata() {
      return function (ast) {
        unistUtilVisitParents(ast, 'list', function (listNode, parents) {
          var depth = 0, i, n;
          for (i = 0, n = parents.length; i < n; i++) {
            if (parents[i].type === 'list') depth += 1;
          }
          for (i = 0, n = listNode.children.length; i < n; i++) {
            var child = listNode.children[i];
            child.index = i;
            child.ordered = listNode.ordered;
          }
          listNode.depth = depth;
        });
        return ast;
      };
    }

    var mdastAddListMetadata = addListMetadata;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var unistUtilVisit = visit;



    var CONTINUE = unistUtilVisitParents$1.CONTINUE;
    var SKIP = unistUtilVisitParents$1.SKIP;
    var EXIT = unistUtilVisitParents$1.EXIT;

    visit.CONTINUE = CONTINUE;
    visit.SKIP = SKIP;
    visit.EXIT = EXIT;

    function visit(tree, test, visitor, reverse) {
      if (typeof test === 'function' && typeof visitor !== 'function') {
        reverse = visitor;
        visitor = test;
        test = null;
      }

      unistUtilVisitParents$1(tree, test, overload, reverse);

      function overload(node, parents) {
        var parent = parents[parents.length - 1];
        var index = parent ? parent.children.indexOf(node) : null;
        return visitor(node, index, parent)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Naive, simple plugin to match inline nodes without attributes
     * This allows say <strong>foo</strong>, but not <strong class="very">foo</strong>
     * For proper HTML support, you'll want a different plugin
     **/


    var type$2 = 'virtualHtml';
    var selfClosingRe$1 = /^<(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)\s*\/?>$/i;
    var simpleTagRe = /^<(\/?)([a-z]+)\s*>$/;

    var naiveHtml = function (tree) {
      var open;
      var currentParent;
      unistUtilVisit(tree, 'html', function (node, index, parent) {
        if (currentParent !== parent) {
          open = [];
          currentParent = parent;
        }

        var selfClosing = getSelfClosing(node);

        if (selfClosing) {
          parent.children.splice(index, 1, {
            type: type$2,
            tag: selfClosing,
            position: node.position
          });
          return true;
        }

        var current = getSimpleTag(node);

        if (!current) {
          return true;
        }

        var matching = findAndPull$1(open, current.tag);

        if (matching) {
          parent.children.splice(index, 0, virtual(current, matching, parent));
        } else if (!current.opening) {
          open.push(current);
        }

        return true;
      }, true // Iterate in reverse
      );
      return tree;
    };

    function findAndPull$1(open, matchingTag) {
      var i = open.length;

      while (i--) {
        if (open[i].tag === matchingTag) {
          return open.splice(i, 1)[0];
        }
      }

      return false;
    }

    function getSimpleTag(node, parent) {
      var match = node.value.match(simpleTagRe);
      return match ? {
        tag: match[2],
        opening: !match[1],
        node: node
      } : false;
    }

    function getSelfClosing(node) {
      var match = node.value.match(selfClosingRe$1);
      return match ? match[1] : false;
    }

    function virtual(fromNode, toNode, parent) {
      var fromIndex = parent.children.indexOf(fromNode.node);
      var toIndex = parent.children.indexOf(toNode.node);
      var extracted = parent.children.splice(fromIndex, toIndex - fromIndex + 1);
      var children = extracted.slice(1, -1);
      return {
        type: type$2,
        children: children,
        tag: fromNode.tag,
        position: {
          start: fromNode.node.position.start,
          end: toNode.node.position.end,
          indent: []
        }
      };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var splice = [].splice;

    var ofType = function (types, mode) {
      return ifNotMatch(allow, mode);

      function allow(node, index, parent) {
        return !types.includes(node.type);
      }
    };

    var ifNotMatch_1 = ifNotMatch;

    function ifNotMatch(allow, mode) {
      return transform;

      function transform(tree) {
        unistUtilVisit(tree, filter);
        return tree;
      } // eslint-disable-next-line consistent-return


      function filter(node, index, parent) {
        if (parent && !allow(node, index, parent)) {
          var parameters = [index, 1];

          if (mode === 'unwrap' && node.children) {
            parameters = parameters.concat(node.children);
          }

          splice.apply(parent.children, parameters);
          return index;
        }
      }
    }

    var disallowNode = {
    	ofType: ofType,
    	ifNotMatch: ifNotMatch_1
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/** @license React v16.13.1
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b$1="function"===typeof Symbol&&Symbol.for,c$1=b$1?Symbol.for("react.element"):60103,d$1=b$1?Symbol.for("react.portal"):60106,e$1=b$1?Symbol.for("react.fragment"):60107,f$1=b$1?Symbol.for("react.strict_mode"):60108,g$1=b$1?Symbol.for("react.profiler"):60114,h$1=b$1?Symbol.for("react.provider"):60109,k$2=b$1?Symbol.for("react.context"):60110,l$1=b$1?Symbol.for("react.async_mode"):60111,m$1=b$1?Symbol.for("react.concurrent_mode"):60111,n$2=b$1?Symbol.for("react.forward_ref"):60112,p$1=b$1?Symbol.for("react.suspense"):60113,q$2=b$1?
    Symbol.for("react.suspense_list"):60120,r$1=b$1?Symbol.for("react.memo"):60115,t$2=b$1?Symbol.for("react.lazy"):60116,v$1=b$1?Symbol.for("react.block"):60121,w=b$1?Symbol.for("react.fundamental"):60117,x=b$1?Symbol.for("react.responder"):60118,y=b$1?Symbol.for("react.scope"):60119;
    function z$1(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c$1:switch(a=a.type,a){case l$1:case m$1:case e$1:case g$1:case f$1:case p$1:return a;default:switch(a=a&&a.$$typeof,a){case k$2:case n$2:case t$2:case r$1:case h$1:return a;default:return u}}case d$1:return u}}}function A$1(a){return z$1(a)===m$1}var AsyncMode=l$1;var ConcurrentMode=m$1;var ContextConsumer$1=k$2;var ContextProvider$1=h$1;var Element$3=c$1;var ForwardRef$1=n$2;var Fragment$1=e$1;var Lazy$1=t$2;var Memo$1=r$1;var Portal$1=d$1;
    var Profiler$1=g$1;var StrictMode$1=f$1;var Suspense$1=p$1;var isAsyncMode$1=function(a){return A$1(a)||z$1(a)===l$1};var isConcurrentMode$1=A$1;var isContextConsumer$1=function(a){return z$1(a)===k$2};var isContextProvider$1=function(a){return z$1(a)===h$1};var isElement$2=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c$1};var isForwardRef$1=function(a){return z$1(a)===n$2};var isFragment$1=function(a){return z$1(a)===e$1};var isLazy$1=function(a){return z$1(a)===t$2};
    var isMemo$1=function(a){return z$1(a)===r$1};var isPortal$1=function(a){return z$1(a)===d$1};var isProfiler$1=function(a){return z$1(a)===g$1};var isStrictMode$1=function(a){return z$1(a)===f$1};var isSuspense$1=function(a){return z$1(a)===p$1};
    var isValidElementType$1=function(a){return "string"===typeof a||"function"===typeof a||a===e$1||a===m$1||a===g$1||a===f$1||a===p$1||a===q$2||"object"===typeof a&&null!==a&&(a.$$typeof===t$2||a.$$typeof===r$1||a.$$typeof===h$1||a.$$typeof===k$2||a.$$typeof===n$2||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v$1)};var typeOf$1=z$1;

    var reactIs_production_min$1 = {
    	AsyncMode: AsyncMode,
    	ConcurrentMode: ConcurrentMode,
    	ContextConsumer: ContextConsumer$1,
    	ContextProvider: ContextProvider$1,
    	Element: Element$3,
    	ForwardRef: ForwardRef$1,
    	Fragment: Fragment$1,
    	Lazy: Lazy$1,
    	Memo: Memo$1,
    	Portal: Portal$1,
    	Profiler: Profiler$1,
    	StrictMode: StrictMode$1,
    	Suspense: Suspense$1,
    	isAsyncMode: isAsyncMode$1,
    	isConcurrentMode: isConcurrentMode$1,
    	isContextConsumer: isContextConsumer$1,
    	isContextProvider: isContextProvider$1,
    	isElement: isElement$2,
    	isForwardRef: isForwardRef$1,
    	isFragment: isFragment$1,
    	isLazy: isLazy$1,
    	isMemo: isMemo$1,
    	isPortal: isPortal$1,
    	isProfiler: isProfiler$1,
    	isStrictMode: isStrictMode$1,
    	isSuspense: isSuspense$1,
    	isValidElementType: isValidElementType$1,
    	typeOf: typeOf$1
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var reactIs$1 = createCommonjsModule$1(function (module) {

    {
      module.exports = reactIs_production_min$1;
    }
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};






    function astToReact(node, options) {
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var renderer = options.renderers[node.type]; // Nodes created by plugins do not have positional info, in which case we set
      // an object that matches the positon interface.

      if (!node.position) {
        node.position = {
          start: {
            line: null,
            column: null,
            offset: null
          },
          end: {
            line: null,
            column: null,
            offset: null
          }
        };
      }

      var pos = node.position.start;
      var key = [node.type, pos.line, pos.column, index].join('-');

      if (!reactIs$1.isValidElementType(renderer)) {
        throw new Error("Renderer for type `".concat(node.type, "` not defined or is not renderable"));
      }

      var nodeProps = getNodeProps(node, key, options, renderer, parent, index);
      return React__default['default'].createElement(renderer, nodeProps, nodeProps.children || resolveChildren() || undefined);

      function resolveChildren() {
        return node.children && node.children.map(function (childNode, i) {
          return astToReact(childNode, options, {
            node: node,
            props: nodeProps
          }, i);
        });
      }
    } // eslint-disable-next-line max-params, complexity


    function getNodeProps(node, key, opts, renderer, parent, index) {
      var props = {
        key: key
      };
      var isSimpleRenderer = typeof renderer === 'string' || renderer === React__default['default'].Fragment; // `sourcePos` is true if the user wants source information (line/column info from markdown source)

      if (opts.sourcePos && node.position) {
        props['data-sourcepos'] = flattenPosition(node.position);
      }

      if (opts.rawSourcePos && !isSimpleRenderer) {
        props.sourcePosition = node.position;
      } // If `includeNodeIndex` is true, pass node index info to all non-tag renderers


      if (opts.includeNodeIndex && parent.node && parent.node.children && !isSimpleRenderer) {
        props.index = parent.node.children.indexOf(node);
        props.parentChildCount = parent.node.children.length;
      }

      var ref = node.identifier !== null && node.identifier !== undefined ?
      /* istanbul ignore next - plugins could inject an undefined reference. */
      opts.definitions[node.identifier.toUpperCase()] || {} : null;

      switch (node.type) {
        case 'root':
          assignDefined(props, {
            className: opts.className
          });
          break;

        case 'text':
          props.nodeKey = key;
          props.children = node.value;
          break;

        case 'heading':
          props.level = node.depth;
          break;

        case 'list':
          props.start = node.start;
          props.ordered = node.ordered;
          props.spread = node.spread;
          props.depth = node.depth;
          break;

        case 'listItem':
          props.checked = node.checked;
          props.spread = node.spread;
          props.ordered = node.ordered;
          props.index = node.index;
          props.children = getListItemChildren(node, parent).map(function (childNode, i) {
            return astToReact(childNode, opts, {
              node: node,
              props: props
            }, i);
          });
          break;

        case 'definition':
          assignDefined(props, {
            identifier: node.identifier,
            title: node.title,
            url: node.url
          });
          break;

        case 'code':
          assignDefined(props, {
            language: node.lang && node.lang.split(/\s/, 1)[0]
          });
          break;

        case 'inlineCode':
          props.children = node.value;
          props.inline = true;
          break;

        case 'link':
          assignDefined(props, {
            title: node.title || undefined,
            target: typeof opts.linkTarget === 'function' ? opts.linkTarget(node.url, node.children, node.title) : opts.linkTarget,
            href: opts.transformLinkUri ? opts.transformLinkUri(node.url, node.children, node.title) : node.url
          });
          break;

        case 'image':
          assignDefined(props, {
            src: opts.transformImageUri ? opts.transformImageUri(node.url, node.children, node.title, node.alt) : node.url,
            alt: node.alt || '',
            title: node.title || undefined
          });
          break;

        case 'linkReference':
          assignDefined(props, immutable(ref, {
            href: opts.transformLinkUri ? opts.transformLinkUri(ref.href) : ref.href
          }));
          break;

        case 'imageReference':
          assignDefined(props, {
            src: opts.transformImageUri && ref.href ? opts.transformImageUri(ref.href, node.children, ref.title, node.alt) : ref.href,
            alt: node.alt || '',
            title: ref.title || undefined
          });
          break;

        case 'table':
        case 'tableHead':
        case 'tableBody':
          props.columnAlignment = node.align;
          break;

        case 'tableRow':
          props.isHeader = parent.node.type === 'tableHead';
          props.columnAlignment = parent.props.columnAlignment;
          break;

        case 'tableCell':
          assignDefined(props, {
            isHeader: parent.props.isHeader,
            align: parent.props.columnAlignment[index]
          });
          break;

        case 'virtualHtml':
          props.tag = node.tag;
          break;

        case 'html':
          // @todo find a better way than this
          props.isBlock = node.position.start.line !== node.position.end.line;
          props.allowDangerousHtml = opts.allowDangerousHtml;
          props.escapeHtml = opts.escapeHtml;
          props.skipHtml = opts.skipHtml;
          break;

        case 'parsedHtml':
          {
            var parsedChildren;

            if (node.children) {
              parsedChildren = node.children.map(function (child, i) {
                return astToReact(child, opts, {
                  node: node,
                  props: props
                }, i);
              });
            }

            props.allowDangerousHtml = opts.allowDangerousHtml;
            props.escapeHtml = opts.escapeHtml;
            props.skipHtml = opts.skipHtml;
            props.element = node.element ? mergeNodeChildren(node, parsedChildren) : null;
            break;
          }

        default:
          assignDefined(props, immutable(node, {
            type: undefined,
            position: undefined,
            children: undefined
          }));
      }

      if (!isSimpleRenderer && node.value) {
        props.value = node.value;
      }

      if (!isSimpleRenderer) {
        props.node = node;
      }

      return props;
    }

    function assignDefined(target, attrs) {
      for (var key in attrs) {
        if (typeof attrs[key] !== 'undefined') {
          target[key] = attrs[key];
        }
      }
    }

    function mergeNodeChildren(node, parsedChildren) {
      var el = node.element;

      if (Array.isArray(el)) {
        /* istanbul ignore next - `div` fallback for old React. */
        var Fragment = React__default['default'].Fragment || 'div';
        return React__default['default'].createElement(Fragment, null, el);
      }

      if (el.props.children || parsedChildren) {
        var children = React__default['default'].Children.toArray(el.props.children).concat(parsedChildren);
        return React__default['default'].cloneElement(el, null, children);
      }

      return React__default['default'].cloneElement(el, null);
    }

    function flattenPosition(pos) {
      return [pos.start.line, ':', pos.start.column, '-', pos.end.line, ':', pos.end.column].map(String).join('');
    }

    function getListItemChildren(node, parent) {
      /* istanbul ignore next - list items are always in a list, but best to be sure. */
      var loose = parent && parent.node ? listLoose(parent.node) : listItemLoose(node);
      return loose ? node.children : unwrapParagraphs(node);
    }

    function unwrapParagraphs(node) {
      return node.children.reduce(function (array, child) {
        return array.concat(child.type === 'paragraph' ? child.children : [child]);
      }, []);
    }

    function listLoose(node) {
      var children = node.children;
      var loose = node.spread;
      var index = -1;

      while (!loose && ++index < children.length) {
        loose = listItemLoose(children[index]);
      }

      return loose;
    }

    function listItemLoose(node) {
      var spread = node.spread;
      /* istanbul ignore next - spread is present from remark-parse, but maybe plugins don’t set it. */

      return spread === undefined || spread === null ? node.children.length > 1 : spread;
    }

    var astToReact_1 = astToReact;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var wrapTableRows = function (node) {
      unistUtilVisit(node, 'table', wrap);
      return node;
    };

    function wrap(table) {
      var children = table.children;
      table.children = [{
        type: 'tableHead',
        align: table.align,
        children: [children[0]],
        position: children[0].position
      }];

      if (children.length > 1) {
        table.children.push({
          type: 'tableBody',
          align: table.align,
          children: children.slice(1),
          position: {
            start: children[1].position.start,
            end: children[children.length - 1].position.end
          }
        });
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    var getDefinitions = function getDefinitions(tree) {
      var definitions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      unistUtilVisit(tree, 'definition', function (node) {
        var identifier = node.identifier.toUpperCase();
        if (identifier in definitions) return;
        definitions[identifier] = {
          href: node.url,
          title: node.title
        };
      });
      return definitions;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var protocols = ['http', 'https', 'mailto', 'tel'];

    var uriTransformer = function uriTransformer(uri) {
      var url = (uri || '').trim();
      var first = url.charAt(0);

      if (first === '#' || first === '/') {
        return url;
      }

      var colon = url.indexOf(':');

      if (colon === -1) {
        return url;
      }

      var length = protocols.length;
      var index = -1;

      while (++index < length) {
        var protocol = protocols[index];

        if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {
          return url;
        }
      }

      index = url.indexOf('?');

      if (index !== -1 && colon > index) {
        return url;
      }

      index = url.indexOf('#');

      if (index !== -1 && colon > index) {
        return url;
      } // eslint-disable-next-line no-script-url


      return 'javascript:void(0)';
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};



    /* istanbul ignore next - Don’t crash on old React. */


    var supportsStringRender = parseInt((React__default['default'].version || '16').slice(0, 2), 10) >= 16;
    var createElement$1 = React__default['default'].createElement;
    var renderers = {
      break: 'br',
      paragraph: 'p',
      emphasis: 'em',
      strong: 'strong',
      thematicBreak: 'hr',
      blockquote: 'blockquote',
      delete: 'del',
      link: 'a',
      image: 'img',
      linkReference: 'a',
      imageReference: 'img',
      table: SimpleRenderer.bind(null, 'table'),
      tableHead: SimpleRenderer.bind(null, 'thead'),
      tableBody: SimpleRenderer.bind(null, 'tbody'),
      tableRow: SimpleRenderer.bind(null, 'tr'),
      tableCell: TableCell,
      root: Root,
      text: TextRenderer,
      list: List$1,
      listItem: ListItem,
      definition: NullRenderer,
      heading: Heading,
      inlineCode: InlineCode,
      code: CodeBlock,
      html: Html,
      virtualHtml: VirtualHtml,
      parsedHtml: ParsedHtml
    };

    function TextRenderer(props) {
      /* istanbul ignore next - a text node w/o a value could be injected by plugins */
      var children = props.children || '';
      /* istanbul ignore next - `span` is a fallback for old React. */

      return supportsStringRender ? children : createElement$1('span', null, children);
    }

    function Root(props) {
      var className = props.className;
      var root = !className && React__default['default'].Fragment || 'div';
      return createElement$1(root, className ? {
        className: className
      } : null, props.children);
    }

    function SimpleRenderer(tag, props) {
      return createElement$1(tag, getCoreProps(props), props.children);
    }

    function TableCell(props) {
      var style = props.align ? {
        textAlign: props.align
      } : undefined;
      var coreProps = getCoreProps(props);
      return createElement$1(props.isHeader ? 'th' : 'td', style ? immutable({
        style: style
      }, coreProps) : coreProps, props.children);
    }

    function Heading(props) {
      return createElement$1("h".concat(props.level), getCoreProps(props), props.children);
    }

    function List$1(props) {
      var attrs = getCoreProps(props);

      if (props.start !== null && props.start !== 1 && props.start !== undefined) {
        attrs.start = props.start.toString();
      }

      return createElement$1(props.ordered ? 'ol' : 'ul', attrs, props.children);
    }

    function ListItem(props) {
      var checkbox = null;

      if (props.checked !== null && props.checked !== undefined) {
        var checked = props.checked;
        checkbox = createElement$1('input', {
          type: 'checkbox',
          checked: checked,
          readOnly: true
        });
      }

      return createElement$1('li', getCoreProps(props), checkbox, props.children);
    }

    function CodeBlock(props) {
      var className = props.language && "language-".concat(props.language);
      var code = createElement$1('code', className ? {
        className: className
      } : null, props.value);
      return createElement$1('pre', getCoreProps(props), code);
    }

    function InlineCode(props) {
      return createElement$1('code', getCoreProps(props), props.children);
    }

    function Html(props) {
      if (props.skipHtml) {
        return null;
      }

      var dangerous = props.allowDangerousHtml || props.escapeHtml === false;
      var tag = props.isBlock ? 'div' : 'span';

      if (!dangerous) {
        /* istanbul ignore next - `tag` is a fallback for old React. */
        return createElement$1(React__default['default'].Fragment || tag, null, props.value);
      }

      var nodeProps = {
        dangerouslySetInnerHTML: {
          __html: props.value
        }
      };
      return createElement$1(tag, nodeProps);
    }

    function ParsedHtml(props) {
      /* To do: `React.cloneElement` is slow, is it really needed? */
      return props['data-sourcepos'] ? React__default['default'].cloneElement(props.element, {
        'data-sourcepos': props['data-sourcepos']
      }) : props.element;
    }

    function VirtualHtml(props) {
      return createElement$1(props.tag, getCoreProps(props), props.children);
    }

    function NullRenderer() {
      return null;
    }

    function getCoreProps(props) {
      var source = props['data-sourcepos'];
      /* istanbul ignore next - nodes from plugins w/o position */

      return source ? {
        'data-sourcepos': source
      } : {};
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var HtmlParser$1 = '__RMD_HTML_PARSER__';
    /* istanbul ignore next - Fallback for `Symbol`. */

    var HtmlParser_1 = typeof Symbol === 'undefined' ? HtmlParser$1 : Symbol(HtmlParser$1);

    var symbols = {
    	HtmlParser: HtmlParser_1
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


























    var allTypes = Object.keys(renderers);

    var ReactMarkdown = function ReactMarkdown(props) {
      // To do in next major: remove `source`.
      var src = props.source || props.children || '';

      if (props.allowedTypes && props.disallowedTypes) {
        throw new Error('Only one of `allowedTypes` and `disallowedTypes` should be defined');
      }

      var renderers$1 = immutable(renderers, props.renderers);
      var processor = unified_1().use(remarkParse).use(props.plugins || []); // eslint-disable-next-line no-sync

      var tree = processor.runSync(processor.parse(src));
      var renderProps = immutable(props, {
        renderers: renderers$1,
        definitions: getDefinitions(tree)
      });
      determineAstToReactTransforms(props).forEach(function (transform) {
        tree = transform(tree, renderProps);
      });
      return tree;
    };

    function determineAstToReactTransforms(props) {
      var transforms = [wrapTableRows, mdastAddListMetadata()];
      var disallowedTypes = props.disallowedTypes;

      if (props.allowedTypes) {
        disallowedTypes = allTypes.filter(function (type) {
          return type !== 'root' && props.allowedTypes.indexOf(type) === -1;
        });
      }

      var removalMethod = props.unwrapDisallowed ? 'unwrap' : 'remove';

      if (disallowedTypes && disallowedTypes.length > 0) {
        transforms.push(disallowNode.ofType(disallowedTypes, removalMethod));
      }

      if (props.allowNode) {
        transforms.push(disallowNode.ifNotMatch(props.allowNode, removalMethod));
      } // To do in next major: remove `escapeHtml`.


      var renderHtml = (props.allowDangerousHtml || props.escapeHtml === false) && !props.skipHtml;
      var hasHtmlParser = (props.astPlugins || []).some(function (transform) {
        return transform.identity === symbols.HtmlParser;
      });

      if (renderHtml && !hasHtmlParser) {
        transforms.push(naiveHtml);
      }

      if (props.astPlugins) {
        transforms = transforms.concat(props.astPlugins);
      } // Add the final transform to turn everything into React.


      transforms.push(astToReact_1);
      return transforms;
    }

    ReactMarkdown.defaultProps = {
      transformLinkUri: uriTransformer
    };
    ReactMarkdown.propTypes = {
      className: propTypes$1.string,
      source: propTypes$1.string,
      children: propTypes$1.string,
      sourcePos: propTypes$1.bool,
      rawSourcePos: propTypes$1.bool,
      escapeHtml: propTypes$1.bool,
      allowDangerousHtml: propTypes$1.bool,
      skipHtml: propTypes$1.bool,
      allowNode: propTypes$1.func,
      allowedTypes: propTypes$1.arrayOf(propTypes$1.oneOf(allTypes)),
      disallowedTypes: propTypes$1.arrayOf(propTypes$1.oneOf(allTypes)),
      transformLinkUri: propTypes$1.oneOfType([propTypes$1.func, propTypes$1.bool]),
      linkTarget: propTypes$1.oneOfType([propTypes$1.func, propTypes$1.string]),
      transformImageUri: propTypes$1.func,
      astPlugins: propTypes$1.arrayOf(propTypes$1.func),
      unwrapDisallowed: propTypes$1.bool,
      renderers: propTypes$1.object,
      plugins: propTypes$1.array
    };
    ReactMarkdown.types = allTypes;
    ReactMarkdown.renderers = renderers;
    ReactMarkdown.uriTransformer = uriTransformer;
    var reactMarkdown = ReactMarkdown;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Tests whether or not an object is an array.
     *
     * @private
     * @param {*} val The object to test.
     * @return {Boolean} `true` if `val` is an array, `false` otherwise.
     * @example
     *
     *      _isArray([]); //=> true
     *      _isArray(null); //=> false
     *      _isArray({}); //=> false
     */
    var _isArray = Array.isArray || function _isArray(val) {
      return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * This checks whether a function has a [methodname] function. If it isn't an
     * array it will execute that function otherwise it will default to the ramda
     * implementation.
     *
     * @private
     * @param {Function} fn ramda implemtation
     * @param {String} methodname property to check for a custom implementation
     * @return {Object} Whatever the return value of the method is.
     */


    function _checkForMethod(methodname, fn) {
      return function () {
        var length = arguments.length;

        if (length === 0) {
          return fn();
        }

        var obj = arguments[length - 1];
        return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
      };
    }

    var _checkForMethod_1 = _checkForMethod;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _isPlaceholder(a) {
      return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
    }

    var _isPlaceholder_1 = _isPlaceholder;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Optimized internal one-arity curry function.
     *
     * @private
     * @category Function
     * @param {Function} fn The function to curry.
     * @return {Function} The curried function.
     */


    function _curry1(fn) {
      return function f1(a) {
        if (arguments.length === 0 || _isPlaceholder_1(a)) {
          return f1;
        } else {
          return fn.apply(this, arguments);
        }
      };
    }

    var _curry1_1 = _curry1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Optimized internal two-arity curry function.
     *
     * @private
     * @category Function
     * @param {Function} fn The function to curry.
     * @return {Function} The curried function.
     */


    function _curry2(fn) {
      return function f2(a, b) {
        switch (arguments.length) {
          case 0:
            return f2;

          case 1:
            return _isPlaceholder_1(a) ? f2 : _curry1_1(function (_b) {
              return fn(a, _b);
            });

          default:
            return _isPlaceholder_1(a) && _isPlaceholder_1(b) ? f2 : _isPlaceholder_1(a) ? _curry1_1(function (_a) {
              return fn(_a, b);
            }) : _isPlaceholder_1(b) ? _curry1_1(function (_b) {
              return fn(a, _b);
            }) : fn(a, b);
        }
      };
    }

    var _curry2_1 = _curry2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Iterate over an input `list`, calling a provided function `fn` for each
     * element in the list.
     *
     * `fn` receives one argument: *(value)*.
     *
     * Note: `R.forEach` does not skip deleted or unassigned indices (sparse
     * arrays), unlike the native `Array.prototype.forEach` method. For more
     * details on this behavior, see:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description
     *
     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns
     * the original array. In some libraries this function is named `each`.
     *
     * Dispatches to the `forEach` method of the second argument, if present.
     *
     * @func
     * @memberOf R
     * @since v0.1.1
     * @category List
     * @sig (a -> *) -> [a] -> [a]
     * @param {Function} fn The function to invoke. Receives one argument, `value`.
     * @param {Array} list The list to iterate over.
     * @return {Array} The original list.
     * @see R.addIndex
     * @example
     *
     *      const printXPlusFive = x => console.log(x + 5);
     *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]
     *      // logs 6
     *      // logs 7
     *      // logs 8
     * @symb R.forEach(f, [a, b, c]) = [a, b, c]
     */


    var forEach =
    /*#__PURE__*/
    _curry2_1(
    /*#__PURE__*/
    _checkForMethod_1('forEach', function forEach(fn, list) {
      var len = list.length;
      var idx = 0;

      while (idx < len) {
        fn(list[idx]);
        idx += 1;
      }

      return list;
    }));

    var forEach_1 = forEach;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _isTransformer(obj) {
      return obj != null && typeof obj['@@transducer/step'] === 'function';
    }

    var _isTransformer_1 = _isTransformer;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Returns a function that dispatches with different strategies based on the
     * object in list position (last argument). If it is an array, executes [fn].
     * Otherwise, if it has a function with one of the given method names, it will
     * execute that function (functor case). Otherwise, if it is a transformer,
     * uses transducer [xf] to return a new transformer (transducer case).
     * Otherwise, it will default to executing [fn].
     *
     * @private
     * @param {Array} methodNames properties to check for a custom implementation
     * @param {Function} xf transducer to initialize if object is transformer
     * @param {Function} fn default ramda implementation
     * @return {Function} A function that dispatches on object in list position
     */


    function _dispatchable(methodNames, xf, fn) {
      return function () {
        if (arguments.length === 0) {
          return fn();
        }

        var args = Array.prototype.slice.call(arguments, 0);
        var obj = args.pop();

        if (!_isArray(obj)) {
          var idx = 0;

          while (idx < methodNames.length) {
            if (typeof obj[methodNames[idx]] === 'function') {
              return obj[methodNames[idx]].apply(obj, args);
            }

            idx += 1;
          }

          if (_isTransformer_1(obj)) {
            var transducer = xf.apply(null, args);
            return transducer(obj);
          }
        }

        return fn.apply(this, arguments);
      };
    }

    var _dispatchable_1 = _dispatchable;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _reduced(x) {
      return x && x['@@transducer/reduced'] ? x : {
        '@@transducer/value': x,
        '@@transducer/reduced': true
      };
    }

    var _reduced_1 = _reduced;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var _xfBase = {
      init: function () {
        return this.xf['@@transducer/init']();
      },
      result: function (result) {
        return this.xf['@@transducer/result'](result);
      }
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var XFind =
    /*#__PURE__*/
    function () {
      function XFind(f, xf) {
        this.xf = xf;
        this.f = f;
        this.found = false;
      }

      XFind.prototype['@@transducer/init'] = _xfBase.init;

      XFind.prototype['@@transducer/result'] = function (result) {
        if (!this.found) {
          result = this.xf['@@transducer/step'](result, void 0);
        }

        return this.xf['@@transducer/result'](result);
      };

      XFind.prototype['@@transducer/step'] = function (result, input) {
        if (this.f(input)) {
          this.found = true;
          result = _reduced_1(this.xf['@@transducer/step'](result, input));
        }

        return result;
      };

      return XFind;
    }();

    var _xfind =
    /*#__PURE__*/
    _curry2_1(function _xfind(f, xf) {
      return new XFind(f, xf);
    });

    var _xfind_1 = _xfind;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Returns the first element of the list which matches the predicate, or
     * `undefined` if no element matches.
     *
     * Dispatches to the `find` method of the second argument, if present.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig (a -> Boolean) -> [a] -> a | undefined
     * @param {Function} fn The predicate function used to determine if the element is the
     *        desired one.
     * @param {Array} list The array to consider.
     * @return {Object} The element found, or `undefined`.
     * @see R.transduce
     * @example
     *
     *      const xs = [{a: 1}, {a: 2}, {a: 3}];
     *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}
     *      R.find(R.propEq('a', 4))(xs); //=> undefined
     */


    var find =
    /*#__PURE__*/
    _curry2_1(
    /*#__PURE__*/
    _dispatchable_1(['find'], _xfind_1, function find(fn, list) {
      var idx = 0;
      var len = list.length;

      while (idx < len) {
        if (fn(list[idx])) {
          return list[idx];
        }

        idx += 1;
      }
    }));

    var find_1 = find;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _complement(f) {
      return function () {
        return !f.apply(this, arguments);
      };
    }

    var _complement_1 = _complement;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _filter(fn, list) {
      var idx = 0;
      var len = list.length;
      var result = [];

      while (idx < len) {
        if (fn(list[idx])) {
          result[result.length] = list[idx];
        }

        idx += 1;
      }

      return result;
    }

    var _filter_1 = _filter;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _isObject(x) {
      return Object.prototype.toString.call(x) === '[object Object]';
    }

    var _isObject_1 = _isObject;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _isString(x) {
      return Object.prototype.toString.call(x) === '[object String]';
    }

    var _isString_1 = _isString;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Tests whether or not an object is similar to an array.
     *
     * @private
     * @category Type
     * @category List
     * @sig * -> Boolean
     * @param {*} x The object to test.
     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
     * @example
     *
     *      _isArrayLike([]); //=> true
     *      _isArrayLike(true); //=> false
     *      _isArrayLike({}); //=> false
     *      _isArrayLike({length: 10}); //=> false
     *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
     */


    var _isArrayLike =
    /*#__PURE__*/
    _curry1_1(function isArrayLike(x) {
      if (_isArray(x)) {
        return true;
      }

      if (!x) {
        return false;
      }

      if (typeof x !== 'object') {
        return false;
      }

      if (_isString_1(x)) {
        return false;
      }

      if (x.nodeType === 1) {
        return !!x.length;
      }

      if (x.length === 0) {
        return true;
      }

      if (x.length > 0) {
        return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
      }

      return false;
    });

    var _isArrayLike_1 = _isArrayLike;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var XWrap =
    /*#__PURE__*/
    function () {
      function XWrap(fn) {
        this.f = fn;
      }

      XWrap.prototype['@@transducer/init'] = function () {
        throw new Error('init not implemented on XWrap');
      };

      XWrap.prototype['@@transducer/result'] = function (acc) {
        return acc;
      };

      XWrap.prototype['@@transducer/step'] = function (acc, x) {
        return this.f(acc, x);
      };

      return XWrap;
    }();

    function _xwrap(fn) {
      return new XWrap(fn);
    }

    var _xwrap_1 = _xwrap;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _arity(n, fn) {
      /* eslint-disable no-unused-vars */
      switch (n) {
        case 0:
          return function () {
            return fn.apply(this, arguments);
          };

        case 1:
          return function (a0) {
            return fn.apply(this, arguments);
          };

        case 2:
          return function (a0, a1) {
            return fn.apply(this, arguments);
          };

        case 3:
          return function (a0, a1, a2) {
            return fn.apply(this, arguments);
          };

        case 4:
          return function (a0, a1, a2, a3) {
            return fn.apply(this, arguments);
          };

        case 5:
          return function (a0, a1, a2, a3, a4) {
            return fn.apply(this, arguments);
          };

        case 6:
          return function (a0, a1, a2, a3, a4, a5) {
            return fn.apply(this, arguments);
          };

        case 7:
          return function (a0, a1, a2, a3, a4, a5, a6) {
            return fn.apply(this, arguments);
          };

        case 8:
          return function (a0, a1, a2, a3, a4, a5, a6, a7) {
            return fn.apply(this, arguments);
          };

        case 9:
          return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
            return fn.apply(this, arguments);
          };

        case 10:
          return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
            return fn.apply(this, arguments);
          };

        default:
          throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
      }
    }

    var _arity_1 = _arity;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Creates a function that is bound to a context.
     * Note: `R.bind` does not provide the additional argument-binding capabilities of
     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
     *
     * @func
     * @memberOf R
     * @since v0.6.0
     * @category Function
     * @category Object
     * @sig (* -> *) -> {*} -> (* -> *)
     * @param {Function} fn The function to bind to context
     * @param {Object} thisObj The context to bind `fn` to
     * @return {Function} A function that will execute in the context of `thisObj`.
     * @see R.partial
     * @example
     *
     *      const log = R.bind(console.log, console);
     *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
     *      // logs {a: 2}
     * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
     */


    var bind =
    /*#__PURE__*/
    _curry2_1(function bind(fn, thisObj) {
      return _arity_1(fn.length, function () {
        return fn.apply(thisObj, arguments);
      });
    });

    var bind_1 = bind;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function _arrayReduce(xf, acc, list) {
      var idx = 0;
      var len = list.length;

      while (idx < len) {
        acc = xf['@@transducer/step'](acc, list[idx]);

        if (acc && acc['@@transducer/reduced']) {
          acc = acc['@@transducer/value'];
          break;
        }

        idx += 1;
      }

      return xf['@@transducer/result'](acc);
    }

    function _iterableReduce(xf, acc, iter) {
      var step = iter.next();

      while (!step.done) {
        acc = xf['@@transducer/step'](acc, step.value);

        if (acc && acc['@@transducer/reduced']) {
          acc = acc['@@transducer/value'];
          break;
        }

        step = iter.next();
      }

      return xf['@@transducer/result'](acc);
    }

    function _methodReduce(xf, acc, obj, methodName) {
      return xf['@@transducer/result'](obj[methodName](bind_1(xf['@@transducer/step'], xf), acc));
    }

    var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';

    function _reduce(fn, acc, list) {
      if (typeof fn === 'function') {
        fn = _xwrap_1(fn);
      }

      if (_isArrayLike_1(list)) {
        return _arrayReduce(fn, acc, list);
      }

      if (typeof list['fantasy-land/reduce'] === 'function') {
        return _methodReduce(fn, acc, list, 'fantasy-land/reduce');
      }

      if (list[symIterator] != null) {
        return _iterableReduce(fn, acc, list[symIterator]());
      }

      if (typeof list.next === 'function') {
        return _iterableReduce(fn, acc, list);
      }

      if (typeof list.reduce === 'function') {
        return _methodReduce(fn, acc, list, 'reduce');
      }

      throw new TypeError('reduce: list must be array or iterable');
    }

    var _reduce_1 = _reduce;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var XFilter =
    /*#__PURE__*/
    function () {
      function XFilter(f, xf) {
        this.xf = xf;
        this.f = f;
      }

      XFilter.prototype['@@transducer/init'] = _xfBase.init;
      XFilter.prototype['@@transducer/result'] = _xfBase.result;

      XFilter.prototype['@@transducer/step'] = function (result, input) {
        return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
      };

      return XFilter;
    }();

    var _xfilter =
    /*#__PURE__*/
    _curry2_1(function _xfilter(f, xf) {
      return new XFilter(f, xf);
    });

    var _xfilter_1 = _xfilter;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _has(prop, obj) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    var _has_1 = _has;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var toString$2 = Object.prototype.toString;

    var _isArguments =
    /*#__PURE__*/
    function () {
      return toString$2.call(arguments) === '[object Arguments]' ? function _isArguments(x) {
        return toString$2.call(x) === '[object Arguments]';
      } : function _isArguments(x) {
        return _has_1('callee', x);
      };
    }();

    var _isArguments_1 = _isArguments;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // cover IE < 9 keys issues


    var hasEnumBug = !
    /*#__PURE__*/
    {
      toString: null
    }.propertyIsEnumerable('toString');
    var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString']; // Safari bug

    var hasArgsEnumBug =
    /*#__PURE__*/
    function () {

      return arguments.propertyIsEnumerable('length');
    }();

    var contains = function contains(list, item) {
      var idx = 0;

      while (idx < list.length) {
        if (list[idx] === item) {
          return true;
        }

        idx += 1;
      }

      return false;
    };
    /**
     * Returns a list containing the names of all the enumerable own properties of
     * the supplied object.
     * Note that the order of the output array is not guaranteed to be consistent
     * across different JS platforms.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Object
     * @sig {k: v} -> [k]
     * @param {Object} obj The object to extract properties from
     * @return {Array} An array of the object's own properties.
     * @see R.keysIn, R.values
     * @example
     *
     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
     */


    var keys = typeof Object.keys === 'function' && !hasArgsEnumBug ?
    /*#__PURE__*/
    _curry1_1(function keys(obj) {
      return Object(obj) !== obj ? [] : Object.keys(obj);
    }) :
    /*#__PURE__*/
    _curry1_1(function keys(obj) {
      if (Object(obj) !== obj) {
        return [];
      }

      var prop, nIdx;
      var ks = [];

      var checkArgsLength = hasArgsEnumBug && _isArguments_1(obj);

      for (prop in obj) {
        if (_has_1(prop, obj) && (!checkArgsLength || prop !== 'length')) {
          ks[ks.length] = prop;
        }
      }

      if (hasEnumBug) {
        nIdx = nonEnumerableProps.length - 1;

        while (nIdx >= 0) {
          prop = nonEnumerableProps[nIdx];

          if (_has_1(prop, obj) && !contains(ks, prop)) {
            ks[ks.length] = prop;
          }

          nIdx -= 1;
        }
      }

      return ks;
    });
    var keys_1 = keys;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Takes a predicate and a `Filterable`, and returns a new filterable of the
     * same type containing the members of the given filterable which satisfy the
     * given predicate. Filterable objects include plain objects or any object
     * that has a filter method such as `Array`.
     *
     * Dispatches to the `filter` method of the second argument, if present.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig Filterable f => (a -> Boolean) -> f a -> f a
     * @param {Function} pred
     * @param {Array} filterable
     * @return {Array} Filterable
     * @see R.reject, R.transduce, R.addIndex
     * @example
     *
     *      const isEven = n => n % 2 === 0;
     *
     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
     *
     *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
     */


    var filter$1 =
    /*#__PURE__*/
    _curry2_1(
    /*#__PURE__*/
    _dispatchable_1(['filter'], _xfilter_1, function (pred, filterable) {
      return _isObject_1(filterable) ? _reduce_1(function (acc, key) {
        if (pred(filterable[key])) {
          acc[key] = filterable[key];
        }

        return acc;
      }, {}, keys_1(filterable)) : // else
      _filter_1(pred, filterable);
    }));

    var filter_1 = filter$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * The complement of [`filter`](#filter).
     *
     * Acts as a transducer if a transformer is given in list position. Filterable
     * objects include plain objects or any object that has a filter method such
     * as `Array`.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig Filterable f => (a -> Boolean) -> f a -> f a
     * @param {Function} pred
     * @param {Array} filterable
     * @return {Array}
     * @see R.filter, R.transduce, R.addIndex
     * @example
     *
     *      const isOdd = (n) => n % 2 === 1;
     *
     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
     *
     *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
     */


    var reject =
    /*#__PURE__*/
    _curry2_1(function reject(pred, filterable) {
      return filter_1(_complement_1(pred), filterable);
    });

    var reject_1 = reject;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Private `concat` function to merge two array-like objects.
     *
     * @private
     * @param {Array|Arguments} [set1=[]] An array-like object.
     * @param {Array|Arguments} [set2=[]] An array-like object.
     * @return {Array} A new, merged array.
     * @example
     *
     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
     */
    function _concat(set1, set2) {
      set1 = set1 || [];
      set2 = set2 || [];
      var idx;
      var len1 = set1.length;
      var len2 = set2.length;
      var result = [];
      idx = 0;

      while (idx < len1) {
        result[result.length] = set1[idx];
        idx += 1;
      }

      idx = 0;

      while (idx < len2) {
        result[result.length] = set2[idx];
        idx += 1;
      }

      return result;
    }

    var _concat_1 = _concat;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Internal curryN function.
     *
     * @private
     * @category Function
     * @param {Number} length The arity of the curried function.
     * @param {Array} received An array of arguments received thus far.
     * @param {Function} fn The function to curry.
     * @return {Function} The curried function.
     */


    function _curryN(length, received, fn) {
      return function () {
        var combined = [];
        var argsIdx = 0;
        var left = length;
        var combinedIdx = 0;

        while (combinedIdx < received.length || argsIdx < arguments.length) {
          var result;

          if (combinedIdx < received.length && (!_isPlaceholder_1(received[combinedIdx]) || argsIdx >= arguments.length)) {
            result = received[combinedIdx];
          } else {
            result = arguments[argsIdx];
            argsIdx += 1;
          }

          combined[combinedIdx] = result;

          if (!_isPlaceholder_1(result)) {
            left -= 1;
          }

          combinedIdx += 1;
        }

        return left <= 0 ? fn.apply(this, combined) : _arity_1(left, _curryN(length, combined, fn));
      };
    }

    var _curryN_1 = _curryN;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Returns a curried equivalent of the provided function, with the specified
     * arity. The curried function has two unusual capabilities. First, its
     * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
     * following are equivalent:
     *
     *   - `g(1)(2)(3)`
     *   - `g(1)(2, 3)`
     *   - `g(1, 2)(3)`
     *   - `g(1, 2, 3)`
     *
     * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
     * "gaps", allowing partial application of any combination of arguments,
     * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
     * the following are equivalent:
     *
     *   - `g(1, 2, 3)`
     *   - `g(_, 2, 3)(1)`
     *   - `g(_, _, 3)(1)(2)`
     *   - `g(_, _, 3)(1, 2)`
     *   - `g(_, 2)(1)(3)`
     *   - `g(_, 2)(1, 3)`
     *   - `g(_, 2)(_, 3)(1)`
     *
     * @func
     * @memberOf R
     * @since v0.5.0
     * @category Function
     * @sig Number -> (* -> a) -> (* -> a)
     * @param {Number} length The arity for the returned function.
     * @param {Function} fn The function to curry.
     * @return {Function} A new, curried function.
     * @see R.curry
     * @example
     *
     *      const sumArgs = (...args) => R.sum(args);
     *
     *      const curriedAddFourNumbers = R.curryN(4, sumArgs);
     *      const f = curriedAddFourNumbers(1, 2);
     *      const g = f(3);
     *      g(4); //=> 10
     */


    var curryN =
    /*#__PURE__*/
    _curry2_1(function curryN(length, fn) {
      if (length === 1) {
        return _curry1_1(fn);
      }

      return _arity_1(length, _curryN_1(length, [], fn));
    });

    var curryN_1 = curryN;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Creates a new list iteration function from an existing one by adding two new
     * parameters to its callback function: the current index, and the entire list.
     *
     * This would turn, for instance, [`R.map`](#map) function into one that
     * more closely resembles `Array.prototype.map`. Note that this will only work
     * for functions in which the iteration callback function is the first
     * parameter, and where the list is the last parameter. (This latter might be
     * unimportant if the list parameter is not used.)
     *
     * @func
     * @memberOf R
     * @since v0.15.0
     * @category Function
     * @category List
     * @sig ((a ... -> b) ... -> [a] -> *) -> ((a ..., Int, [a] -> b) ... -> [a] -> *)
     * @param {Function} fn A list iteration function that does not pass index or list to its callback
     * @return {Function} An altered list iteration function that passes (item, index, list) to its callback
     * @example
     *
     *      const mapIndexed = R.addIndex(R.map);
     *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);
     *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']
     */


    var addIndex =
    /*#__PURE__*/
    _curry1_1(function addIndex(fn) {
      return curryN_1(fn.length, function () {
        var idx = 0;
        var origFn = arguments[0];
        var list = arguments[arguments.length - 1];
        var args = Array.prototype.slice.call(arguments, 0);

        args[0] = function () {
          var result = origFn.apply(this, _concat_1(arguments, [idx, list]));
          idx += 1;
          return result;
        };

        return fn.apply(this, args);
      });
    });

    var addIndex_1 = addIndex;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _map(fn, functor) {
      var idx = 0;
      var len = functor.length;
      var result = Array(len);

      while (idx < len) {
        result[idx] = fn(functor[idx]);
        idx += 1;
      }

      return result;
    }

    var _map_1 = _map;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var XMap =
    /*#__PURE__*/
    function () {
      function XMap(f, xf) {
        this.xf = xf;
        this.f = f;
      }

      XMap.prototype['@@transducer/init'] = _xfBase.init;
      XMap.prototype['@@transducer/result'] = _xfBase.result;

      XMap.prototype['@@transducer/step'] = function (result, input) {
        return this.xf['@@transducer/step'](result, this.f(input));
      };

      return XMap;
    }();

    var _xmap =
    /*#__PURE__*/
    _curry2_1(function _xmap(f, xf) {
      return new XMap(f, xf);
    });

    var _xmap_1 = _xmap;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Takes a function and
     * a [functor](https://github.com/fantasyland/fantasy-land#functor),
     * applies the function to each of the functor's values, and returns
     * a functor of the same shape.
     *
     * Ramda provides suitable `map` implementations for `Array` and `Object`,
     * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
     *
     * Dispatches to the `map` method of the second argument, if present.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * Also treats functions as functors and will compose them together.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig Functor f => (a -> b) -> f a -> f b
     * @param {Function} fn The function to be called on every element of the input `list`.
     * @param {Array} list The list to be iterated over.
     * @return {Array} The new list.
     * @see R.transduce, R.addIndex
     * @example
     *
     *      const double = x => x * 2;
     *
     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
     *
     *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
     * @symb R.map(f, [a, b]) = [f(a), f(b)]
     * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }
     * @symb R.map(f, functor_o) = functor_o.map(f)
     */


    var map$2 =
    /*#__PURE__*/
    _curry2_1(
    /*#__PURE__*/
    _dispatchable_1(['fantasy-land/map', 'map'], _xmap_1, function map(fn, functor) {
      switch (Object.prototype.toString.call(functor)) {
        case '[object Function]':
          return curryN_1(functor.length, function () {
            return fn.call(this, functor.apply(this, arguments));
          });

        case '[object Object]':
          return _reduce_1(function (acc, key) {
            acc[key] = fn(functor[key]);
            return acc;
          }, {}, keys_1(functor));

        default:
          return _map_1(fn, functor);
      }
    }));

    var map_1 = map$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var decode$1 = {"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376};

    var decode$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': decode$1
    });

    var require$$0$1 = getCjsExportFromNamespace(decode$2);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var decode_codepoint = createCommonjsModule$1(function (module, exports) {
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var decode_json_1 = __importDefault(require$$0$1);
    // Adapted from https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
    var fromCodePoint = 
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    String.fromCodePoint ||
        function (codePoint) {
            var output = "";
            if (codePoint > 0xffff) {
                codePoint -= 0x10000;
                output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
                codePoint = 0xdc00 | (codePoint & 0x3ff);
            }
            output += String.fromCharCode(codePoint);
            return output;
        };
    function decodeCodePoint(codePoint) {
        if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
            return "\uFFFD";
        }
        if (codePoint in decode_json_1.default) {
            codePoint = decode_json_1.default[codePoint];
        }
        return fromCodePoint(codePoint);
    }
    exports.default = decodeCodePoint;
    });

    unwrapExports(decode_codepoint);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Aacute$1="Á";var aacute$1="á";var Abreve="Ă";var abreve="ă";var ac="∾";var acd="∿";var acE="∾̳";var Acirc$1="Â";var acirc$1="â";var acute$1="´";var Acy="А";var acy="а";var AElig$1="Æ";var aelig$1="æ";var af="⁡";var Afr="𝔄";var afr="𝔞";var Agrave$1="À";var agrave$1="à";var alefsym="ℵ";var aleph="ℵ";var Alpha="Α";var alpha="α";var Amacr="Ā";var amacr="ā";var amalg="⨿";var amp$2="&";var AMP$1="&";var andand="⩕";var And="⩓";var and="∧";var andd="⩜";var andslope="⩘";var andv="⩚";var ang="∠";var ange="⦤";var angle="∠";var angmsdaa="⦨";var angmsdab="⦩";var angmsdac="⦪";var angmsdad="⦫";var angmsdae="⦬";var angmsdaf="⦭";var angmsdag="⦮";var angmsdah="⦯";var angmsd="∡";var angrt="∟";var angrtvb="⊾";var angrtvbd="⦝";var angsph="∢";var angst="Å";var angzarr="⍼";var Aogon="Ą";var aogon="ą";var Aopf="𝔸";var aopf="𝕒";var apacir="⩯";var ap="≈";var apE="⩰";var ape="≊";var apid="≋";var apos$1="'";var ApplyFunction="⁡";var approx="≈";var approxeq="≊";var Aring$1="Å";var aring$1="å";var Ascr="𝒜";var ascr="𝒶";var Assign="≔";var ast="*";var asymp="≈";var asympeq="≍";var Atilde$1="Ã";var atilde$1="ã";var Auml$1="Ä";var auml$1="ä";var awconint="∳";var awint="⨑";var backcong="≌";var backepsilon="϶";var backprime="‵";var backsim="∽";var backsimeq="⋍";var Backslash="∖";var Barv="⫧";var barvee="⊽";var barwed="⌅";var Barwed="⌆";var barwedge="⌅";var bbrk="⎵";var bbrktbrk="⎶";var bcong="≌";var Bcy="Б";var bcy="б";var bdquo="„";var becaus="∵";var because="∵";var Because="∵";var bemptyv="⦰";var bepsi="϶";var bernou="ℬ";var Bernoullis="ℬ";var Beta="Β";var beta="β";var beth="ℶ";var between="≬";var Bfr="𝔅";var bfr="𝔟";var bigcap="⋂";var bigcirc="◯";var bigcup="⋃";var bigodot="⨀";var bigoplus="⨁";var bigotimes="⨂";var bigsqcup="⨆";var bigstar="★";var bigtriangledown="▽";var bigtriangleup="△";var biguplus="⨄";var bigvee="⋁";var bigwedge="⋀";var bkarow="⤍";var blacklozenge="⧫";var blacksquare="▪";var blacktriangle="▴";var blacktriangledown="▾";var blacktriangleleft="◂";var blacktriangleright="▸";var blank="␣";var blk12="▒";var blk14="░";var blk34="▓";var block="█";var bne="=⃥";var bnequiv="≡⃥";var bNot="⫭";var bnot="⌐";var Bopf="𝔹";var bopf="𝕓";var bot="⊥";var bottom="⊥";var bowtie="⋈";var boxbox="⧉";var boxdl="┐";var boxdL="╕";var boxDl="╖";var boxDL="╗";var boxdr="┌";var boxdR="╒";var boxDr="╓";var boxDR="╔";var boxh="─";var boxH="═";var boxhd="┬";var boxHd="╤";var boxhD="╥";var boxHD="╦";var boxhu="┴";var boxHu="╧";var boxhU="╨";var boxHU="╩";var boxminus="⊟";var boxplus="⊞";var boxtimes="⊠";var boxul="┘";var boxuL="╛";var boxUl="╜";var boxUL="╝";var boxur="└";var boxuR="╘";var boxUr="╙";var boxUR="╚";var boxv="│";var boxV="║";var boxvh="┼";var boxvH="╪";var boxVh="╫";var boxVH="╬";var boxvl="┤";var boxvL="╡";var boxVl="╢";var boxVL="╣";var boxvr="├";var boxvR="╞";var boxVr="╟";var boxVR="╠";var bprime="‵";var breve="˘";var Breve="˘";var brvbar$1="¦";var bscr="𝒷";var Bscr="ℬ";var bsemi="⁏";var bsim="∽";var bsime="⋍";var bsolb="⧅";var bsol="\\";var bsolhsub="⟈";var bull="•";var bullet="•";var bump="≎";var bumpE="⪮";var bumpe="≏";var Bumpeq="≎";var bumpeq="≏";var Cacute="Ć";var cacute="ć";var capand="⩄";var capbrcup="⩉";var capcap="⩋";var cap="∩";var Cap="⋒";var capcup="⩇";var capdot="⩀";var CapitalDifferentialD="ⅅ";var caps="∩︀";var caret="⁁";var caron="ˇ";var Cayleys="ℭ";var ccaps="⩍";var Ccaron="Č";var ccaron="č";var Ccedil$1="Ç";var ccedil$1="ç";var Ccirc="Ĉ";var ccirc="ĉ";var Cconint="∰";var ccups="⩌";var ccupssm="⩐";var Cdot="Ċ";var cdot="ċ";var cedil$1="¸";var Cedilla="¸";var cemptyv="⦲";var cent$1="¢";var centerdot="·";var CenterDot="·";var cfr="𝔠";var Cfr="ℭ";var CHcy="Ч";var chcy="ч";var check="✓";var checkmark="✓";var Chi="Χ";var chi="χ";var circ="ˆ";var circeq="≗";var circlearrowleft="↺";var circlearrowright="↻";var circledast="⊛";var circledcirc="⊚";var circleddash="⊝";var CircleDot="⊙";var circledR="®";var circledS="Ⓢ";var CircleMinus="⊖";var CirclePlus="⊕";var CircleTimes="⊗";var cir="○";var cirE="⧃";var cire="≗";var cirfnint="⨐";var cirmid="⫯";var cirscir="⧂";var ClockwiseContourIntegral="∲";var CloseCurlyDoubleQuote="”";var CloseCurlyQuote="’";var clubs="♣";var clubsuit="♣";var colon=":";var Colon="∷";var Colone="⩴";var colone="≔";var coloneq="≔";var comma=",";var commat="@";var comp="∁";var compfn="∘";var complement="∁";var complexes="ℂ";var cong="≅";var congdot="⩭";var Congruent="≡";var conint="∮";var Conint="∯";var ContourIntegral="∮";var copf="𝕔";var Copf="ℂ";var coprod="∐";var Coproduct="∐";var copy$1="©";var COPY$1="©";var copysr="℗";var CounterClockwiseContourIntegral="∳";var crarr="↵";var cross="✗";var Cross="⨯";var Cscr="𝒞";var cscr="𝒸";var csub="⫏";var csube="⫑";var csup="⫐";var csupe="⫒";var ctdot="⋯";var cudarrl="⤸";var cudarrr="⤵";var cuepr="⋞";var cuesc="⋟";var cularr="↶";var cularrp="⤽";var cupbrcap="⩈";var cupcap="⩆";var CupCap="≍";var cup="∪";var Cup="⋓";var cupcup="⩊";var cupdot="⊍";var cupor="⩅";var cups="∪︀";var curarr="↷";var curarrm="⤼";var curlyeqprec="⋞";var curlyeqsucc="⋟";var curlyvee="⋎";var curlywedge="⋏";var curren$1="¤";var curvearrowleft="↶";var curvearrowright="↷";var cuvee="⋎";var cuwed="⋏";var cwconint="∲";var cwint="∱";var cylcty="⌭";var dagger="†";var Dagger="‡";var daleth="ℸ";var darr="↓";var Darr="↡";var dArr="⇓";var dash="‐";var Dashv="⫤";var dashv="⊣";var dbkarow="⤏";var dblac="˝";var Dcaron="Ď";var dcaron="ď";var Dcy="Д";var dcy="д";var ddagger="‡";var ddarr="⇊";var DD="ⅅ";var dd="ⅆ";var DDotrahd="⤑";var ddotseq="⩷";var deg$1="°";var Del="∇";var Delta="Δ";var delta="δ";var demptyv="⦱";var dfisht="⥿";var Dfr="𝔇";var dfr="𝔡";var dHar="⥥";var dharl="⇃";var dharr="⇂";var DiacriticalAcute="´";var DiacriticalDot="˙";var DiacriticalDoubleAcute="˝";var DiacriticalGrave="`";var DiacriticalTilde="˜";var diam="⋄";var diamond="⋄";var Diamond="⋄";var diamondsuit="♦";var diams="♦";var die="¨";var DifferentialD="ⅆ";var digamma="ϝ";var disin="⋲";var div="÷";var divide$1="÷";var divideontimes="⋇";var divonx="⋇";var DJcy="Ђ";var djcy="ђ";var dlcorn="⌞";var dlcrop="⌍";var dollar="$";var Dopf="𝔻";var dopf="𝕕";var Dot="¨";var dot="˙";var DotDot="⃜";var doteq="≐";var doteqdot="≑";var DotEqual="≐";var dotminus="∸";var dotplus="∔";var dotsquare="⊡";var doublebarwedge="⌆";var DoubleContourIntegral="∯";var DoubleDot="¨";var DoubleDownArrow="⇓";var DoubleLeftArrow="⇐";var DoubleLeftRightArrow="⇔";var DoubleLeftTee="⫤";var DoubleLongLeftArrow="⟸";var DoubleLongLeftRightArrow="⟺";var DoubleLongRightArrow="⟹";var DoubleRightArrow="⇒";var DoubleRightTee="⊨";var DoubleUpArrow="⇑";var DoubleUpDownArrow="⇕";var DoubleVerticalBar="∥";var DownArrowBar="⤓";var downarrow="↓";var DownArrow="↓";var Downarrow="⇓";var DownArrowUpArrow="⇵";var DownBreve="̑";var downdownarrows="⇊";var downharpoonleft="⇃";var downharpoonright="⇂";var DownLeftRightVector="⥐";var DownLeftTeeVector="⥞";var DownLeftVectorBar="⥖";var DownLeftVector="↽";var DownRightTeeVector="⥟";var DownRightVectorBar="⥗";var DownRightVector="⇁";var DownTeeArrow="↧";var DownTee="⊤";var drbkarow="⤐";var drcorn="⌟";var drcrop="⌌";var Dscr="𝒟";var dscr="𝒹";var DScy="Ѕ";var dscy="ѕ";var dsol="⧶";var Dstrok="Đ";var dstrok="đ";var dtdot="⋱";var dtri="▿";var dtrif="▾";var duarr="⇵";var duhar="⥯";var dwangle="⦦";var DZcy="Џ";var dzcy="џ";var dzigrarr="⟿";var Eacute$1="É";var eacute$1="é";var easter="⩮";var Ecaron="Ě";var ecaron="ě";var Ecirc$1="Ê";var ecirc$1="ê";var ecir="≖";var ecolon="≕";var Ecy="Э";var ecy="э";var eDDot="⩷";var Edot="Ė";var edot="ė";var eDot="≑";var ee$1="ⅇ";var efDot="≒";var Efr="𝔈";var efr="𝔢";var eg="⪚";var Egrave$1="È";var egrave$1="è";var egs="⪖";var egsdot="⪘";var el="⪙";var Element$2="∈";var elinters="⏧";var ell="ℓ";var els="⪕";var elsdot="⪗";var Emacr="Ē";var emacr="ē";var empty="∅";var emptyset="∅";var EmptySmallSquare="◻";var emptyv="∅";var EmptyVerySmallSquare="▫";var emsp13=" ";var emsp14=" ";var emsp=" ";var ENG="Ŋ";var eng="ŋ";var ensp=" ";var Eogon="Ę";var eogon="ę";var Eopf="𝔼";var eopf="𝕖";var epar="⋕";var eparsl="⧣";var eplus="⩱";var epsi="ε";var Epsilon="Ε";var epsilon="ε";var epsiv="ϵ";var eqcirc="≖";var eqcolon="≕";var eqsim="≂";var eqslantgtr="⪖";var eqslantless="⪕";var Equal="⩵";var equals$1="=";var EqualTilde="≂";var equest="≟";var Equilibrium="⇌";var equiv="≡";var equivDD="⩸";var eqvparsl="⧥";var erarr="⥱";var erDot="≓";var escr="ℯ";var Escr="ℰ";var esdot="≐";var Esim="⩳";var esim="≂";var Eta="Η";var eta="η";var ETH$1="Ð";var eth$1="ð";var Euml$1="Ë";var euml$1="ë";var euro="€";var excl="!";var exist="∃";var Exists="∃";var expectation="ℰ";var exponentiale="ⅇ";var ExponentialE="ⅇ";var fallingdotseq="≒";var Fcy="Ф";var fcy="ф";var female="♀";var ffilig="ﬃ";var fflig="ﬀ";var ffllig="ﬄ";var Ffr="𝔉";var ffr="𝔣";var filig="ﬁ";var FilledSmallSquare="◼";var FilledVerySmallSquare="▪";var fjlig="fj";var flat="♭";var fllig="ﬂ";var fltns="▱";var fnof="ƒ";var Fopf="𝔽";var fopf="𝕗";var forall="∀";var ForAll="∀";var fork="⋔";var forkv="⫙";var Fouriertrf="ℱ";var fpartint="⨍";var frac12$1="½";var frac13="⅓";var frac14$1="¼";var frac15="⅕";var frac16="⅙";var frac18="⅛";var frac23="⅔";var frac25="⅖";var frac34$1="¾";var frac35="⅗";var frac38="⅜";var frac45="⅘";var frac56="⅚";var frac58="⅝";var frac78="⅞";var frasl="⁄";var frown="⌢";var fscr="𝒻";var Fscr="ℱ";var gacute="ǵ";var Gamma="Γ";var gamma="γ";var Gammad="Ϝ";var gammad="ϝ";var gap="⪆";var Gbreve="Ğ";var gbreve="ğ";var Gcedil="Ģ";var Gcirc="Ĝ";var gcirc="ĝ";var Gcy="Г";var gcy="г";var Gdot="Ġ";var gdot="ġ";var ge$1="≥";var gE="≧";var gEl="⪌";var gel="⋛";var geq="≥";var geqq="≧";var geqslant="⩾";var gescc="⪩";var ges="⩾";var gesdot="⪀";var gesdoto="⪂";var gesdotol="⪄";var gesl="⋛︀";var gesles="⪔";var Gfr="𝔊";var gfr="𝔤";var gg="≫";var Gg="⋙";var ggg="⋙";var gimel="ℷ";var GJcy="Ѓ";var gjcy="ѓ";var gla="⪥";var gl="≷";var glE="⪒";var glj="⪤";var gnap="⪊";var gnapprox="⪊";var gne="⪈";var gnE="≩";var gneq="⪈";var gneqq="≩";var gnsim="⋧";var Gopf="𝔾";var gopf="𝕘";var grave="`";var GreaterEqual="≥";var GreaterEqualLess="⋛";var GreaterFullEqual="≧";var GreaterGreater="⪢";var GreaterLess="≷";var GreaterSlantEqual="⩾";var GreaterTilde="≳";var Gscr="𝒢";var gscr="ℊ";var gsim="≳";var gsime="⪎";var gsiml="⪐";var gtcc="⪧";var gtcir="⩺";var gt$3=">";var GT$1=">";var Gt$1="≫";var gtdot="⋗";var gtlPar="⦕";var gtquest="⩼";var gtrapprox="⪆";var gtrarr="⥸";var gtrdot="⋗";var gtreqless="⋛";var gtreqqless="⪌";var gtrless="≷";var gtrsim="≳";var gvertneqq="≩︀";var gvnE="≩︀";var Hacek="ˇ";var hairsp=" ";var half="½";var hamilt="ℋ";var HARDcy="Ъ";var hardcy="ъ";var harrcir="⥈";var harr="↔";var hArr="⇔";var harrw="↭";var Hat="^";var hbar="ℏ";var Hcirc="Ĥ";var hcirc="ĥ";var hearts="♥";var heartsuit="♥";var hellip="…";var hercon="⊹";var hfr="𝔥";var Hfr="ℌ";var HilbertSpace="ℋ";var hksearow="⤥";var hkswarow="⤦";var hoarr="⇿";var homtht="∻";var hookleftarrow="↩";var hookrightarrow="↪";var hopf="𝕙";var Hopf="ℍ";var horbar="―";var HorizontalLine="─";var hscr="𝒽";var Hscr="ℋ";var hslash="ℏ";var Hstrok="Ħ";var hstrok="ħ";var HumpDownHump="≎";var HumpEqual="≏";var hybull="⁃";var hyphen="‐";var Iacute$1="Í";var iacute$1="í";var ic="⁣";var Icirc$1="Î";var icirc$1="î";var Icy="И";var icy="и";var Idot="İ";var IEcy="Е";var iecy="е";var iexcl$1="¡";var iff="⇔";var ifr="𝔦";var Ifr="ℑ";var Igrave$1="Ì";var igrave$1="ì";var ii="ⅈ";var iiiint="⨌";var iiint="∭";var iinfin="⧜";var iiota="℩";var IJlig="Ĳ";var ijlig="ĳ";var Imacr="Ī";var imacr="ī";var image="ℑ";var ImaginaryI="ⅈ";var imagline="ℐ";var imagpart="ℑ";var imath="ı";var Im="ℑ";var imof="⊷";var imped="Ƶ";var Implies="⇒";var incare="℅";var infin="∞";var infintie="⧝";var inodot="ı";var intcal="⊺";var int="∫";var Int="∬";var integers="ℤ";var Integral="∫";var intercal="⊺";var Intersection="⋂";var intlarhk="⨗";var intprod="⨼";var InvisibleComma="⁣";var InvisibleTimes="⁢";var IOcy="Ё";var iocy="ё";var Iogon="Į";var iogon="į";var Iopf="𝕀";var iopf="𝕚";var Iota="Ι";var iota="ι";var iprod="⨼";var iquest$1="¿";var iscr="𝒾";var Iscr="ℐ";var isin="∈";var isindot="⋵";var isinE="⋹";var isins="⋴";var isinsv="⋳";var isinv="∈";var it$1="⁢";var Itilde="Ĩ";var itilde="ĩ";var Iukcy="І";var iukcy="і";var Iuml$1="Ï";var iuml$1="ï";var Jcirc="Ĵ";var jcirc="ĵ";var Jcy="Й";var jcy="й";var Jfr="𝔍";var jfr="𝔧";var jmath="ȷ";var Jopf="𝕁";var jopf="𝕛";var Jscr="𝒥";var jscr="𝒿";var Jsercy="Ј";var jsercy="ј";var Jukcy="Є";var jukcy="є";var Kappa="Κ";var kappa="κ";var kappav="ϰ";var Kcedil="Ķ";var kcedil="ķ";var Kcy="К";var kcy="к";var Kfr="𝔎";var kfr="𝔨";var kgreen="ĸ";var KHcy="Х";var khcy="х";var KJcy="Ќ";var kjcy="ќ";var Kopf="𝕂";var kopf="𝕜";var Kscr="𝒦";var kscr="𝓀";var lAarr="⇚";var Lacute="Ĺ";var lacute="ĺ";var laemptyv="⦴";var lagran="ℒ";var Lambda="Λ";var lambda="λ";var lang="⟨";var Lang="⟪";var langd="⦑";var langle="⟨";var lap="⪅";var Laplacetrf="ℒ";var laquo$1="«";var larrb="⇤";var larrbfs="⤟";var larr="←";var Larr="↞";var lArr="⇐";var larrfs="⤝";var larrhk="↩";var larrlp="↫";var larrpl="⤹";var larrsim="⥳";var larrtl="↢";var latail="⤙";var lAtail="⤛";var lat="⪫";var late="⪭";var lates="⪭︀";var lbarr="⤌";var lBarr="⤎";var lbbrk="❲";var lbrace="{";var lbrack="[";var lbrke="⦋";var lbrksld="⦏";var lbrkslu="⦍";var Lcaron="Ľ";var lcaron="ľ";var Lcedil="Ļ";var lcedil="ļ";var lceil="⌈";var lcub="{";var Lcy="Л";var lcy="л";var ldca="⤶";var ldquo="“";var ldquor="„";var ldrdhar="⥧";var ldrushar="⥋";var ldsh="↲";var le$1="≤";var lE="≦";var LeftAngleBracket="⟨";var LeftArrowBar="⇤";var leftarrow="←";var LeftArrow="←";var Leftarrow="⇐";var LeftArrowRightArrow="⇆";var leftarrowtail="↢";var LeftCeiling="⌈";var LeftDoubleBracket="⟦";var LeftDownTeeVector="⥡";var LeftDownVectorBar="⥙";var LeftDownVector="⇃";var LeftFloor="⌊";var leftharpoondown="↽";var leftharpoonup="↼";var leftleftarrows="⇇";var leftrightarrow="↔";var LeftRightArrow="↔";var Leftrightarrow="⇔";var leftrightarrows="⇆";var leftrightharpoons="⇋";var leftrightsquigarrow="↭";var LeftRightVector="⥎";var LeftTeeArrow="↤";var LeftTee="⊣";var LeftTeeVector="⥚";var leftthreetimes="⋋";var LeftTriangleBar="⧏";var LeftTriangle="⊲";var LeftTriangleEqual="⊴";var LeftUpDownVector="⥑";var LeftUpTeeVector="⥠";var LeftUpVectorBar="⥘";var LeftUpVector="↿";var LeftVectorBar="⥒";var LeftVector="↼";var lEg="⪋";var leg="⋚";var leq="≤";var leqq="≦";var leqslant="⩽";var lescc="⪨";var les="⩽";var lesdot="⩿";var lesdoto="⪁";var lesdotor="⪃";var lesg="⋚︀";var lesges="⪓";var lessapprox="⪅";var lessdot="⋖";var lesseqgtr="⋚";var lesseqqgtr="⪋";var LessEqualGreater="⋚";var LessFullEqual="≦";var LessGreater="≶";var lessgtr="≶";var LessLess="⪡";var lesssim="≲";var LessSlantEqual="⩽";var LessTilde="≲";var lfisht="⥼";var lfloor="⌊";var Lfr="𝔏";var lfr="𝔩";var lg="≶";var lgE="⪑";var lHar="⥢";var lhard="↽";var lharu="↼";var lharul="⥪";var lhblk="▄";var LJcy="Љ";var ljcy="љ";var llarr="⇇";var ll="≪";var Ll="⋘";var llcorner="⌞";var Lleftarrow="⇚";var llhard="⥫";var lltri="◺";var Lmidot="Ŀ";var lmidot="ŀ";var lmoustache="⎰";var lmoust="⎰";var lnap="⪉";var lnapprox="⪉";var lne="⪇";var lnE="≨";var lneq="⪇";var lneqq="≨";var lnsim="⋦";var loang="⟬";var loarr="⇽";var lobrk="⟦";var longleftarrow="⟵";var LongLeftArrow="⟵";var Longleftarrow="⟸";var longleftrightarrow="⟷";var LongLeftRightArrow="⟷";var Longleftrightarrow="⟺";var longmapsto="⟼";var longrightarrow="⟶";var LongRightArrow="⟶";var Longrightarrow="⟹";var looparrowleft="↫";var looparrowright="↬";var lopar="⦅";var Lopf="𝕃";var lopf="𝕝";var loplus="⨭";var lotimes="⨴";var lowast="∗";var lowbar="_";var LowerLeftArrow="↙";var LowerRightArrow="↘";var loz="◊";var lozenge="◊";var lozf="⧫";var lpar="(";var lparlt="⦓";var lrarr="⇆";var lrcorner="⌟";var lrhar="⇋";var lrhard="⥭";var lrm="‎";var lrtri="⊿";var lsaquo="‹";var lscr="𝓁";var Lscr="ℒ";var lsh="↰";var Lsh="↰";var lsim="≲";var lsime="⪍";var lsimg="⪏";var lsqb="[";var lsquo="‘";var lsquor="‚";var Lstrok="Ł";var lstrok="ł";var ltcc="⪦";var ltcir="⩹";var lt$3="<";var LT$1="<";var Lt$1="≪";var ltdot="⋖";var lthree="⋋";var ltimes="⋉";var ltlarr="⥶";var ltquest="⩻";var ltri="◃";var ltrie="⊴";var ltrif="◂";var ltrPar="⦖";var lurdshar="⥊";var luruhar="⥦";var lvertneqq="≨︀";var lvnE="≨︀";var macr$1="¯";var male="♂";var malt="✠";var maltese="✠";var map$1="↦";var mapsto="↦";var mapstodown="↧";var mapstoleft="↤";var mapstoup="↥";var marker="▮";var mcomma="⨩";var Mcy="М";var mcy="м";var mdash="—";var mDDot="∺";var measuredangle="∡";var MediumSpace=" ";var Mellintrf="ℳ";var Mfr="𝔐";var mfr="𝔪";var mho="℧";var micro$1="µ";var midast="*";var midcir="⫰";var mid="∣";var middot$1="·";var minusb="⊟";var minus="−";var minusd="∸";var minusdu="⨪";var MinusPlus="∓";var mlcp="⫛";var mldr="…";var mnplus="∓";var models="⊧";var Mopf="𝕄";var mopf="𝕞";var mp="∓";var mscr="𝓂";var Mscr="ℳ";var mstpos="∾";var Mu="Μ";var mu="μ";var multimap="⊸";var mumap="⊸";var nabla="∇";var Nacute="Ń";var nacute="ń";var nang="∠⃒";var nap="≉";var napE="⩰̸";var napid="≋̸";var napos="ŉ";var napprox="≉";var natural="♮";var naturals="ℕ";var natur="♮";var nbsp$1=" ";var nbump="≎̸";var nbumpe="≏̸";var ncap="⩃";var Ncaron="Ň";var ncaron="ň";var Ncedil="Ņ";var ncedil="ņ";var ncong="≇";var ncongdot="⩭̸";var ncup="⩂";var Ncy="Н";var ncy="н";var ndash="–";var nearhk="⤤";var nearr="↗";var neArr="⇗";var nearrow="↗";var ne$1="≠";var nedot="≐̸";var NegativeMediumSpace="​";var NegativeThickSpace="​";var NegativeThinSpace="​";var NegativeVeryThinSpace="​";var nequiv="≢";var nesear="⤨";var nesim="≂̸";var NestedGreaterGreater="≫";var NestedLessLess="≪";var NewLine="\n";var nexist="∄";var nexists="∄";var Nfr="𝔑";var nfr="𝔫";var ngE="≧̸";var nge="≱";var ngeq="≱";var ngeqq="≧̸";var ngeqslant="⩾̸";var nges="⩾̸";var nGg="⋙̸";var ngsim="≵";var nGt="≫⃒";var ngt="≯";var ngtr="≯";var nGtv="≫̸";var nharr="↮";var nhArr="⇎";var nhpar="⫲";var ni="∋";var nis="⋼";var nisd="⋺";var niv="∋";var NJcy="Њ";var njcy="њ";var nlarr="↚";var nlArr="⇍";var nldr="‥";var nlE="≦̸";var nle="≰";var nleftarrow="↚";var nLeftarrow="⇍";var nleftrightarrow="↮";var nLeftrightarrow="⇎";var nleq="≰";var nleqq="≦̸";var nleqslant="⩽̸";var nles="⩽̸";var nless="≮";var nLl="⋘̸";var nlsim="≴";var nLt="≪⃒";var nlt="≮";var nltri="⋪";var nltrie="⋬";var nLtv="≪̸";var nmid="∤";var NoBreak="⁠";var NonBreakingSpace=" ";var nopf="𝕟";var Nopf="ℕ";var Not="⫬";var not$1="¬";var NotCongruent="≢";var NotCupCap="≭";var NotDoubleVerticalBar="∦";var NotElement="∉";var NotEqual="≠";var NotEqualTilde="≂̸";var NotExists="∄";var NotGreater="≯";var NotGreaterEqual="≱";var NotGreaterFullEqual="≧̸";var NotGreaterGreater="≫̸";var NotGreaterLess="≹";var NotGreaterSlantEqual="⩾̸";var NotGreaterTilde="≵";var NotHumpDownHump="≎̸";var NotHumpEqual="≏̸";var notin="∉";var notindot="⋵̸";var notinE="⋹̸";var notinva="∉";var notinvb="⋷";var notinvc="⋶";var NotLeftTriangleBar="⧏̸";var NotLeftTriangle="⋪";var NotLeftTriangleEqual="⋬";var NotLess="≮";var NotLessEqual="≰";var NotLessGreater="≸";var NotLessLess="≪̸";var NotLessSlantEqual="⩽̸";var NotLessTilde="≴";var NotNestedGreaterGreater="⪢̸";var NotNestedLessLess="⪡̸";var notni="∌";var notniva="∌";var notnivb="⋾";var notnivc="⋽";var NotPrecedes="⊀";var NotPrecedesEqual="⪯̸";var NotPrecedesSlantEqual="⋠";var NotReverseElement="∌";var NotRightTriangleBar="⧐̸";var NotRightTriangle="⋫";var NotRightTriangleEqual="⋭";var NotSquareSubset="⊏̸";var NotSquareSubsetEqual="⋢";var NotSquareSuperset="⊐̸";var NotSquareSupersetEqual="⋣";var NotSubset="⊂⃒";var NotSubsetEqual="⊈";var NotSucceeds="⊁";var NotSucceedsEqual="⪰̸";var NotSucceedsSlantEqual="⋡";var NotSucceedsTilde="≿̸";var NotSuperset="⊃⃒";var NotSupersetEqual="⊉";var NotTilde="≁";var NotTildeEqual="≄";var NotTildeFullEqual="≇";var NotTildeTilde="≉";var NotVerticalBar="∤";var nparallel="∦";var npar="∦";var nparsl="⫽⃥";var npart="∂̸";var npolint="⨔";var npr="⊀";var nprcue="⋠";var nprec="⊀";var npreceq="⪯̸";var npre="⪯̸";var nrarrc="⤳̸";var nrarr="↛";var nrArr="⇏";var nrarrw="↝̸";var nrightarrow="↛";var nRightarrow="⇏";var nrtri="⋫";var nrtrie="⋭";var nsc="⊁";var nsccue="⋡";var nsce="⪰̸";var Nscr="𝒩";var nscr="𝓃";var nshortmid="∤";var nshortparallel="∦";var nsim="≁";var nsime="≄";var nsimeq="≄";var nsmid="∤";var nspar="∦";var nsqsube="⋢";var nsqsupe="⋣";var nsub="⊄";var nsubE="⫅̸";var nsube="⊈";var nsubset="⊂⃒";var nsubseteq="⊈";var nsubseteqq="⫅̸";var nsucc="⊁";var nsucceq="⪰̸";var nsup="⊅";var nsupE="⫆̸";var nsupe="⊉";var nsupset="⊃⃒";var nsupseteq="⊉";var nsupseteqq="⫆̸";var ntgl="≹";var Ntilde$1="Ñ";var ntilde$1="ñ";var ntlg="≸";var ntriangleleft="⋪";var ntrianglelefteq="⋬";var ntriangleright="⋫";var ntrianglerighteq="⋭";var Nu="Ν";var nu="ν";var num="#";var numero="№";var numsp=" ";var nvap="≍⃒";var nvdash="⊬";var nvDash="⊭";var nVdash="⊮";var nVDash="⊯";var nvge="≥⃒";var nvgt=">⃒";var nvHarr="⤄";var nvinfin="⧞";var nvlArr="⤂";var nvle="≤⃒";var nvlt="<⃒";var nvltrie="⊴⃒";var nvrArr="⤃";var nvrtrie="⊵⃒";var nvsim="∼⃒";var nwarhk="⤣";var nwarr="↖";var nwArr="⇖";var nwarrow="↖";var nwnear="⤧";var Oacute$1="Ó";var oacute$1="ó";var oast="⊛";var Ocirc$1="Ô";var ocirc$1="ô";var ocir="⊚";var Ocy="О";var ocy="о";var odash="⊝";var Odblac="Ő";var odblac="ő";var odiv="⨸";var odot="⊙";var odsold="⦼";var OElig="Œ";var oelig="œ";var ofcir="⦿";var Ofr="𝔒";var ofr="𝔬";var ogon="˛";var Ograve$1="Ò";var ograve$1="ò";var ogt="⧁";var ohbar="⦵";var ohm="Ω";var oint="∮";var olarr="↺";var olcir="⦾";var olcross="⦻";var oline="‾";var olt="⧀";var Omacr="Ō";var omacr="ō";var Omega="Ω";var omega="ω";var Omicron="Ο";var omicron="ο";var omid="⦶";var ominus="⊖";var Oopf="𝕆";var oopf="𝕠";var opar="⦷";var OpenCurlyDoubleQuote="“";var OpenCurlyQuote="‘";var operp="⦹";var oplus="⊕";var orarr="↻";var Or="⩔";var or="∨";var ord="⩝";var order="ℴ";var orderof="ℴ";var ordf$1="ª";var ordm$1="º";var origof="⊶";var oror="⩖";var orslope="⩗";var orv="⩛";var oS="Ⓢ";var Oscr="𝒪";var oscr="ℴ";var Oslash$1="Ø";var oslash$1="ø";var osol="⊘";var Otilde$1="Õ";var otilde$1="õ";var otimesas="⨶";var Otimes="⨷";var otimes="⊗";var Ouml$1="Ö";var ouml$1="ö";var ovbar="⌽";var OverBar="‾";var OverBrace="⏞";var OverBracket="⎴";var OverParenthesis="⏜";var para$1="¶";var parallel="∥";var par="∥";var parsim="⫳";var parsl="⫽";var part="∂";var PartialD="∂";var Pcy="П";var pcy="п";var percnt="%";var period=".";var permil="‰";var perp="⊥";var pertenk="‱";var Pfr="𝔓";var pfr="𝔭";var Phi="Φ";var phi="φ";var phiv="ϕ";var phmmat="ℳ";var phone="☎";var Pi="Π";var pi="π";var pitchfork="⋔";var piv="ϖ";var planck="ℏ";var planckh="ℎ";var plankv="ℏ";var plusacir="⨣";var plusb="⊞";var pluscir="⨢";var plus="+";var plusdo="∔";var plusdu="⨥";var pluse="⩲";var PlusMinus="±";var plusmn$1="±";var plussim="⨦";var plustwo="⨧";var pm="±";var Poincareplane="ℌ";var pointint="⨕";var popf="𝕡";var Popf="ℙ";var pound$1="£";var prap="⪷";var Pr="⪻";var pr="≺";var prcue="≼";var precapprox="⪷";var prec="≺";var preccurlyeq="≼";var Precedes="≺";var PrecedesEqual="⪯";var PrecedesSlantEqual="≼";var PrecedesTilde="≾";var preceq="⪯";var precnapprox="⪹";var precneqq="⪵";var precnsim="⋨";var pre="⪯";var prE="⪳";var precsim="≾";var prime="′";var Prime="″";var primes="ℙ";var prnap="⪹";var prnE="⪵";var prnsim="⋨";var prod="∏";var Product="∏";var profalar="⌮";var profline="⌒";var profsurf="⌓";var prop$1="∝";var Proportional="∝";var Proportion="∷";var propto="∝";var prsim="≾";var prurel="⊰";var Pscr="𝒫";var pscr="𝓅";var Psi="Ψ";var psi="ψ";var puncsp=" ";var Qfr="𝔔";var qfr="𝔮";var qint="⨌";var qopf="𝕢";var Qopf="ℚ";var qprime="⁗";var Qscr="𝒬";var qscr="𝓆";var quaternions="ℍ";var quatint="⨖";var quest="?";var questeq="≟";var quot$2="\"";var QUOT$1="\"";var rAarr="⇛";var race="∽̱";var Racute="Ŕ";var racute="ŕ";var radic="√";var raemptyv="⦳";var rang="⟩";var Rang="⟫";var rangd="⦒";var range="⦥";var rangle="⟩";var raquo$1="»";var rarrap="⥵";var rarrb="⇥";var rarrbfs="⤠";var rarrc="⤳";var rarr="→";var Rarr="↠";var rArr="⇒";var rarrfs="⤞";var rarrhk="↪";var rarrlp="↬";var rarrpl="⥅";var rarrsim="⥴";var Rarrtl="⤖";var rarrtl="↣";var rarrw="↝";var ratail="⤚";var rAtail="⤜";var ratio="∶";var rationals="ℚ";var rbarr="⤍";var rBarr="⤏";var RBarr="⤐";var rbbrk="❳";var rbrace="}";var rbrack="]";var rbrke="⦌";var rbrksld="⦎";var rbrkslu="⦐";var Rcaron="Ř";var rcaron="ř";var Rcedil="Ŗ";var rcedil="ŗ";var rceil="⌉";var rcub="}";var Rcy="Р";var rcy="р";var rdca="⤷";var rdldhar="⥩";var rdquo="”";var rdquor="”";var rdsh="↳";var real="ℜ";var realine="ℛ";var realpart="ℜ";var reals="ℝ";var Re$1="ℜ";var rect="▭";var reg$1="®";var REG$1="®";var ReverseElement="∋";var ReverseEquilibrium="⇋";var ReverseUpEquilibrium="⥯";var rfisht="⥽";var rfloor="⌋";var rfr="𝔯";var Rfr="ℜ";var rHar="⥤";var rhard="⇁";var rharu="⇀";var rharul="⥬";var Rho="Ρ";var rho="ρ";var rhov="ϱ";var RightAngleBracket="⟩";var RightArrowBar="⇥";var rightarrow="→";var RightArrow="→";var Rightarrow="⇒";var RightArrowLeftArrow="⇄";var rightarrowtail="↣";var RightCeiling="⌉";var RightDoubleBracket="⟧";var RightDownTeeVector="⥝";var RightDownVectorBar="⥕";var RightDownVector="⇂";var RightFloor="⌋";var rightharpoondown="⇁";var rightharpoonup="⇀";var rightleftarrows="⇄";var rightleftharpoons="⇌";var rightrightarrows="⇉";var rightsquigarrow="↝";var RightTeeArrow="↦";var RightTee="⊢";var RightTeeVector="⥛";var rightthreetimes="⋌";var RightTriangleBar="⧐";var RightTriangle="⊳";var RightTriangleEqual="⊵";var RightUpDownVector="⥏";var RightUpTeeVector="⥜";var RightUpVectorBar="⥔";var RightUpVector="↾";var RightVectorBar="⥓";var RightVector="⇀";var ring="˚";var risingdotseq="≓";var rlarr="⇄";var rlhar="⇌";var rlm="‏";var rmoustache="⎱";var rmoust="⎱";var rnmid="⫮";var roang="⟭";var roarr="⇾";var robrk="⟧";var ropar="⦆";var ropf="𝕣";var Ropf="ℝ";var roplus="⨮";var rotimes="⨵";var RoundImplies="⥰";var rpar=")";var rpargt="⦔";var rppolint="⨒";var rrarr="⇉";var Rrightarrow="⇛";var rsaquo="›";var rscr="𝓇";var Rscr="ℛ";var rsh="↱";var Rsh="↱";var rsqb="]";var rsquo="’";var rsquor="’";var rthree="⋌";var rtimes="⋊";var rtri="▹";var rtrie="⊵";var rtrif="▸";var rtriltri="⧎";var RuleDelayed="⧴";var ruluhar="⥨";var rx="℞";var Sacute="Ś";var sacute="ś";var sbquo="‚";var scap="⪸";var Scaron="Š";var scaron="š";var Sc="⪼";var sc="≻";var sccue="≽";var sce="⪰";var scE="⪴";var Scedil="Ş";var scedil="ş";var Scirc="Ŝ";var scirc="ŝ";var scnap="⪺";var scnE="⪶";var scnsim="⋩";var scpolint="⨓";var scsim="≿";var Scy="С";var scy="с";var sdotb="⊡";var sdot="⋅";var sdote="⩦";var searhk="⤥";var searr="↘";var seArr="⇘";var searrow="↘";var sect$1="§";var semi=";";var seswar="⤩";var setminus="∖";var setmn="∖";var sext="✶";var Sfr="𝔖";var sfr="𝔰";var sfrown="⌢";var sharp="♯";var SHCHcy="Щ";var shchcy="щ";var SHcy="Ш";var shcy="ш";var ShortDownArrow="↓";var ShortLeftArrow="←";var shortmid="∣";var shortparallel="∥";var ShortRightArrow="→";var ShortUpArrow="↑";var shy$1="­";var Sigma="Σ";var sigma="σ";var sigmaf="ς";var sigmav="ς";var sim="∼";var simdot="⩪";var sime="≃";var simeq="≃";var simg="⪞";var simgE="⪠";var siml="⪝";var simlE="⪟";var simne="≆";var simplus="⨤";var simrarr="⥲";var slarr="←";var SmallCircle="∘";var smallsetminus="∖";var smashp="⨳";var smeparsl="⧤";var smid="∣";var smile="⌣";var smt="⪪";var smte="⪬";var smtes="⪬︀";var SOFTcy="Ь";var softcy="ь";var solbar="⌿";var solb="⧄";var sol="/";var Sopf="𝕊";var sopf="𝕤";var spades="♠";var spadesuit="♠";var spar="∥";var sqcap="⊓";var sqcaps="⊓︀";var sqcup="⊔";var sqcups="⊔︀";var Sqrt="√";var sqsub="⊏";var sqsube="⊑";var sqsubset="⊏";var sqsubseteq="⊑";var sqsup="⊐";var sqsupe="⊒";var sqsupset="⊐";var sqsupseteq="⊒";var square="□";var Square="□";var SquareIntersection="⊓";var SquareSubset="⊏";var SquareSubsetEqual="⊑";var SquareSuperset="⊐";var SquareSupersetEqual="⊒";var SquareUnion="⊔";var squarf="▪";var squ="□";var squf="▪";var srarr="→";var Sscr="𝒮";var sscr="𝓈";var ssetmn="∖";var ssmile="⌣";var sstarf="⋆";var Star="⋆";var star="☆";var starf="★";var straightepsilon="ϵ";var straightphi="ϕ";var strns="¯";var sub="⊂";var Sub="⋐";var subdot="⪽";var subE="⫅";var sube="⊆";var subedot="⫃";var submult="⫁";var subnE="⫋";var subne="⊊";var subplus="⪿";var subrarr="⥹";var subset="⊂";var Subset="⋐";var subseteq="⊆";var subseteqq="⫅";var SubsetEqual="⊆";var subsetneq="⊊";var subsetneqq="⫋";var subsim="⫇";var subsub="⫕";var subsup="⫓";var succapprox="⪸";var succ="≻";var succcurlyeq="≽";var Succeeds="≻";var SucceedsEqual="⪰";var SucceedsSlantEqual="≽";var SucceedsTilde="≿";var succeq="⪰";var succnapprox="⪺";var succneqq="⪶";var succnsim="⋩";var succsim="≿";var SuchThat="∋";var sum="∑";var Sum="∑";var sung="♪";var sup1$1="¹";var sup2$1="²";var sup3$1="³";var sup="⊃";var Sup="⋑";var supdot="⪾";var supdsub="⫘";var supE="⫆";var supe="⊇";var supedot="⫄";var Superset="⊃";var SupersetEqual="⊇";var suphsol="⟉";var suphsub="⫗";var suplarr="⥻";var supmult="⫂";var supnE="⫌";var supne="⊋";var supplus="⫀";var supset="⊃";var Supset="⋑";var supseteq="⊇";var supseteqq="⫆";var supsetneq="⊋";var supsetneqq="⫌";var supsim="⫈";var supsub="⫔";var supsup="⫖";var swarhk="⤦";var swarr="↙";var swArr="⇙";var swarrow="↙";var swnwar="⤪";var szlig$1="ß";var Tab="\t";var target="⌖";var Tau="Τ";var tau="τ";var tbrk="⎴";var Tcaron="Ť";var tcaron="ť";var Tcedil="Ţ";var tcedil="ţ";var Tcy="Т";var tcy="т";var tdot="⃛";var telrec="⌕";var Tfr="𝔗";var tfr="𝔱";var there4="∴";var therefore="∴";var Therefore="∴";var Theta="Θ";var theta="θ";var thetasym="ϑ";var thetav="ϑ";var thickapprox="≈";var thicksim="∼";var ThickSpace="  ";var ThinSpace=" ";var thinsp=" ";var thkap="≈";var thksim="∼";var THORN$1="Þ";var thorn$1="þ";var tilde="˜";var Tilde="∼";var TildeEqual="≃";var TildeFullEqual="≅";var TildeTilde="≈";var timesbar="⨱";var timesb="⊠";var times$1="×";var timesd="⨰";var tint="∭";var toea="⤨";var topbot="⌶";var topcir="⫱";var top="⊤";var Topf="𝕋";var topf="𝕥";var topfork="⫚";var tosa="⤩";var tprime="‴";var trade="™";var TRADE="™";var triangle="▵";var triangledown="▿";var triangleleft="◃";var trianglelefteq="⊴";var triangleq="≜";var triangleright="▹";var trianglerighteq="⊵";var tridot="◬";var trie="≜";var triminus="⨺";var TripleDot="⃛";var triplus="⨹";var trisb="⧍";var tritime="⨻";var trpezium="⏢";var Tscr="𝒯";var tscr="𝓉";var TScy="Ц";var tscy="ц";var TSHcy="Ћ";var tshcy="ћ";var Tstrok="Ŧ";var tstrok="ŧ";var twixt="≬";var twoheadleftarrow="↞";var twoheadrightarrow="↠";var Uacute$1="Ú";var uacute$1="ú";var uarr="↑";var Uarr="↟";var uArr="⇑";var Uarrocir="⥉";var Ubrcy="Ў";var ubrcy="ў";var Ubreve="Ŭ";var ubreve="ŭ";var Ucirc$1="Û";var ucirc$1="û";var Ucy="У";var ucy="у";var udarr="⇅";var Udblac="Ű";var udblac="ű";var udhar="⥮";var ufisht="⥾";var Ufr="𝔘";var ufr="𝔲";var Ugrave$1="Ù";var ugrave$1="ù";var uHar="⥣";var uharl="↿";var uharr="↾";var uhblk="▀";var ulcorn="⌜";var ulcorner="⌜";var ulcrop="⌏";var ultri="◸";var Umacr="Ū";var umacr="ū";var uml$1="¨";var UnderBar="_";var UnderBrace="⏟";var UnderBracket="⎵";var UnderParenthesis="⏝";var Union="⋃";var UnionPlus="⊎";var Uogon="Ų";var uogon="ų";var Uopf="𝕌";var uopf="𝕦";var UpArrowBar="⤒";var uparrow="↑";var UpArrow="↑";var Uparrow="⇑";var UpArrowDownArrow="⇅";var updownarrow="↕";var UpDownArrow="↕";var Updownarrow="⇕";var UpEquilibrium="⥮";var upharpoonleft="↿";var upharpoonright="↾";var uplus="⊎";var UpperLeftArrow="↖";var UpperRightArrow="↗";var upsi="υ";var Upsi="ϒ";var upsih="ϒ";var Upsilon="Υ";var upsilon="υ";var UpTeeArrow="↥";var UpTee="⊥";var upuparrows="⇈";var urcorn="⌝";var urcorner="⌝";var urcrop="⌎";var Uring="Ů";var uring="ů";var urtri="◹";var Uscr="𝒰";var uscr="𝓊";var utdot="⋰";var Utilde="Ũ";var utilde="ũ";var utri="▵";var utrif="▴";var uuarr="⇈";var Uuml$1="Ü";var uuml$1="ü";var uwangle="⦧";var vangrt="⦜";var varepsilon="ϵ";var varkappa="ϰ";var varnothing="∅";var varphi="ϕ";var varpi="ϖ";var varpropto="∝";var varr="↕";var vArr="⇕";var varrho="ϱ";var varsigma="ς";var varsubsetneq="⊊︀";var varsubsetneqq="⫋︀";var varsupsetneq="⊋︀";var varsupsetneqq="⫌︀";var vartheta="ϑ";var vartriangleleft="⊲";var vartriangleright="⊳";var vBar="⫨";var Vbar="⫫";var vBarv="⫩";var Vcy="В";var vcy="в";var vdash="⊢";var vDash="⊨";var Vdash="⊩";var VDash="⊫";var Vdashl="⫦";var veebar="⊻";var vee="∨";var Vee="⋁";var veeeq="≚";var vellip="⋮";var verbar="|";var Verbar="‖";var vert="|";var Vert="‖";var VerticalBar="∣";var VerticalLine="|";var VerticalSeparator="❘";var VerticalTilde="≀";var VeryThinSpace=" ";var Vfr="𝔙";var vfr="𝔳";var vltri="⊲";var vnsub="⊂⃒";var vnsup="⊃⃒";var Vopf="𝕍";var vopf="𝕧";var vprop="∝";var vrtri="⊳";var Vscr="𝒱";var vscr="𝓋";var vsubnE="⫋︀";var vsubne="⊊︀";var vsupnE="⫌︀";var vsupne="⊋︀";var Vvdash="⊪";var vzigzag="⦚";var Wcirc="Ŵ";var wcirc="ŵ";var wedbar="⩟";var wedge="∧";var Wedge="⋀";var wedgeq="≙";var weierp="℘";var Wfr="𝔚";var wfr="𝔴";var Wopf="𝕎";var wopf="𝕨";var wp="℘";var wr="≀";var wreath="≀";var Wscr="𝒲";var wscr="𝓌";var xcap="⋂";var xcirc="◯";var xcup="⋃";var xdtri="▽";var Xfr="𝔛";var xfr="𝔵";var xharr="⟷";var xhArr="⟺";var Xi="Ξ";var xi="ξ";var xlarr="⟵";var xlArr="⟸";var xmap="⟼";var xnis="⋻";var xodot="⨀";var Xopf="𝕏";var xopf="𝕩";var xoplus="⨁";var xotime="⨂";var xrarr="⟶";var xrArr="⟹";var Xscr="𝒳";var xscr="𝓍";var xsqcup="⨆";var xuplus="⨄";var xutri="△";var xvee="⋁";var xwedge="⋀";var Yacute$1="Ý";var yacute$1="ý";var YAcy="Я";var yacy="я";var Ycirc="Ŷ";var ycirc="ŷ";var Ycy="Ы";var ycy="ы";var yen$1="¥";var Yfr="𝔜";var yfr="𝔶";var YIcy="Ї";var yicy="ї";var Yopf="𝕐";var yopf="𝕪";var Yscr="𝒴";var yscr="𝓎";var YUcy="Ю";var yucy="ю";var yuml$1="ÿ";var Yuml="Ÿ";var Zacute="Ź";var zacute="ź";var Zcaron="Ž";var zcaron="ž";var Zcy="З";var zcy="з";var Zdot="Ż";var zdot="ż";var zeetrf="ℨ";var ZeroWidthSpace="​";var Zeta="Ζ";var zeta="ζ";var zfr="𝔷";var Zfr="ℨ";var ZHcy="Ж";var zhcy="ж";var zigrarr="⇝";var zopf="𝕫";var Zopf="ℤ";var Zscr="𝒵";var zscr="𝓏";var zwj="‍";var zwnj="‌";var entities = {Aacute:Aacute$1,aacute:aacute$1,Abreve:Abreve,abreve:abreve,ac:ac,acd:acd,acE:acE,Acirc:Acirc$1,acirc:acirc$1,acute:acute$1,Acy:Acy,acy:acy,AElig:AElig$1,aelig:aelig$1,af:af,Afr:Afr,afr:afr,Agrave:Agrave$1,agrave:agrave$1,alefsym:alefsym,aleph:aleph,Alpha:Alpha,alpha:alpha,Amacr:Amacr,amacr:amacr,amalg:amalg,amp:amp$2,AMP:AMP$1,andand:andand,And:And,and:and,andd:andd,andslope:andslope,andv:andv,ang:ang,ange:ange,angle:angle,angmsdaa:angmsdaa,angmsdab:angmsdab,angmsdac:angmsdac,angmsdad:angmsdad,angmsdae:angmsdae,angmsdaf:angmsdaf,angmsdag:angmsdag,angmsdah:angmsdah,angmsd:angmsd,angrt:angrt,angrtvb:angrtvb,angrtvbd:angrtvbd,angsph:angsph,angst:angst,angzarr:angzarr,Aogon:Aogon,aogon:aogon,Aopf:Aopf,aopf:aopf,apacir:apacir,ap:ap,apE:apE,ape:ape,apid:apid,apos:apos$1,ApplyFunction:ApplyFunction,approx:approx,approxeq:approxeq,Aring:Aring$1,aring:aring$1,Ascr:Ascr,ascr:ascr,Assign:Assign,ast:ast,asymp:asymp,asympeq:asympeq,Atilde:Atilde$1,atilde:atilde$1,Auml:Auml$1,auml:auml$1,awconint:awconint,awint:awint,backcong:backcong,backepsilon:backepsilon,backprime:backprime,backsim:backsim,backsimeq:backsimeq,Backslash:Backslash,Barv:Barv,barvee:barvee,barwed:barwed,Barwed:Barwed,barwedge:barwedge,bbrk:bbrk,bbrktbrk:bbrktbrk,bcong:bcong,Bcy:Bcy,bcy:bcy,bdquo:bdquo,becaus:becaus,because:because,Because:Because,bemptyv:bemptyv,bepsi:bepsi,bernou:bernou,Bernoullis:Bernoullis,Beta:Beta,beta:beta,beth:beth,between:between,Bfr:Bfr,bfr:bfr,bigcap:bigcap,bigcirc:bigcirc,bigcup:bigcup,bigodot:bigodot,bigoplus:bigoplus,bigotimes:bigotimes,bigsqcup:bigsqcup,bigstar:bigstar,bigtriangledown:bigtriangledown,bigtriangleup:bigtriangleup,biguplus:biguplus,bigvee:bigvee,bigwedge:bigwedge,bkarow:bkarow,blacklozenge:blacklozenge,blacksquare:blacksquare,blacktriangle:blacktriangle,blacktriangledown:blacktriangledown,blacktriangleleft:blacktriangleleft,blacktriangleright:blacktriangleright,blank:blank,blk12:blk12,blk14:blk14,blk34:blk34,block:block,bne:bne,bnequiv:bnequiv,bNot:bNot,bnot:bnot,Bopf:Bopf,bopf:bopf,bot:bot,bottom:bottom,bowtie:bowtie,boxbox:boxbox,boxdl:boxdl,boxdL:boxdL,boxDl:boxDl,boxDL:boxDL,boxdr:boxdr,boxdR:boxdR,boxDr:boxDr,boxDR:boxDR,boxh:boxh,boxH:boxH,boxhd:boxhd,boxHd:boxHd,boxhD:boxhD,boxHD:boxHD,boxhu:boxhu,boxHu:boxHu,boxhU:boxhU,boxHU:boxHU,boxminus:boxminus,boxplus:boxplus,boxtimes:boxtimes,boxul:boxul,boxuL:boxuL,boxUl:boxUl,boxUL:boxUL,boxur:boxur,boxuR:boxuR,boxUr:boxUr,boxUR:boxUR,boxv:boxv,boxV:boxV,boxvh:boxvh,boxvH:boxvH,boxVh:boxVh,boxVH:boxVH,boxvl:boxvl,boxvL:boxvL,boxVl:boxVl,boxVL:boxVL,boxvr:boxvr,boxvR:boxvR,boxVr:boxVr,boxVR:boxVR,bprime:bprime,breve:breve,Breve:Breve,brvbar:brvbar$1,bscr:bscr,Bscr:Bscr,bsemi:bsemi,bsim:bsim,bsime:bsime,bsolb:bsolb,bsol:bsol,bsolhsub:bsolhsub,bull:bull,bullet:bullet,bump:bump,bumpE:bumpE,bumpe:bumpe,Bumpeq:Bumpeq,bumpeq:bumpeq,Cacute:Cacute,cacute:cacute,capand:capand,capbrcup:capbrcup,capcap:capcap,cap:cap,Cap:Cap,capcup:capcup,capdot:capdot,CapitalDifferentialD:CapitalDifferentialD,caps:caps,caret:caret,caron:caron,Cayleys:Cayleys,ccaps:ccaps,Ccaron:Ccaron,ccaron:ccaron,Ccedil:Ccedil$1,ccedil:ccedil$1,Ccirc:Ccirc,ccirc:ccirc,Cconint:Cconint,ccups:ccups,ccupssm:ccupssm,Cdot:Cdot,cdot:cdot,cedil:cedil$1,Cedilla:Cedilla,cemptyv:cemptyv,cent:cent$1,centerdot:centerdot,CenterDot:CenterDot,cfr:cfr,Cfr:Cfr,CHcy:CHcy,chcy:chcy,check:check,checkmark:checkmark,Chi:Chi,chi:chi,circ:circ,circeq:circeq,circlearrowleft:circlearrowleft,circlearrowright:circlearrowright,circledast:circledast,circledcirc:circledcirc,circleddash:circleddash,CircleDot:CircleDot,circledR:circledR,circledS:circledS,CircleMinus:CircleMinus,CirclePlus:CirclePlus,CircleTimes:CircleTimes,cir:cir,cirE:cirE,cire:cire,cirfnint:cirfnint,cirmid:cirmid,cirscir:cirscir,ClockwiseContourIntegral:ClockwiseContourIntegral,CloseCurlyDoubleQuote:CloseCurlyDoubleQuote,CloseCurlyQuote:CloseCurlyQuote,clubs:clubs,clubsuit:clubsuit,colon:colon,Colon:Colon,Colone:Colone,colone:colone,coloneq:coloneq,comma:comma,commat:commat,comp:comp,compfn:compfn,complement:complement,complexes:complexes,cong:cong,congdot:congdot,Congruent:Congruent,conint:conint,Conint:Conint,ContourIntegral:ContourIntegral,copf:copf,Copf:Copf,coprod:coprod,Coproduct:Coproduct,copy:copy$1,COPY:COPY$1,copysr:copysr,CounterClockwiseContourIntegral:CounterClockwiseContourIntegral,crarr:crarr,cross:cross,Cross:Cross,Cscr:Cscr,cscr:cscr,csub:csub,csube:csube,csup:csup,csupe:csupe,ctdot:ctdot,cudarrl:cudarrl,cudarrr:cudarrr,cuepr:cuepr,cuesc:cuesc,cularr:cularr,cularrp:cularrp,cupbrcap:cupbrcap,cupcap:cupcap,CupCap:CupCap,cup:cup,Cup:Cup,cupcup:cupcup,cupdot:cupdot,cupor:cupor,cups:cups,curarr:curarr,curarrm:curarrm,curlyeqprec:curlyeqprec,curlyeqsucc:curlyeqsucc,curlyvee:curlyvee,curlywedge:curlywedge,curren:curren$1,curvearrowleft:curvearrowleft,curvearrowright:curvearrowright,cuvee:cuvee,cuwed:cuwed,cwconint:cwconint,cwint:cwint,cylcty:cylcty,dagger:dagger,Dagger:Dagger,daleth:daleth,darr:darr,Darr:Darr,dArr:dArr,dash:dash,Dashv:Dashv,dashv:dashv,dbkarow:dbkarow,dblac:dblac,Dcaron:Dcaron,dcaron:dcaron,Dcy:Dcy,dcy:dcy,ddagger:ddagger,ddarr:ddarr,DD:DD,dd:dd,DDotrahd:DDotrahd,ddotseq:ddotseq,deg:deg$1,Del:Del,Delta:Delta,delta:delta,demptyv:demptyv,dfisht:dfisht,Dfr:Dfr,dfr:dfr,dHar:dHar,dharl:dharl,dharr:dharr,DiacriticalAcute:DiacriticalAcute,DiacriticalDot:DiacriticalDot,DiacriticalDoubleAcute:DiacriticalDoubleAcute,DiacriticalGrave:DiacriticalGrave,DiacriticalTilde:DiacriticalTilde,diam:diam,diamond:diamond,Diamond:Diamond,diamondsuit:diamondsuit,diams:diams,die:die,DifferentialD:DifferentialD,digamma:digamma,disin:disin,div:div,divide:divide$1,divideontimes:divideontimes,divonx:divonx,DJcy:DJcy,djcy:djcy,dlcorn:dlcorn,dlcrop:dlcrop,dollar:dollar,Dopf:Dopf,dopf:dopf,Dot:Dot,dot:dot,DotDot:DotDot,doteq:doteq,doteqdot:doteqdot,DotEqual:DotEqual,dotminus:dotminus,dotplus:dotplus,dotsquare:dotsquare,doublebarwedge:doublebarwedge,DoubleContourIntegral:DoubleContourIntegral,DoubleDot:DoubleDot,DoubleDownArrow:DoubleDownArrow,DoubleLeftArrow:DoubleLeftArrow,DoubleLeftRightArrow:DoubleLeftRightArrow,DoubleLeftTee:DoubleLeftTee,DoubleLongLeftArrow:DoubleLongLeftArrow,DoubleLongLeftRightArrow:DoubleLongLeftRightArrow,DoubleLongRightArrow:DoubleLongRightArrow,DoubleRightArrow:DoubleRightArrow,DoubleRightTee:DoubleRightTee,DoubleUpArrow:DoubleUpArrow,DoubleUpDownArrow:DoubleUpDownArrow,DoubleVerticalBar:DoubleVerticalBar,DownArrowBar:DownArrowBar,downarrow:downarrow,DownArrow:DownArrow,Downarrow:Downarrow,DownArrowUpArrow:DownArrowUpArrow,DownBreve:DownBreve,downdownarrows:downdownarrows,downharpoonleft:downharpoonleft,downharpoonright:downharpoonright,DownLeftRightVector:DownLeftRightVector,DownLeftTeeVector:DownLeftTeeVector,DownLeftVectorBar:DownLeftVectorBar,DownLeftVector:DownLeftVector,DownRightTeeVector:DownRightTeeVector,DownRightVectorBar:DownRightVectorBar,DownRightVector:DownRightVector,DownTeeArrow:DownTeeArrow,DownTee:DownTee,drbkarow:drbkarow,drcorn:drcorn,drcrop:drcrop,Dscr:Dscr,dscr:dscr,DScy:DScy,dscy:dscy,dsol:dsol,Dstrok:Dstrok,dstrok:dstrok,dtdot:dtdot,dtri:dtri,dtrif:dtrif,duarr:duarr,duhar:duhar,dwangle:dwangle,DZcy:DZcy,dzcy:dzcy,dzigrarr:dzigrarr,Eacute:Eacute$1,eacute:eacute$1,easter:easter,Ecaron:Ecaron,ecaron:ecaron,Ecirc:Ecirc$1,ecirc:ecirc$1,ecir:ecir,ecolon:ecolon,Ecy:Ecy,ecy:ecy,eDDot:eDDot,Edot:Edot,edot:edot,eDot:eDot,ee:ee$1,efDot:efDot,Efr:Efr,efr:efr,eg:eg,Egrave:Egrave$1,egrave:egrave$1,egs:egs,egsdot:egsdot,el:el,Element:Element$2,elinters:elinters,ell:ell,els:els,elsdot:elsdot,Emacr:Emacr,emacr:emacr,empty:empty,emptyset:emptyset,EmptySmallSquare:EmptySmallSquare,emptyv:emptyv,EmptyVerySmallSquare:EmptyVerySmallSquare,emsp13:emsp13,emsp14:emsp14,emsp:emsp,ENG:ENG,eng:eng,ensp:ensp,Eogon:Eogon,eogon:eogon,Eopf:Eopf,eopf:eopf,epar:epar,eparsl:eparsl,eplus:eplus,epsi:epsi,Epsilon:Epsilon,epsilon:epsilon,epsiv:epsiv,eqcirc:eqcirc,eqcolon:eqcolon,eqsim:eqsim,eqslantgtr:eqslantgtr,eqslantless:eqslantless,Equal:Equal,equals:equals$1,EqualTilde:EqualTilde,equest:equest,Equilibrium:Equilibrium,equiv:equiv,equivDD:equivDD,eqvparsl:eqvparsl,erarr:erarr,erDot:erDot,escr:escr,Escr:Escr,esdot:esdot,Esim:Esim,esim:esim,Eta:Eta,eta:eta,ETH:ETH$1,eth:eth$1,Euml:Euml$1,euml:euml$1,euro:euro,excl:excl,exist:exist,Exists:Exists,expectation:expectation,exponentiale:exponentiale,ExponentialE:ExponentialE,fallingdotseq:fallingdotseq,Fcy:Fcy,fcy:fcy,female:female,ffilig:ffilig,fflig:fflig,ffllig:ffllig,Ffr:Ffr,ffr:ffr,filig:filig,FilledSmallSquare:FilledSmallSquare,FilledVerySmallSquare:FilledVerySmallSquare,fjlig:fjlig,flat:flat,fllig:fllig,fltns:fltns,fnof:fnof,Fopf:Fopf,fopf:fopf,forall:forall,ForAll:ForAll,fork:fork,forkv:forkv,Fouriertrf:Fouriertrf,fpartint:fpartint,frac12:frac12$1,frac13:frac13,frac14:frac14$1,frac15:frac15,frac16:frac16,frac18:frac18,frac23:frac23,frac25:frac25,frac34:frac34$1,frac35:frac35,frac38:frac38,frac45:frac45,frac56:frac56,frac58:frac58,frac78:frac78,frasl:frasl,frown:frown,fscr:fscr,Fscr:Fscr,gacute:gacute,Gamma:Gamma,gamma:gamma,Gammad:Gammad,gammad:gammad,gap:gap,Gbreve:Gbreve,gbreve:gbreve,Gcedil:Gcedil,Gcirc:Gcirc,gcirc:gcirc,Gcy:Gcy,gcy:gcy,Gdot:Gdot,gdot:gdot,ge:ge$1,gE:gE,gEl:gEl,gel:gel,geq:geq,geqq:geqq,geqslant:geqslant,gescc:gescc,ges:ges,gesdot:gesdot,gesdoto:gesdoto,gesdotol:gesdotol,gesl:gesl,gesles:gesles,Gfr:Gfr,gfr:gfr,gg:gg,Gg:Gg,ggg:ggg,gimel:gimel,GJcy:GJcy,gjcy:gjcy,gla:gla,gl:gl,glE:glE,glj:glj,gnap:gnap,gnapprox:gnapprox,gne:gne,gnE:gnE,gneq:gneq,gneqq:gneqq,gnsim:gnsim,Gopf:Gopf,gopf:gopf,grave:grave,GreaterEqual:GreaterEqual,GreaterEqualLess:GreaterEqualLess,GreaterFullEqual:GreaterFullEqual,GreaterGreater:GreaterGreater,GreaterLess:GreaterLess,GreaterSlantEqual:GreaterSlantEqual,GreaterTilde:GreaterTilde,Gscr:Gscr,gscr:gscr,gsim:gsim,gsime:gsime,gsiml:gsiml,gtcc:gtcc,gtcir:gtcir,gt:gt$3,GT:GT$1,Gt:Gt$1,gtdot:gtdot,gtlPar:gtlPar,gtquest:gtquest,gtrapprox:gtrapprox,gtrarr:gtrarr,gtrdot:gtrdot,gtreqless:gtreqless,gtreqqless:gtreqqless,gtrless:gtrless,gtrsim:gtrsim,gvertneqq:gvertneqq,gvnE:gvnE,Hacek:Hacek,hairsp:hairsp,half:half,hamilt:hamilt,HARDcy:HARDcy,hardcy:hardcy,harrcir:harrcir,harr:harr,hArr:hArr,harrw:harrw,Hat:Hat,hbar:hbar,Hcirc:Hcirc,hcirc:hcirc,hearts:hearts,heartsuit:heartsuit,hellip:hellip,hercon:hercon,hfr:hfr,Hfr:Hfr,HilbertSpace:HilbertSpace,hksearow:hksearow,hkswarow:hkswarow,hoarr:hoarr,homtht:homtht,hookleftarrow:hookleftarrow,hookrightarrow:hookrightarrow,hopf:hopf,Hopf:Hopf,horbar:horbar,HorizontalLine:HorizontalLine,hscr:hscr,Hscr:Hscr,hslash:hslash,Hstrok:Hstrok,hstrok:hstrok,HumpDownHump:HumpDownHump,HumpEqual:HumpEqual,hybull:hybull,hyphen:hyphen,Iacute:Iacute$1,iacute:iacute$1,ic:ic,Icirc:Icirc$1,icirc:icirc$1,Icy:Icy,icy:icy,Idot:Idot,IEcy:IEcy,iecy:iecy,iexcl:iexcl$1,iff:iff,ifr:ifr,Ifr:Ifr,Igrave:Igrave$1,igrave:igrave$1,ii:ii,iiiint:iiiint,iiint:iiint,iinfin:iinfin,iiota:iiota,IJlig:IJlig,ijlig:ijlig,Imacr:Imacr,imacr:imacr,image:image,ImaginaryI:ImaginaryI,imagline:imagline,imagpart:imagpart,imath:imath,Im:Im,imof:imof,imped:imped,Implies:Implies,incare:incare,"in":"∈",infin:infin,infintie:infintie,inodot:inodot,intcal:intcal,int:int,Int:Int,integers:integers,Integral:Integral,intercal:intercal,Intersection:Intersection,intlarhk:intlarhk,intprod:intprod,InvisibleComma:InvisibleComma,InvisibleTimes:InvisibleTimes,IOcy:IOcy,iocy:iocy,Iogon:Iogon,iogon:iogon,Iopf:Iopf,iopf:iopf,Iota:Iota,iota:iota,iprod:iprod,iquest:iquest$1,iscr:iscr,Iscr:Iscr,isin:isin,isindot:isindot,isinE:isinE,isins:isins,isinsv:isinsv,isinv:isinv,it:it$1,Itilde:Itilde,itilde:itilde,Iukcy:Iukcy,iukcy:iukcy,Iuml:Iuml$1,iuml:iuml$1,Jcirc:Jcirc,jcirc:jcirc,Jcy:Jcy,jcy:jcy,Jfr:Jfr,jfr:jfr,jmath:jmath,Jopf:Jopf,jopf:jopf,Jscr:Jscr,jscr:jscr,Jsercy:Jsercy,jsercy:jsercy,Jukcy:Jukcy,jukcy:jukcy,Kappa:Kappa,kappa:kappa,kappav:kappav,Kcedil:Kcedil,kcedil:kcedil,Kcy:Kcy,kcy:kcy,Kfr:Kfr,kfr:kfr,kgreen:kgreen,KHcy:KHcy,khcy:khcy,KJcy:KJcy,kjcy:kjcy,Kopf:Kopf,kopf:kopf,Kscr:Kscr,kscr:kscr,lAarr:lAarr,Lacute:Lacute,lacute:lacute,laemptyv:laemptyv,lagran:lagran,Lambda:Lambda,lambda:lambda,lang:lang,Lang:Lang,langd:langd,langle:langle,lap:lap,Laplacetrf:Laplacetrf,laquo:laquo$1,larrb:larrb,larrbfs:larrbfs,larr:larr,Larr:Larr,lArr:lArr,larrfs:larrfs,larrhk:larrhk,larrlp:larrlp,larrpl:larrpl,larrsim:larrsim,larrtl:larrtl,latail:latail,lAtail:lAtail,lat:lat,late:late,lates:lates,lbarr:lbarr,lBarr:lBarr,lbbrk:lbbrk,lbrace:lbrace,lbrack:lbrack,lbrke:lbrke,lbrksld:lbrksld,lbrkslu:lbrkslu,Lcaron:Lcaron,lcaron:lcaron,Lcedil:Lcedil,lcedil:lcedil,lceil:lceil,lcub:lcub,Lcy:Lcy,lcy:lcy,ldca:ldca,ldquo:ldquo,ldquor:ldquor,ldrdhar:ldrdhar,ldrushar:ldrushar,ldsh:ldsh,le:le$1,lE:lE,LeftAngleBracket:LeftAngleBracket,LeftArrowBar:LeftArrowBar,leftarrow:leftarrow,LeftArrow:LeftArrow,Leftarrow:Leftarrow,LeftArrowRightArrow:LeftArrowRightArrow,leftarrowtail:leftarrowtail,LeftCeiling:LeftCeiling,LeftDoubleBracket:LeftDoubleBracket,LeftDownTeeVector:LeftDownTeeVector,LeftDownVectorBar:LeftDownVectorBar,LeftDownVector:LeftDownVector,LeftFloor:LeftFloor,leftharpoondown:leftharpoondown,leftharpoonup:leftharpoonup,leftleftarrows:leftleftarrows,leftrightarrow:leftrightarrow,LeftRightArrow:LeftRightArrow,Leftrightarrow:Leftrightarrow,leftrightarrows:leftrightarrows,leftrightharpoons:leftrightharpoons,leftrightsquigarrow:leftrightsquigarrow,LeftRightVector:LeftRightVector,LeftTeeArrow:LeftTeeArrow,LeftTee:LeftTee,LeftTeeVector:LeftTeeVector,leftthreetimes:leftthreetimes,LeftTriangleBar:LeftTriangleBar,LeftTriangle:LeftTriangle,LeftTriangleEqual:LeftTriangleEqual,LeftUpDownVector:LeftUpDownVector,LeftUpTeeVector:LeftUpTeeVector,LeftUpVectorBar:LeftUpVectorBar,LeftUpVector:LeftUpVector,LeftVectorBar:LeftVectorBar,LeftVector:LeftVector,lEg:lEg,leg:leg,leq:leq,leqq:leqq,leqslant:leqslant,lescc:lescc,les:les,lesdot:lesdot,lesdoto:lesdoto,lesdotor:lesdotor,lesg:lesg,lesges:lesges,lessapprox:lessapprox,lessdot:lessdot,lesseqgtr:lesseqgtr,lesseqqgtr:lesseqqgtr,LessEqualGreater:LessEqualGreater,LessFullEqual:LessFullEqual,LessGreater:LessGreater,lessgtr:lessgtr,LessLess:LessLess,lesssim:lesssim,LessSlantEqual:LessSlantEqual,LessTilde:LessTilde,lfisht:lfisht,lfloor:lfloor,Lfr:Lfr,lfr:lfr,lg:lg,lgE:lgE,lHar:lHar,lhard:lhard,lharu:lharu,lharul:lharul,lhblk:lhblk,LJcy:LJcy,ljcy:ljcy,llarr:llarr,ll:ll,Ll:Ll,llcorner:llcorner,Lleftarrow:Lleftarrow,llhard:llhard,lltri:lltri,Lmidot:Lmidot,lmidot:lmidot,lmoustache:lmoustache,lmoust:lmoust,lnap:lnap,lnapprox:lnapprox,lne:lne,lnE:lnE,lneq:lneq,lneqq:lneqq,lnsim:lnsim,loang:loang,loarr:loarr,lobrk:lobrk,longleftarrow:longleftarrow,LongLeftArrow:LongLeftArrow,Longleftarrow:Longleftarrow,longleftrightarrow:longleftrightarrow,LongLeftRightArrow:LongLeftRightArrow,Longleftrightarrow:Longleftrightarrow,longmapsto:longmapsto,longrightarrow:longrightarrow,LongRightArrow:LongRightArrow,Longrightarrow:Longrightarrow,looparrowleft:looparrowleft,looparrowright:looparrowright,lopar:lopar,Lopf:Lopf,lopf:lopf,loplus:loplus,lotimes:lotimes,lowast:lowast,lowbar:lowbar,LowerLeftArrow:LowerLeftArrow,LowerRightArrow:LowerRightArrow,loz:loz,lozenge:lozenge,lozf:lozf,lpar:lpar,lparlt:lparlt,lrarr:lrarr,lrcorner:lrcorner,lrhar:lrhar,lrhard:lrhard,lrm:lrm,lrtri:lrtri,lsaquo:lsaquo,lscr:lscr,Lscr:Lscr,lsh:lsh,Lsh:Lsh,lsim:lsim,lsime:lsime,lsimg:lsimg,lsqb:lsqb,lsquo:lsquo,lsquor:lsquor,Lstrok:Lstrok,lstrok:lstrok,ltcc:ltcc,ltcir:ltcir,lt:lt$3,LT:LT$1,Lt:Lt$1,ltdot:ltdot,lthree:lthree,ltimes:ltimes,ltlarr:ltlarr,ltquest:ltquest,ltri:ltri,ltrie:ltrie,ltrif:ltrif,ltrPar:ltrPar,lurdshar:lurdshar,luruhar:luruhar,lvertneqq:lvertneqq,lvnE:lvnE,macr:macr$1,male:male,malt:malt,maltese:maltese,"Map":"⤅",map:map$1,mapsto:mapsto,mapstodown:mapstodown,mapstoleft:mapstoleft,mapstoup:mapstoup,marker:marker,mcomma:mcomma,Mcy:Mcy,mcy:mcy,mdash:mdash,mDDot:mDDot,measuredangle:measuredangle,MediumSpace:MediumSpace,Mellintrf:Mellintrf,Mfr:Mfr,mfr:mfr,mho:mho,micro:micro$1,midast:midast,midcir:midcir,mid:mid,middot:middot$1,minusb:minusb,minus:minus,minusd:minusd,minusdu:minusdu,MinusPlus:MinusPlus,mlcp:mlcp,mldr:mldr,mnplus:mnplus,models:models,Mopf:Mopf,mopf:mopf,mp:mp,mscr:mscr,Mscr:Mscr,mstpos:mstpos,Mu:Mu,mu:mu,multimap:multimap,mumap:mumap,nabla:nabla,Nacute:Nacute,nacute:nacute,nang:nang,nap:nap,napE:napE,napid:napid,napos:napos,napprox:napprox,natural:natural,naturals:naturals,natur:natur,nbsp:nbsp$1,nbump:nbump,nbumpe:nbumpe,ncap:ncap,Ncaron:Ncaron,ncaron:ncaron,Ncedil:Ncedil,ncedil:ncedil,ncong:ncong,ncongdot:ncongdot,ncup:ncup,Ncy:Ncy,ncy:ncy,ndash:ndash,nearhk:nearhk,nearr:nearr,neArr:neArr,nearrow:nearrow,ne:ne$1,nedot:nedot,NegativeMediumSpace:NegativeMediumSpace,NegativeThickSpace:NegativeThickSpace,NegativeThinSpace:NegativeThinSpace,NegativeVeryThinSpace:NegativeVeryThinSpace,nequiv:nequiv,nesear:nesear,nesim:nesim,NestedGreaterGreater:NestedGreaterGreater,NestedLessLess:NestedLessLess,NewLine:NewLine,nexist:nexist,nexists:nexists,Nfr:Nfr,nfr:nfr,ngE:ngE,nge:nge,ngeq:ngeq,ngeqq:ngeqq,ngeqslant:ngeqslant,nges:nges,nGg:nGg,ngsim:ngsim,nGt:nGt,ngt:ngt,ngtr:ngtr,nGtv:nGtv,nharr:nharr,nhArr:nhArr,nhpar:nhpar,ni:ni,nis:nis,nisd:nisd,niv:niv,NJcy:NJcy,njcy:njcy,nlarr:nlarr,nlArr:nlArr,nldr:nldr,nlE:nlE,nle:nle,nleftarrow:nleftarrow,nLeftarrow:nLeftarrow,nleftrightarrow:nleftrightarrow,nLeftrightarrow:nLeftrightarrow,nleq:nleq,nleqq:nleqq,nleqslant:nleqslant,nles:nles,nless:nless,nLl:nLl,nlsim:nlsim,nLt:nLt,nlt:nlt,nltri:nltri,nltrie:nltrie,nLtv:nLtv,nmid:nmid,NoBreak:NoBreak,NonBreakingSpace:NonBreakingSpace,nopf:nopf,Nopf:Nopf,Not:Not,not:not$1,NotCongruent:NotCongruent,NotCupCap:NotCupCap,NotDoubleVerticalBar:NotDoubleVerticalBar,NotElement:NotElement,NotEqual:NotEqual,NotEqualTilde:NotEqualTilde,NotExists:NotExists,NotGreater:NotGreater,NotGreaterEqual:NotGreaterEqual,NotGreaterFullEqual:NotGreaterFullEqual,NotGreaterGreater:NotGreaterGreater,NotGreaterLess:NotGreaterLess,NotGreaterSlantEqual:NotGreaterSlantEqual,NotGreaterTilde:NotGreaterTilde,NotHumpDownHump:NotHumpDownHump,NotHumpEqual:NotHumpEqual,notin:notin,notindot:notindot,notinE:notinE,notinva:notinva,notinvb:notinvb,notinvc:notinvc,NotLeftTriangleBar:NotLeftTriangleBar,NotLeftTriangle:NotLeftTriangle,NotLeftTriangleEqual:NotLeftTriangleEqual,NotLess:NotLess,NotLessEqual:NotLessEqual,NotLessGreater:NotLessGreater,NotLessLess:NotLessLess,NotLessSlantEqual:NotLessSlantEqual,NotLessTilde:NotLessTilde,NotNestedGreaterGreater:NotNestedGreaterGreater,NotNestedLessLess:NotNestedLessLess,notni:notni,notniva:notniva,notnivb:notnivb,notnivc:notnivc,NotPrecedes:NotPrecedes,NotPrecedesEqual:NotPrecedesEqual,NotPrecedesSlantEqual:NotPrecedesSlantEqual,NotReverseElement:NotReverseElement,NotRightTriangleBar:NotRightTriangleBar,NotRightTriangle:NotRightTriangle,NotRightTriangleEqual:NotRightTriangleEqual,NotSquareSubset:NotSquareSubset,NotSquareSubsetEqual:NotSquareSubsetEqual,NotSquareSuperset:NotSquareSuperset,NotSquareSupersetEqual:NotSquareSupersetEqual,NotSubset:NotSubset,NotSubsetEqual:NotSubsetEqual,NotSucceeds:NotSucceeds,NotSucceedsEqual:NotSucceedsEqual,NotSucceedsSlantEqual:NotSucceedsSlantEqual,NotSucceedsTilde:NotSucceedsTilde,NotSuperset:NotSuperset,NotSupersetEqual:NotSupersetEqual,NotTilde:NotTilde,NotTildeEqual:NotTildeEqual,NotTildeFullEqual:NotTildeFullEqual,NotTildeTilde:NotTildeTilde,NotVerticalBar:NotVerticalBar,nparallel:nparallel,npar:npar,nparsl:nparsl,npart:npart,npolint:npolint,npr:npr,nprcue:nprcue,nprec:nprec,npreceq:npreceq,npre:npre,nrarrc:nrarrc,nrarr:nrarr,nrArr:nrArr,nrarrw:nrarrw,nrightarrow:nrightarrow,nRightarrow:nRightarrow,nrtri:nrtri,nrtrie:nrtrie,nsc:nsc,nsccue:nsccue,nsce:nsce,Nscr:Nscr,nscr:nscr,nshortmid:nshortmid,nshortparallel:nshortparallel,nsim:nsim,nsime:nsime,nsimeq:nsimeq,nsmid:nsmid,nspar:nspar,nsqsube:nsqsube,nsqsupe:nsqsupe,nsub:nsub,nsubE:nsubE,nsube:nsube,nsubset:nsubset,nsubseteq:nsubseteq,nsubseteqq:nsubseteqq,nsucc:nsucc,nsucceq:nsucceq,nsup:nsup,nsupE:nsupE,nsupe:nsupe,nsupset:nsupset,nsupseteq:nsupseteq,nsupseteqq:nsupseteqq,ntgl:ntgl,Ntilde:Ntilde$1,ntilde:ntilde$1,ntlg:ntlg,ntriangleleft:ntriangleleft,ntrianglelefteq:ntrianglelefteq,ntriangleright:ntriangleright,ntrianglerighteq:ntrianglerighteq,Nu:Nu,nu:nu,num:num,numero:numero,numsp:numsp,nvap:nvap,nvdash:nvdash,nvDash:nvDash,nVdash:nVdash,nVDash:nVDash,nvge:nvge,nvgt:nvgt,nvHarr:nvHarr,nvinfin:nvinfin,nvlArr:nvlArr,nvle:nvle,nvlt:nvlt,nvltrie:nvltrie,nvrArr:nvrArr,nvrtrie:nvrtrie,nvsim:nvsim,nwarhk:nwarhk,nwarr:nwarr,nwArr:nwArr,nwarrow:nwarrow,nwnear:nwnear,Oacute:Oacute$1,oacute:oacute$1,oast:oast,Ocirc:Ocirc$1,ocirc:ocirc$1,ocir:ocir,Ocy:Ocy,ocy:ocy,odash:odash,Odblac:Odblac,odblac:odblac,odiv:odiv,odot:odot,odsold:odsold,OElig:OElig,oelig:oelig,ofcir:ofcir,Ofr:Ofr,ofr:ofr,ogon:ogon,Ograve:Ograve$1,ograve:ograve$1,ogt:ogt,ohbar:ohbar,ohm:ohm,oint:oint,olarr:olarr,olcir:olcir,olcross:olcross,oline:oline,olt:olt,Omacr:Omacr,omacr:omacr,Omega:Omega,omega:omega,Omicron:Omicron,omicron:omicron,omid:omid,ominus:ominus,Oopf:Oopf,oopf:oopf,opar:opar,OpenCurlyDoubleQuote:OpenCurlyDoubleQuote,OpenCurlyQuote:OpenCurlyQuote,operp:operp,oplus:oplus,orarr:orarr,Or:Or,or:or,ord:ord,order:order,orderof:orderof,ordf:ordf$1,ordm:ordm$1,origof:origof,oror:oror,orslope:orslope,orv:orv,oS:oS,Oscr:Oscr,oscr:oscr,Oslash:Oslash$1,oslash:oslash$1,osol:osol,Otilde:Otilde$1,otilde:otilde$1,otimesas:otimesas,Otimes:Otimes,otimes:otimes,Ouml:Ouml$1,ouml:ouml$1,ovbar:ovbar,OverBar:OverBar,OverBrace:OverBrace,OverBracket:OverBracket,OverParenthesis:OverParenthesis,para:para$1,parallel:parallel,par:par,parsim:parsim,parsl:parsl,part:part,PartialD:PartialD,Pcy:Pcy,pcy:pcy,percnt:percnt,period:period,permil:permil,perp:perp,pertenk:pertenk,Pfr:Pfr,pfr:pfr,Phi:Phi,phi:phi,phiv:phiv,phmmat:phmmat,phone:phone,Pi:Pi,pi:pi,pitchfork:pitchfork,piv:piv,planck:planck,planckh:planckh,plankv:plankv,plusacir:plusacir,plusb:plusb,pluscir:pluscir,plus:plus,plusdo:plusdo,plusdu:plusdu,pluse:pluse,PlusMinus:PlusMinus,plusmn:plusmn$1,plussim:plussim,plustwo:plustwo,pm:pm,Poincareplane:Poincareplane,pointint:pointint,popf:popf,Popf:Popf,pound:pound$1,prap:prap,Pr:Pr,pr:pr,prcue:prcue,precapprox:precapprox,prec:prec,preccurlyeq:preccurlyeq,Precedes:Precedes,PrecedesEqual:PrecedesEqual,PrecedesSlantEqual:PrecedesSlantEqual,PrecedesTilde:PrecedesTilde,preceq:preceq,precnapprox:precnapprox,precneqq:precneqq,precnsim:precnsim,pre:pre,prE:prE,precsim:precsim,prime:prime,Prime:Prime,primes:primes,prnap:prnap,prnE:prnE,prnsim:prnsim,prod:prod,Product:Product,profalar:profalar,profline:profline,profsurf:profsurf,prop:prop$1,Proportional:Proportional,Proportion:Proportion,propto:propto,prsim:prsim,prurel:prurel,Pscr:Pscr,pscr:pscr,Psi:Psi,psi:psi,puncsp:puncsp,Qfr:Qfr,qfr:qfr,qint:qint,qopf:qopf,Qopf:Qopf,qprime:qprime,Qscr:Qscr,qscr:qscr,quaternions:quaternions,quatint:quatint,quest:quest,questeq:questeq,quot:quot$2,QUOT:QUOT$1,rAarr:rAarr,race:race,Racute:Racute,racute:racute,radic:radic,raemptyv:raemptyv,rang:rang,Rang:Rang,rangd:rangd,range:range,rangle:rangle,raquo:raquo$1,rarrap:rarrap,rarrb:rarrb,rarrbfs:rarrbfs,rarrc:rarrc,rarr:rarr,Rarr:Rarr,rArr:rArr,rarrfs:rarrfs,rarrhk:rarrhk,rarrlp:rarrlp,rarrpl:rarrpl,rarrsim:rarrsim,Rarrtl:Rarrtl,rarrtl:rarrtl,rarrw:rarrw,ratail:ratail,rAtail:rAtail,ratio:ratio,rationals:rationals,rbarr:rbarr,rBarr:rBarr,RBarr:RBarr,rbbrk:rbbrk,rbrace:rbrace,rbrack:rbrack,rbrke:rbrke,rbrksld:rbrksld,rbrkslu:rbrkslu,Rcaron:Rcaron,rcaron:rcaron,Rcedil:Rcedil,rcedil:rcedil,rceil:rceil,rcub:rcub,Rcy:Rcy,rcy:rcy,rdca:rdca,rdldhar:rdldhar,rdquo:rdquo,rdquor:rdquor,rdsh:rdsh,real:real,realine:realine,realpart:realpart,reals:reals,Re:Re$1,rect:rect,reg:reg$1,REG:REG$1,ReverseElement:ReverseElement,ReverseEquilibrium:ReverseEquilibrium,ReverseUpEquilibrium:ReverseUpEquilibrium,rfisht:rfisht,rfloor:rfloor,rfr:rfr,Rfr:Rfr,rHar:rHar,rhard:rhard,rharu:rharu,rharul:rharul,Rho:Rho,rho:rho,rhov:rhov,RightAngleBracket:RightAngleBracket,RightArrowBar:RightArrowBar,rightarrow:rightarrow,RightArrow:RightArrow,Rightarrow:Rightarrow,RightArrowLeftArrow:RightArrowLeftArrow,rightarrowtail:rightarrowtail,RightCeiling:RightCeiling,RightDoubleBracket:RightDoubleBracket,RightDownTeeVector:RightDownTeeVector,RightDownVectorBar:RightDownVectorBar,RightDownVector:RightDownVector,RightFloor:RightFloor,rightharpoondown:rightharpoondown,rightharpoonup:rightharpoonup,rightleftarrows:rightleftarrows,rightleftharpoons:rightleftharpoons,rightrightarrows:rightrightarrows,rightsquigarrow:rightsquigarrow,RightTeeArrow:RightTeeArrow,RightTee:RightTee,RightTeeVector:RightTeeVector,rightthreetimes:rightthreetimes,RightTriangleBar:RightTriangleBar,RightTriangle:RightTriangle,RightTriangleEqual:RightTriangleEqual,RightUpDownVector:RightUpDownVector,RightUpTeeVector:RightUpTeeVector,RightUpVectorBar:RightUpVectorBar,RightUpVector:RightUpVector,RightVectorBar:RightVectorBar,RightVector:RightVector,ring:ring,risingdotseq:risingdotseq,rlarr:rlarr,rlhar:rlhar,rlm:rlm,rmoustache:rmoustache,rmoust:rmoust,rnmid:rnmid,roang:roang,roarr:roarr,robrk:robrk,ropar:ropar,ropf:ropf,Ropf:Ropf,roplus:roplus,rotimes:rotimes,RoundImplies:RoundImplies,rpar:rpar,rpargt:rpargt,rppolint:rppolint,rrarr:rrarr,Rrightarrow:Rrightarrow,rsaquo:rsaquo,rscr:rscr,Rscr:Rscr,rsh:rsh,Rsh:Rsh,rsqb:rsqb,rsquo:rsquo,rsquor:rsquor,rthree:rthree,rtimes:rtimes,rtri:rtri,rtrie:rtrie,rtrif:rtrif,rtriltri:rtriltri,RuleDelayed:RuleDelayed,ruluhar:ruluhar,rx:rx,Sacute:Sacute,sacute:sacute,sbquo:sbquo,scap:scap,Scaron:Scaron,scaron:scaron,Sc:Sc,sc:sc,sccue:sccue,sce:sce,scE:scE,Scedil:Scedil,scedil:scedil,Scirc:Scirc,scirc:scirc,scnap:scnap,scnE:scnE,scnsim:scnsim,scpolint:scpolint,scsim:scsim,Scy:Scy,scy:scy,sdotb:sdotb,sdot:sdot,sdote:sdote,searhk:searhk,searr:searr,seArr:seArr,searrow:searrow,sect:sect$1,semi:semi,seswar:seswar,setminus:setminus,setmn:setmn,sext:sext,Sfr:Sfr,sfr:sfr,sfrown:sfrown,sharp:sharp,SHCHcy:SHCHcy,shchcy:shchcy,SHcy:SHcy,shcy:shcy,ShortDownArrow:ShortDownArrow,ShortLeftArrow:ShortLeftArrow,shortmid:shortmid,shortparallel:shortparallel,ShortRightArrow:ShortRightArrow,ShortUpArrow:ShortUpArrow,shy:shy$1,Sigma:Sigma,sigma:sigma,sigmaf:sigmaf,sigmav:sigmav,sim:sim,simdot:simdot,sime:sime,simeq:simeq,simg:simg,simgE:simgE,siml:siml,simlE:simlE,simne:simne,simplus:simplus,simrarr:simrarr,slarr:slarr,SmallCircle:SmallCircle,smallsetminus:smallsetminus,smashp:smashp,smeparsl:smeparsl,smid:smid,smile:smile,smt:smt,smte:smte,smtes:smtes,SOFTcy:SOFTcy,softcy:softcy,solbar:solbar,solb:solb,sol:sol,Sopf:Sopf,sopf:sopf,spades:spades,spadesuit:spadesuit,spar:spar,sqcap:sqcap,sqcaps:sqcaps,sqcup:sqcup,sqcups:sqcups,Sqrt:Sqrt,sqsub:sqsub,sqsube:sqsube,sqsubset:sqsubset,sqsubseteq:sqsubseteq,sqsup:sqsup,sqsupe:sqsupe,sqsupset:sqsupset,sqsupseteq:sqsupseteq,square:square,Square:Square,SquareIntersection:SquareIntersection,SquareSubset:SquareSubset,SquareSubsetEqual:SquareSubsetEqual,SquareSuperset:SquareSuperset,SquareSupersetEqual:SquareSupersetEqual,SquareUnion:SquareUnion,squarf:squarf,squ:squ,squf:squf,srarr:srarr,Sscr:Sscr,sscr:sscr,ssetmn:ssetmn,ssmile:ssmile,sstarf:sstarf,Star:Star,star:star,starf:starf,straightepsilon:straightepsilon,straightphi:straightphi,strns:strns,sub:sub,Sub:Sub,subdot:subdot,subE:subE,sube:sube,subedot:subedot,submult:submult,subnE:subnE,subne:subne,subplus:subplus,subrarr:subrarr,subset:subset,Subset:Subset,subseteq:subseteq,subseteqq:subseteqq,SubsetEqual:SubsetEqual,subsetneq:subsetneq,subsetneqq:subsetneqq,subsim:subsim,subsub:subsub,subsup:subsup,succapprox:succapprox,succ:succ,succcurlyeq:succcurlyeq,Succeeds:Succeeds,SucceedsEqual:SucceedsEqual,SucceedsSlantEqual:SucceedsSlantEqual,SucceedsTilde:SucceedsTilde,succeq:succeq,succnapprox:succnapprox,succneqq:succneqq,succnsim:succnsim,succsim:succsim,SuchThat:SuchThat,sum:sum,Sum:Sum,sung:sung,sup1:sup1$1,sup2:sup2$1,sup3:sup3$1,sup:sup,Sup:Sup,supdot:supdot,supdsub:supdsub,supE:supE,supe:supe,supedot:supedot,Superset:Superset,SupersetEqual:SupersetEqual,suphsol:suphsol,suphsub:suphsub,suplarr:suplarr,supmult:supmult,supnE:supnE,supne:supne,supplus:supplus,supset:supset,Supset:Supset,supseteq:supseteq,supseteqq:supseteqq,supsetneq:supsetneq,supsetneqq:supsetneqq,supsim:supsim,supsub:supsub,supsup:supsup,swarhk:swarhk,swarr:swarr,swArr:swArr,swarrow:swarrow,swnwar:swnwar,szlig:szlig$1,Tab:Tab,target:target,Tau:Tau,tau:tau,tbrk:tbrk,Tcaron:Tcaron,tcaron:tcaron,Tcedil:Tcedil,tcedil:tcedil,Tcy:Tcy,tcy:tcy,tdot:tdot,telrec:telrec,Tfr:Tfr,tfr:tfr,there4:there4,therefore:therefore,Therefore:Therefore,Theta:Theta,theta:theta,thetasym:thetasym,thetav:thetav,thickapprox:thickapprox,thicksim:thicksim,ThickSpace:ThickSpace,ThinSpace:ThinSpace,thinsp:thinsp,thkap:thkap,thksim:thksim,THORN:THORN$1,thorn:thorn$1,tilde:tilde,Tilde:Tilde,TildeEqual:TildeEqual,TildeFullEqual:TildeFullEqual,TildeTilde:TildeTilde,timesbar:timesbar,timesb:timesb,times:times$1,timesd:timesd,tint:tint,toea:toea,topbot:topbot,topcir:topcir,top:top,Topf:Topf,topf:topf,topfork:topfork,tosa:tosa,tprime:tprime,trade:trade,TRADE:TRADE,triangle:triangle,triangledown:triangledown,triangleleft:triangleleft,trianglelefteq:trianglelefteq,triangleq:triangleq,triangleright:triangleright,trianglerighteq:trianglerighteq,tridot:tridot,trie:trie,triminus:triminus,TripleDot:TripleDot,triplus:triplus,trisb:trisb,tritime:tritime,trpezium:trpezium,Tscr:Tscr,tscr:tscr,TScy:TScy,tscy:tscy,TSHcy:TSHcy,tshcy:tshcy,Tstrok:Tstrok,tstrok:tstrok,twixt:twixt,twoheadleftarrow:twoheadleftarrow,twoheadrightarrow:twoheadrightarrow,Uacute:Uacute$1,uacute:uacute$1,uarr:uarr,Uarr:Uarr,uArr:uArr,Uarrocir:Uarrocir,Ubrcy:Ubrcy,ubrcy:ubrcy,Ubreve:Ubreve,ubreve:ubreve,Ucirc:Ucirc$1,ucirc:ucirc$1,Ucy:Ucy,ucy:ucy,udarr:udarr,Udblac:Udblac,udblac:udblac,udhar:udhar,ufisht:ufisht,Ufr:Ufr,ufr:ufr,Ugrave:Ugrave$1,ugrave:ugrave$1,uHar:uHar,uharl:uharl,uharr:uharr,uhblk:uhblk,ulcorn:ulcorn,ulcorner:ulcorner,ulcrop:ulcrop,ultri:ultri,Umacr:Umacr,umacr:umacr,uml:uml$1,UnderBar:UnderBar,UnderBrace:UnderBrace,UnderBracket:UnderBracket,UnderParenthesis:UnderParenthesis,Union:Union,UnionPlus:UnionPlus,Uogon:Uogon,uogon:uogon,Uopf:Uopf,uopf:uopf,UpArrowBar:UpArrowBar,uparrow:uparrow,UpArrow:UpArrow,Uparrow:Uparrow,UpArrowDownArrow:UpArrowDownArrow,updownarrow:updownarrow,UpDownArrow:UpDownArrow,Updownarrow:Updownarrow,UpEquilibrium:UpEquilibrium,upharpoonleft:upharpoonleft,upharpoonright:upharpoonright,uplus:uplus,UpperLeftArrow:UpperLeftArrow,UpperRightArrow:UpperRightArrow,upsi:upsi,Upsi:Upsi,upsih:upsih,Upsilon:Upsilon,upsilon:upsilon,UpTeeArrow:UpTeeArrow,UpTee:UpTee,upuparrows:upuparrows,urcorn:urcorn,urcorner:urcorner,urcrop:urcrop,Uring:Uring,uring:uring,urtri:urtri,Uscr:Uscr,uscr:uscr,utdot:utdot,Utilde:Utilde,utilde:utilde,utri:utri,utrif:utrif,uuarr:uuarr,Uuml:Uuml$1,uuml:uuml$1,uwangle:uwangle,vangrt:vangrt,varepsilon:varepsilon,varkappa:varkappa,varnothing:varnothing,varphi:varphi,varpi:varpi,varpropto:varpropto,varr:varr,vArr:vArr,varrho:varrho,varsigma:varsigma,varsubsetneq:varsubsetneq,varsubsetneqq:varsubsetneqq,varsupsetneq:varsupsetneq,varsupsetneqq:varsupsetneqq,vartheta:vartheta,vartriangleleft:vartriangleleft,vartriangleright:vartriangleright,vBar:vBar,Vbar:Vbar,vBarv:vBarv,Vcy:Vcy,vcy:vcy,vdash:vdash,vDash:vDash,Vdash:Vdash,VDash:VDash,Vdashl:Vdashl,veebar:veebar,vee:vee,Vee:Vee,veeeq:veeeq,vellip:vellip,verbar:verbar,Verbar:Verbar,vert:vert,Vert:Vert,VerticalBar:VerticalBar,VerticalLine:VerticalLine,VerticalSeparator:VerticalSeparator,VerticalTilde:VerticalTilde,VeryThinSpace:VeryThinSpace,Vfr:Vfr,vfr:vfr,vltri:vltri,vnsub:vnsub,vnsup:vnsup,Vopf:Vopf,vopf:vopf,vprop:vprop,vrtri:vrtri,Vscr:Vscr,vscr:vscr,vsubnE:vsubnE,vsubne:vsubne,vsupnE:vsupnE,vsupne:vsupne,Vvdash:Vvdash,vzigzag:vzigzag,Wcirc:Wcirc,wcirc:wcirc,wedbar:wedbar,wedge:wedge,Wedge:Wedge,wedgeq:wedgeq,weierp:weierp,Wfr:Wfr,wfr:wfr,Wopf:Wopf,wopf:wopf,wp:wp,wr:wr,wreath:wreath,Wscr:Wscr,wscr:wscr,xcap:xcap,xcirc:xcirc,xcup:xcup,xdtri:xdtri,Xfr:Xfr,xfr:xfr,xharr:xharr,xhArr:xhArr,Xi:Xi,xi:xi,xlarr:xlarr,xlArr:xlArr,xmap:xmap,xnis:xnis,xodot:xodot,Xopf:Xopf,xopf:xopf,xoplus:xoplus,xotime:xotime,xrarr:xrarr,xrArr:xrArr,Xscr:Xscr,xscr:xscr,xsqcup:xsqcup,xuplus:xuplus,xutri:xutri,xvee:xvee,xwedge:xwedge,Yacute:Yacute$1,yacute:yacute$1,YAcy:YAcy,yacy:yacy,Ycirc:Ycirc,ycirc:ycirc,Ycy:Ycy,ycy:ycy,yen:yen$1,Yfr:Yfr,yfr:yfr,YIcy:YIcy,yicy:yicy,Yopf:Yopf,yopf:yopf,Yscr:Yscr,yscr:yscr,YUcy:YUcy,yucy:yucy,yuml:yuml$1,Yuml:Yuml,Zacute:Zacute,zacute:zacute,Zcaron:Zcaron,zcaron:zcaron,Zcy:Zcy,zcy:zcy,Zdot:Zdot,zdot:zdot,zeetrf:zeetrf,ZeroWidthSpace:ZeroWidthSpace,Zeta:Zeta,zeta:zeta,zfr:zfr,Zfr:Zfr,ZHcy:ZHcy,zhcy:zhcy,zigrarr:zigrarr,zopf:zopf,Zopf:Zopf,Zscr:Zscr,zscr:zscr,zwj:zwj,zwnj:zwnj};

    var entities$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Aacute: Aacute$1,
        aacute: aacute$1,
        Abreve: Abreve,
        abreve: abreve,
        ac: ac,
        acd: acd,
        acE: acE,
        Acirc: Acirc$1,
        acirc: acirc$1,
        acute: acute$1,
        Acy: Acy,
        acy: acy,
        AElig: AElig$1,
        aelig: aelig$1,
        af: af,
        Afr: Afr,
        afr: afr,
        Agrave: Agrave$1,
        agrave: agrave$1,
        alefsym: alefsym,
        aleph: aleph,
        Alpha: Alpha,
        alpha: alpha,
        Amacr: Amacr,
        amacr: amacr,
        amalg: amalg,
        amp: amp$2,
        AMP: AMP$1,
        andand: andand,
        And: And,
        and: and,
        andd: andd,
        andslope: andslope,
        andv: andv,
        ang: ang,
        ange: ange,
        angle: angle,
        angmsdaa: angmsdaa,
        angmsdab: angmsdab,
        angmsdac: angmsdac,
        angmsdad: angmsdad,
        angmsdae: angmsdae,
        angmsdaf: angmsdaf,
        angmsdag: angmsdag,
        angmsdah: angmsdah,
        angmsd: angmsd,
        angrt: angrt,
        angrtvb: angrtvb,
        angrtvbd: angrtvbd,
        angsph: angsph,
        angst: angst,
        angzarr: angzarr,
        Aogon: Aogon,
        aogon: aogon,
        Aopf: Aopf,
        aopf: aopf,
        apacir: apacir,
        ap: ap,
        apE: apE,
        ape: ape,
        apid: apid,
        apos: apos$1,
        ApplyFunction: ApplyFunction,
        approx: approx,
        approxeq: approxeq,
        Aring: Aring$1,
        aring: aring$1,
        Ascr: Ascr,
        ascr: ascr,
        Assign: Assign,
        ast: ast,
        asymp: asymp,
        asympeq: asympeq,
        Atilde: Atilde$1,
        atilde: atilde$1,
        Auml: Auml$1,
        auml: auml$1,
        awconint: awconint,
        awint: awint,
        backcong: backcong,
        backepsilon: backepsilon,
        backprime: backprime,
        backsim: backsim,
        backsimeq: backsimeq,
        Backslash: Backslash,
        Barv: Barv,
        barvee: barvee,
        barwed: barwed,
        Barwed: Barwed,
        barwedge: barwedge,
        bbrk: bbrk,
        bbrktbrk: bbrktbrk,
        bcong: bcong,
        Bcy: Bcy,
        bcy: bcy,
        bdquo: bdquo,
        becaus: becaus,
        because: because,
        Because: Because,
        bemptyv: bemptyv,
        bepsi: bepsi,
        bernou: bernou,
        Bernoullis: Bernoullis,
        Beta: Beta,
        beta: beta,
        beth: beth,
        between: between,
        Bfr: Bfr,
        bfr: bfr,
        bigcap: bigcap,
        bigcirc: bigcirc,
        bigcup: bigcup,
        bigodot: bigodot,
        bigoplus: bigoplus,
        bigotimes: bigotimes,
        bigsqcup: bigsqcup,
        bigstar: bigstar,
        bigtriangledown: bigtriangledown,
        bigtriangleup: bigtriangleup,
        biguplus: biguplus,
        bigvee: bigvee,
        bigwedge: bigwedge,
        bkarow: bkarow,
        blacklozenge: blacklozenge,
        blacksquare: blacksquare,
        blacktriangle: blacktriangle,
        blacktriangledown: blacktriangledown,
        blacktriangleleft: blacktriangleleft,
        blacktriangleright: blacktriangleright,
        blank: blank,
        blk12: blk12,
        blk14: blk14,
        blk34: blk34,
        block: block,
        bne: bne,
        bnequiv: bnequiv,
        bNot: bNot,
        bnot: bnot,
        Bopf: Bopf,
        bopf: bopf,
        bot: bot,
        bottom: bottom,
        bowtie: bowtie,
        boxbox: boxbox,
        boxdl: boxdl,
        boxdL: boxdL,
        boxDl: boxDl,
        boxDL: boxDL,
        boxdr: boxdr,
        boxdR: boxdR,
        boxDr: boxDr,
        boxDR: boxDR,
        boxh: boxh,
        boxH: boxH,
        boxhd: boxhd,
        boxHd: boxHd,
        boxhD: boxhD,
        boxHD: boxHD,
        boxhu: boxhu,
        boxHu: boxHu,
        boxhU: boxhU,
        boxHU: boxHU,
        boxminus: boxminus,
        boxplus: boxplus,
        boxtimes: boxtimes,
        boxul: boxul,
        boxuL: boxuL,
        boxUl: boxUl,
        boxUL: boxUL,
        boxur: boxur,
        boxuR: boxuR,
        boxUr: boxUr,
        boxUR: boxUR,
        boxv: boxv,
        boxV: boxV,
        boxvh: boxvh,
        boxvH: boxvH,
        boxVh: boxVh,
        boxVH: boxVH,
        boxvl: boxvl,
        boxvL: boxvL,
        boxVl: boxVl,
        boxVL: boxVL,
        boxvr: boxvr,
        boxvR: boxvR,
        boxVr: boxVr,
        boxVR: boxVR,
        bprime: bprime,
        breve: breve,
        Breve: Breve,
        brvbar: brvbar$1,
        bscr: bscr,
        Bscr: Bscr,
        bsemi: bsemi,
        bsim: bsim,
        bsime: bsime,
        bsolb: bsolb,
        bsol: bsol,
        bsolhsub: bsolhsub,
        bull: bull,
        bullet: bullet,
        bump: bump,
        bumpE: bumpE,
        bumpe: bumpe,
        Bumpeq: Bumpeq,
        bumpeq: bumpeq,
        Cacute: Cacute,
        cacute: cacute,
        capand: capand,
        capbrcup: capbrcup,
        capcap: capcap,
        cap: cap,
        Cap: Cap,
        capcup: capcup,
        capdot: capdot,
        CapitalDifferentialD: CapitalDifferentialD,
        caps: caps,
        caret: caret,
        caron: caron,
        Cayleys: Cayleys,
        ccaps: ccaps,
        Ccaron: Ccaron,
        ccaron: ccaron,
        Ccedil: Ccedil$1,
        ccedil: ccedil$1,
        Ccirc: Ccirc,
        ccirc: ccirc,
        Cconint: Cconint,
        ccups: ccups,
        ccupssm: ccupssm,
        Cdot: Cdot,
        cdot: cdot,
        cedil: cedil$1,
        Cedilla: Cedilla,
        cemptyv: cemptyv,
        cent: cent$1,
        centerdot: centerdot,
        CenterDot: CenterDot,
        cfr: cfr,
        Cfr: Cfr,
        CHcy: CHcy,
        chcy: chcy,
        check: check,
        checkmark: checkmark,
        Chi: Chi,
        chi: chi,
        circ: circ,
        circeq: circeq,
        circlearrowleft: circlearrowleft,
        circlearrowright: circlearrowright,
        circledast: circledast,
        circledcirc: circledcirc,
        circleddash: circleddash,
        CircleDot: CircleDot,
        circledR: circledR,
        circledS: circledS,
        CircleMinus: CircleMinus,
        CirclePlus: CirclePlus,
        CircleTimes: CircleTimes,
        cir: cir,
        cirE: cirE,
        cire: cire,
        cirfnint: cirfnint,
        cirmid: cirmid,
        cirscir: cirscir,
        ClockwiseContourIntegral: ClockwiseContourIntegral,
        CloseCurlyDoubleQuote: CloseCurlyDoubleQuote,
        CloseCurlyQuote: CloseCurlyQuote,
        clubs: clubs,
        clubsuit: clubsuit,
        colon: colon,
        Colon: Colon,
        Colone: Colone,
        colone: colone,
        coloneq: coloneq,
        comma: comma,
        commat: commat,
        comp: comp,
        compfn: compfn,
        complement: complement,
        complexes: complexes,
        cong: cong,
        congdot: congdot,
        Congruent: Congruent,
        conint: conint,
        Conint: Conint,
        ContourIntegral: ContourIntegral,
        copf: copf,
        Copf: Copf,
        coprod: coprod,
        Coproduct: Coproduct,
        copy: copy$1,
        COPY: COPY$1,
        copysr: copysr,
        CounterClockwiseContourIntegral: CounterClockwiseContourIntegral,
        crarr: crarr,
        cross: cross,
        Cross: Cross,
        Cscr: Cscr,
        cscr: cscr,
        csub: csub,
        csube: csube,
        csup: csup,
        csupe: csupe,
        ctdot: ctdot,
        cudarrl: cudarrl,
        cudarrr: cudarrr,
        cuepr: cuepr,
        cuesc: cuesc,
        cularr: cularr,
        cularrp: cularrp,
        cupbrcap: cupbrcap,
        cupcap: cupcap,
        CupCap: CupCap,
        cup: cup,
        Cup: Cup,
        cupcup: cupcup,
        cupdot: cupdot,
        cupor: cupor,
        cups: cups,
        curarr: curarr,
        curarrm: curarrm,
        curlyeqprec: curlyeqprec,
        curlyeqsucc: curlyeqsucc,
        curlyvee: curlyvee,
        curlywedge: curlywedge,
        curren: curren$1,
        curvearrowleft: curvearrowleft,
        curvearrowright: curvearrowright,
        cuvee: cuvee,
        cuwed: cuwed,
        cwconint: cwconint,
        cwint: cwint,
        cylcty: cylcty,
        dagger: dagger,
        Dagger: Dagger,
        daleth: daleth,
        darr: darr,
        Darr: Darr,
        dArr: dArr,
        dash: dash,
        Dashv: Dashv,
        dashv: dashv,
        dbkarow: dbkarow,
        dblac: dblac,
        Dcaron: Dcaron,
        dcaron: dcaron,
        Dcy: Dcy,
        dcy: dcy,
        ddagger: ddagger,
        ddarr: ddarr,
        DD: DD,
        dd: dd,
        DDotrahd: DDotrahd,
        ddotseq: ddotseq,
        deg: deg$1,
        Del: Del,
        Delta: Delta,
        delta: delta,
        demptyv: demptyv,
        dfisht: dfisht,
        Dfr: Dfr,
        dfr: dfr,
        dHar: dHar,
        dharl: dharl,
        dharr: dharr,
        DiacriticalAcute: DiacriticalAcute,
        DiacriticalDot: DiacriticalDot,
        DiacriticalDoubleAcute: DiacriticalDoubleAcute,
        DiacriticalGrave: DiacriticalGrave,
        DiacriticalTilde: DiacriticalTilde,
        diam: diam,
        diamond: diamond,
        Diamond: Diamond,
        diamondsuit: diamondsuit,
        diams: diams,
        die: die,
        DifferentialD: DifferentialD,
        digamma: digamma,
        disin: disin,
        div: div,
        divide: divide$1,
        divideontimes: divideontimes,
        divonx: divonx,
        DJcy: DJcy,
        djcy: djcy,
        dlcorn: dlcorn,
        dlcrop: dlcrop,
        dollar: dollar,
        Dopf: Dopf,
        dopf: dopf,
        Dot: Dot,
        dot: dot,
        DotDot: DotDot,
        doteq: doteq,
        doteqdot: doteqdot,
        DotEqual: DotEqual,
        dotminus: dotminus,
        dotplus: dotplus,
        dotsquare: dotsquare,
        doublebarwedge: doublebarwedge,
        DoubleContourIntegral: DoubleContourIntegral,
        DoubleDot: DoubleDot,
        DoubleDownArrow: DoubleDownArrow,
        DoubleLeftArrow: DoubleLeftArrow,
        DoubleLeftRightArrow: DoubleLeftRightArrow,
        DoubleLeftTee: DoubleLeftTee,
        DoubleLongLeftArrow: DoubleLongLeftArrow,
        DoubleLongLeftRightArrow: DoubleLongLeftRightArrow,
        DoubleLongRightArrow: DoubleLongRightArrow,
        DoubleRightArrow: DoubleRightArrow,
        DoubleRightTee: DoubleRightTee,
        DoubleUpArrow: DoubleUpArrow,
        DoubleUpDownArrow: DoubleUpDownArrow,
        DoubleVerticalBar: DoubleVerticalBar,
        DownArrowBar: DownArrowBar,
        downarrow: downarrow,
        DownArrow: DownArrow,
        Downarrow: Downarrow,
        DownArrowUpArrow: DownArrowUpArrow,
        DownBreve: DownBreve,
        downdownarrows: downdownarrows,
        downharpoonleft: downharpoonleft,
        downharpoonright: downharpoonright,
        DownLeftRightVector: DownLeftRightVector,
        DownLeftTeeVector: DownLeftTeeVector,
        DownLeftVectorBar: DownLeftVectorBar,
        DownLeftVector: DownLeftVector,
        DownRightTeeVector: DownRightTeeVector,
        DownRightVectorBar: DownRightVectorBar,
        DownRightVector: DownRightVector,
        DownTeeArrow: DownTeeArrow,
        DownTee: DownTee,
        drbkarow: drbkarow,
        drcorn: drcorn,
        drcrop: drcrop,
        Dscr: Dscr,
        dscr: dscr,
        DScy: DScy,
        dscy: dscy,
        dsol: dsol,
        Dstrok: Dstrok,
        dstrok: dstrok,
        dtdot: dtdot,
        dtri: dtri,
        dtrif: dtrif,
        duarr: duarr,
        duhar: duhar,
        dwangle: dwangle,
        DZcy: DZcy,
        dzcy: dzcy,
        dzigrarr: dzigrarr,
        Eacute: Eacute$1,
        eacute: eacute$1,
        easter: easter,
        Ecaron: Ecaron,
        ecaron: ecaron,
        Ecirc: Ecirc$1,
        ecirc: ecirc$1,
        ecir: ecir,
        ecolon: ecolon,
        Ecy: Ecy,
        ecy: ecy,
        eDDot: eDDot,
        Edot: Edot,
        edot: edot,
        eDot: eDot,
        ee: ee$1,
        efDot: efDot,
        Efr: Efr,
        efr: efr,
        eg: eg,
        Egrave: Egrave$1,
        egrave: egrave$1,
        egs: egs,
        egsdot: egsdot,
        el: el,
        Element: Element$2,
        elinters: elinters,
        ell: ell,
        els: els,
        elsdot: elsdot,
        Emacr: Emacr,
        emacr: emacr,
        empty: empty,
        emptyset: emptyset,
        EmptySmallSquare: EmptySmallSquare,
        emptyv: emptyv,
        EmptyVerySmallSquare: EmptyVerySmallSquare,
        emsp13: emsp13,
        emsp14: emsp14,
        emsp: emsp,
        ENG: ENG,
        eng: eng,
        ensp: ensp,
        Eogon: Eogon,
        eogon: eogon,
        Eopf: Eopf,
        eopf: eopf,
        epar: epar,
        eparsl: eparsl,
        eplus: eplus,
        epsi: epsi,
        Epsilon: Epsilon,
        epsilon: epsilon,
        epsiv: epsiv,
        eqcirc: eqcirc,
        eqcolon: eqcolon,
        eqsim: eqsim,
        eqslantgtr: eqslantgtr,
        eqslantless: eqslantless,
        Equal: Equal,
        equals: equals$1,
        EqualTilde: EqualTilde,
        equest: equest,
        Equilibrium: Equilibrium,
        equiv: equiv,
        equivDD: equivDD,
        eqvparsl: eqvparsl,
        erarr: erarr,
        erDot: erDot,
        escr: escr,
        Escr: Escr,
        esdot: esdot,
        Esim: Esim,
        esim: esim,
        Eta: Eta,
        eta: eta,
        ETH: ETH$1,
        eth: eth$1,
        Euml: Euml$1,
        euml: euml$1,
        euro: euro,
        excl: excl,
        exist: exist,
        Exists: Exists,
        expectation: expectation,
        exponentiale: exponentiale,
        ExponentialE: ExponentialE,
        fallingdotseq: fallingdotseq,
        Fcy: Fcy,
        fcy: fcy,
        female: female,
        ffilig: ffilig,
        fflig: fflig,
        ffllig: ffllig,
        Ffr: Ffr,
        ffr: ffr,
        filig: filig,
        FilledSmallSquare: FilledSmallSquare,
        FilledVerySmallSquare: FilledVerySmallSquare,
        fjlig: fjlig,
        flat: flat,
        fllig: fllig,
        fltns: fltns,
        fnof: fnof,
        Fopf: Fopf,
        fopf: fopf,
        forall: forall,
        ForAll: ForAll,
        fork: fork,
        forkv: forkv,
        Fouriertrf: Fouriertrf,
        fpartint: fpartint,
        frac12: frac12$1,
        frac13: frac13,
        frac14: frac14$1,
        frac15: frac15,
        frac16: frac16,
        frac18: frac18,
        frac23: frac23,
        frac25: frac25,
        frac34: frac34$1,
        frac35: frac35,
        frac38: frac38,
        frac45: frac45,
        frac56: frac56,
        frac58: frac58,
        frac78: frac78,
        frasl: frasl,
        frown: frown,
        fscr: fscr,
        Fscr: Fscr,
        gacute: gacute,
        Gamma: Gamma,
        gamma: gamma,
        Gammad: Gammad,
        gammad: gammad,
        gap: gap,
        Gbreve: Gbreve,
        gbreve: gbreve,
        Gcedil: Gcedil,
        Gcirc: Gcirc,
        gcirc: gcirc,
        Gcy: Gcy,
        gcy: gcy,
        Gdot: Gdot,
        gdot: gdot,
        ge: ge$1,
        gE: gE,
        gEl: gEl,
        gel: gel,
        geq: geq,
        geqq: geqq,
        geqslant: geqslant,
        gescc: gescc,
        ges: ges,
        gesdot: gesdot,
        gesdoto: gesdoto,
        gesdotol: gesdotol,
        gesl: gesl,
        gesles: gesles,
        Gfr: Gfr,
        gfr: gfr,
        gg: gg,
        Gg: Gg,
        ggg: ggg,
        gimel: gimel,
        GJcy: GJcy,
        gjcy: gjcy,
        gla: gla,
        gl: gl,
        glE: glE,
        glj: glj,
        gnap: gnap,
        gnapprox: gnapprox,
        gne: gne,
        gnE: gnE,
        gneq: gneq,
        gneqq: gneqq,
        gnsim: gnsim,
        Gopf: Gopf,
        gopf: gopf,
        grave: grave,
        GreaterEqual: GreaterEqual,
        GreaterEqualLess: GreaterEqualLess,
        GreaterFullEqual: GreaterFullEqual,
        GreaterGreater: GreaterGreater,
        GreaterLess: GreaterLess,
        GreaterSlantEqual: GreaterSlantEqual,
        GreaterTilde: GreaterTilde,
        Gscr: Gscr,
        gscr: gscr,
        gsim: gsim,
        gsime: gsime,
        gsiml: gsiml,
        gtcc: gtcc,
        gtcir: gtcir,
        gt: gt$3,
        GT: GT$1,
        Gt: Gt$1,
        gtdot: gtdot,
        gtlPar: gtlPar,
        gtquest: gtquest,
        gtrapprox: gtrapprox,
        gtrarr: gtrarr,
        gtrdot: gtrdot,
        gtreqless: gtreqless,
        gtreqqless: gtreqqless,
        gtrless: gtrless,
        gtrsim: gtrsim,
        gvertneqq: gvertneqq,
        gvnE: gvnE,
        Hacek: Hacek,
        hairsp: hairsp,
        half: half,
        hamilt: hamilt,
        HARDcy: HARDcy,
        hardcy: hardcy,
        harrcir: harrcir,
        harr: harr,
        hArr: hArr,
        harrw: harrw,
        Hat: Hat,
        hbar: hbar,
        Hcirc: Hcirc,
        hcirc: hcirc,
        hearts: hearts,
        heartsuit: heartsuit,
        hellip: hellip,
        hercon: hercon,
        hfr: hfr,
        Hfr: Hfr,
        HilbertSpace: HilbertSpace,
        hksearow: hksearow,
        hkswarow: hkswarow,
        hoarr: hoarr,
        homtht: homtht,
        hookleftarrow: hookleftarrow,
        hookrightarrow: hookrightarrow,
        hopf: hopf,
        Hopf: Hopf,
        horbar: horbar,
        HorizontalLine: HorizontalLine,
        hscr: hscr,
        Hscr: Hscr,
        hslash: hslash,
        Hstrok: Hstrok,
        hstrok: hstrok,
        HumpDownHump: HumpDownHump,
        HumpEqual: HumpEqual,
        hybull: hybull,
        hyphen: hyphen,
        Iacute: Iacute$1,
        iacute: iacute$1,
        ic: ic,
        Icirc: Icirc$1,
        icirc: icirc$1,
        Icy: Icy,
        icy: icy,
        Idot: Idot,
        IEcy: IEcy,
        iecy: iecy,
        iexcl: iexcl$1,
        iff: iff,
        ifr: ifr,
        Ifr: Ifr,
        Igrave: Igrave$1,
        igrave: igrave$1,
        ii: ii,
        iiiint: iiiint,
        iiint: iiint,
        iinfin: iinfin,
        iiota: iiota,
        IJlig: IJlig,
        ijlig: ijlig,
        Imacr: Imacr,
        imacr: imacr,
        image: image,
        ImaginaryI: ImaginaryI,
        imagline: imagline,
        imagpart: imagpart,
        imath: imath,
        Im: Im,
        imof: imof,
        imped: imped,
        Implies: Implies,
        incare: incare,
        infin: infin,
        infintie: infintie,
        inodot: inodot,
        intcal: intcal,
        int: int,
        Int: Int,
        integers: integers,
        Integral: Integral,
        intercal: intercal,
        Intersection: Intersection,
        intlarhk: intlarhk,
        intprod: intprod,
        InvisibleComma: InvisibleComma,
        InvisibleTimes: InvisibleTimes,
        IOcy: IOcy,
        iocy: iocy,
        Iogon: Iogon,
        iogon: iogon,
        Iopf: Iopf,
        iopf: iopf,
        Iota: Iota,
        iota: iota,
        iprod: iprod,
        iquest: iquest$1,
        iscr: iscr,
        Iscr: Iscr,
        isin: isin,
        isindot: isindot,
        isinE: isinE,
        isins: isins,
        isinsv: isinsv,
        isinv: isinv,
        it: it$1,
        Itilde: Itilde,
        itilde: itilde,
        Iukcy: Iukcy,
        iukcy: iukcy,
        Iuml: Iuml$1,
        iuml: iuml$1,
        Jcirc: Jcirc,
        jcirc: jcirc,
        Jcy: Jcy,
        jcy: jcy,
        Jfr: Jfr,
        jfr: jfr,
        jmath: jmath,
        Jopf: Jopf,
        jopf: jopf,
        Jscr: Jscr,
        jscr: jscr,
        Jsercy: Jsercy,
        jsercy: jsercy,
        Jukcy: Jukcy,
        jukcy: jukcy,
        Kappa: Kappa,
        kappa: kappa,
        kappav: kappav,
        Kcedil: Kcedil,
        kcedil: kcedil,
        Kcy: Kcy,
        kcy: kcy,
        Kfr: Kfr,
        kfr: kfr,
        kgreen: kgreen,
        KHcy: KHcy,
        khcy: khcy,
        KJcy: KJcy,
        kjcy: kjcy,
        Kopf: Kopf,
        kopf: kopf,
        Kscr: Kscr,
        kscr: kscr,
        lAarr: lAarr,
        Lacute: Lacute,
        lacute: lacute,
        laemptyv: laemptyv,
        lagran: lagran,
        Lambda: Lambda,
        lambda: lambda,
        lang: lang,
        Lang: Lang,
        langd: langd,
        langle: langle,
        lap: lap,
        Laplacetrf: Laplacetrf,
        laquo: laquo$1,
        larrb: larrb,
        larrbfs: larrbfs,
        larr: larr,
        Larr: Larr,
        lArr: lArr,
        larrfs: larrfs,
        larrhk: larrhk,
        larrlp: larrlp,
        larrpl: larrpl,
        larrsim: larrsim,
        larrtl: larrtl,
        latail: latail,
        lAtail: lAtail,
        lat: lat,
        late: late,
        lates: lates,
        lbarr: lbarr,
        lBarr: lBarr,
        lbbrk: lbbrk,
        lbrace: lbrace,
        lbrack: lbrack,
        lbrke: lbrke,
        lbrksld: lbrksld,
        lbrkslu: lbrkslu,
        Lcaron: Lcaron,
        lcaron: lcaron,
        Lcedil: Lcedil,
        lcedil: lcedil,
        lceil: lceil,
        lcub: lcub,
        Lcy: Lcy,
        lcy: lcy,
        ldca: ldca,
        ldquo: ldquo,
        ldquor: ldquor,
        ldrdhar: ldrdhar,
        ldrushar: ldrushar,
        ldsh: ldsh,
        le: le$1,
        lE: lE,
        LeftAngleBracket: LeftAngleBracket,
        LeftArrowBar: LeftArrowBar,
        leftarrow: leftarrow,
        LeftArrow: LeftArrow,
        Leftarrow: Leftarrow,
        LeftArrowRightArrow: LeftArrowRightArrow,
        leftarrowtail: leftarrowtail,
        LeftCeiling: LeftCeiling,
        LeftDoubleBracket: LeftDoubleBracket,
        LeftDownTeeVector: LeftDownTeeVector,
        LeftDownVectorBar: LeftDownVectorBar,
        LeftDownVector: LeftDownVector,
        LeftFloor: LeftFloor,
        leftharpoondown: leftharpoondown,
        leftharpoonup: leftharpoonup,
        leftleftarrows: leftleftarrows,
        leftrightarrow: leftrightarrow,
        LeftRightArrow: LeftRightArrow,
        Leftrightarrow: Leftrightarrow,
        leftrightarrows: leftrightarrows,
        leftrightharpoons: leftrightharpoons,
        leftrightsquigarrow: leftrightsquigarrow,
        LeftRightVector: LeftRightVector,
        LeftTeeArrow: LeftTeeArrow,
        LeftTee: LeftTee,
        LeftTeeVector: LeftTeeVector,
        leftthreetimes: leftthreetimes,
        LeftTriangleBar: LeftTriangleBar,
        LeftTriangle: LeftTriangle,
        LeftTriangleEqual: LeftTriangleEqual,
        LeftUpDownVector: LeftUpDownVector,
        LeftUpTeeVector: LeftUpTeeVector,
        LeftUpVectorBar: LeftUpVectorBar,
        LeftUpVector: LeftUpVector,
        LeftVectorBar: LeftVectorBar,
        LeftVector: LeftVector,
        lEg: lEg,
        leg: leg,
        leq: leq,
        leqq: leqq,
        leqslant: leqslant,
        lescc: lescc,
        les: les,
        lesdot: lesdot,
        lesdoto: lesdoto,
        lesdotor: lesdotor,
        lesg: lesg,
        lesges: lesges,
        lessapprox: lessapprox,
        lessdot: lessdot,
        lesseqgtr: lesseqgtr,
        lesseqqgtr: lesseqqgtr,
        LessEqualGreater: LessEqualGreater,
        LessFullEqual: LessFullEqual,
        LessGreater: LessGreater,
        lessgtr: lessgtr,
        LessLess: LessLess,
        lesssim: lesssim,
        LessSlantEqual: LessSlantEqual,
        LessTilde: LessTilde,
        lfisht: lfisht,
        lfloor: lfloor,
        Lfr: Lfr,
        lfr: lfr,
        lg: lg,
        lgE: lgE,
        lHar: lHar,
        lhard: lhard,
        lharu: lharu,
        lharul: lharul,
        lhblk: lhblk,
        LJcy: LJcy,
        ljcy: ljcy,
        llarr: llarr,
        ll: ll,
        Ll: Ll,
        llcorner: llcorner,
        Lleftarrow: Lleftarrow,
        llhard: llhard,
        lltri: lltri,
        Lmidot: Lmidot,
        lmidot: lmidot,
        lmoustache: lmoustache,
        lmoust: lmoust,
        lnap: lnap,
        lnapprox: lnapprox,
        lne: lne,
        lnE: lnE,
        lneq: lneq,
        lneqq: lneqq,
        lnsim: lnsim,
        loang: loang,
        loarr: loarr,
        lobrk: lobrk,
        longleftarrow: longleftarrow,
        LongLeftArrow: LongLeftArrow,
        Longleftarrow: Longleftarrow,
        longleftrightarrow: longleftrightarrow,
        LongLeftRightArrow: LongLeftRightArrow,
        Longleftrightarrow: Longleftrightarrow,
        longmapsto: longmapsto,
        longrightarrow: longrightarrow,
        LongRightArrow: LongRightArrow,
        Longrightarrow: Longrightarrow,
        looparrowleft: looparrowleft,
        looparrowright: looparrowright,
        lopar: lopar,
        Lopf: Lopf,
        lopf: lopf,
        loplus: loplus,
        lotimes: lotimes,
        lowast: lowast,
        lowbar: lowbar,
        LowerLeftArrow: LowerLeftArrow,
        LowerRightArrow: LowerRightArrow,
        loz: loz,
        lozenge: lozenge,
        lozf: lozf,
        lpar: lpar,
        lparlt: lparlt,
        lrarr: lrarr,
        lrcorner: lrcorner,
        lrhar: lrhar,
        lrhard: lrhard,
        lrm: lrm,
        lrtri: lrtri,
        lsaquo: lsaquo,
        lscr: lscr,
        Lscr: Lscr,
        lsh: lsh,
        Lsh: Lsh,
        lsim: lsim,
        lsime: lsime,
        lsimg: lsimg,
        lsqb: lsqb,
        lsquo: lsquo,
        lsquor: lsquor,
        Lstrok: Lstrok,
        lstrok: lstrok,
        ltcc: ltcc,
        ltcir: ltcir,
        lt: lt$3,
        LT: LT$1,
        Lt: Lt$1,
        ltdot: ltdot,
        lthree: lthree,
        ltimes: ltimes,
        ltlarr: ltlarr,
        ltquest: ltquest,
        ltri: ltri,
        ltrie: ltrie,
        ltrif: ltrif,
        ltrPar: ltrPar,
        lurdshar: lurdshar,
        luruhar: luruhar,
        lvertneqq: lvertneqq,
        lvnE: lvnE,
        macr: macr$1,
        male: male,
        malt: malt,
        maltese: maltese,
        map: map$1,
        mapsto: mapsto,
        mapstodown: mapstodown,
        mapstoleft: mapstoleft,
        mapstoup: mapstoup,
        marker: marker,
        mcomma: mcomma,
        Mcy: Mcy,
        mcy: mcy,
        mdash: mdash,
        mDDot: mDDot,
        measuredangle: measuredangle,
        MediumSpace: MediumSpace,
        Mellintrf: Mellintrf,
        Mfr: Mfr,
        mfr: mfr,
        mho: mho,
        micro: micro$1,
        midast: midast,
        midcir: midcir,
        mid: mid,
        middot: middot$1,
        minusb: minusb,
        minus: minus,
        minusd: minusd,
        minusdu: minusdu,
        MinusPlus: MinusPlus,
        mlcp: mlcp,
        mldr: mldr,
        mnplus: mnplus,
        models: models,
        Mopf: Mopf,
        mopf: mopf,
        mp: mp,
        mscr: mscr,
        Mscr: Mscr,
        mstpos: mstpos,
        Mu: Mu,
        mu: mu,
        multimap: multimap,
        mumap: mumap,
        nabla: nabla,
        Nacute: Nacute,
        nacute: nacute,
        nang: nang,
        nap: nap,
        napE: napE,
        napid: napid,
        napos: napos,
        napprox: napprox,
        natural: natural,
        naturals: naturals,
        natur: natur,
        nbsp: nbsp$1,
        nbump: nbump,
        nbumpe: nbumpe,
        ncap: ncap,
        Ncaron: Ncaron,
        ncaron: ncaron,
        Ncedil: Ncedil,
        ncedil: ncedil,
        ncong: ncong,
        ncongdot: ncongdot,
        ncup: ncup,
        Ncy: Ncy,
        ncy: ncy,
        ndash: ndash,
        nearhk: nearhk,
        nearr: nearr,
        neArr: neArr,
        nearrow: nearrow,
        ne: ne$1,
        nedot: nedot,
        NegativeMediumSpace: NegativeMediumSpace,
        NegativeThickSpace: NegativeThickSpace,
        NegativeThinSpace: NegativeThinSpace,
        NegativeVeryThinSpace: NegativeVeryThinSpace,
        nequiv: nequiv,
        nesear: nesear,
        nesim: nesim,
        NestedGreaterGreater: NestedGreaterGreater,
        NestedLessLess: NestedLessLess,
        NewLine: NewLine,
        nexist: nexist,
        nexists: nexists,
        Nfr: Nfr,
        nfr: nfr,
        ngE: ngE,
        nge: nge,
        ngeq: ngeq,
        ngeqq: ngeqq,
        ngeqslant: ngeqslant,
        nges: nges,
        nGg: nGg,
        ngsim: ngsim,
        nGt: nGt,
        ngt: ngt,
        ngtr: ngtr,
        nGtv: nGtv,
        nharr: nharr,
        nhArr: nhArr,
        nhpar: nhpar,
        ni: ni,
        nis: nis,
        nisd: nisd,
        niv: niv,
        NJcy: NJcy,
        njcy: njcy,
        nlarr: nlarr,
        nlArr: nlArr,
        nldr: nldr,
        nlE: nlE,
        nle: nle,
        nleftarrow: nleftarrow,
        nLeftarrow: nLeftarrow,
        nleftrightarrow: nleftrightarrow,
        nLeftrightarrow: nLeftrightarrow,
        nleq: nleq,
        nleqq: nleqq,
        nleqslant: nleqslant,
        nles: nles,
        nless: nless,
        nLl: nLl,
        nlsim: nlsim,
        nLt: nLt,
        nlt: nlt,
        nltri: nltri,
        nltrie: nltrie,
        nLtv: nLtv,
        nmid: nmid,
        NoBreak: NoBreak,
        NonBreakingSpace: NonBreakingSpace,
        nopf: nopf,
        Nopf: Nopf,
        Not: Not,
        not: not$1,
        NotCongruent: NotCongruent,
        NotCupCap: NotCupCap,
        NotDoubleVerticalBar: NotDoubleVerticalBar,
        NotElement: NotElement,
        NotEqual: NotEqual,
        NotEqualTilde: NotEqualTilde,
        NotExists: NotExists,
        NotGreater: NotGreater,
        NotGreaterEqual: NotGreaterEqual,
        NotGreaterFullEqual: NotGreaterFullEqual,
        NotGreaterGreater: NotGreaterGreater,
        NotGreaterLess: NotGreaterLess,
        NotGreaterSlantEqual: NotGreaterSlantEqual,
        NotGreaterTilde: NotGreaterTilde,
        NotHumpDownHump: NotHumpDownHump,
        NotHumpEqual: NotHumpEqual,
        notin: notin,
        notindot: notindot,
        notinE: notinE,
        notinva: notinva,
        notinvb: notinvb,
        notinvc: notinvc,
        NotLeftTriangleBar: NotLeftTriangleBar,
        NotLeftTriangle: NotLeftTriangle,
        NotLeftTriangleEqual: NotLeftTriangleEqual,
        NotLess: NotLess,
        NotLessEqual: NotLessEqual,
        NotLessGreater: NotLessGreater,
        NotLessLess: NotLessLess,
        NotLessSlantEqual: NotLessSlantEqual,
        NotLessTilde: NotLessTilde,
        NotNestedGreaterGreater: NotNestedGreaterGreater,
        NotNestedLessLess: NotNestedLessLess,
        notni: notni,
        notniva: notniva,
        notnivb: notnivb,
        notnivc: notnivc,
        NotPrecedes: NotPrecedes,
        NotPrecedesEqual: NotPrecedesEqual,
        NotPrecedesSlantEqual: NotPrecedesSlantEqual,
        NotReverseElement: NotReverseElement,
        NotRightTriangleBar: NotRightTriangleBar,
        NotRightTriangle: NotRightTriangle,
        NotRightTriangleEqual: NotRightTriangleEqual,
        NotSquareSubset: NotSquareSubset,
        NotSquareSubsetEqual: NotSquareSubsetEqual,
        NotSquareSuperset: NotSquareSuperset,
        NotSquareSupersetEqual: NotSquareSupersetEqual,
        NotSubset: NotSubset,
        NotSubsetEqual: NotSubsetEqual,
        NotSucceeds: NotSucceeds,
        NotSucceedsEqual: NotSucceedsEqual,
        NotSucceedsSlantEqual: NotSucceedsSlantEqual,
        NotSucceedsTilde: NotSucceedsTilde,
        NotSuperset: NotSuperset,
        NotSupersetEqual: NotSupersetEqual,
        NotTilde: NotTilde,
        NotTildeEqual: NotTildeEqual,
        NotTildeFullEqual: NotTildeFullEqual,
        NotTildeTilde: NotTildeTilde,
        NotVerticalBar: NotVerticalBar,
        nparallel: nparallel,
        npar: npar,
        nparsl: nparsl,
        npart: npart,
        npolint: npolint,
        npr: npr,
        nprcue: nprcue,
        nprec: nprec,
        npreceq: npreceq,
        npre: npre,
        nrarrc: nrarrc,
        nrarr: nrarr,
        nrArr: nrArr,
        nrarrw: nrarrw,
        nrightarrow: nrightarrow,
        nRightarrow: nRightarrow,
        nrtri: nrtri,
        nrtrie: nrtrie,
        nsc: nsc,
        nsccue: nsccue,
        nsce: nsce,
        Nscr: Nscr,
        nscr: nscr,
        nshortmid: nshortmid,
        nshortparallel: nshortparallel,
        nsim: nsim,
        nsime: nsime,
        nsimeq: nsimeq,
        nsmid: nsmid,
        nspar: nspar,
        nsqsube: nsqsube,
        nsqsupe: nsqsupe,
        nsub: nsub,
        nsubE: nsubE,
        nsube: nsube,
        nsubset: nsubset,
        nsubseteq: nsubseteq,
        nsubseteqq: nsubseteqq,
        nsucc: nsucc,
        nsucceq: nsucceq,
        nsup: nsup,
        nsupE: nsupE,
        nsupe: nsupe,
        nsupset: nsupset,
        nsupseteq: nsupseteq,
        nsupseteqq: nsupseteqq,
        ntgl: ntgl,
        Ntilde: Ntilde$1,
        ntilde: ntilde$1,
        ntlg: ntlg,
        ntriangleleft: ntriangleleft,
        ntrianglelefteq: ntrianglelefteq,
        ntriangleright: ntriangleright,
        ntrianglerighteq: ntrianglerighteq,
        Nu: Nu,
        nu: nu,
        num: num,
        numero: numero,
        numsp: numsp,
        nvap: nvap,
        nvdash: nvdash,
        nvDash: nvDash,
        nVdash: nVdash,
        nVDash: nVDash,
        nvge: nvge,
        nvgt: nvgt,
        nvHarr: nvHarr,
        nvinfin: nvinfin,
        nvlArr: nvlArr,
        nvle: nvle,
        nvlt: nvlt,
        nvltrie: nvltrie,
        nvrArr: nvrArr,
        nvrtrie: nvrtrie,
        nvsim: nvsim,
        nwarhk: nwarhk,
        nwarr: nwarr,
        nwArr: nwArr,
        nwarrow: nwarrow,
        nwnear: nwnear,
        Oacute: Oacute$1,
        oacute: oacute$1,
        oast: oast,
        Ocirc: Ocirc$1,
        ocirc: ocirc$1,
        ocir: ocir,
        Ocy: Ocy,
        ocy: ocy,
        odash: odash,
        Odblac: Odblac,
        odblac: odblac,
        odiv: odiv,
        odot: odot,
        odsold: odsold,
        OElig: OElig,
        oelig: oelig,
        ofcir: ofcir,
        Ofr: Ofr,
        ofr: ofr,
        ogon: ogon,
        Ograve: Ograve$1,
        ograve: ograve$1,
        ogt: ogt,
        ohbar: ohbar,
        ohm: ohm,
        oint: oint,
        olarr: olarr,
        olcir: olcir,
        olcross: olcross,
        oline: oline,
        olt: olt,
        Omacr: Omacr,
        omacr: omacr,
        Omega: Omega,
        omega: omega,
        Omicron: Omicron,
        omicron: omicron,
        omid: omid,
        ominus: ominus,
        Oopf: Oopf,
        oopf: oopf,
        opar: opar,
        OpenCurlyDoubleQuote: OpenCurlyDoubleQuote,
        OpenCurlyQuote: OpenCurlyQuote,
        operp: operp,
        oplus: oplus,
        orarr: orarr,
        Or: Or,
        or: or,
        ord: ord,
        order: order,
        orderof: orderof,
        ordf: ordf$1,
        ordm: ordm$1,
        origof: origof,
        oror: oror,
        orslope: orslope,
        orv: orv,
        oS: oS,
        Oscr: Oscr,
        oscr: oscr,
        Oslash: Oslash$1,
        oslash: oslash$1,
        osol: osol,
        Otilde: Otilde$1,
        otilde: otilde$1,
        otimesas: otimesas,
        Otimes: Otimes,
        otimes: otimes,
        Ouml: Ouml$1,
        ouml: ouml$1,
        ovbar: ovbar,
        OverBar: OverBar,
        OverBrace: OverBrace,
        OverBracket: OverBracket,
        OverParenthesis: OverParenthesis,
        para: para$1,
        parallel: parallel,
        par: par,
        parsim: parsim,
        parsl: parsl,
        part: part,
        PartialD: PartialD,
        Pcy: Pcy,
        pcy: pcy,
        percnt: percnt,
        period: period,
        permil: permil,
        perp: perp,
        pertenk: pertenk,
        Pfr: Pfr,
        pfr: pfr,
        Phi: Phi,
        phi: phi,
        phiv: phiv,
        phmmat: phmmat,
        phone: phone,
        Pi: Pi,
        pi: pi,
        pitchfork: pitchfork,
        piv: piv,
        planck: planck,
        planckh: planckh,
        plankv: plankv,
        plusacir: plusacir,
        plusb: plusb,
        pluscir: pluscir,
        plus: plus,
        plusdo: plusdo,
        plusdu: plusdu,
        pluse: pluse,
        PlusMinus: PlusMinus,
        plusmn: plusmn$1,
        plussim: plussim,
        plustwo: plustwo,
        pm: pm,
        Poincareplane: Poincareplane,
        pointint: pointint,
        popf: popf,
        Popf: Popf,
        pound: pound$1,
        prap: prap,
        Pr: Pr,
        pr: pr,
        prcue: prcue,
        precapprox: precapprox,
        prec: prec,
        preccurlyeq: preccurlyeq,
        Precedes: Precedes,
        PrecedesEqual: PrecedesEqual,
        PrecedesSlantEqual: PrecedesSlantEqual,
        PrecedesTilde: PrecedesTilde,
        preceq: preceq,
        precnapprox: precnapprox,
        precneqq: precneqq,
        precnsim: precnsim,
        pre: pre,
        prE: prE,
        precsim: precsim,
        prime: prime,
        Prime: Prime,
        primes: primes,
        prnap: prnap,
        prnE: prnE,
        prnsim: prnsim,
        prod: prod,
        Product: Product,
        profalar: profalar,
        profline: profline,
        profsurf: profsurf,
        prop: prop$1,
        Proportional: Proportional,
        Proportion: Proportion,
        propto: propto,
        prsim: prsim,
        prurel: prurel,
        Pscr: Pscr,
        pscr: pscr,
        Psi: Psi,
        psi: psi,
        puncsp: puncsp,
        Qfr: Qfr,
        qfr: qfr,
        qint: qint,
        qopf: qopf,
        Qopf: Qopf,
        qprime: qprime,
        Qscr: Qscr,
        qscr: qscr,
        quaternions: quaternions,
        quatint: quatint,
        quest: quest,
        questeq: questeq,
        quot: quot$2,
        QUOT: QUOT$1,
        rAarr: rAarr,
        race: race,
        Racute: Racute,
        racute: racute,
        radic: radic,
        raemptyv: raemptyv,
        rang: rang,
        Rang: Rang,
        rangd: rangd,
        range: range,
        rangle: rangle,
        raquo: raquo$1,
        rarrap: rarrap,
        rarrb: rarrb,
        rarrbfs: rarrbfs,
        rarrc: rarrc,
        rarr: rarr,
        Rarr: Rarr,
        rArr: rArr,
        rarrfs: rarrfs,
        rarrhk: rarrhk,
        rarrlp: rarrlp,
        rarrpl: rarrpl,
        rarrsim: rarrsim,
        Rarrtl: Rarrtl,
        rarrtl: rarrtl,
        rarrw: rarrw,
        ratail: ratail,
        rAtail: rAtail,
        ratio: ratio,
        rationals: rationals,
        rbarr: rbarr,
        rBarr: rBarr,
        RBarr: RBarr,
        rbbrk: rbbrk,
        rbrace: rbrace,
        rbrack: rbrack,
        rbrke: rbrke,
        rbrksld: rbrksld,
        rbrkslu: rbrkslu,
        Rcaron: Rcaron,
        rcaron: rcaron,
        Rcedil: Rcedil,
        rcedil: rcedil,
        rceil: rceil,
        rcub: rcub,
        Rcy: Rcy,
        rcy: rcy,
        rdca: rdca,
        rdldhar: rdldhar,
        rdquo: rdquo,
        rdquor: rdquor,
        rdsh: rdsh,
        real: real,
        realine: realine,
        realpart: realpart,
        reals: reals,
        Re: Re$1,
        rect: rect,
        reg: reg$1,
        REG: REG$1,
        ReverseElement: ReverseElement,
        ReverseEquilibrium: ReverseEquilibrium,
        ReverseUpEquilibrium: ReverseUpEquilibrium,
        rfisht: rfisht,
        rfloor: rfloor,
        rfr: rfr,
        Rfr: Rfr,
        rHar: rHar,
        rhard: rhard,
        rharu: rharu,
        rharul: rharul,
        Rho: Rho,
        rho: rho,
        rhov: rhov,
        RightAngleBracket: RightAngleBracket,
        RightArrowBar: RightArrowBar,
        rightarrow: rightarrow,
        RightArrow: RightArrow,
        Rightarrow: Rightarrow,
        RightArrowLeftArrow: RightArrowLeftArrow,
        rightarrowtail: rightarrowtail,
        RightCeiling: RightCeiling,
        RightDoubleBracket: RightDoubleBracket,
        RightDownTeeVector: RightDownTeeVector,
        RightDownVectorBar: RightDownVectorBar,
        RightDownVector: RightDownVector,
        RightFloor: RightFloor,
        rightharpoondown: rightharpoondown,
        rightharpoonup: rightharpoonup,
        rightleftarrows: rightleftarrows,
        rightleftharpoons: rightleftharpoons,
        rightrightarrows: rightrightarrows,
        rightsquigarrow: rightsquigarrow,
        RightTeeArrow: RightTeeArrow,
        RightTee: RightTee,
        RightTeeVector: RightTeeVector,
        rightthreetimes: rightthreetimes,
        RightTriangleBar: RightTriangleBar,
        RightTriangle: RightTriangle,
        RightTriangleEqual: RightTriangleEqual,
        RightUpDownVector: RightUpDownVector,
        RightUpTeeVector: RightUpTeeVector,
        RightUpVectorBar: RightUpVectorBar,
        RightUpVector: RightUpVector,
        RightVectorBar: RightVectorBar,
        RightVector: RightVector,
        ring: ring,
        risingdotseq: risingdotseq,
        rlarr: rlarr,
        rlhar: rlhar,
        rlm: rlm,
        rmoustache: rmoustache,
        rmoust: rmoust,
        rnmid: rnmid,
        roang: roang,
        roarr: roarr,
        robrk: robrk,
        ropar: ropar,
        ropf: ropf,
        Ropf: Ropf,
        roplus: roplus,
        rotimes: rotimes,
        RoundImplies: RoundImplies,
        rpar: rpar,
        rpargt: rpargt,
        rppolint: rppolint,
        rrarr: rrarr,
        Rrightarrow: Rrightarrow,
        rsaquo: rsaquo,
        rscr: rscr,
        Rscr: Rscr,
        rsh: rsh,
        Rsh: Rsh,
        rsqb: rsqb,
        rsquo: rsquo,
        rsquor: rsquor,
        rthree: rthree,
        rtimes: rtimes,
        rtri: rtri,
        rtrie: rtrie,
        rtrif: rtrif,
        rtriltri: rtriltri,
        RuleDelayed: RuleDelayed,
        ruluhar: ruluhar,
        rx: rx,
        Sacute: Sacute,
        sacute: sacute,
        sbquo: sbquo,
        scap: scap,
        Scaron: Scaron,
        scaron: scaron,
        Sc: Sc,
        sc: sc,
        sccue: sccue,
        sce: sce,
        scE: scE,
        Scedil: Scedil,
        scedil: scedil,
        Scirc: Scirc,
        scirc: scirc,
        scnap: scnap,
        scnE: scnE,
        scnsim: scnsim,
        scpolint: scpolint,
        scsim: scsim,
        Scy: Scy,
        scy: scy,
        sdotb: sdotb,
        sdot: sdot,
        sdote: sdote,
        searhk: searhk,
        searr: searr,
        seArr: seArr,
        searrow: searrow,
        sect: sect$1,
        semi: semi,
        seswar: seswar,
        setminus: setminus,
        setmn: setmn,
        sext: sext,
        Sfr: Sfr,
        sfr: sfr,
        sfrown: sfrown,
        sharp: sharp,
        SHCHcy: SHCHcy,
        shchcy: shchcy,
        SHcy: SHcy,
        shcy: shcy,
        ShortDownArrow: ShortDownArrow,
        ShortLeftArrow: ShortLeftArrow,
        shortmid: shortmid,
        shortparallel: shortparallel,
        ShortRightArrow: ShortRightArrow,
        ShortUpArrow: ShortUpArrow,
        shy: shy$1,
        Sigma: Sigma,
        sigma: sigma,
        sigmaf: sigmaf,
        sigmav: sigmav,
        sim: sim,
        simdot: simdot,
        sime: sime,
        simeq: simeq,
        simg: simg,
        simgE: simgE,
        siml: siml,
        simlE: simlE,
        simne: simne,
        simplus: simplus,
        simrarr: simrarr,
        slarr: slarr,
        SmallCircle: SmallCircle,
        smallsetminus: smallsetminus,
        smashp: smashp,
        smeparsl: smeparsl,
        smid: smid,
        smile: smile,
        smt: smt,
        smte: smte,
        smtes: smtes,
        SOFTcy: SOFTcy,
        softcy: softcy,
        solbar: solbar,
        solb: solb,
        sol: sol,
        Sopf: Sopf,
        sopf: sopf,
        spades: spades,
        spadesuit: spadesuit,
        spar: spar,
        sqcap: sqcap,
        sqcaps: sqcaps,
        sqcup: sqcup,
        sqcups: sqcups,
        Sqrt: Sqrt,
        sqsub: sqsub,
        sqsube: sqsube,
        sqsubset: sqsubset,
        sqsubseteq: sqsubseteq,
        sqsup: sqsup,
        sqsupe: sqsupe,
        sqsupset: sqsupset,
        sqsupseteq: sqsupseteq,
        square: square,
        Square: Square,
        SquareIntersection: SquareIntersection,
        SquareSubset: SquareSubset,
        SquareSubsetEqual: SquareSubsetEqual,
        SquareSuperset: SquareSuperset,
        SquareSupersetEqual: SquareSupersetEqual,
        SquareUnion: SquareUnion,
        squarf: squarf,
        squ: squ,
        squf: squf,
        srarr: srarr,
        Sscr: Sscr,
        sscr: sscr,
        ssetmn: ssetmn,
        ssmile: ssmile,
        sstarf: sstarf,
        Star: Star,
        star: star,
        starf: starf,
        straightepsilon: straightepsilon,
        straightphi: straightphi,
        strns: strns,
        sub: sub,
        Sub: Sub,
        subdot: subdot,
        subE: subE,
        sube: sube,
        subedot: subedot,
        submult: submult,
        subnE: subnE,
        subne: subne,
        subplus: subplus,
        subrarr: subrarr,
        subset: subset,
        Subset: Subset,
        subseteq: subseteq,
        subseteqq: subseteqq,
        SubsetEqual: SubsetEqual,
        subsetneq: subsetneq,
        subsetneqq: subsetneqq,
        subsim: subsim,
        subsub: subsub,
        subsup: subsup,
        succapprox: succapprox,
        succ: succ,
        succcurlyeq: succcurlyeq,
        Succeeds: Succeeds,
        SucceedsEqual: SucceedsEqual,
        SucceedsSlantEqual: SucceedsSlantEqual,
        SucceedsTilde: SucceedsTilde,
        succeq: succeq,
        succnapprox: succnapprox,
        succneqq: succneqq,
        succnsim: succnsim,
        succsim: succsim,
        SuchThat: SuchThat,
        sum: sum,
        Sum: Sum,
        sung: sung,
        sup1: sup1$1,
        sup2: sup2$1,
        sup3: sup3$1,
        sup: sup,
        Sup: Sup,
        supdot: supdot,
        supdsub: supdsub,
        supE: supE,
        supe: supe,
        supedot: supedot,
        Superset: Superset,
        SupersetEqual: SupersetEqual,
        suphsol: suphsol,
        suphsub: suphsub,
        suplarr: suplarr,
        supmult: supmult,
        supnE: supnE,
        supne: supne,
        supplus: supplus,
        supset: supset,
        Supset: Supset,
        supseteq: supseteq,
        supseteqq: supseteqq,
        supsetneq: supsetneq,
        supsetneqq: supsetneqq,
        supsim: supsim,
        supsub: supsub,
        supsup: supsup,
        swarhk: swarhk,
        swarr: swarr,
        swArr: swArr,
        swarrow: swarrow,
        swnwar: swnwar,
        szlig: szlig$1,
        Tab: Tab,
        target: target,
        Tau: Tau,
        tau: tau,
        tbrk: tbrk,
        Tcaron: Tcaron,
        tcaron: tcaron,
        Tcedil: Tcedil,
        tcedil: tcedil,
        Tcy: Tcy,
        tcy: tcy,
        tdot: tdot,
        telrec: telrec,
        Tfr: Tfr,
        tfr: tfr,
        there4: there4,
        therefore: therefore,
        Therefore: Therefore,
        Theta: Theta,
        theta: theta,
        thetasym: thetasym,
        thetav: thetav,
        thickapprox: thickapprox,
        thicksim: thicksim,
        ThickSpace: ThickSpace,
        ThinSpace: ThinSpace,
        thinsp: thinsp,
        thkap: thkap,
        thksim: thksim,
        THORN: THORN$1,
        thorn: thorn$1,
        tilde: tilde,
        Tilde: Tilde,
        TildeEqual: TildeEqual,
        TildeFullEqual: TildeFullEqual,
        TildeTilde: TildeTilde,
        timesbar: timesbar,
        timesb: timesb,
        times: times$1,
        timesd: timesd,
        tint: tint,
        toea: toea,
        topbot: topbot,
        topcir: topcir,
        top: top,
        Topf: Topf,
        topf: topf,
        topfork: topfork,
        tosa: tosa,
        tprime: tprime,
        trade: trade,
        TRADE: TRADE,
        triangle: triangle,
        triangledown: triangledown,
        triangleleft: triangleleft,
        trianglelefteq: trianglelefteq,
        triangleq: triangleq,
        triangleright: triangleright,
        trianglerighteq: trianglerighteq,
        tridot: tridot,
        trie: trie,
        triminus: triminus,
        TripleDot: TripleDot,
        triplus: triplus,
        trisb: trisb,
        tritime: tritime,
        trpezium: trpezium,
        Tscr: Tscr,
        tscr: tscr,
        TScy: TScy,
        tscy: tscy,
        TSHcy: TSHcy,
        tshcy: tshcy,
        Tstrok: Tstrok,
        tstrok: tstrok,
        twixt: twixt,
        twoheadleftarrow: twoheadleftarrow,
        twoheadrightarrow: twoheadrightarrow,
        Uacute: Uacute$1,
        uacute: uacute$1,
        uarr: uarr,
        Uarr: Uarr,
        uArr: uArr,
        Uarrocir: Uarrocir,
        Ubrcy: Ubrcy,
        ubrcy: ubrcy,
        Ubreve: Ubreve,
        ubreve: ubreve,
        Ucirc: Ucirc$1,
        ucirc: ucirc$1,
        Ucy: Ucy,
        ucy: ucy,
        udarr: udarr,
        Udblac: Udblac,
        udblac: udblac,
        udhar: udhar,
        ufisht: ufisht,
        Ufr: Ufr,
        ufr: ufr,
        Ugrave: Ugrave$1,
        ugrave: ugrave$1,
        uHar: uHar,
        uharl: uharl,
        uharr: uharr,
        uhblk: uhblk,
        ulcorn: ulcorn,
        ulcorner: ulcorner,
        ulcrop: ulcrop,
        ultri: ultri,
        Umacr: Umacr,
        umacr: umacr,
        uml: uml$1,
        UnderBar: UnderBar,
        UnderBrace: UnderBrace,
        UnderBracket: UnderBracket,
        UnderParenthesis: UnderParenthesis,
        Union: Union,
        UnionPlus: UnionPlus,
        Uogon: Uogon,
        uogon: uogon,
        Uopf: Uopf,
        uopf: uopf,
        UpArrowBar: UpArrowBar,
        uparrow: uparrow,
        UpArrow: UpArrow,
        Uparrow: Uparrow,
        UpArrowDownArrow: UpArrowDownArrow,
        updownarrow: updownarrow,
        UpDownArrow: UpDownArrow,
        Updownarrow: Updownarrow,
        UpEquilibrium: UpEquilibrium,
        upharpoonleft: upharpoonleft,
        upharpoonright: upharpoonright,
        uplus: uplus,
        UpperLeftArrow: UpperLeftArrow,
        UpperRightArrow: UpperRightArrow,
        upsi: upsi,
        Upsi: Upsi,
        upsih: upsih,
        Upsilon: Upsilon,
        upsilon: upsilon,
        UpTeeArrow: UpTeeArrow,
        UpTee: UpTee,
        upuparrows: upuparrows,
        urcorn: urcorn,
        urcorner: urcorner,
        urcrop: urcrop,
        Uring: Uring,
        uring: uring,
        urtri: urtri,
        Uscr: Uscr,
        uscr: uscr,
        utdot: utdot,
        Utilde: Utilde,
        utilde: utilde,
        utri: utri,
        utrif: utrif,
        uuarr: uuarr,
        Uuml: Uuml$1,
        uuml: uuml$1,
        uwangle: uwangle,
        vangrt: vangrt,
        varepsilon: varepsilon,
        varkappa: varkappa,
        varnothing: varnothing,
        varphi: varphi,
        varpi: varpi,
        varpropto: varpropto,
        varr: varr,
        vArr: vArr,
        varrho: varrho,
        varsigma: varsigma,
        varsubsetneq: varsubsetneq,
        varsubsetneqq: varsubsetneqq,
        varsupsetneq: varsupsetneq,
        varsupsetneqq: varsupsetneqq,
        vartheta: vartheta,
        vartriangleleft: vartriangleleft,
        vartriangleright: vartriangleright,
        vBar: vBar,
        Vbar: Vbar,
        vBarv: vBarv,
        Vcy: Vcy,
        vcy: vcy,
        vdash: vdash,
        vDash: vDash,
        Vdash: Vdash,
        VDash: VDash,
        Vdashl: Vdashl,
        veebar: veebar,
        vee: vee,
        Vee: Vee,
        veeeq: veeeq,
        vellip: vellip,
        verbar: verbar,
        Verbar: Verbar,
        vert: vert,
        Vert: Vert,
        VerticalBar: VerticalBar,
        VerticalLine: VerticalLine,
        VerticalSeparator: VerticalSeparator,
        VerticalTilde: VerticalTilde,
        VeryThinSpace: VeryThinSpace,
        Vfr: Vfr,
        vfr: vfr,
        vltri: vltri,
        vnsub: vnsub,
        vnsup: vnsup,
        Vopf: Vopf,
        vopf: vopf,
        vprop: vprop,
        vrtri: vrtri,
        Vscr: Vscr,
        vscr: vscr,
        vsubnE: vsubnE,
        vsubne: vsubne,
        vsupnE: vsupnE,
        vsupne: vsupne,
        Vvdash: Vvdash,
        vzigzag: vzigzag,
        Wcirc: Wcirc,
        wcirc: wcirc,
        wedbar: wedbar,
        wedge: wedge,
        Wedge: Wedge,
        wedgeq: wedgeq,
        weierp: weierp,
        Wfr: Wfr,
        wfr: wfr,
        Wopf: Wopf,
        wopf: wopf,
        wp: wp,
        wr: wr,
        wreath: wreath,
        Wscr: Wscr,
        wscr: wscr,
        xcap: xcap,
        xcirc: xcirc,
        xcup: xcup,
        xdtri: xdtri,
        Xfr: Xfr,
        xfr: xfr,
        xharr: xharr,
        xhArr: xhArr,
        Xi: Xi,
        xi: xi,
        xlarr: xlarr,
        xlArr: xlArr,
        xmap: xmap,
        xnis: xnis,
        xodot: xodot,
        Xopf: Xopf,
        xopf: xopf,
        xoplus: xoplus,
        xotime: xotime,
        xrarr: xrarr,
        xrArr: xrArr,
        Xscr: Xscr,
        xscr: xscr,
        xsqcup: xsqcup,
        xuplus: xuplus,
        xutri: xutri,
        xvee: xvee,
        xwedge: xwedge,
        Yacute: Yacute$1,
        yacute: yacute$1,
        YAcy: YAcy,
        yacy: yacy,
        Ycirc: Ycirc,
        ycirc: ycirc,
        Ycy: Ycy,
        ycy: ycy,
        yen: yen$1,
        Yfr: Yfr,
        yfr: yfr,
        YIcy: YIcy,
        yicy: yicy,
        Yopf: Yopf,
        yopf: yopf,
        Yscr: Yscr,
        yscr: yscr,
        YUcy: YUcy,
        yucy: yucy,
        yuml: yuml$1,
        Yuml: Yuml,
        Zacute: Zacute,
        zacute: zacute,
        Zcaron: Zcaron,
        zcaron: zcaron,
        Zcy: Zcy,
        zcy: zcy,
        Zdot: Zdot,
        zdot: zdot,
        zeetrf: zeetrf,
        ZeroWidthSpace: ZeroWidthSpace,
        Zeta: Zeta,
        zeta: zeta,
        zfr: zfr,
        Zfr: Zfr,
        ZHcy: ZHcy,
        zhcy: zhcy,
        zigrarr: zigrarr,
        zopf: zopf,
        Zopf: Zopf,
        Zscr: Zscr,
        zscr: zscr,
        zwj: zwj,
        zwnj: zwnj,
        'default': entities
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Aacute="Á";var aacute="á";var Acirc="Â";var acirc="â";var acute="´";var AElig="Æ";var aelig="æ";var Agrave="À";var agrave="à";var amp$1="&";var AMP="&";var Aring="Å";var aring="å";var Atilde="Ã";var atilde="ã";var Auml="Ä";var auml="ä";var brvbar="¦";var Ccedil="Ç";var ccedil="ç";var cedil="¸";var cent="¢";var copy="©";var COPY="©";var curren="¤";var deg="°";var divide="÷";var Eacute="É";var eacute="é";var Ecirc="Ê";var ecirc="ê";var Egrave="È";var egrave="è";var ETH="Ð";var eth="ð";var Euml="Ë";var euml="ë";var frac12="½";var frac14="¼";var frac34="¾";var gt$2=">";var GT=">";var Iacute="Í";var iacute="í";var Icirc="Î";var icirc="î";var iexcl="¡";var Igrave="Ì";var igrave="ì";var iquest="¿";var Iuml="Ï";var iuml="ï";var laquo="«";var lt$2="<";var LT="<";var macr="¯";var micro="µ";var middot="·";var nbsp=" ";var not="¬";var Ntilde="Ñ";var ntilde="ñ";var Oacute="Ó";var oacute="ó";var Ocirc="Ô";var ocirc="ô";var Ograve="Ò";var ograve="ò";var ordf="ª";var ordm="º";var Oslash="Ø";var oslash="ø";var Otilde="Õ";var otilde="õ";var Ouml="Ö";var ouml="ö";var para="¶";var plusmn="±";var pound="£";var quot$1="\"";var QUOT="\"";var raquo="»";var reg="®";var REG="®";var sect="§";var shy="­";var sup1="¹";var sup2="²";var sup3="³";var szlig="ß";var THORN="Þ";var thorn="þ";var times="×";var Uacute="Ú";var uacute="ú";var Ucirc="Û";var ucirc="û";var Ugrave="Ù";var ugrave="ù";var uml="¨";var Uuml="Ü";var uuml="ü";var Yacute="Ý";var yacute="ý";var yen="¥";var yuml="ÿ";var legacy$1 = {Aacute:Aacute,aacute:aacute,Acirc:Acirc,acirc:acirc,acute:acute,AElig:AElig,aelig:aelig,Agrave:Agrave,agrave:agrave,amp:amp$1,AMP:AMP,Aring:Aring,aring:aring,Atilde:Atilde,atilde:atilde,Auml:Auml,auml:auml,brvbar:brvbar,Ccedil:Ccedil,ccedil:ccedil,cedil:cedil,cent:cent,copy:copy,COPY:COPY,curren:curren,deg:deg,divide:divide,Eacute:Eacute,eacute:eacute,Ecirc:Ecirc,ecirc:ecirc,Egrave:Egrave,egrave:egrave,ETH:ETH,eth:eth,Euml:Euml,euml:euml,frac12:frac12,frac14:frac14,frac34:frac34,gt:gt$2,GT:GT,Iacute:Iacute,iacute:iacute,Icirc:Icirc,icirc:icirc,iexcl:iexcl,Igrave:Igrave,igrave:igrave,iquest:iquest,Iuml:Iuml,iuml:iuml,laquo:laquo,lt:lt$2,LT:LT,macr:macr,micro:micro,middot:middot,nbsp:nbsp,not:not,Ntilde:Ntilde,ntilde:ntilde,Oacute:Oacute,oacute:oacute,Ocirc:Ocirc,ocirc:ocirc,Ograve:Ograve,ograve:ograve,ordf:ordf,ordm:ordm,Oslash:Oslash,oslash:oslash,Otilde:Otilde,otilde:otilde,Ouml:Ouml,ouml:ouml,para:para,plusmn:plusmn,pound:pound,quot:quot$1,QUOT:QUOT,raquo:raquo,reg:reg,REG:REG,sect:sect,shy:shy,sup1:sup1,sup2:sup2,sup3:sup3,szlig:szlig,THORN:THORN,thorn:thorn,times:times,Uacute:Uacute,uacute:uacute,Ucirc:Ucirc,ucirc:ucirc,Ugrave:Ugrave,ugrave:ugrave,uml:uml,Uuml:Uuml,uuml:uuml,Yacute:Yacute,yacute:yacute,yen:yen,yuml:yuml};

    var legacy$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Aacute: Aacute,
        aacute: aacute,
        Acirc: Acirc,
        acirc: acirc,
        acute: acute,
        AElig: AElig,
        aelig: aelig,
        Agrave: Agrave,
        agrave: agrave,
        amp: amp$1,
        AMP: AMP,
        Aring: Aring,
        aring: aring,
        Atilde: Atilde,
        atilde: atilde,
        Auml: Auml,
        auml: auml,
        brvbar: brvbar,
        Ccedil: Ccedil,
        ccedil: ccedil,
        cedil: cedil,
        cent: cent,
        copy: copy,
        COPY: COPY,
        curren: curren,
        deg: deg,
        divide: divide,
        Eacute: Eacute,
        eacute: eacute,
        Ecirc: Ecirc,
        ecirc: ecirc,
        Egrave: Egrave,
        egrave: egrave,
        ETH: ETH,
        eth: eth,
        Euml: Euml,
        euml: euml,
        frac12: frac12,
        frac14: frac14,
        frac34: frac34,
        gt: gt$2,
        GT: GT,
        Iacute: Iacute,
        iacute: iacute,
        Icirc: Icirc,
        icirc: icirc,
        iexcl: iexcl,
        Igrave: Igrave,
        igrave: igrave,
        iquest: iquest,
        Iuml: Iuml,
        iuml: iuml,
        laquo: laquo,
        lt: lt$2,
        LT: LT,
        macr: macr,
        micro: micro,
        middot: middot,
        nbsp: nbsp,
        not: not,
        Ntilde: Ntilde,
        ntilde: ntilde,
        Oacute: Oacute,
        oacute: oacute,
        Ocirc: Ocirc,
        ocirc: ocirc,
        Ograve: Ograve,
        ograve: ograve,
        ordf: ordf,
        ordm: ordm,
        Oslash: Oslash,
        oslash: oslash,
        Otilde: Otilde,
        otilde: otilde,
        Ouml: Ouml,
        ouml: ouml,
        para: para,
        plusmn: plusmn,
        pound: pound,
        quot: quot$1,
        QUOT: QUOT,
        raquo: raquo,
        reg: reg,
        REG: REG,
        sect: sect,
        shy: shy,
        sup1: sup1,
        sup2: sup2,
        sup3: sup3,
        szlig: szlig,
        THORN: THORN,
        thorn: thorn,
        times: times,
        Uacute: Uacute,
        uacute: uacute,
        Ucirc: Ucirc,
        ucirc: ucirc,
        Ugrave: Ugrave,
        ugrave: ugrave,
        uml: uml,
        Uuml: Uuml,
        uuml: uuml,
        Yacute: Yacute,
        yacute: yacute,
        yen: yen,
        yuml: yuml,
        'default': legacy$1
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var amp="&";var apos="'";var gt$1=">";var lt$1="<";var quot="\"";var xml = {amp:amp,apos:apos,gt:gt$1,lt:lt$1,quot:quot};

    var xml$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        amp: amp,
        apos: apos,
        gt: gt$1,
        lt: lt$1,
        quot: quot,
        'default': xml
    });

    var require$$1$1 = getCjsExportFromNamespace(entities$1);

    var require$$1 = getCjsExportFromNamespace(legacy$2);

    var require$$0 = getCjsExportFromNamespace(xml$1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var Tokenizer_1 = createCommonjsModule$1(function (module, exports) {
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var decode_codepoint_1 = __importDefault(decode_codepoint);
    var entities_json_1 = __importDefault(require$$1$1);
    var legacy_json_1 = __importDefault(require$$1);
    var xml_json_1 = __importDefault(require$$0);
    function whitespace(c) {
        return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
    }
    function isASCIIAlpha(c) {
        return (c >= "a" && c <= "z") || (c >= "A" && c <= "Z");
    }
    function ifElseState(upper, SUCCESS, FAILURE) {
        var lower = upper.toLowerCase();
        if (upper === lower) {
            return function (t, c) {
                if (c === lower) {
                    t._state = SUCCESS;
                }
                else {
                    t._state = FAILURE;
                    t._index--;
                }
            };
        }
        return function (t, c) {
            if (c === lower || c === upper) {
                t._state = SUCCESS;
            }
            else {
                t._state = FAILURE;
                t._index--;
            }
        };
    }
    function consumeSpecialNameChar(upper, NEXT_STATE) {
        var lower = upper.toLowerCase();
        return function (t, c) {
            if (c === lower || c === upper) {
                t._state = NEXT_STATE;
            }
            else {
                t._state = 3 /* InTagName */;
                t._index--; // Consume the token again
            }
        };
    }
    var stateBeforeCdata1 = ifElseState("C", 24 /* BeforeCdata2 */, 16 /* InDeclaration */);
    var stateBeforeCdata2 = ifElseState("D", 25 /* BeforeCdata3 */, 16 /* InDeclaration */);
    var stateBeforeCdata3 = ifElseState("A", 26 /* BeforeCdata4 */, 16 /* InDeclaration */);
    var stateBeforeCdata4 = ifElseState("T", 27 /* BeforeCdata5 */, 16 /* InDeclaration */);
    var stateBeforeCdata5 = ifElseState("A", 28 /* BeforeCdata6 */, 16 /* InDeclaration */);
    var stateBeforeScript1 = consumeSpecialNameChar("R", 35 /* BeforeScript2 */);
    var stateBeforeScript2 = consumeSpecialNameChar("I", 36 /* BeforeScript3 */);
    var stateBeforeScript3 = consumeSpecialNameChar("P", 37 /* BeforeScript4 */);
    var stateBeforeScript4 = consumeSpecialNameChar("T", 38 /* BeforeScript5 */);
    var stateAfterScript1 = ifElseState("R", 40 /* AfterScript2 */, 1 /* Text */);
    var stateAfterScript2 = ifElseState("I", 41 /* AfterScript3 */, 1 /* Text */);
    var stateAfterScript3 = ifElseState("P", 42 /* AfterScript4 */, 1 /* Text */);
    var stateAfterScript4 = ifElseState("T", 43 /* AfterScript5 */, 1 /* Text */);
    var stateBeforeStyle1 = consumeSpecialNameChar("Y", 45 /* BeforeStyle2 */);
    var stateBeforeStyle2 = consumeSpecialNameChar("L", 46 /* BeforeStyle3 */);
    var stateBeforeStyle3 = consumeSpecialNameChar("E", 47 /* BeforeStyle4 */);
    var stateAfterStyle1 = ifElseState("Y", 49 /* AfterStyle2 */, 1 /* Text */);
    var stateAfterStyle2 = ifElseState("L", 50 /* AfterStyle3 */, 1 /* Text */);
    var stateAfterStyle3 = ifElseState("E", 51 /* AfterStyle4 */, 1 /* Text */);
    var stateBeforeSpecialT = consumeSpecialNameChar("I", 54 /* BeforeTitle1 */);
    var stateBeforeTitle1 = consumeSpecialNameChar("T", 55 /* BeforeTitle2 */);
    var stateBeforeTitle2 = consumeSpecialNameChar("L", 56 /* BeforeTitle3 */);
    var stateBeforeTitle3 = consumeSpecialNameChar("E", 57 /* BeforeTitle4 */);
    var stateAfterSpecialTEnd = ifElseState("I", 58 /* AfterTitle1 */, 1 /* Text */);
    var stateAfterTitle1 = ifElseState("T", 59 /* AfterTitle2 */, 1 /* Text */);
    var stateAfterTitle2 = ifElseState("L", 60 /* AfterTitle3 */, 1 /* Text */);
    var stateAfterTitle3 = ifElseState("E", 61 /* AfterTitle4 */, 1 /* Text */);
    var stateBeforeEntity = ifElseState("#", 63 /* BeforeNumericEntity */, 64 /* InNamedEntity */);
    var stateBeforeNumericEntity = ifElseState("X", 66 /* InHexEntity */, 65 /* InNumericEntity */);
    var Tokenizer = /** @class */ (function () {
        function Tokenizer(options, cbs) {
            var _a;
            /** The current state the tokenizer is in. */
            this._state = 1 /* Text */;
            /** The read buffer. */
            this.buffer = "";
            /** The beginning of the section that is currently being read. */
            this.sectionStart = 0;
            /** The index within the buffer that we are currently looking at. */
            this._index = 0;
            /**
             * Data that has already been processed will be removed from the buffer occasionally.
             * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.
             */
            this.bufferOffset = 0;
            /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */
            this.baseState = 1 /* Text */;
            /** For special parsing behavior inside of script and style tags. */
            this.special = 1 /* None */;
            /** Indicates whether the tokenizer has been paused. */
            this.running = true;
            /** Indicates whether the tokenizer has finished running / `.end` has been called. */
            this.ended = false;
            this.cbs = cbs;
            this.xmlMode = !!(options === null || options === void 0 ? void 0 : options.xmlMode);
            this.decodeEntities = (_a = options === null || options === void 0 ? void 0 : options.decodeEntities) !== null && _a !== void 0 ? _a : true;
        }
        Tokenizer.prototype.reset = function () {
            this._state = 1 /* Text */;
            this.buffer = "";
            this.sectionStart = 0;
            this._index = 0;
            this.bufferOffset = 0;
            this.baseState = 1 /* Text */;
            this.special = 1 /* None */;
            this.running = true;
            this.ended = false;
        };
        Tokenizer.prototype.write = function (chunk) {
            if (this.ended)
                this.cbs.onerror(Error(".write() after done!"));
            this.buffer += chunk;
            this.parse();
        };
        Tokenizer.prototype.end = function (chunk) {
            if (this.ended)
                this.cbs.onerror(Error(".end() after done!"));
            if (chunk)
                this.write(chunk);
            this.ended = true;
            if (this.running)
                this.finish();
        };
        Tokenizer.prototype.pause = function () {
            this.running = false;
        };
        Tokenizer.prototype.resume = function () {
            this.running = true;
            if (this._index < this.buffer.length) {
                this.parse();
            }
            if (this.ended) {
                this.finish();
            }
        };
        /**
         * The current index within all of the written data.
         */
        Tokenizer.prototype.getAbsoluteIndex = function () {
            return this.bufferOffset + this._index;
        };
        Tokenizer.prototype.stateText = function (c) {
            if (c === "<") {
                if (this._index > this.sectionStart) {
                    this.cbs.ontext(this.getSection());
                }
                this._state = 2 /* BeforeTagName */;
                this.sectionStart = this._index;
            }
            else if (this.decodeEntities &&
                c === "&" &&
                (this.special === 1 /* None */ || this.special === 4 /* Title */)) {
                if (this._index > this.sectionStart) {
                    this.cbs.ontext(this.getSection());
                }
                this.baseState = 1 /* Text */;
                this._state = 62 /* BeforeEntity */;
                this.sectionStart = this._index;
            }
        };
        Tokenizer.prototype.stateBeforeTagName = function (c) {
            if (c === "/") {
                this._state = 5 /* BeforeClosingTagName */;
            }
            else if (c === "<") {
                this.cbs.ontext(this.getSection());
                this.sectionStart = this._index;
            }
            else if (c === ">" ||
                this.special !== 1 /* None */ ||
                whitespace(c)) {
                this._state = 1 /* Text */;
            }
            else if (c === "!") {
                this._state = 15 /* BeforeDeclaration */;
                this.sectionStart = this._index + 1;
            }
            else if (c === "?") {
                this._state = 17 /* InProcessingInstruction */;
                this.sectionStart = this._index + 1;
            }
            else if (!isASCIIAlpha(c)) {
                this._state = 1 /* Text */;
            }
            else {
                this._state =
                    !this.xmlMode && (c === "s" || c === "S")
                        ? 32 /* BeforeSpecialS */
                        : !this.xmlMode && (c === "t" || c === "T")
                            ? 52 /* BeforeSpecialT */
                            : 3 /* InTagName */;
                this.sectionStart = this._index;
            }
        };
        Tokenizer.prototype.stateInTagName = function (c) {
            if (c === "/" || c === ">" || whitespace(c)) {
                this.emitToken("onopentagname");
                this._state = 8 /* BeforeAttributeName */;
                this._index--;
            }
        };
        Tokenizer.prototype.stateBeforeClosingTagName = function (c) {
            if (whitespace(c)) ;
            else if (c === ">") {
                this._state = 1 /* Text */;
            }
            else if (this.special !== 1 /* None */) {
                if (c === "s" || c === "S") {
                    this._state = 33 /* BeforeSpecialSEnd */;
                }
                else if (c === "t" || c === "T") {
                    this._state = 53 /* BeforeSpecialTEnd */;
                }
                else {
                    this._state = 1 /* Text */;
                    this._index--;
                }
            }
            else if (!isASCIIAlpha(c)) {
                this._state = 20 /* InSpecialComment */;
                this.sectionStart = this._index;
            }
            else {
                this._state = 6 /* InClosingTagName */;
                this.sectionStart = this._index;
            }
        };
        Tokenizer.prototype.stateInClosingTagName = function (c) {
            if (c === ">" || whitespace(c)) {
                this.emitToken("onclosetag");
                this._state = 7 /* AfterClosingTagName */;
                this._index--;
            }
        };
        Tokenizer.prototype.stateAfterClosingTagName = function (c) {
            // Skip everything until ">"
            if (c === ">") {
                this._state = 1 /* Text */;
                this.sectionStart = this._index + 1;
            }
        };
        Tokenizer.prototype.stateBeforeAttributeName = function (c) {
            if (c === ">") {
                this.cbs.onopentagend();
                this._state = 1 /* Text */;
                this.sectionStart = this._index + 1;
            }
            else if (c === "/") {
                this._state = 4 /* InSelfClosingTag */;
            }
            else if (!whitespace(c)) {
                this._state = 9 /* InAttributeName */;
                this.sectionStart = this._index;
            }
        };
        Tokenizer.prototype.stateInSelfClosingTag = function (c) {
            if (c === ">") {
                this.cbs.onselfclosingtag();
                this._state = 1 /* Text */;
                this.sectionStart = this._index + 1;
                this.special = 1 /* None */; // Reset special state, in case of self-closing special tags
            }
            else if (!whitespace(c)) {
                this._state = 8 /* BeforeAttributeName */;
                this._index--;
            }
        };
        Tokenizer.prototype.stateInAttributeName = function (c) {
            if (c === "=" || c === "/" || c === ">" || whitespace(c)) {
                this.cbs.onattribname(this.getSection());
                this.sectionStart = -1;
                this._state = 10 /* AfterAttributeName */;
                this._index--;
            }
        };
        Tokenizer.prototype.stateAfterAttributeName = function (c) {
            if (c === "=") {
                this._state = 11 /* BeforeAttributeValue */;
            }
            else if (c === "/" || c === ">") {
                this.cbs.onattribend(undefined);
                this._state = 8 /* BeforeAttributeName */;
                this._index--;
            }
            else if (!whitespace(c)) {
                this.cbs.onattribend(undefined);
                this._state = 9 /* InAttributeName */;
                this.sectionStart = this._index;
            }
        };
        Tokenizer.prototype.stateBeforeAttributeValue = function (c) {
            if (c === '"') {
                this._state = 12 /* InAttributeValueDq */;
                this.sectionStart = this._index + 1;
            }
            else if (c === "'") {
                this._state = 13 /* InAttributeValueSq */;
                this.sectionStart = this._index + 1;
            }
            else if (!whitespace(c)) {
                this._state = 14 /* InAttributeValueNq */;
                this.sectionStart = this._index;
                this._index--; // Reconsume token
            }
        };
        Tokenizer.prototype.handleInAttributeValue = function (c, quote) {
            if (c === quote) {
                this.emitToken("onattribdata");
                this.cbs.onattribend(quote);
                this._state = 8 /* BeforeAttributeName */;
            }
            else if (this.decodeEntities && c === "&") {
                this.emitToken("onattribdata");
                this.baseState = this._state;
                this._state = 62 /* BeforeEntity */;
                this.sectionStart = this._index;
            }
        };
        Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function (c) {
            this.handleInAttributeValue(c, '"');
        };
        Tokenizer.prototype.stateInAttributeValueSingleQuotes = function (c) {
            this.handleInAttributeValue(c, "'");
        };
        Tokenizer.prototype.stateInAttributeValueNoQuotes = function (c) {
            if (whitespace(c) || c === ">") {
                this.emitToken("onattribdata");
                this.cbs.onattribend(null);
                this._state = 8 /* BeforeAttributeName */;
                this._index--;
            }
            else if (this.decodeEntities && c === "&") {
                this.emitToken("onattribdata");
                this.baseState = this._state;
                this._state = 62 /* BeforeEntity */;
                this.sectionStart = this._index;
            }
        };
        Tokenizer.prototype.stateBeforeDeclaration = function (c) {
            this._state =
                c === "["
                    ? 23 /* BeforeCdata1 */
                    : c === "-"
                        ? 18 /* BeforeComment */
                        : 16 /* InDeclaration */;
        };
        Tokenizer.prototype.stateInDeclaration = function (c) {
            if (c === ">") {
                this.cbs.ondeclaration(this.getSection());
                this._state = 1 /* Text */;
                this.sectionStart = this._index + 1;
            }
        };
        Tokenizer.prototype.stateInProcessingInstruction = function (c) {
            if (c === ">") {
                this.cbs.onprocessinginstruction(this.getSection());
                this._state = 1 /* Text */;
                this.sectionStart = this._index + 1;
            }
        };
        Tokenizer.prototype.stateBeforeComment = function (c) {
            if (c === "-") {
                this._state = 19 /* InComment */;
                this.sectionStart = this._index + 1;
            }
            else {
                this._state = 16 /* InDeclaration */;
            }
        };
        Tokenizer.prototype.stateInComment = function (c) {
            if (c === "-")
                this._state = 21 /* AfterComment1 */;
        };
        Tokenizer.prototype.stateInSpecialComment = function (c) {
            if (c === ">") {
                this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index));
                this._state = 1 /* Text */;
                this.sectionStart = this._index + 1;
            }
        };
        Tokenizer.prototype.stateAfterComment1 = function (c) {
            if (c === "-") {
                this._state = 22 /* AfterComment2 */;
            }
            else {
                this._state = 19 /* InComment */;
            }
        };
        Tokenizer.prototype.stateAfterComment2 = function (c) {
            if (c === ">") {
                // Remove 2 trailing chars
                this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index - 2));
                this._state = 1 /* Text */;
                this.sectionStart = this._index + 1;
            }
            else if (c !== "-") {
                this._state = 19 /* InComment */;
            }
            // Else: stay in AFTER_COMMENT_2 (`--->`)
        };
        Tokenizer.prototype.stateBeforeCdata6 = function (c) {
            if (c === "[") {
                this._state = 29 /* InCdata */;
                this.sectionStart = this._index + 1;
            }
            else {
                this._state = 16 /* InDeclaration */;
                this._index--;
            }
        };
        Tokenizer.prototype.stateInCdata = function (c) {
            if (c === "]")
                this._state = 30 /* AfterCdata1 */;
        };
        Tokenizer.prototype.stateAfterCdata1 = function (c) {
            if (c === "]")
                this._state = 31 /* AfterCdata2 */;
            else
                this._state = 29 /* InCdata */;
        };
        Tokenizer.prototype.stateAfterCdata2 = function (c) {
            if (c === ">") {
                // Remove 2 trailing chars
                this.cbs.oncdata(this.buffer.substring(this.sectionStart, this._index - 2));
                this._state = 1 /* Text */;
                this.sectionStart = this._index + 1;
            }
            else if (c !== "]") {
                this._state = 29 /* InCdata */;
            }
            // Else: stay in AFTER_CDATA_2 (`]]]>`)
        };
        Tokenizer.prototype.stateBeforeSpecialS = function (c) {
            if (c === "c" || c === "C") {
                this._state = 34 /* BeforeScript1 */;
            }
            else if (c === "t" || c === "T") {
                this._state = 44 /* BeforeStyle1 */;
            }
            else {
                this._state = 3 /* InTagName */;
                this._index--; // Consume the token again
            }
        };
        Tokenizer.prototype.stateBeforeSpecialSEnd = function (c) {
            if (this.special === 2 /* Script */ && (c === "c" || c === "C")) {
                this._state = 39 /* AfterScript1 */;
            }
            else if (this.special === 3 /* Style */ && (c === "t" || c === "T")) {
                this._state = 48 /* AfterStyle1 */;
            }
            else
                this._state = 1 /* Text */;
        };
        Tokenizer.prototype.stateBeforeSpecialLast = function (c, special) {
            if (c === "/" || c === ">" || whitespace(c)) {
                this.special = special;
            }
            this._state = 3 /* InTagName */;
            this._index--; // Consume the token again
        };
        Tokenizer.prototype.stateAfterSpecialLast = function (c, sectionStartOffset) {
            if (c === ">" || whitespace(c)) {
                this.special = 1 /* None */;
                this._state = 6 /* InClosingTagName */;
                this.sectionStart = this._index - sectionStartOffset;
                this._index--; // Reconsume the token
            }
            else
                this._state = 1 /* Text */;
        };
        // For entities terminated with a semicolon
        Tokenizer.prototype.parseFixedEntity = function (map) {
            if (map === void 0) { map = this.xmlMode ? xml_json_1.default : entities_json_1.default; }
            // Offset = 1
            if (this.sectionStart + 1 < this._index) {
                var entity = this.buffer.substring(this.sectionStart + 1, this._index);
                if (Object.prototype.hasOwnProperty.call(map, entity)) {
                    this.emitPartial(map[entity]);
                    this.sectionStart = this._index + 1;
                }
            }
        };
        // Parses legacy entities (without trailing semicolon)
        Tokenizer.prototype.parseLegacyEntity = function () {
            var start = this.sectionStart + 1;
            // The max length of legacy entities is 6
            var limit = Math.min(this._index - start, 6);
            while (limit >= 2) {
                // The min length of legacy entities is 2
                var entity = this.buffer.substr(start, limit);
                if (Object.prototype.hasOwnProperty.call(legacy_json_1.default, entity)) {
                    this.emitPartial(legacy_json_1.default[entity]);
                    this.sectionStart += limit + 1;
                    return;
                }
                limit--;
            }
        };
        Tokenizer.prototype.stateInNamedEntity = function (c) {
            if (c === ";") {
                this.parseFixedEntity();
                // Retry as legacy entity if entity wasn't parsed
                if (this.baseState === 1 /* Text */ &&
                    this.sectionStart + 1 < this._index &&
                    !this.xmlMode) {
                    this.parseLegacyEntity();
                }
                this._state = this.baseState;
            }
            else if ((c < "0" || c > "9") && !isASCIIAlpha(c)) {
                if (this.xmlMode || this.sectionStart + 1 === this._index) ;
                else if (this.baseState !== 1 /* Text */) {
                    if (c !== "=") {
                        // Parse as legacy entity, without allowing additional characters.
                        this.parseFixedEntity(legacy_json_1.default);
                    }
                }
                else {
                    this.parseLegacyEntity();
                }
                this._state = this.baseState;
                this._index--;
            }
        };
        Tokenizer.prototype.decodeNumericEntity = function (offset, base, strict) {
            var sectionStart = this.sectionStart + offset;
            if (sectionStart !== this._index) {
                // Parse entity
                var entity = this.buffer.substring(sectionStart, this._index);
                var parsed = parseInt(entity, base);
                this.emitPartial(decode_codepoint_1.default(parsed));
                this.sectionStart = strict ? this._index + 1 : this._index;
            }
            this._state = this.baseState;
        };
        Tokenizer.prototype.stateInNumericEntity = function (c) {
            if (c === ";") {
                this.decodeNumericEntity(2, 10, true);
            }
            else if (c < "0" || c > "9") {
                if (!this.xmlMode) {
                    this.decodeNumericEntity(2, 10, false);
                }
                else {
                    this._state = this.baseState;
                }
                this._index--;
            }
        };
        Tokenizer.prototype.stateInHexEntity = function (c) {
            if (c === ";") {
                this.decodeNumericEntity(3, 16, true);
            }
            else if ((c < "a" || c > "f") &&
                (c < "A" || c > "F") &&
                (c < "0" || c > "9")) {
                if (!this.xmlMode) {
                    this.decodeNumericEntity(3, 16, false);
                }
                else {
                    this._state = this.baseState;
                }
                this._index--;
            }
        };
        Tokenizer.prototype.cleanup = function () {
            if (this.sectionStart < 0) {
                this.buffer = "";
                this.bufferOffset += this._index;
                this._index = 0;
            }
            else if (this.running) {
                if (this._state === 1 /* Text */) {
                    if (this.sectionStart !== this._index) {
                        this.cbs.ontext(this.buffer.substr(this.sectionStart));
                    }
                    this.buffer = "";
                    this.bufferOffset += this._index;
                    this._index = 0;
                }
                else if (this.sectionStart === this._index) {
                    // The section just started
                    this.buffer = "";
                    this.bufferOffset += this._index;
                    this._index = 0;
                }
                else {
                    // Remove everything unnecessary
                    this.buffer = this.buffer.substr(this.sectionStart);
                    this._index -= this.sectionStart;
                    this.bufferOffset += this.sectionStart;
                }
                this.sectionStart = 0;
            }
        };
        /**
         * Iterates through the buffer, calling the function corresponding to the current state.
         *
         * States that are more likely to be hit are higher up, as a performance improvement.
         */
        Tokenizer.prototype.parse = function () {
            while (this._index < this.buffer.length && this.running) {
                var c = this.buffer.charAt(this._index);
                if (this._state === 1 /* Text */) {
                    this.stateText(c);
                }
                else if (this._state === 12 /* InAttributeValueDq */) {
                    this.stateInAttributeValueDoubleQuotes(c);
                }
                else if (this._state === 9 /* InAttributeName */) {
                    this.stateInAttributeName(c);
                }
                else if (this._state === 19 /* InComment */) {
                    this.stateInComment(c);
                }
                else if (this._state === 20 /* InSpecialComment */) {
                    this.stateInSpecialComment(c);
                }
                else if (this._state === 8 /* BeforeAttributeName */) {
                    this.stateBeforeAttributeName(c);
                }
                else if (this._state === 3 /* InTagName */) {
                    this.stateInTagName(c);
                }
                else if (this._state === 6 /* InClosingTagName */) {
                    this.stateInClosingTagName(c);
                }
                else if (this._state === 2 /* BeforeTagName */) {
                    this.stateBeforeTagName(c);
                }
                else if (this._state === 10 /* AfterAttributeName */) {
                    this.stateAfterAttributeName(c);
                }
                else if (this._state === 13 /* InAttributeValueSq */) {
                    this.stateInAttributeValueSingleQuotes(c);
                }
                else if (this._state === 11 /* BeforeAttributeValue */) {
                    this.stateBeforeAttributeValue(c);
                }
                else if (this._state === 5 /* BeforeClosingTagName */) {
                    this.stateBeforeClosingTagName(c);
                }
                else if (this._state === 7 /* AfterClosingTagName */) {
                    this.stateAfterClosingTagName(c);
                }
                else if (this._state === 32 /* BeforeSpecialS */) {
                    this.stateBeforeSpecialS(c);
                }
                else if (this._state === 21 /* AfterComment1 */) {
                    this.stateAfterComment1(c);
                }
                else if (this._state === 14 /* InAttributeValueNq */) {
                    this.stateInAttributeValueNoQuotes(c);
                }
                else if (this._state === 4 /* InSelfClosingTag */) {
                    this.stateInSelfClosingTag(c);
                }
                else if (this._state === 16 /* InDeclaration */) {
                    this.stateInDeclaration(c);
                }
                else if (this._state === 15 /* BeforeDeclaration */) {
                    this.stateBeforeDeclaration(c);
                }
                else if (this._state === 22 /* AfterComment2 */) {
                    this.stateAfterComment2(c);
                }
                else if (this._state === 18 /* BeforeComment */) {
                    this.stateBeforeComment(c);
                }
                else if (this._state === 33 /* BeforeSpecialSEnd */) {
                    this.stateBeforeSpecialSEnd(c);
                }
                else if (this._state === 53 /* BeforeSpecialTEnd */) {
                    stateAfterSpecialTEnd(this, c);
                }
                else if (this._state === 39 /* AfterScript1 */) {
                    stateAfterScript1(this, c);
                }
                else if (this._state === 40 /* AfterScript2 */) {
                    stateAfterScript2(this, c);
                }
                else if (this._state === 41 /* AfterScript3 */) {
                    stateAfterScript3(this, c);
                }
                else if (this._state === 34 /* BeforeScript1 */) {
                    stateBeforeScript1(this, c);
                }
                else if (this._state === 35 /* BeforeScript2 */) {
                    stateBeforeScript2(this, c);
                }
                else if (this._state === 36 /* BeforeScript3 */) {
                    stateBeforeScript3(this, c);
                }
                else if (this._state === 37 /* BeforeScript4 */) {
                    stateBeforeScript4(this, c);
                }
                else if (this._state === 38 /* BeforeScript5 */) {
                    this.stateBeforeSpecialLast(c, 2 /* Script */);
                }
                else if (this._state === 42 /* AfterScript4 */) {
                    stateAfterScript4(this, c);
                }
                else if (this._state === 43 /* AfterScript5 */) {
                    this.stateAfterSpecialLast(c, 6);
                }
                else if (this._state === 44 /* BeforeStyle1 */) {
                    stateBeforeStyle1(this, c);
                }
                else if (this._state === 29 /* InCdata */) {
                    this.stateInCdata(c);
                }
                else if (this._state === 45 /* BeforeStyle2 */) {
                    stateBeforeStyle2(this, c);
                }
                else if (this._state === 46 /* BeforeStyle3 */) {
                    stateBeforeStyle3(this, c);
                }
                else if (this._state === 47 /* BeforeStyle4 */) {
                    this.stateBeforeSpecialLast(c, 3 /* Style */);
                }
                else if (this._state === 48 /* AfterStyle1 */) {
                    stateAfterStyle1(this, c);
                }
                else if (this._state === 49 /* AfterStyle2 */) {
                    stateAfterStyle2(this, c);
                }
                else if (this._state === 50 /* AfterStyle3 */) {
                    stateAfterStyle3(this, c);
                }
                else if (this._state === 51 /* AfterStyle4 */) {
                    this.stateAfterSpecialLast(c, 5);
                }
                else if (this._state === 52 /* BeforeSpecialT */) {
                    stateBeforeSpecialT(this, c);
                }
                else if (this._state === 54 /* BeforeTitle1 */) {
                    stateBeforeTitle1(this, c);
                }
                else if (this._state === 55 /* BeforeTitle2 */) {
                    stateBeforeTitle2(this, c);
                }
                else if (this._state === 56 /* BeforeTitle3 */) {
                    stateBeforeTitle3(this, c);
                }
                else if (this._state === 57 /* BeforeTitle4 */) {
                    this.stateBeforeSpecialLast(c, 4 /* Title */);
                }
                else if (this._state === 58 /* AfterTitle1 */) {
                    stateAfterTitle1(this, c);
                }
                else if (this._state === 59 /* AfterTitle2 */) {
                    stateAfterTitle2(this, c);
                }
                else if (this._state === 60 /* AfterTitle3 */) {
                    stateAfterTitle3(this, c);
                }
                else if (this._state === 61 /* AfterTitle4 */) {
                    this.stateAfterSpecialLast(c, 5);
                }
                else if (this._state === 17 /* InProcessingInstruction */) {
                    this.stateInProcessingInstruction(c);
                }
                else if (this._state === 64 /* InNamedEntity */) {
                    this.stateInNamedEntity(c);
                }
                else if (this._state === 23 /* BeforeCdata1 */) {
                    stateBeforeCdata1(this, c);
                }
                else if (this._state === 62 /* BeforeEntity */) {
                    stateBeforeEntity(this, c);
                }
                else if (this._state === 24 /* BeforeCdata2 */) {
                    stateBeforeCdata2(this, c);
                }
                else if (this._state === 25 /* BeforeCdata3 */) {
                    stateBeforeCdata3(this, c);
                }
                else if (this._state === 30 /* AfterCdata1 */) {
                    this.stateAfterCdata1(c);
                }
                else if (this._state === 31 /* AfterCdata2 */) {
                    this.stateAfterCdata2(c);
                }
                else if (this._state === 26 /* BeforeCdata4 */) {
                    stateBeforeCdata4(this, c);
                }
                else if (this._state === 27 /* BeforeCdata5 */) {
                    stateBeforeCdata5(this, c);
                }
                else if (this._state === 28 /* BeforeCdata6 */) {
                    this.stateBeforeCdata6(c);
                }
                else if (this._state === 66 /* InHexEntity */) {
                    this.stateInHexEntity(c);
                }
                else if (this._state === 65 /* InNumericEntity */) {
                    this.stateInNumericEntity(c);
                    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
                }
                else if (this._state === 63 /* BeforeNumericEntity */) {
                    stateBeforeNumericEntity(this, c);
                }
                else {
                    this.cbs.onerror(Error("unknown _state"), this._state);
                }
                this._index++;
            }
            this.cleanup();
        };
        Tokenizer.prototype.finish = function () {
            // If there is remaining data, emit it in a reasonable way
            if (this.sectionStart < this._index) {
                this.handleTrailingData();
            }
            this.cbs.onend();
        };
        Tokenizer.prototype.handleTrailingData = function () {
            var data = this.buffer.substr(this.sectionStart);
            if (this._state === 29 /* InCdata */ ||
                this._state === 30 /* AfterCdata1 */ ||
                this._state === 31 /* AfterCdata2 */) {
                this.cbs.oncdata(data);
            }
            else if (this._state === 19 /* InComment */ ||
                this._state === 21 /* AfterComment1 */ ||
                this._state === 22 /* AfterComment2 */) {
                this.cbs.oncomment(data);
            }
            else if (this._state === 64 /* InNamedEntity */ && !this.xmlMode) {
                this.parseLegacyEntity();
                if (this.sectionStart < this._index) {
                    this._state = this.baseState;
                    this.handleTrailingData();
                }
            }
            else if (this._state === 65 /* InNumericEntity */ && !this.xmlMode) {
                this.decodeNumericEntity(2, 10, false);
                if (this.sectionStart < this._index) {
                    this._state = this.baseState;
                    this.handleTrailingData();
                }
            }
            else if (this._state === 66 /* InHexEntity */ && !this.xmlMode) {
                this.decodeNumericEntity(3, 16, false);
                if (this.sectionStart < this._index) {
                    this._state = this.baseState;
                    this.handleTrailingData();
                }
            }
            else if (this._state !== 3 /* InTagName */ &&
                this._state !== 8 /* BeforeAttributeName */ &&
                this._state !== 11 /* BeforeAttributeValue */ &&
                this._state !== 10 /* AfterAttributeName */ &&
                this._state !== 9 /* InAttributeName */ &&
                this._state !== 13 /* InAttributeValueSq */ &&
                this._state !== 12 /* InAttributeValueDq */ &&
                this._state !== 14 /* InAttributeValueNq */ &&
                this._state !== 6 /* InClosingTagName */) {
                this.cbs.ontext(data);
            }
            /*
             * Else, ignore remaining data
             * TODO add a way to remove current tag
             */
        };
        Tokenizer.prototype.getSection = function () {
            return this.buffer.substring(this.sectionStart, this._index);
        };
        Tokenizer.prototype.emitToken = function (name) {
            this.cbs[name](this.getSection());
            this.sectionStart = -1;
        };
        Tokenizer.prototype.emitPartial = function (value) {
            if (this.baseState !== 1 /* Text */) {
                this.cbs.onattribdata(value); // TODO implement the new event
            }
            else {
                this.cbs.ontext(value);
            }
        };
        return Tokenizer;
    }());
    exports.default = Tokenizer;
    });

    unwrapExports(Tokenizer_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var Parser_1$1 = createCommonjsModule$1(function (module, exports) {
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Parser = void 0;
    var Tokenizer_1$1 = __importDefault(Tokenizer_1);
    var formTags = new Set([
        "input",
        "option",
        "optgroup",
        "select",
        "button",
        "datalist",
        "textarea",
    ]);
    var pTag = new Set(["p"]);
    var openImpliesClose = {
        tr: new Set(["tr", "th", "td"]),
        th: new Set(["th"]),
        td: new Set(["thead", "th", "td"]),
        body: new Set(["head", "link", "script"]),
        li: new Set(["li"]),
        p: pTag,
        h1: pTag,
        h2: pTag,
        h3: pTag,
        h4: pTag,
        h5: pTag,
        h6: pTag,
        select: formTags,
        input: formTags,
        output: formTags,
        button: formTags,
        datalist: formTags,
        textarea: formTags,
        option: new Set(["option"]),
        optgroup: new Set(["optgroup", "option"]),
        dd: new Set(["dt", "dd"]),
        dt: new Set(["dt", "dd"]),
        address: pTag,
        article: pTag,
        aside: pTag,
        blockquote: pTag,
        details: pTag,
        div: pTag,
        dl: pTag,
        fieldset: pTag,
        figcaption: pTag,
        figure: pTag,
        footer: pTag,
        form: pTag,
        header: pTag,
        hr: pTag,
        main: pTag,
        nav: pTag,
        ol: pTag,
        pre: pTag,
        section: pTag,
        table: pTag,
        ul: pTag,
        rt: new Set(["rt", "rp"]),
        rp: new Set(["rt", "rp"]),
        tbody: new Set(["thead", "tbody"]),
        tfoot: new Set(["thead", "tbody"]),
    };
    var voidElements = new Set([
        "area",
        "base",
        "basefont",
        "br",
        "col",
        "command",
        "embed",
        "frame",
        "hr",
        "img",
        "input",
        "isindex",
        "keygen",
        "link",
        "meta",
        "param",
        "source",
        "track",
        "wbr",
    ]);
    var foreignContextElements = new Set(["math", "svg"]);
    var htmlIntegrationElements = new Set([
        "mi",
        "mo",
        "mn",
        "ms",
        "mtext",
        "annotation-xml",
        "foreignObject",
        "desc",
        "title",
    ]);
    var reNameEnd = /\s|\//;
    var Parser = /** @class */ (function () {
        function Parser(cbs, options) {
            if (options === void 0) { options = {}; }
            var _a, _b, _c, _d, _e;
            /** The start index of the last event. */
            this.startIndex = 0;
            /** The end index of the last event. */
            this.endIndex = null;
            this.tagname = "";
            this.attribname = "";
            this.attribvalue = "";
            this.attribs = null;
            this.stack = [];
            this.foreignContext = [];
            this.options = options;
            this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
            this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;
            this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;
            this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_1$1.default)(this.options, this);
            (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);
        }
        Parser.prototype.updatePosition = function (initialOffset) {
            if (this.endIndex === null) {
                if (this.tokenizer.sectionStart <= initialOffset) {
                    this.startIndex = 0;
                }
                else {
                    this.startIndex = this.tokenizer.sectionStart - initialOffset;
                }
            }
            else {
                this.startIndex = this.endIndex + 1;
            }
            this.endIndex = this.tokenizer.getAbsoluteIndex();
        };
        // Tokenizer event handlers
        Parser.prototype.ontext = function (data) {
            var _a, _b;
            this.updatePosition(1);
            this.endIndex--;
            (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);
        };
        Parser.prototype.onopentagname = function (name) {
            var _a, _b;
            if (this.lowerCaseTagNames) {
                name = name.toLowerCase();
            }
            this.tagname = name;
            if (!this.options.xmlMode &&
                Object.prototype.hasOwnProperty.call(openImpliesClose, name)) {
                var el = void 0;
                while (this.stack.length > 0 &&
                    openImpliesClose[name].has((el = this.stack[this.stack.length - 1]))) {
                    this.onclosetag(el);
                }
            }
            if (this.options.xmlMode || !voidElements.has(name)) {
                this.stack.push(name);
                if (foreignContextElements.has(name)) {
                    this.foreignContext.push(true);
                }
                else if (htmlIntegrationElements.has(name)) {
                    this.foreignContext.push(false);
                }
            }
            (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, name);
            if (this.cbs.onopentag)
                this.attribs = {};
        };
        Parser.prototype.onopentagend = function () {
            var _a, _b;
            this.updatePosition(1);
            if (this.attribs) {
                (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs);
                this.attribs = null;
            }
            if (!this.options.xmlMode &&
                this.cbs.onclosetag &&
                voidElements.has(this.tagname)) {
                this.cbs.onclosetag(this.tagname);
            }
            this.tagname = "";
        };
        Parser.prototype.onclosetag = function (name) {
            this.updatePosition(1);
            if (this.lowerCaseTagNames) {
                name = name.toLowerCase();
            }
            if (foreignContextElements.has(name) ||
                htmlIntegrationElements.has(name)) {
                this.foreignContext.pop();
            }
            if (this.stack.length &&
                (this.options.xmlMode || !voidElements.has(name))) {
                var pos = this.stack.lastIndexOf(name);
                if (pos !== -1) {
                    if (this.cbs.onclosetag) {
                        pos = this.stack.length - pos;
                        while (pos--) {
                            // We know the stack has sufficient elements.
                            this.cbs.onclosetag(this.stack.pop());
                        }
                    }
                    else
                        this.stack.length = pos;
                }
                else if (name === "p" && !this.options.xmlMode) {
                    this.onopentagname(name);
                    this.closeCurrentTag();
                }
            }
            else if (!this.options.xmlMode && (name === "br" || name === "p")) {
                this.onopentagname(name);
                this.closeCurrentTag();
            }
        };
        Parser.prototype.onselfclosingtag = function () {
            if (this.options.xmlMode ||
                this.options.recognizeSelfClosing ||
                this.foreignContext[this.foreignContext.length - 1]) {
                this.closeCurrentTag();
            }
            else {
                this.onopentagend();
            }
        };
        Parser.prototype.closeCurrentTag = function () {
            var _a, _b;
            var name = this.tagname;
            this.onopentagend();
            /*
             * Self-closing tags will be on the top of the stack
             * (cheaper check than in onclosetag)
             */
            if (this.stack[this.stack.length - 1] === name) {
                (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name);
                this.stack.pop();
            }
        };
        Parser.prototype.onattribname = function (name) {
            if (this.lowerCaseAttributeNames) {
                name = name.toLowerCase();
            }
            this.attribname = name;
        };
        Parser.prototype.onattribdata = function (value) {
            this.attribvalue += value;
        };
        Parser.prototype.onattribend = function (quote) {
            var _a, _b;
            (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote);
            if (this.attribs &&
                !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
                this.attribs[this.attribname] = this.attribvalue;
            }
            this.attribname = "";
            this.attribvalue = "";
        };
        Parser.prototype.getInstructionName = function (value) {
            var idx = value.search(reNameEnd);
            var name = idx < 0 ? value : value.substr(0, idx);
            if (this.lowerCaseTagNames) {
                name = name.toLowerCase();
            }
            return name;
        };
        Parser.prototype.ondeclaration = function (value) {
            if (this.cbs.onprocessinginstruction) {
                var name_1 = this.getInstructionName(value);
                this.cbs.onprocessinginstruction("!" + name_1, "!" + value);
            }
        };
        Parser.prototype.onprocessinginstruction = function (value) {
            if (this.cbs.onprocessinginstruction) {
                var name_2 = this.getInstructionName(value);
                this.cbs.onprocessinginstruction("?" + name_2, "?" + value);
            }
        };
        Parser.prototype.oncomment = function (value) {
            var _a, _b, _c, _d;
            this.updatePosition(4);
            (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, value);
            (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);
        };
        Parser.prototype.oncdata = function (value) {
            var _a, _b, _c, _d, _e, _f;
            this.updatePosition(1);
            if (this.options.xmlMode || this.options.recognizeCDATA) {
                (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);
                (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);
                (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);
            }
            else {
                this.oncomment("[CDATA[" + value + "]]");
            }
        };
        Parser.prototype.onerror = function (err) {
            var _a, _b;
            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, err);
        };
        Parser.prototype.onend = function () {
            var _a, _b;
            if (this.cbs.onclosetag) {
                for (var i = this.stack.length; i > 0; this.cbs.onclosetag(this.stack[--i]))
                    ;
            }
            (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);
        };
        /**
         * Resets the parser to a blank state, ready to parse a new HTML document
         */
        Parser.prototype.reset = function () {
            var _a, _b, _c, _d;
            (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);
            this.tokenizer.reset();
            this.tagname = "";
            this.attribname = "";
            this.attribs = null;
            this.stack = [];
            (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);
        };
        /**
         * Parses a complete document and pushes it to the handler.
         *
         * @param data Document to parse.
         */
        Parser.prototype.parseComplete = function (data) {
            this.reset();
            this.end(data);
        };
        /**
         * Parses a chunk of data and calls the corresponding callbacks.
         *
         * @param chunk Chunk to parse.
         */
        Parser.prototype.write = function (chunk) {
            this.tokenizer.write(chunk);
        };
        /**
         * Parses the end of the buffer and clears the stack, calls onend.
         *
         * @param chunk Optional final chunk to parse.
         */
        Parser.prototype.end = function (chunk) {
            this.tokenizer.end(chunk);
        };
        /**
         * Pauses parsing. The parser won't emit events until `resume` is called.
         */
        Parser.prototype.pause = function () {
            this.tokenizer.pause();
        };
        /**
         * Resumes parsing after `pause` was called.
         */
        Parser.prototype.resume = function () {
            this.tokenizer.resume();
        };
        /**
         * Alias of `write`, for backwards compatibility.
         *
         * @param chunk Chunk to parse.
         * @deprecated
         */
        Parser.prototype.parseChunk = function (chunk) {
            this.write(chunk);
        };
        /**
         * Alias of `end`, for backwards compatibility.
         *
         * @param chunk Optional final chunk to parse.
         * @deprecated
         */
        Parser.prototype.done = function (chunk) {
            this.end(chunk);
        };
        return Parser;
    }());
    exports.Parser = Parser;
    });

    unwrapExports(Parser_1$1);
    Parser_1$1.Parser;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var node$1 = createCommonjsModule$1(function (module, exports) {
    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cloneNode = exports.Element = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;
    var nodeTypes = new Map([
        ["tag" /* Tag */, 1],
        ["script" /* Script */, 1],
        ["style" /* Style */, 1],
        ["directive" /* Directive */, 1],
        ["text" /* Text */, 3],
        ["cdata" /* CDATA */, 4],
        ["comment" /* Comment */, 8],
    ]);
    /**
     * This object will be used as the prototype for Nodes when creating a
     * DOM-Level-1-compliant structure.
     */
    var Node = /** @class */ (function () {
        /**
         *
         * @param type The type of the node.
         */
        function Node(type) {
            this.type = type;
            /** Parent of the node */
            this.parent = null;
            /** Previous sibling */
            this.prev = null;
            /** Next sibling */
            this.next = null;
            /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */
            this.startIndex = null;
            /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */
            this.endIndex = null;
        }
        Object.defineProperty(Node.prototype, "nodeType", {
            // Read-only aliases
            get: function () {
                var _a;
                return (_a = nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Node.prototype, "parentNode", {
            // Read-write aliases for properties
            get: function () {
                return this.parent;
            },
            set: function (parent) {
                this.parent = parent;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Node.prototype, "previousSibling", {
            get: function () {
                return this.prev;
            },
            set: function (prev) {
                this.prev = prev;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Node.prototype, "nextSibling", {
            get: function () {
                return this.next;
            },
            set: function (next) {
                this.next = next;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Clone this node, and optionally its children.
         *
         * @param recursive Clone child nodes as well.
         * @returns A clone of the node.
         */
        Node.prototype.cloneNode = function (recursive) {
            if (recursive === void 0) { recursive = false; }
            return cloneNode(this, recursive);
        };
        return Node;
    }());
    exports.Node = Node;
    var DataNode = /** @class */ (function (_super) {
        __extends(DataNode, _super);
        /**
         * @param type The type of the node
         * @param data The content of the data node
         */
        function DataNode(type, data) {
            var _this = _super.call(this, type) || this;
            _this.data = data;
            return _this;
        }
        Object.defineProperty(DataNode.prototype, "nodeValue", {
            get: function () {
                return this.data;
            },
            set: function (data) {
                this.data = data;
            },
            enumerable: false,
            configurable: true
        });
        return DataNode;
    }(Node));
    exports.DataNode = DataNode;
    var Text = /** @class */ (function (_super) {
        __extends(Text, _super);
        function Text(data) {
            return _super.call(this, "text" /* Text */, data) || this;
        }
        return Text;
    }(DataNode));
    exports.Text = Text;
    var Comment = /** @class */ (function (_super) {
        __extends(Comment, _super);
        function Comment(data) {
            return _super.call(this, "comment" /* Comment */, data) || this;
        }
        return Comment;
    }(DataNode));
    exports.Comment = Comment;
    var ProcessingInstruction = /** @class */ (function (_super) {
        __extends(ProcessingInstruction, _super);
        function ProcessingInstruction(name, data) {
            var _this = _super.call(this, "directive" /* Directive */, data) || this;
            _this.name = name;
            return _this;
        }
        return ProcessingInstruction;
    }(DataNode));
    exports.ProcessingInstruction = ProcessingInstruction;
    var NodeWithChildren = /** @class */ (function (_super) {
        __extends(NodeWithChildren, _super);
        /**
         *
         * @param type Type of the node.
         * @param children Children of the node. Only certain node types can have children.
         */
        function NodeWithChildren(type, children) {
            var _this = _super.call(this, type) || this;
            _this.children = children;
            return _this;
        }
        Object.defineProperty(NodeWithChildren.prototype, "firstChild", {
            // Aliases
            get: function () {
                var _a;
                return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NodeWithChildren.prototype, "lastChild", {
            get: function () {
                return this.children.length > 0
                    ? this.children[this.children.length - 1]
                    : null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NodeWithChildren.prototype, "childNodes", {
            get: function () {
                return this.children;
            },
            set: function (children) {
                this.children = children;
            },
            enumerable: false,
            configurable: true
        });
        return NodeWithChildren;
    }(Node));
    exports.NodeWithChildren = NodeWithChildren;
    var Element = /** @class */ (function (_super) {
        __extends(Element, _super);
        /**
         * @param name Name of the tag, eg. `div`, `span`.
         * @param attribs Object mapping attribute names to attribute values.
         * @param children Children of the node.
         */
        function Element(name, attribs, children) {
            if (children === void 0) { children = []; }
            var _this = _super.call(this, name === "script"
                ? "script" /* Script */
                : name === "style"
                    ? "style" /* Style */
                    : "tag" /* Tag */, children) || this;
            _this.name = name;
            _this.attribs = attribs;
            _this.attribs = attribs;
            return _this;
        }
        Object.defineProperty(Element.prototype, "tagName", {
            // DOM Level 1 aliases
            get: function () {
                return this.name;
            },
            set: function (name) {
                this.name = name;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "attributes", {
            get: function () {
                var _this = this;
                return Object.keys(this.attribs).map(function (name) { return ({
                    name: name,
                    value: _this.attribs[name],
                }); });
            },
            enumerable: false,
            configurable: true
        });
        return Element;
    }(NodeWithChildren));
    exports.Element = Element;
    /**
     * Clone a node, and optionally its children.
     *
     * @param recursive Clone child nodes as well.
     * @returns A clone of the node.
     */
    function cloneNode(node, recursive) {
        if (recursive === void 0) { recursive = false; }
        switch (node.type) {
            case "text" /* Text */:
                return new Text(node.data);
            case "directive" /* Directive */: {
                var instr = node;
                return new ProcessingInstruction(instr.name, instr.data);
            }
            case "comment" /* Comment */:
                return new Comment(node.data);
            case "tag" /* Tag */:
            case "script" /* Script */:
            case "style" /* Style */: {
                var elem = node;
                var children = recursive ? cloneChildren(elem.children) : [];
                var clone_1 = new Element(elem.name, __assign({}, elem.attribs), children);
                children.forEach(function (child) { return (child.parent = clone_1); });
                return clone_1;
            }
            case "cdata" /* CDATA */: {
                var cdata = node;
                var children = recursive ? cloneChildren(cdata.children) : [];
                var clone_2 = new NodeWithChildren("cdata" /* CDATA */, children);
                children.forEach(function (child) { return (child.parent = clone_2); });
                return clone_2;
            }
            case "doctype" /* Doctype */: {
                // This type isn't used yet.
                throw new Error("Not implemented yet: ElementType.Doctype case");
            }
        }
    }
    exports.cloneNode = cloneNode;
    function cloneChildren(childs) {
        var children = childs.map(function (child) { return cloneNode(child, true); });
        for (var i = 1; i < children.length; i++) {
            children[i].prev = children[i - 1];
            children[i - 1].next = children[i];
        }
        return children;
    }
    });

    unwrapExports(node$1);
    node$1.cloneNode;
    node$1.Element;
    node$1.NodeWithChildren;
    node$1.ProcessingInstruction;
    node$1.Comment;
    node$1.Text;
    node$1.DataNode;
    node$1.Node;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var lib$6 = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DomHandler = void 0;

    __exportStar(node$1, exports);
    var reWhitespace = /\s+/g;
    // Default options
    var defaultOpts = {
        normalizeWhitespace: false,
        withStartIndices: false,
        withEndIndices: false,
    };
    var DomHandler = /** @class */ (function () {
        /**
         * @param callback Called once parsing has completed.
         * @param options Settings for the handler.
         * @param elementCB Callback whenever a tag is closed.
         */
        function DomHandler(callback, options, elementCB) {
            /** The constructed DOM */
            this.dom = [];
            /** Indicated whether parsing has been completed. */
            this._done = false;
            /** Stack of open tags. */
            this._tagStack = [];
            /** A data node that is still being written to. */
            this._lastNode = null;
            /** Reference to the parser instance. Used for location information. */
            this._parser = null;
            // Make it possible to skip arguments, for backwards-compatibility
            if (typeof options === "function") {
                elementCB = options;
                options = defaultOpts;
            }
            if (typeof callback === "object") {
                options = callback;
                callback = undefined;
            }
            this._callback = callback !== null && callback !== void 0 ? callback : null;
            this._options = options !== null && options !== void 0 ? options : defaultOpts;
            this._elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
        }
        DomHandler.prototype.onparserinit = function (parser) {
            this._parser = parser;
        };
        // Resets the handler back to starting state
        DomHandler.prototype.onreset = function () {
            var _a;
            this.dom = [];
            this._done = false;
            this._tagStack = [];
            this._lastNode = null;
            this._parser = (_a = this._parser) !== null && _a !== void 0 ? _a : null;
        };
        // Signals the handler that parsing is done
        DomHandler.prototype.onend = function () {
            if (this._done)
                return;
            this._done = true;
            this._parser = null;
            this.handleCallback(null);
        };
        DomHandler.prototype.onerror = function (error) {
            this.handleCallback(error);
        };
        DomHandler.prototype.onclosetag = function () {
            this._lastNode = null;
            var elem = this._tagStack.pop();
            if (!elem || !this._parser) {
                return;
            }
            if (this._options.withEndIndices) {
                elem.endIndex = this._parser.endIndex;
            }
            if (this._elementCB)
                this._elementCB(elem);
        };
        DomHandler.prototype.onopentag = function (name, attribs) {
            var element = new node$1.Element(name, attribs);
            this.addNode(element);
            this._tagStack.push(element);
        };
        DomHandler.prototype.ontext = function (data) {
            var normalize = this._options.normalizeWhitespace;
            var _lastNode = this._lastNode;
            if (_lastNode && _lastNode.type === "text" /* Text */) {
                if (normalize) {
                    _lastNode.data = (_lastNode.data + data).replace(reWhitespace, " ");
                }
                else {
                    _lastNode.data += data;
                }
            }
            else {
                if (normalize) {
                    data = data.replace(reWhitespace, " ");
                }
                var node = new node$1.Text(data);
                this.addNode(node);
                this._lastNode = node;
            }
        };
        DomHandler.prototype.oncomment = function (data) {
            if (this._lastNode && this._lastNode.type === "comment" /* Comment */) {
                this._lastNode.data += data;
                return;
            }
            var node = new node$1.Comment(data);
            this.addNode(node);
            this._lastNode = node;
        };
        DomHandler.prototype.oncommentend = function () {
            this._lastNode = null;
        };
        DomHandler.prototype.oncdatastart = function () {
            var text = new node$1.Text("");
            var node = new node$1.NodeWithChildren("cdata" /* CDATA */, [text]);
            this.addNode(node);
            text.parent = node;
            this._lastNode = text;
        };
        DomHandler.prototype.oncdataend = function () {
            this._lastNode = null;
        };
        DomHandler.prototype.onprocessinginstruction = function (name, data) {
            var node = new node$1.ProcessingInstruction(name, data);
            this.addNode(node);
        };
        DomHandler.prototype.handleCallback = function (error) {
            if (typeof this._callback === "function") {
                this._callback(error, this.dom);
            }
            else if (error) {
                throw error;
            }
        };
        DomHandler.prototype.addNode = function (node) {
            var parent = this._tagStack[this._tagStack.length - 1];
            var siblings = parent ? parent.children : this.dom;
            var previousSibling = siblings[siblings.length - 1];
            if (this._parser) {
                if (this._options.withStartIndices) {
                    node.startIndex = this._parser.startIndex;
                }
                if (this._options.withEndIndices) {
                    node.endIndex = this._parser.endIndex;
                }
            }
            siblings.push(node);
            if (previousSibling) {
                node.prev = previousSibling;
                previousSibling.next = node;
            }
            if (parent) {
                node.parent = parent;
            }
            this._lastNode = null;
        };
        DomHandler.prototype.addDataNode = function (node) {
            this.addNode(node);
            this._lastNode = node;
        };
        return DomHandler;
    }());
    exports.DomHandler = DomHandler;
    exports.default = DomHandler;
    });

    unwrapExports(lib$6);
    lib$6.DomHandler;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var lib$5 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = void 0;
    /**
     * Tests whether an element is a tag or not.
     *
     * @param elem Element to test
     */
    function isTag(elem) {
        return (elem.type === "tag" /* Tag */ ||
            elem.type === "script" /* Script */ ||
            elem.type === "style" /* Style */);
    }
    exports.isTag = isTag;
    // Exports for backwards compatibility
    /** Type for the root element of a document */
    exports.Root = "root" /* Root */;
    /** Type for Text */
    exports.Text = "text" /* Text */;
    /** Type for <? ... ?> */
    exports.Directive = "directive" /* Directive */;
    /** Type for <!-- ... --> */
    exports.Comment = "comment" /* Comment */;
    /** Type for <script> tags */
    exports.Script = "script" /* Script */;
    /** Type for <style> tags */
    exports.Style = "style" /* Style */;
    /** Type for Any tag */
    exports.Tag = "tag" /* Tag */;
    /** Type for <![CDATA[ ... ]]> */
    exports.CDATA = "cdata" /* CDATA */;
    /** Type for <!doctype ...> */
    exports.Doctype = "doctype" /* Doctype */;
    });

    unwrapExports(lib$5);
    lib$5.Doctype;
    lib$5.CDATA;
    lib$5.Tag;
    lib$5.Style;
    lib$5.Script;
    lib$5.Comment;
    lib$5.Directive;
    lib$5.Text;
    lib$5.Root;
    lib$5.isTag;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var tagtypes = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasChildren = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;

    /**
     * @param node Node to check.
     * @returns `true` if the node is a `Element`, `false` otherwise.
     */
    function isTag(node) {
        return lib$5.isTag(node);
    }
    exports.isTag = isTag;
    /**
     * @param node Node to check.
     * @returns `true` if the node has the type `CDATA`, `false` otherwise.
     */
    function isCDATA(node) {
        return node.type === "cdata" /* CDATA */;
    }
    exports.isCDATA = isCDATA;
    /**
     * @param node Node to check.
     * @returns `true` if the node has the type `Text`, `false` otherwise.
     */
    function isText(node) {
        return node.type === "text" /* Text */;
    }
    exports.isText = isText;
    /**
     * @param node Node to check.
     * @returns `true` if the node has the type `Comment`, `false` otherwise.
     */
    function isComment(node) {
        return node.type === "comment" /* Comment */;
    }
    exports.isComment = isComment;
    /**
     * @param node Node to check.
     * @returns `true` if the node is a `NodeWithChildren` (has children), `false` otherwise.
     */
    function hasChildren(node) {
        return Object.prototype.hasOwnProperty.call(node, "children");
    }
    exports.hasChildren = hasChildren;
    });

    unwrapExports(tagtypes);
    tagtypes.hasChildren;
    tagtypes.isComment;
    tagtypes.isText;
    tagtypes.isCDATA;
    tagtypes.isTag;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var decode = createCommonjsModule$1(function (module, exports) {
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;
    var entities_json_1 = __importDefault(require$$1$1);
    var legacy_json_1 = __importDefault(require$$1);
    var xml_json_1 = __importDefault(require$$0);
    var decode_codepoint_1 = __importDefault(decode_codepoint);
    var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
    exports.decodeXML = getStrictDecoder(xml_json_1.default);
    exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
    function getStrictDecoder(map) {
        var replace = getReplacer(map);
        return function (str) { return String(str).replace(strictEntityRe, replace); };
    }
    var sorter = function (a, b) { return (a < b ? 1 : -1); };
    exports.decodeHTML = (function () {
        var legacy = Object.keys(legacy_json_1.default).sort(sorter);
        var keys = Object.keys(entities_json_1.default).sort(sorter);
        for (var i = 0, j = 0; i < keys.length; i++) {
            if (legacy[j] === keys[i]) {
                keys[i] += ";?";
                j++;
            }
            else {
                keys[i] += ";";
            }
        }
        var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
        var replace = getReplacer(entities_json_1.default);
        function replacer(str) {
            if (str.substr(-1) !== ";")
                str += ";";
            return replace(str);
        }
        // TODO consider creating a merged map
        return function (str) { return String(str).replace(re, replacer); };
    })();
    function getReplacer(map) {
        return function replace(str) {
            if (str.charAt(1) === "#") {
                var secondChar = str.charAt(2);
                if (secondChar === "X" || secondChar === "x") {
                    return decode_codepoint_1.default(parseInt(str.substr(3), 16));
                }
                return decode_codepoint_1.default(parseInt(str.substr(2), 10));
            }
            // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
            return map[str.slice(1, -1)] || str;
        };
    }
    });

    unwrapExports(decode);
    decode.decodeHTML;
    decode.decodeHTMLStrict;
    decode.decodeXML;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var encode = createCommonjsModule$1(function (module, exports) {
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;
    var xml_json_1 = __importDefault(require$$0);
    var inverseXML = getInverseObj(xml_json_1.default);
    var xmlReplacer = getInverseReplacer(inverseXML);
    /**
     * Encodes all non-ASCII characters, as well as characters not valid in XML
     * documents using XML entities.
     *
     * If a character has no equivalent entity, a
     * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
     */
    exports.encodeXML = getASCIIEncoder(inverseXML);
    var entities_json_1 = __importDefault(require$$1$1);
    var inverseHTML = getInverseObj(entities_json_1.default);
    var htmlReplacer = getInverseReplacer(inverseHTML);
    /**
     * Encodes all entities and non-ASCII characters in the input.
     *
     * This includes characters that are valid ASCII characters in HTML documents.
     * For example `#` will be encoded as `&num;`. To get a more compact output,
     * consider using the `encodeNonAsciiHTML` function.
     *
     * If a character has no equivalent entity, a
     * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
     */
    exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
    /**
     * Encodes all non-ASCII characters, as well as characters not valid in HTML
     * documents using HTML entities.
     *
     * If a character has no equivalent entity, a
     * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
     */
    exports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
    function getInverseObj(obj) {
        return Object.keys(obj)
            .sort()
            .reduce(function (inverse, name) {
            inverse[obj[name]] = "&" + name + ";";
            return inverse;
        }, {});
    }
    function getInverseReplacer(inverse) {
        var single = [];
        var multiple = [];
        for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
            var k = _a[_i];
            if (k.length === 1) {
                // Add value to single array
                single.push("\\" + k);
            }
            else {
                // Add value to multiple array
                multiple.push(k);
            }
        }
        // Add ranges to single characters.
        single.sort();
        for (var start = 0; start < single.length - 1; start++) {
            // Find the end of a run of characters
            var end = start;
            while (end < single.length - 1 &&
                single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
                end += 1;
            }
            var count = 1 + end - start;
            // We want to replace at least three characters
            if (count < 3)
                continue;
            single.splice(start, count, single[start] + "-" + single[end]);
        }
        multiple.unshift("[" + single.join("") + "]");
        return new RegExp(multiple.join("|"), "g");
    }
    // /[^\0-\x7F]/gu
    var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
    var getCodePoint = 
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    String.prototype.codePointAt != null
        ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            function (str) { return str.codePointAt(0); }
        : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            function (c) {
                return (c.charCodeAt(0) - 0xd800) * 0x400 +
                    c.charCodeAt(1) -
                    0xdc00 +
                    0x10000;
            };
    function singleCharReplacer(c) {
        return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0))
            .toString(16)
            .toUpperCase() + ";";
    }
    function getInverse(inverse, re) {
        return function (data) {
            return data
                .replace(re, function (name) { return inverse[name]; })
                .replace(reNonASCII, singleCharReplacer);
        };
    }
    var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
    /**
     * Encodes all non-ASCII characters, as well as characters not valid in XML
     * documents using numeric hexadecimal reference (eg. `&#xfc;`).
     *
     * Have a look at `escapeUTF8` if you want a more concise output at the expense
     * of reduced transportability.
     *
     * @param data String to escape.
     */
    function escape(data) {
        return data.replace(reEscapeChars, singleCharReplacer);
    }
    exports.escape = escape;
    /**
     * Encodes all characters not valid in XML documents using numeric hexadecimal
     * reference (eg. `&#xfc;`).
     *
     * Note that the output will be character-set dependent.
     *
     * @param data String to escape.
     */
    function escapeUTF8(data) {
        return data.replace(xmlReplacer, singleCharReplacer);
    }
    exports.escapeUTF8 = escapeUTF8;
    function getASCIIEncoder(obj) {
        return function (data) {
            return data.replace(reEscapeChars, function (c) { return obj[c] || singleCharReplacer(c); });
        };
    }
    });

    unwrapExports(encode);
    encode.escapeUTF8;
    encode.escape;
    encode.encodeNonAsciiHTML;
    encode.encodeHTML;
    encode.encodeXML;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var lib$4 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;


    /**
     * Decodes a string with entities.
     *
     * @param data String to decode.
     * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
     * @deprecated Use `decodeXML` or `decodeHTML` directly.
     */
    function decode$1(data, level) {
        return (!level || level <= 0 ? decode.decodeXML : decode.decodeHTML)(data);
    }
    exports.decode = decode$1;
    /**
     * Decodes a string with entities. Does not allow missing trailing semicolons for entities.
     *
     * @param data String to decode.
     * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
     * @deprecated Use `decodeHTMLStrict` or `decodeXML` directly.
     */
    function decodeStrict(data, level) {
        return (!level || level <= 0 ? decode.decodeXML : decode.decodeHTMLStrict)(data);
    }
    exports.decodeStrict = decodeStrict;
    /**
     * Encodes a string with entities.
     *
     * @param data String to encode.
     * @param level Optional level to encode at. 0 = XML, 1 = HTML. Default is 0.
     * @deprecated Use `encodeHTML`, `encodeXML` or `encodeNonAsciiHTML` directly.
     */
    function encode$1(data, level) {
        return (!level || level <= 0 ? encode.encodeXML : encode.encodeHTML)(data);
    }
    exports.encode = encode$1;
    var encode_2 = encode;
    Object.defineProperty(exports, "encodeXML", { enumerable: true, get: function () { return encode_2.encodeXML; } });
    Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
    Object.defineProperty(exports, "encodeNonAsciiHTML", { enumerable: true, get: function () { return encode_2.encodeNonAsciiHTML; } });
    Object.defineProperty(exports, "escape", { enumerable: true, get: function () { return encode_2.escape; } });
    Object.defineProperty(exports, "escapeUTF8", { enumerable: true, get: function () { return encode_2.escapeUTF8; } });
    // Legacy aliases (deprecated)
    Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
    Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
    var decode_2 = decode;
    Object.defineProperty(exports, "decodeXML", { enumerable: true, get: function () { return decode_2.decodeXML; } });
    Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
    Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
    // Legacy aliases (deprecated)
    Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
    Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
    Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
    Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
    Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: function () { return decode_2.decodeXML; } });
    });

    unwrapExports(lib$4);
    lib$4.decodeXMLStrict;
    lib$4.decodeHTML5Strict;
    lib$4.decodeHTML4Strict;
    lib$4.decodeHTML5;
    lib$4.decodeHTML4;
    lib$4.decodeHTMLStrict;
    lib$4.decodeHTML;
    lib$4.decodeXML;
    lib$4.encodeHTML5;
    lib$4.encodeHTML4;
    lib$4.escapeUTF8;
    lib$4.escape;
    lib$4.encodeNonAsciiHTML;
    lib$4.encodeHTML;
    lib$4.encodeXML;
    lib$4.encode;
    lib$4.decodeStrict;
    lib$4.decode;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var foreignNames = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.attributeNames = exports.elementNames = void 0;
    exports.elementNames = new Map([
        ["altglyph", "altGlyph"],
        ["altglyphdef", "altGlyphDef"],
        ["altglyphitem", "altGlyphItem"],
        ["animatecolor", "animateColor"],
        ["animatemotion", "animateMotion"],
        ["animatetransform", "animateTransform"],
        ["clippath", "clipPath"],
        ["feblend", "feBlend"],
        ["fecolormatrix", "feColorMatrix"],
        ["fecomponenttransfer", "feComponentTransfer"],
        ["fecomposite", "feComposite"],
        ["feconvolvematrix", "feConvolveMatrix"],
        ["fediffuselighting", "feDiffuseLighting"],
        ["fedisplacementmap", "feDisplacementMap"],
        ["fedistantlight", "feDistantLight"],
        ["fedropshadow", "feDropShadow"],
        ["feflood", "feFlood"],
        ["fefunca", "feFuncA"],
        ["fefuncb", "feFuncB"],
        ["fefuncg", "feFuncG"],
        ["fefuncr", "feFuncR"],
        ["fegaussianblur", "feGaussianBlur"],
        ["feimage", "feImage"],
        ["femerge", "feMerge"],
        ["femergenode", "feMergeNode"],
        ["femorphology", "feMorphology"],
        ["feoffset", "feOffset"],
        ["fepointlight", "fePointLight"],
        ["fespecularlighting", "feSpecularLighting"],
        ["fespotlight", "feSpotLight"],
        ["fetile", "feTile"],
        ["feturbulence", "feTurbulence"],
        ["foreignobject", "foreignObject"],
        ["glyphref", "glyphRef"],
        ["lineargradient", "linearGradient"],
        ["radialgradient", "radialGradient"],
        ["textpath", "textPath"],
    ]);
    exports.attributeNames = new Map([
        ["definitionurl", "definitionURL"],
        ["attributename", "attributeName"],
        ["attributetype", "attributeType"],
        ["basefrequency", "baseFrequency"],
        ["baseprofile", "baseProfile"],
        ["calcmode", "calcMode"],
        ["clippathunits", "clipPathUnits"],
        ["diffuseconstant", "diffuseConstant"],
        ["edgemode", "edgeMode"],
        ["filterunits", "filterUnits"],
        ["glyphref", "glyphRef"],
        ["gradienttransform", "gradientTransform"],
        ["gradientunits", "gradientUnits"],
        ["kernelmatrix", "kernelMatrix"],
        ["kernelunitlength", "kernelUnitLength"],
        ["keypoints", "keyPoints"],
        ["keysplines", "keySplines"],
        ["keytimes", "keyTimes"],
        ["lengthadjust", "lengthAdjust"],
        ["limitingconeangle", "limitingConeAngle"],
        ["markerheight", "markerHeight"],
        ["markerunits", "markerUnits"],
        ["markerwidth", "markerWidth"],
        ["maskcontentunits", "maskContentUnits"],
        ["maskunits", "maskUnits"],
        ["numoctaves", "numOctaves"],
        ["pathlength", "pathLength"],
        ["patterncontentunits", "patternContentUnits"],
        ["patterntransform", "patternTransform"],
        ["patternunits", "patternUnits"],
        ["pointsatx", "pointsAtX"],
        ["pointsaty", "pointsAtY"],
        ["pointsatz", "pointsAtZ"],
        ["preservealpha", "preserveAlpha"],
        ["preserveaspectratio", "preserveAspectRatio"],
        ["primitiveunits", "primitiveUnits"],
        ["refx", "refX"],
        ["refy", "refY"],
        ["repeatcount", "repeatCount"],
        ["repeatdur", "repeatDur"],
        ["requiredextensions", "requiredExtensions"],
        ["requiredfeatures", "requiredFeatures"],
        ["specularconstant", "specularConstant"],
        ["specularexponent", "specularExponent"],
        ["spreadmethod", "spreadMethod"],
        ["startoffset", "startOffset"],
        ["stddeviation", "stdDeviation"],
        ["stitchtiles", "stitchTiles"],
        ["surfacescale", "surfaceScale"],
        ["systemlanguage", "systemLanguage"],
        ["tablevalues", "tableValues"],
        ["targetx", "targetX"],
        ["targety", "targetY"],
        ["textlength", "textLength"],
        ["viewbox", "viewBox"],
        ["viewtarget", "viewTarget"],
        ["xchannelselector", "xChannelSelector"],
        ["ychannelselector", "yChannelSelector"],
        ["zoomandpan", "zoomAndPan"],
    ]);
    });

    unwrapExports(foreignNames);
    foreignNames.attributeNames;
    foreignNames.elementNames;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var lib$3 = createCommonjsModule$1(function (module, exports) {
    var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    /*
     * Module dependencies
     */
    var ElementType = __importStar(lib$5);

    /*
     * Mixed-case SVG and MathML tags & attributes
     * recognized by the HTML parser, see
     * https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign
     */

    var unencodedElements = new Set([
        "style",
        "script",
        "xmp",
        "iframe",
        "noembed",
        "noframes",
        "plaintext",
        "noscript",
    ]);
    /**
     * Format attributes
     */
    function formatAttributes(attributes, opts) {
        if (!attributes)
            return;
        return Object.keys(attributes)
            .map(function (key) {
            var _a, _b;
            var value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : "";
            if (opts.xmlMode === "foreign") {
                /* Fix up mixed-case attribute names */
                key = (_b = foreignNames.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;
            }
            if (!opts.emptyAttrs && !opts.xmlMode && value === "") {
                return key;
            }
            return key + "=\"" + (opts.decodeEntities ? lib$4.encodeXML(value) : value.replace(/"/g, "&quot;")) + "\"";
        })
            .join(" ");
    }
    /**
     * Self-enclosing tags
     */
    var singleTag = new Set([
        "area",
        "base",
        "basefont",
        "br",
        "col",
        "command",
        "embed",
        "frame",
        "hr",
        "img",
        "input",
        "isindex",
        "keygen",
        "link",
        "meta",
        "param",
        "source",
        "track",
        "wbr",
    ]);
    /**
     * Renders a DOM node or an array of DOM nodes to a string.
     *
     * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).
     *
     * @param node Node to be rendered.
     * @param options Changes serialization behavior
     */
    function render(node, options) {
        if (options === void 0) { options = {}; }
        // TODO: This is a bit hacky.
        var nodes = Array.isArray(node) || node.cheerio ? node : [node];
        var output = "";
        for (var i = 0; i < nodes.length; i++) {
            output += renderNode(nodes[i], options);
        }
        return output;
    }
    exports.default = render;
    function renderNode(node, options) {
        switch (node.type) {
            case ElementType.Root:
                return render(node.children, options);
            case ElementType.Directive:
            case ElementType.Doctype:
                return renderDirective(node);
            case ElementType.Comment:
                return renderComment(node);
            case ElementType.CDATA:
                return renderCdata(node);
            case ElementType.Script:
            case ElementType.Style:
            case ElementType.Tag:
                return renderTag(node, options);
            case ElementType.Text:
                return renderText(node, options);
        }
    }
    var foreignModeIntegrationPoints = new Set([
        "mi",
        "mo",
        "mn",
        "ms",
        "mtext",
        "annotation-xml",
        "foreignObject",
        "desc",
        "title",
    ]);
    var foreignElements = new Set(["svg", "math"]);
    function renderTag(elem, opts) {
        var _a;
        // Handle SVG / MathML in HTML
        if (opts.xmlMode === "foreign") {
            /* Fix up mixed-case element names */
            elem.name = (_a = foreignNames.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;
            /* Exit foreign mode at integration points */
            if (elem.parent &&
                foreignModeIntegrationPoints.has(elem.parent.name)) {
                opts = __assign(__assign({}, opts), { xmlMode: false });
            }
        }
        if (!opts.xmlMode && foreignElements.has(elem.name)) {
            opts = __assign(__assign({}, opts), { xmlMode: "foreign" });
        }
        var tag = "<" + elem.name;
        var attribs = formatAttributes(elem.attribs, opts);
        if (attribs) {
            tag += " " + attribs;
        }
        if (elem.children.length === 0 &&
            (opts.xmlMode
                ? // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags
                    opts.selfClosingTags !== false
                : // User explicitly asked for self-closing tags, even in HTML mode
                    opts.selfClosingTags && singleTag.has(elem.name))) {
            if (!opts.xmlMode)
                tag += " ";
            tag += "/>";
        }
        else {
            tag += ">";
            if (elem.children.length > 0) {
                tag += render(elem.children, opts);
            }
            if (opts.xmlMode || !singleTag.has(elem.name)) {
                tag += "</" + elem.name + ">";
            }
        }
        return tag;
    }
    function renderDirective(elem) {
        return "<" + elem.data + ">";
    }
    function renderText(elem, opts) {
        var data = elem.data || "";
        // If entities weren't decoded, no need to encode them back
        if (opts.decodeEntities &&
            !(elem.parent && unencodedElements.has(elem.parent.name))) {
            data = lib$4.encodeXML(data);
        }
        return data;
    }
    function renderCdata(elem) {
        return "<![CDATA[" + elem.children[0].data + "]]>";
    }
    function renderComment(elem) {
        return "<!--" + elem.data + "-->";
    }
    });

    unwrapExports(lib$3);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var stringify = createCommonjsModule$1(function (module, exports) {
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getText = exports.getInnerHTML = exports.getOuterHTML = void 0;

    var dom_serializer_1 = __importDefault(lib$3);
    /**
     * @param node Node to get the outer HTML of.
     * @param options Options for serialization.
     * @deprecated Use the `dom-serializer` module directly.
     * @returns `node`'s outer HTML.
     */
    function getOuterHTML(node, options) {
        return dom_serializer_1.default(node, options);
    }
    exports.getOuterHTML = getOuterHTML;
    /**
     * @param node Node to get the inner HTML of.
     * @param options Options for serialization.
     * @deprecated Use the `dom-serializer` module directly.
     * @returns `node`'s inner HTML.
     */
    function getInnerHTML(node, options) {
        return tagtypes.hasChildren(node)
            ? node.children.map(function (node) { return getOuterHTML(node, options); }).join("")
            : "";
    }
    exports.getInnerHTML = getInnerHTML;
    /**
     * Get a node's inner text.
     *
     * @param node Node to get the inner text of.
     * @returns `node`'s inner text.
     */
    function getText(node) {
        if (Array.isArray(node))
            return node.map(getText).join("");
        if (tagtypes.isTag(node))
            return node.name === "br" ? "\n" : getText(node.children);
        if (tagtypes.isCDATA(node))
            return getText(node.children);
        if (tagtypes.isText(node))
            return node.data;
        return "";
    }
    exports.getText = getText;
    });

    unwrapExports(stringify);
    stringify.getText;
    stringify.getInnerHTML;
    stringify.getOuterHTML;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var traversal = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prevElementSibling = exports.nextElementSibling = exports.getName = exports.hasAttrib = exports.getAttributeValue = exports.getSiblings = exports.getParent = exports.getChildren = void 0;

    var emptyArray = [];
    /**
     * Get a node's children.
     *
     * @param elem Node to get the children of.
     * @returns `elem`'s children, or an empty array.
     */
    function getChildren(elem) {
        var _a;
        return (_a = elem.children) !== null && _a !== void 0 ? _a : emptyArray;
    }
    exports.getChildren = getChildren;
    /**
     * Get a node's parent.
     *
     * @param elem Node to get the parent of.
     * @returns `elem`'s parent node.
     */
    function getParent(elem) {
        return elem.parent || null;
    }
    exports.getParent = getParent;
    /**
     * Gets an elements siblings, including the element itself.
     *
     * Attempts to get the children through the element's parent first.
     * If we don't have a parent (the element is a root node),
     * we walk the element's `prev` & `next` to get all remaining nodes.
     *
     * @param elem Element to get the siblings of.
     * @returns `elem`'s siblings.
     */
    function getSiblings(elem) {
        var _a, _b;
        var parent = getParent(elem);
        if (parent != null)
            return getChildren(parent);
        var siblings = [elem];
        var prev = elem.prev, next = elem.next;
        while (prev != null) {
            siblings.unshift(prev);
            (_a = prev, prev = _a.prev);
        }
        while (next != null) {
            siblings.push(next);
            (_b = next, next = _b.next);
        }
        return siblings;
    }
    exports.getSiblings = getSiblings;
    /**
     * Gets an attribute from an element.
     *
     * @param elem Element to check.
     * @param name Attribute name to retrieve.
     * @returns The element's attribute value, or `undefined`.
     */
    function getAttributeValue(elem, name) {
        var _a;
        return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
    }
    exports.getAttributeValue = getAttributeValue;
    /**
     * Checks whether an element has an attribute.
     *
     * @param elem Element to check.
     * @param name Attribute name to look for.
     * @returns Returns whether `elem` has the attribute `name`.
     */
    function hasAttrib(elem, name) {
        return (elem.attribs != null &&
            Object.prototype.hasOwnProperty.call(elem.attribs, name) &&
            elem.attribs[name] != null);
    }
    exports.hasAttrib = hasAttrib;
    /**
     * Get the tag name of an element.
     *
     * @param elem The element to get the name for.
     * @returns The tag name of `elem`.
     */
    function getName(elem) {
        return elem.name;
    }
    exports.getName = getName;
    /**
     * Returns the next element sibling of a node.
     *
     * @param elem The element to get the next sibling of.
     * @returns `elem`'s next sibling that is a tag.
     */
    function nextElementSibling(elem) {
        var _a;
        var next = elem.next;
        while (next !== null && !tagtypes.isTag(next))
            (_a = next, next = _a.next);
        return next;
    }
    exports.nextElementSibling = nextElementSibling;
    /**
     * Returns the previous element sibling of a node.
     *
     * @param elem The element to get the previous sibling of.
     * @returns `elem`'s previous sibling that is a tag.
     */
    function prevElementSibling(elem) {
        var _a;
        var prev = elem.prev;
        while (prev !== null && !tagtypes.isTag(prev))
            (_a = prev, prev = _a.prev);
        return prev;
    }
    exports.prevElementSibling = prevElementSibling;
    });

    unwrapExports(traversal);
    traversal.prevElementSibling;
    traversal.nextElementSibling;
    traversal.getName;
    traversal.hasAttrib;
    traversal.getAttributeValue;
    traversal.getSiblings;
    traversal.getParent;
    traversal.getChildren;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var manipulation = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepend = exports.prependChild = exports.append = exports.appendChild = exports.replaceElement = exports.removeElement = void 0;
    /**
     * Remove an element from the dom
     *
     * @param elem The element to be removed
     */
    function removeElement(elem) {
        if (elem.prev)
            elem.prev.next = elem.next;
        if (elem.next)
            elem.next.prev = elem.prev;
        if (elem.parent) {
            var childs = elem.parent.children;
            childs.splice(childs.lastIndexOf(elem), 1);
        }
    }
    exports.removeElement = removeElement;
    /**
     * Replace an element in the dom
     *
     * @param elem The element to be replaced
     * @param replacement The element to be added
     */
    function replaceElement(elem, replacement) {
        var prev = (replacement.prev = elem.prev);
        if (prev) {
            prev.next = replacement;
        }
        var next = (replacement.next = elem.next);
        if (next) {
            next.prev = replacement;
        }
        var parent = (replacement.parent = elem.parent);
        if (parent) {
            var childs = parent.children;
            childs[childs.lastIndexOf(elem)] = replacement;
        }
    }
    exports.replaceElement = replaceElement;
    /**
     * Append a child to an element.
     *
     * @param elem The element to append to.
     * @param child The element to be added as a child.
     */
    function appendChild(elem, child) {
        removeElement(child);
        child.next = null;
        child.parent = elem;
        if (elem.children.push(child) > 1) {
            var sibling = elem.children[elem.children.length - 2];
            sibling.next = child;
            child.prev = sibling;
        }
        else {
            child.prev = null;
        }
    }
    exports.appendChild = appendChild;
    /**
     * Append an element after another.
     *
     * @param elem The element to append after.
     * @param next The element be added.
     */
    function append(elem, next) {
        removeElement(next);
        var parent = elem.parent;
        var currNext = elem.next;
        next.next = currNext;
        next.prev = elem;
        elem.next = next;
        next.parent = parent;
        if (currNext) {
            currNext.prev = next;
            if (parent) {
                var childs = parent.children;
                childs.splice(childs.lastIndexOf(currNext), 0, next);
            }
        }
        else if (parent) {
            parent.children.push(next);
        }
    }
    exports.append = append;
    /**
     * Prepend a child to an element.
     *
     * @param elem The element to prepend before.
     * @param child The element to be added as a child.
     */
    function prependChild(elem, child) {
        removeElement(child);
        child.parent = elem;
        child.prev = null;
        if (elem.children.unshift(child) !== 1) {
            var sibling = elem.children[1];
            sibling.prev = child;
            child.next = sibling;
        }
        else {
            child.next = null;
        }
    }
    exports.prependChild = prependChild;
    /**
     * Prepend an element before another.
     *
     * @param elem The element to prepend before.
     * @param prev The element be added.
     */
    function prepend(elem, prev) {
        removeElement(prev);
        var parent = elem.parent;
        if (parent) {
            var childs = parent.children;
            childs.splice(childs.indexOf(elem), 0, prev);
        }
        if (elem.prev) {
            elem.prev.next = prev;
        }
        prev.parent = parent;
        prev.prev = elem.prev;
        prev.next = elem;
        elem.prev = prev;
    }
    exports.prepend = prepend;
    });

    unwrapExports(manipulation);
    manipulation.prepend;
    manipulation.prependChild;
    manipulation.append;
    manipulation.appendChild;
    manipulation.replaceElement;
    manipulation.removeElement;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var querying = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;

    /**
     * Search a node and its children for nodes passing a test function.
     *
     * @param test Function to test nodes on.
     * @param node Node to search. Will be included in the result set if it matches.
     * @param recurse Also consider child nodes.
     * @param limit Maximum number of nodes to return.
     * @returns All nodes passing `test`.
     */
    function filter(test, node, recurse, limit) {
        if (recurse === void 0) { recurse = true; }
        if (limit === void 0) { limit = Infinity; }
        if (!Array.isArray(node))
            node = [node];
        return find(test, node, recurse, limit);
    }
    exports.filter = filter;
    /**
     * Search an array of node and its children for nodes passing a test function.
     *
     * @param test Function to test nodes on.
     * @param nodes Array of nodes to search.
     * @param recurse Also consider child nodes.
     * @param limit Maximum number of nodes to return.
     * @returns All nodes passing `test`.
     */
    function find(test, nodes, recurse, limit) {
        var result = [];
        for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
            var elem = nodes_1[_i];
            if (test(elem)) {
                result.push(elem);
                if (--limit <= 0)
                    break;
            }
            if (recurse && tagtypes.hasChildren(elem) && elem.children.length > 0) {
                var children = find(test, elem.children, recurse, limit);
                result.push.apply(result, children);
                limit -= children.length;
                if (limit <= 0)
                    break;
            }
        }
        return result;
    }
    exports.find = find;
    /**
     * Finds the first element inside of an array that matches a test function.
     *
     * @param test Function to test nodes on.
     * @param nodes Array of nodes to search.
     * @returns The first node in the array that passes `test`.
     */
    function findOneChild(test, nodes) {
        return nodes.find(test);
    }
    exports.findOneChild = findOneChild;
    /**
     * Finds one element in a tree that passes a test.
     *
     * @param test Function to test nodes on.
     * @param nodes Array of nodes to search.
     * @param recurse Also consider child nodes.
     * @returns The first child node that passes `test`.
     */
    function findOne(test, nodes, recurse) {
        if (recurse === void 0) { recurse = true; }
        var elem = null;
        for (var i = 0; i < nodes.length && !elem; i++) {
            var checked = nodes[i];
            if (!tagtypes.isTag(checked)) {
                continue;
            }
            else if (test(checked)) {
                elem = checked;
            }
            else if (recurse && checked.children.length > 0) {
                elem = findOne(test, checked.children);
            }
        }
        return elem;
    }
    exports.findOne = findOne;
    /**
     * @param test Function to test nodes on.
     * @param nodes Array of nodes to search.
     * @returns Whether a tree of nodes contains at least one node passing a test.
     */
    function existsOne(test, nodes) {
        return nodes.some(function (checked) {
            return tagtypes.isTag(checked) &&
                (test(checked) ||
                    (checked.children.length > 0 &&
                        existsOne(test, checked.children)));
        });
    }
    exports.existsOne = existsOne;
    /**
     * Search and array of nodes and its children for nodes passing a test function.
     *
     * Same as `find`, only with less options, leading to reduced complexity.
     *
     * @param test Function to test nodes on.
     * @param nodes Array of nodes to search.
     * @returns All nodes passing `test`.
     */
    function findAll(test, nodes) {
        var _a;
        var result = [];
        var stack = nodes.filter(tagtypes.isTag);
        var elem;
        while ((elem = stack.shift())) {
            var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(tagtypes.isTag);
            if (children && children.length > 0) {
                stack.unshift.apply(stack, children);
            }
            if (test(elem))
                result.push(elem);
        }
        return result;
    }
    exports.findAll = findAll;
    });

    unwrapExports(querying);
    querying.findAll;
    querying.existsOne;
    querying.findOne;
    querying.findOneChild;
    querying.find;
    querying.filter;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var legacy = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;


    var Checks = {
        tag_name: function (name) {
            if (typeof name === "function") {
                return function (elem) { return tagtypes.isTag(elem) && name(elem.name); };
            }
            else if (name === "*") {
                return tagtypes.isTag;
            }
            return function (elem) { return tagtypes.isTag(elem) && elem.name === name; };
        },
        tag_type: function (type) {
            if (typeof type === "function") {
                return function (elem) { return type(elem.type); };
            }
            return function (elem) { return elem.type === type; };
        },
        tag_contains: function (data) {
            if (typeof data === "function") {
                return function (elem) { return tagtypes.isText(elem) && data(elem.data); };
            }
            return function (elem) { return tagtypes.isText(elem) && elem.data === data; };
        },
    };
    /**
     * @param attrib Attribute to check.
     * @param value Attribute value to look for.
     * @returns A function to check whether the a node has an attribute with a particular value.
     */
    function getAttribCheck(attrib, value) {
        if (typeof value === "function") {
            return function (elem) { return tagtypes.isTag(elem) && value(elem.attribs[attrib]); };
        }
        return function (elem) { return tagtypes.isTag(elem) && elem.attribs[attrib] === value; };
    }
    /**
     * @param a First function to combine.
     * @param b Second function to combine.
     * @returns A function taking a node and returning `true` if either
     * of the input functions returns `true` for the node.
     */
    function combineFuncs(a, b) {
        return function (elem) { return a(elem) || b(elem); };
    }
    /**
     * @param options An object describing nodes to look for.
     * @returns A function executing all checks in `options` and returning `true`
     * if any of them match a node.
     */
    function compileTest(options) {
        var funcs = Object.keys(options).map(function (key) {
            var value = options[key];
            return key in Checks
                ? Checks[key](value)
                : getAttribCheck(key, value);
        });
        return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
    }
    /**
     * @param options An object describing nodes to look for.
     * @param node The element to test.
     * @returns Whether the element matches the description in `options`.
     */
    function testElement(options, node) {
        var test = compileTest(options);
        return test ? test(node) : true;
    }
    exports.testElement = testElement;
    /**
     * @param options An object describing nodes to look for.
     * @param nodes Nodes to search through.
     * @param recurse Also consider child nodes.
     * @param limit Maximum number of nodes to return.
     * @returns All nodes that match `options`.
     */
    function getElements(options, nodes, recurse, limit) {
        if (limit === void 0) { limit = Infinity; }
        var test = compileTest(options);
        return test ? querying.filter(test, nodes, recurse, limit) : [];
    }
    exports.getElements = getElements;
    /**
     * @param id The unique ID attribute value to look for.
     * @param nodes Nodes to search through.
     * @param recurse Also consider child nodes.
     * @returns The node with the supplied ID.
     */
    function getElementById(id, nodes, recurse) {
        if (recurse === void 0) { recurse = true; }
        if (!Array.isArray(nodes))
            nodes = [nodes];
        return querying.findOne(getAttribCheck("id", id), nodes, recurse);
    }
    exports.getElementById = getElementById;
    /**
     * @param tagName Tag name to search for.
     * @param nodes Nodes to search through.
     * @param recurse Also consider child nodes.
     * @param limit Maximum number of nodes to return.
     * @returns All nodes with the supplied `tagName`.
     */
    function getElementsByTagName(tagName, nodes, recurse, limit) {
        if (recurse === void 0) { recurse = true; }
        if (limit === void 0) { limit = Infinity; }
        return querying.filter(Checks.tag_name(tagName), nodes, recurse, limit);
    }
    exports.getElementsByTagName = getElementsByTagName;
    /**
     * @param type Element type to look for.
     * @param nodes Nodes to search through.
     * @param recurse Also consider child nodes.
     * @param limit Maximum number of nodes to return.
     * @returns All nodes with the supplied `type`.
     */
    function getElementsByTagType(type, nodes, recurse, limit) {
        if (recurse === void 0) { recurse = true; }
        if (limit === void 0) { limit = Infinity; }
        return querying.filter(Checks.tag_type(type), nodes, recurse, limit);
    }
    exports.getElementsByTagType = getElementsByTagType;
    });

    unwrapExports(legacy);
    legacy.getElementsByTagType;
    legacy.getElementsByTagName;
    legacy.getElementById;
    legacy.getElements;
    legacy.testElement;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var helpers = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uniqueSort = exports.compareDocumentPosition = exports.removeSubsets = void 0;

    /**
     * Given an array of nodes, remove any member that is contained by another.
     *
     * @param nodes Nodes to filter.
     * @returns Remaining nodes that aren't subtrees of each other.
     */
    function removeSubsets(nodes) {
        var idx = nodes.length;
        /*
         * Check if each node (or one of its ancestors) is already contained in the
         * array.
         */
        while (--idx >= 0) {
            var node = nodes[idx];
            /*
             * Remove the node if it is not unique.
             * We are going through the array from the end, so we only
             * have to check nodes that preceed the node under consideration in the array.
             */
            if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
                nodes.splice(idx, 1);
                continue;
            }
            for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
                if (nodes.includes(ancestor)) {
                    nodes.splice(idx, 1);
                    break;
                }
            }
        }
        return nodes;
    }
    exports.removeSubsets = removeSubsets;
    /**
     * Compare the position of one node against another node in any other document.
     * The return value is a bitmask with the following values:
     *
     * Document order:
     * > There is an ordering, document order, defined on all the nodes in the
     * > document corresponding to the order in which the first character of the
     * > XML representation of each node occurs in the XML representation of the
     * > document after expansion of general entities. Thus, the document element
     * > node will be the first node. Element nodes occur before their children.
     * > Thus, document order orders element nodes in order of the occurrence of
     * > their start-tag in the XML (after expansion of entities). The attribute
     * > nodes of an element occur after the element and before its children. The
     * > relative order of attribute nodes is implementation-dependent./
     *
     * Source:
     * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
     *
     * @param nodeA The first node to use in the comparison
     * @param nodeB The second node to use in the comparison
     * @returns A bitmask describing the input nodes' relative position.
     *
     * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
     * a description of these values.
     */
    function compareDocumentPosition(nodeA, nodeB) {
        var aParents = [];
        var bParents = [];
        if (nodeA === nodeB) {
            return 0;
        }
        var current = tagtypes.hasChildren(nodeA) ? nodeA : nodeA.parent;
        while (current) {
            aParents.unshift(current);
            current = current.parent;
        }
        current = tagtypes.hasChildren(nodeB) ? nodeB : nodeB.parent;
        while (current) {
            bParents.unshift(current);
            current = current.parent;
        }
        var maxIdx = Math.min(aParents.length, bParents.length);
        var idx = 0;
        while (idx < maxIdx && aParents[idx] === bParents[idx]) {
            idx++;
        }
        if (idx === 0) {
            return 1 /* DISCONNECTED */;
        }
        var sharedParent = aParents[idx - 1];
        var siblings = sharedParent.children;
        var aSibling = aParents[idx];
        var bSibling = bParents[idx];
        if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
            if (sharedParent === nodeB) {
                return 4 /* FOLLOWING */ | 16 /* CONTAINED_BY */;
            }
            return 4 /* FOLLOWING */;
        }
        if (sharedParent === nodeA) {
            return 2 /* PRECEDING */ | 8 /* CONTAINS */;
        }
        return 2 /* PRECEDING */;
    }
    exports.compareDocumentPosition = compareDocumentPosition;
    /**
     * Sort an array of nodes based on their relative position in the document and
     * remove any duplicate nodes. If the array contains nodes that do not belong
     * to the same document, sort order is unspecified.
     *
     * @param nodes Array of DOM nodes.
     * @returns Collection of unique nodes, sorted in document order.
     */
    function uniqueSort(nodes) {
        nodes = nodes.filter(function (node, i, arr) { return !arr.includes(node, i + 1); });
        nodes.sort(function (a, b) {
            var relative = compareDocumentPosition(a, b);
            if (relative & 2 /* PRECEDING */) {
                return -1;
            }
            else if (relative & 4 /* FOLLOWING */) {
                return 1;
            }
            return 0;
        });
        return nodes;
    }
    exports.uniqueSort = uniqueSort;
    });

    unwrapExports(helpers);
    helpers.uniqueSort;
    helpers.compareDocumentPosition;
    helpers.removeSubsets;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var lib$2 = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(stringify, exports);
    __exportStar(traversal, exports);
    __exportStar(manipulation, exports);
    __exportStar(querying, exports);
    __exportStar(legacy, exports);
    __exportStar(helpers, exports);
    __exportStar(tagtypes, exports);
    });

    unwrapExports(lib$2);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var FeedHandler_1 = createCommonjsModule$1(function (module, exports) {
    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseFeed = exports.FeedHandler = void 0;
    var domhandler_1 = __importDefault(lib$6);
    var DomUtils = __importStar(lib$2);

    var FeedItemMediaMedium;
    (function (FeedItemMediaMedium) {
        FeedItemMediaMedium[FeedItemMediaMedium["image"] = 0] = "image";
        FeedItemMediaMedium[FeedItemMediaMedium["audio"] = 1] = "audio";
        FeedItemMediaMedium[FeedItemMediaMedium["video"] = 2] = "video";
        FeedItemMediaMedium[FeedItemMediaMedium["document"] = 3] = "document";
        FeedItemMediaMedium[FeedItemMediaMedium["executable"] = 4] = "executable";
    })(FeedItemMediaMedium || (FeedItemMediaMedium = {}));
    var FeedItemMediaExpression;
    (function (FeedItemMediaExpression) {
        FeedItemMediaExpression[FeedItemMediaExpression["sample"] = 0] = "sample";
        FeedItemMediaExpression[FeedItemMediaExpression["full"] = 1] = "full";
        FeedItemMediaExpression[FeedItemMediaExpression["nonstop"] = 2] = "nonstop";
    })(FeedItemMediaExpression || (FeedItemMediaExpression = {}));
    // TODO: Consume data as it is coming in
    var FeedHandler = /** @class */ (function (_super) {
        __extends(FeedHandler, _super);
        /**
         *
         * @param callback
         * @param options
         */
        function FeedHandler(callback, options) {
            var _this = this;
            if (typeof callback === "object") {
                callback = undefined;
                options = callback;
            }
            _this = _super.call(this, callback, options) || this;
            return _this;
        }
        FeedHandler.prototype.onend = function () {
            var _a, _b;
            var feed = {};
            var feedRoot = getOneElement(isValidFeed, this.dom);
            if (feedRoot) {
                if (feedRoot.name === "feed") {
                    var childs = feedRoot.children;
                    feed.type = "atom";
                    addConditionally(feed, "id", "id", childs);
                    addConditionally(feed, "title", "title", childs);
                    var href = getAttribute("href", getOneElement("link", childs));
                    if (href) {
                        feed.link = href;
                    }
                    addConditionally(feed, "description", "subtitle", childs);
                    var updated = fetch("updated", childs);
                    if (updated) {
                        feed.updated = new Date(updated);
                    }
                    addConditionally(feed, "author", "email", childs, true);
                    feed.items = getElements("entry", childs).map(function (item) {
                        var entry = {};
                        var children = item.children;
                        addConditionally(entry, "id", "id", children);
                        addConditionally(entry, "title", "title", children);
                        var href = getAttribute("href", getOneElement("link", children));
                        if (href) {
                            entry.link = href;
                        }
                        var description = fetch("summary", children) ||
                            fetch("content", children);
                        if (description) {
                            entry.description = description;
                        }
                        var pubDate = fetch("updated", children);
                        if (pubDate) {
                            entry.pubDate = new Date(pubDate);
                        }
                        entry.media = getMediaElements(children);
                        return entry;
                    });
                }
                else {
                    var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
                    feed.type = feedRoot.name.substr(0, 3);
                    feed.id = "";
                    addConditionally(feed, "title", "title", childs);
                    addConditionally(feed, "link", "link", childs);
                    addConditionally(feed, "description", "description", childs);
                    var updated = fetch("lastBuildDate", childs);
                    if (updated) {
                        feed.updated = new Date(updated);
                    }
                    addConditionally(feed, "author", "managingEditor", childs, true);
                    feed.items = getElements("item", feedRoot.children).map(function (item) {
                        var entry = {};
                        var children = item.children;
                        addConditionally(entry, "id", "guid", children);
                        addConditionally(entry, "title", "title", children);
                        addConditionally(entry, "link", "link", children);
                        addConditionally(entry, "description", "description", children);
                        var pubDate = fetch("pubDate", children);
                        if (pubDate)
                            entry.pubDate = new Date(pubDate);
                        entry.media = getMediaElements(children);
                        return entry;
                    });
                }
            }
            this.feed = feed;
            this.handleCallback(feedRoot ? null : Error("couldn't find root of feed"));
        };
        return FeedHandler;
    }(domhandler_1.default));
    exports.FeedHandler = FeedHandler;
    function getMediaElements(where) {
        return getElements("media:content", where).map(function (elem) {
            var media = {
                medium: elem.attribs.medium,
                isDefault: !!elem.attribs.isDefault,
            };
            if (elem.attribs.url) {
                media.url = elem.attribs.url;
            }
            if (elem.attribs.fileSize) {
                media.fileSize = parseInt(elem.attribs.fileSize, 10);
            }
            if (elem.attribs.type) {
                media.type = elem.attribs.type;
            }
            if (elem.attribs.expression) {
                media.expression = elem.attribs
                    .expression;
            }
            if (elem.attribs.bitrate) {
                media.bitrate = parseInt(elem.attribs.bitrate, 10);
            }
            if (elem.attribs.framerate) {
                media.framerate = parseInt(elem.attribs.framerate, 10);
            }
            if (elem.attribs.samplingrate) {
                media.samplingrate = parseInt(elem.attribs.samplingrate, 10);
            }
            if (elem.attribs.channels) {
                media.channels = parseInt(elem.attribs.channels, 10);
            }
            if (elem.attribs.duration) {
                media.duration = parseInt(elem.attribs.duration, 10);
            }
            if (elem.attribs.height) {
                media.height = parseInt(elem.attribs.height, 10);
            }
            if (elem.attribs.width) {
                media.width = parseInt(elem.attribs.width, 10);
            }
            if (elem.attribs.lang) {
                media.lang = elem.attribs.lang;
            }
            return media;
        });
    }
    function getElements(tagName, where) {
        return DomUtils.getElementsByTagName(tagName, where, true);
    }
    function getOneElement(tagName, node) {
        return DomUtils.getElementsByTagName(tagName, node, true, 1)[0];
    }
    function fetch(tagName, where, recurse) {
        if (recurse === void 0) { recurse = false; }
        return DomUtils.getText(DomUtils.getElementsByTagName(tagName, where, recurse, 1)).trim();
    }
    function getAttribute(name, elem) {
        if (!elem) {
            return null;
        }
        var attribs = elem.attribs;
        return attribs[name];
    }
    function addConditionally(obj, prop, what, where, recurse) {
        if (recurse === void 0) { recurse = false; }
        var tmp = fetch(what, where, recurse);
        if (tmp)
            obj[prop] = tmp;
    }
    function isValidFeed(value) {
        return value === "rss" || value === "feed" || value === "rdf:RDF";
    }
    var defaultOptions = { xmlMode: true };
    /**
     * Parse a feed.
     *
     * @param feed The feed that should be parsed, as a string.
     * @param options Optionally, options for parsing. When using this option, you probably want to set `xmlMode` to `true`.
     */
    function parseFeed(feed, options) {
        if (options === void 0) { options = defaultOptions; }
        var handler = new FeedHandler(options);
        new Parser_1$1.Parser(handler, options).end(feed);
        return handler.feed;
    }
    exports.parseFeed = parseFeed;
    });

    unwrapExports(FeedHandler_1);
    FeedHandler_1.parseFeed;
    FeedHandler_1.FeedHandler;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var lib$1 = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RssHandler = exports.DefaultHandler = exports.DomUtils = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.DomHandler = exports.Parser = void 0;

    Object.defineProperty(exports, "Parser", { enumerable: true, get: function () { return Parser_1$1.Parser; } });

    Object.defineProperty(exports, "DomHandler", { enumerable: true, get: function () { return lib$6.DomHandler; } });
    Object.defineProperty(exports, "DefaultHandler", { enumerable: true, get: function () { return lib$6.DomHandler; } });
    // Helper methods
    /**
     * Parses data, returns the resulting DOM.
     *
     * @param data The data that should be parsed.
     * @param options Optional options for the parser and DOM builder.
     */
    function parseDOM(data, options) {
        var handler = new lib$6.DomHandler(void 0, options);
        new Parser_1$1.Parser(handler, options).end(data);
        return handler.dom;
    }
    exports.parseDOM = parseDOM;
    /**
     * Creates a parser instance, with an attached DOM handler.
     *
     * @param cb A callback that will be called once parsing has been completed.
     * @param options Optional options for the parser and DOM builder.
     * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.
     */
    function createDomStream(cb, options, elementCb) {
        var handler = new lib$6.DomHandler(cb, options, elementCb);
        return new Parser_1$1.Parser(handler, options);
    }
    exports.createDomStream = createDomStream;

    Object.defineProperty(exports, "Tokenizer", { enumerable: true, get: function () { return __importDefault(Tokenizer_1).default; } });
    var ElementType = __importStar(lib$5);
    exports.ElementType = ElementType;
    /*
     * All of the following exports exist for backwards-compatibility.
     * They should probably be removed eventually.
     */
    __exportStar(FeedHandler_1, exports);
    exports.DomUtils = __importStar(lib$2);
    var FeedHandler_1$1 = FeedHandler_1;
    Object.defineProperty(exports, "RssHandler", { enumerable: true, get: function () { return FeedHandler_1$1.FeedHandler; } });
    });

    unwrapExports(lib$1);
    lib$1.RssHandler;
    lib$1.DefaultHandler;
    lib$1.DomUtils;
    lib$1.ElementType;
    lib$1.Tokenizer;
    lib$1.createDomStream;
    lib$1.parseDOM;
    lib$1.DomHandler;
    lib$1.Parser;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var node = createCommonjsModule$1(function (module, exports) {
    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cloneNode = exports.Element = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;
    var nodeTypes = new Map([
        ["tag" /* Tag */, 1],
        ["script" /* Script */, 1],
        ["style" /* Style */, 1],
        ["directive" /* Directive */, 1],
        ["text" /* Text */, 3],
        ["cdata" /* CDATA */, 4],
        ["comment" /* Comment */, 8],
    ]);
    /**
     * This object will be used as the prototype for Nodes when creating a
     * DOM-Level-1-compliant structure.
     */
    var Node = /** @class */ (function () {
        /**
         *
         * @param type The type of the node.
         */
        function Node(type) {
            this.type = type;
            /** Parent of the node */
            this.parent = null;
            /** Previous sibling */
            this.prev = null;
            /** Next sibling */
            this.next = null;
            /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */
            this.startIndex = null;
            /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */
            this.endIndex = null;
        }
        Object.defineProperty(Node.prototype, "nodeType", {
            // Read-only aliases
            get: function () {
                var _a;
                return (_a = nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Node.prototype, "parentNode", {
            // Read-write aliases for properties
            get: function () {
                return this.parent;
            },
            set: function (parent) {
                this.parent = parent;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Node.prototype, "previousSibling", {
            get: function () {
                return this.prev;
            },
            set: function (prev) {
                this.prev = prev;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Node.prototype, "nextSibling", {
            get: function () {
                return this.next;
            },
            set: function (next) {
                this.next = next;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Clone this node, and optionally its children.
         *
         * @param recursive Clone child nodes as well.
         * @returns A clone of the node.
         */
        Node.prototype.cloneNode = function (recursive) {
            if (recursive === void 0) { recursive = false; }
            return cloneNode(this, recursive);
        };
        return Node;
    }());
    exports.Node = Node;
    var DataNode = /** @class */ (function (_super) {
        __extends(DataNode, _super);
        /**
         * @param type The type of the node
         * @param data The content of the data node
         */
        function DataNode(type, data) {
            var _this = _super.call(this, type) || this;
            _this.data = data;
            return _this;
        }
        Object.defineProperty(DataNode.prototype, "nodeValue", {
            get: function () {
                return this.data;
            },
            set: function (data) {
                this.data = data;
            },
            enumerable: false,
            configurable: true
        });
        return DataNode;
    }(Node));
    exports.DataNode = DataNode;
    var Text = /** @class */ (function (_super) {
        __extends(Text, _super);
        function Text(data) {
            return _super.call(this, "text" /* Text */, data) || this;
        }
        return Text;
    }(DataNode));
    exports.Text = Text;
    var Comment = /** @class */ (function (_super) {
        __extends(Comment, _super);
        function Comment(data) {
            return _super.call(this, "comment" /* Comment */, data) || this;
        }
        return Comment;
    }(DataNode));
    exports.Comment = Comment;
    var ProcessingInstruction = /** @class */ (function (_super) {
        __extends(ProcessingInstruction, _super);
        function ProcessingInstruction(name, data) {
            var _this = _super.call(this, "directive" /* Directive */, data) || this;
            _this.name = name;
            return _this;
        }
        return ProcessingInstruction;
    }(DataNode));
    exports.ProcessingInstruction = ProcessingInstruction;
    var NodeWithChildren = /** @class */ (function (_super) {
        __extends(NodeWithChildren, _super);
        /**
         *
         * @param type Type of the node.
         * @param children Children of the node. Only certain node types can have children.
         */
        function NodeWithChildren(type, children) {
            var _this = _super.call(this, type) || this;
            _this.children = children;
            return _this;
        }
        Object.defineProperty(NodeWithChildren.prototype, "firstChild", {
            // Aliases
            get: function () {
                var _a;
                return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NodeWithChildren.prototype, "lastChild", {
            get: function () {
                return this.children.length > 0
                    ? this.children[this.children.length - 1]
                    : null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NodeWithChildren.prototype, "childNodes", {
            get: function () {
                return this.children;
            },
            set: function (children) {
                this.children = children;
            },
            enumerable: false,
            configurable: true
        });
        return NodeWithChildren;
    }(Node));
    exports.NodeWithChildren = NodeWithChildren;
    var Element = /** @class */ (function (_super) {
        __extends(Element, _super);
        /**
         * @param name Name of the tag, eg. `div`, `span`.
         * @param attribs Object mapping attribute names to attribute values.
         * @param children Children of the node.
         */
        function Element(name, attribs, children) {
            if (children === void 0) { children = []; }
            var _this = _super.call(this, name === "script"
                ? "script" /* Script */
                : name === "style"
                    ? "style" /* Style */
                    : "tag" /* Tag */, children) || this;
            _this.name = name;
            _this.attribs = attribs;
            _this.attribs = attribs;
            return _this;
        }
        Object.defineProperty(Element.prototype, "tagName", {
            // DOM Level 1 aliases
            get: function () {
                return this.name;
            },
            set: function (name) {
                this.name = name;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "attributes", {
            get: function () {
                var _this = this;
                return Object.keys(this.attribs).map(function (name) { return ({
                    name: name,
                    value: _this.attribs[name],
                }); });
            },
            enumerable: false,
            configurable: true
        });
        return Element;
    }(NodeWithChildren));
    exports.Element = Element;
    /**
     * Clone a node, and optionally its children.
     *
     * @param recursive Clone child nodes as well.
     * @returns A clone of the node.
     */
    function cloneNode(node, recursive) {
        if (recursive === void 0) { recursive = false; }
        switch (node.type) {
            case "text" /* Text */:
                return new Text(node.data);
            case "directive" /* Directive */: {
                var instr = node;
                return new ProcessingInstruction(instr.name, instr.data);
            }
            case "comment" /* Comment */:
                return new Comment(node.data);
            case "tag" /* Tag */:
            case "script" /* Script */:
            case "style" /* Style */: {
                var elem = node;
                var children = recursive ? cloneChildren(elem.children) : [];
                var clone_1 = new Element(elem.name, __assign({}, elem.attribs), children);
                children.forEach(function (child) { return (child.parent = clone_1); });
                return clone_1;
            }
            case "cdata" /* CDATA */: {
                var cdata = node;
                var children = recursive ? cloneChildren(cdata.children) : [];
                var clone_2 = new NodeWithChildren("cdata" /* CDATA */, children);
                children.forEach(function (child) { return (child.parent = clone_2); });
                return clone_2;
            }
            case "doctype" /* Doctype */: {
                // This type isn't used yet.
                throw new Error("Not implemented yet: ElementType.Doctype case");
            }
        }
    }
    exports.cloneNode = cloneNode;
    function cloneChildren(childs) {
        var children = childs.map(function (child) { return cloneNode(child, true); });
        for (var i = 1; i < children.length; i++) {
            children[i].prev = children[i - 1];
            children[i - 1].next = children[i];
        }
        return children;
    }
    });

    unwrapExports(node);
    node.cloneNode;
    node.Element;
    node.NodeWithChildren;
    node.ProcessingInstruction;
    node.Comment;
    node.Text;
    node.DataNode;
    node.Node;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var lib = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DomHandler = void 0;

    __exportStar(node, exports);
    var reWhitespace = /\s+/g;
    // Default options
    var defaultOpts = {
        normalizeWhitespace: false,
        withStartIndices: false,
        withEndIndices: false,
    };
    var DomHandler = /** @class */ (function () {
        /**
         * @param callback Called once parsing has completed.
         * @param options Settings for the handler.
         * @param elementCB Callback whenever a tag is closed.
         */
        function DomHandler(callback, options, elementCB) {
            /** The constructed DOM */
            this.dom = [];
            /** Indicated whether parsing has been completed. */
            this._done = false;
            /** Stack of open tags. */
            this._tagStack = [];
            /** A data node that is still being written to. */
            this._lastNode = null;
            /** Reference to the parser instance. Used for location information. */
            this._parser = null;
            // Make it possible to skip arguments, for backwards-compatibility
            if (typeof options === "function") {
                elementCB = options;
                options = defaultOpts;
            }
            if (typeof callback === "object") {
                options = callback;
                callback = undefined;
            }
            this._callback = callback !== null && callback !== void 0 ? callback : null;
            this._options = options !== null && options !== void 0 ? options : defaultOpts;
            this._elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
        }
        DomHandler.prototype.onparserinit = function (parser) {
            this._parser = parser;
        };
        // Resets the handler back to starting state
        DomHandler.prototype.onreset = function () {
            var _a;
            this.dom = [];
            this._done = false;
            this._tagStack = [];
            this._lastNode = null;
            this._parser = (_a = this._parser) !== null && _a !== void 0 ? _a : null;
        };
        // Signals the handler that parsing is done
        DomHandler.prototype.onend = function () {
            if (this._done)
                return;
            this._done = true;
            this._parser = null;
            this.handleCallback(null);
        };
        DomHandler.prototype.onerror = function (error) {
            this.handleCallback(error);
        };
        DomHandler.prototype.onclosetag = function () {
            this._lastNode = null;
            var elem = this._tagStack.pop();
            if (!elem || !this._parser) {
                return;
            }
            if (this._options.withEndIndices) {
                elem.endIndex = this._parser.endIndex;
            }
            if (this._elementCB)
                this._elementCB(elem);
        };
        DomHandler.prototype.onopentag = function (name, attribs) {
            var element = new node.Element(name, attribs);
            this.addNode(element);
            this._tagStack.push(element);
        };
        DomHandler.prototype.ontext = function (data) {
            var normalize = this._options.normalizeWhitespace;
            var _lastNode = this._lastNode;
            if (_lastNode && _lastNode.type === "text" /* Text */) {
                if (normalize) {
                    _lastNode.data = (_lastNode.data + data).replace(reWhitespace, " ");
                }
                else {
                    _lastNode.data += data;
                }
            }
            else {
                if (normalize) {
                    data = data.replace(reWhitespace, " ");
                }
                var node$1 = new node.Text(data);
                this.addNode(node$1);
                this._lastNode = node$1;
            }
        };
        DomHandler.prototype.oncomment = function (data) {
            if (this._lastNode && this._lastNode.type === "comment" /* Comment */) {
                this._lastNode.data += data;
                return;
            }
            var node$1 = new node.Comment(data);
            this.addNode(node$1);
            this._lastNode = node$1;
        };
        DomHandler.prototype.oncommentend = function () {
            this._lastNode = null;
        };
        DomHandler.prototype.oncdatastart = function () {
            var text = new node.Text("");
            var node$1 = new node.NodeWithChildren("cdata" /* CDATA */, [text]);
            this.addNode(node$1);
            text.parent = node$1;
            this._lastNode = text;
        };
        DomHandler.prototype.oncdataend = function () {
            this._lastNode = null;
        };
        DomHandler.prototype.onprocessinginstruction = function (name, data) {
            var node$1 = new node.ProcessingInstruction(name, data);
            this.addNode(node$1);
        };
        DomHandler.prototype.handleCallback = function (error) {
            if (typeof this._callback === "function") {
                this._callback(error, this.dom);
            }
            else if (error) {
                throw error;
            }
        };
        DomHandler.prototype.addNode = function (node) {
            var parent = this._tagStack[this._tagStack.length - 1];
            var siblings = parent ? parent.children : this.dom;
            var previousSibling = siblings[siblings.length - 1];
            if (this._parser) {
                if (this._options.withStartIndices) {
                    node.startIndex = this._parser.startIndex;
                }
                if (this._options.withEndIndices) {
                    node.endIndex = this._parser.endIndex;
                }
            }
            siblings.push(node);
            if (previousSibling) {
                node.prev = previousSibling;
                previousSibling.next = node;
            }
            if (parent) {
                node.parent = parent;
            }
            this._lastNode = null;
        };
        DomHandler.prototype.addDataNode = function (node) {
            this.addNode(node);
            this._lastNode = node;
        };
        return DomHandler;
    }());
    exports.DomHandler = DomHandler;
    exports.default = DomHandler;
    });

    unwrapExports(lib);
    lib.DomHandler;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function shouldProcessEveryNode(node) {
      return true;
    }

    var shouldProcessNodeDefinitions = {
      shouldProcessEveryNode: shouldProcessEveryNode,
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as references for various `Number` constants. */
    var INFINITY$1 = 1 / 0;

    /** `Object#toString` result references. */
    var symbolTag$3 = '[object Symbol]';

    /** Used to match words composed of alphanumeric characters. */
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

    /** Used to match Latin Unicode letters (excluding mathematical operators). */
    var reLatin$1 = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    /** Used to compose unicode character classes. */
    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange$1 = '\\u0300-\\u036f\\ufe20-\\ufe23',
        rsComboSymbolsRange$1 = '\\u20d0-\\u20f0',
        rsDingbatRange = '\\u2700-\\u27bf',
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = '\\u2000-\\u206f',
        rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = '\\ufe0e\\ufe0f',
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

    /** Used to compose unicode capture groups. */
    var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo$1 = '[' + rsComboMarksRange$1 + rsComboSymbolsRange$1 + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo$1 + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = '\\u200d';

    /** Used to compose unicode regexes. */
    var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
        rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo$1 + '?', rsCombo$1, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

    /** Used to match apostrophes. */
    var reApos = RegExp(rsApos, 'g');

    /**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */
    var reComboMark$1 = RegExp(rsCombo$1, 'g');

    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

    /** Used to match complex or compound words. */
    var reUnicodeWord = RegExp([
      rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
      rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
      rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
      rsUpper + '+' + rsOptUpperContr,
      rsDigits,
      rsEmoji
    ].join('|'), 'g');

    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange$1 + rsComboSymbolsRange$1 + rsVarRange + ']');

    /** Used to detect strings that need a more robust regexp to match words. */
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

    /** Used to map Latin Unicode letters to basic Latin letters. */
    var deburredLetters$1 = {
      // Latin-1 Supplement block.
      '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
      '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
      '\xc7': 'C',  '\xe7': 'c',
      '\xd0': 'D',  '\xf0': 'd',
      '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
      '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
      '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
      '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
      '\xd1': 'N',  '\xf1': 'n',
      '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
      '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
      '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
      '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
      '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
      '\xc6': 'Ae', '\xe6': 'ae',
      '\xde': 'Th', '\xfe': 'th',
      '\xdf': 'ss',
      // Latin Extended-A block.
      '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
      '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
      '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
      '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
      '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
      '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
      '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
      '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
      '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
      '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
      '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
      '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
      '\u0134': 'J',  '\u0135': 'j',
      '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
      '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
      '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
      '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
      '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
      '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
      '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
      '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
      '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
      '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
      '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
      '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
      '\u0163': 't',  '\u0165': 't', '\u0167': 't',
      '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
      '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
      '\u0174': 'W',  '\u0175': 'w',
      '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
      '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
      '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
      '\u0132': 'IJ', '\u0133': 'ij',
      '\u0152': 'Oe', '\u0153': 'oe',
      '\u0149': "'n", '\u017f': 'ss'
    };

    /** Detect free variable `global` from Node.js. */
    var freeGlobal$3 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf$3 = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root$3 = freeGlobal$3 || freeSelf$3 || Function('return this')();

    /**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array ? array.length : 0;

      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * Converts an ASCII `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function asciiToArray(string) {
      return string.split('');
    }

    /**
     * Splits an ASCII `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    /**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyOf$1(object) {
      return function(key) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */
    var deburrLetter$1 = basePropertyOf$1(deburredLetters$1);

    /**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    /**
     * Checks if `string` contains a word composed of Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a word is found, else `false`.
     */
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    /**
     * Converts `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function stringToArray(string) {
      return hasUnicode(string)
        ? unicodeToArray(string)
        : asciiToArray(string);
    }

    /**
     * Converts a Unicode `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }

    /**
     * Splits a Unicode `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    /** Used for built-in method references. */
    var objectProto$3 = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString$3 = objectProto$3.toString;

    /** Built-in value references. */
    var Symbol$2 = root$3.Symbol;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,
        symbolToString$1 = symbolProto$1 ? symbolProto$1.toString : undefined;

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString$1(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isSymbol$3(value)) {
        return symbolToString$1 ? symbolToString$1.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
    }

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString$1(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr$1(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike$3(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol$3(value) {
      return typeof value == 'symbol' ||
        (isObjectLike$3(value) && objectToString$3.call(value) == symbolTag$3);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString$1(value) {
      return value == null ? '' : baseToString$1(value);
    }

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString$1(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr$1(string) {
      string = toString$1(string);
      return string && string.replace(reLatin$1, deburrLetter$1).replace(reComboMark$1, '');
    }

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString$1(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    var lodash_camelcase = camelCase;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Converts an object into an array of key, value arrays. Only the object's
     * own properties are used.
     * Note that the order of the output array is not guaranteed to be consistent
     * across different JS platforms.
     *
     * @func
     * @memberOf R
     * @since v0.4.0
     * @category Object
     * @sig {String: *} -> [[String,*]]
     * @param {Object} obj The object to extract from
     * @return {Array} An array of key, value arrays from the object's own properties.
     * @see R.fromPairs
     * @example
     *
     *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]
     */


    var toPairs =
    /*#__PURE__*/
    _curry1_1(function toPairs(obj) {
      var pairs = [];

      for (var prop in obj) {
        if (_has_1(prop, obj)) {
          pairs[pairs.length] = [prop, obj[prop]];
        }
      }

      return pairs;
    });

    var toPairs_1 = toPairs;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Optimized internal three-arity curry function.
     *
     * @private
     * @category Function
     * @param {Function} fn The function to curry.
     * @return {Function} The curried function.
     */


    function _curry3(fn) {
      return function f3(a, b, c) {
        switch (arguments.length) {
          case 0:
            return f3;

          case 1:
            return _isPlaceholder_1(a) ? f3 : _curry2_1(function (_b, _c) {
              return fn(a, _b, _c);
            });

          case 2:
            return _isPlaceholder_1(a) && _isPlaceholder_1(b) ? f3 : _isPlaceholder_1(a) ? _curry2_1(function (_a, _c) {
              return fn(_a, b, _c);
            }) : _isPlaceholder_1(b) ? _curry2_1(function (_b, _c) {
              return fn(a, _b, _c);
            }) : _curry1_1(function (_c) {
              return fn(a, b, _c);
            });

          default:
            return _isPlaceholder_1(a) && _isPlaceholder_1(b) && _isPlaceholder_1(c) ? f3 : _isPlaceholder_1(a) && _isPlaceholder_1(b) ? _curry2_1(function (_a, _b) {
              return fn(_a, _b, c);
            }) : _isPlaceholder_1(a) && _isPlaceholder_1(c) ? _curry2_1(function (_a, _c) {
              return fn(_a, b, _c);
            }) : _isPlaceholder_1(b) && _isPlaceholder_1(c) ? _curry2_1(function (_b, _c) {
              return fn(a, _b, _c);
            }) : _isPlaceholder_1(a) ? _curry1_1(function (_a) {
              return fn(_a, b, c);
            }) : _isPlaceholder_1(b) ? _curry1_1(function (_b) {
              return fn(a, _b, c);
            }) : _isPlaceholder_1(c) ? _curry1_1(function (_c) {
              return fn(a, b, _c);
            }) : fn(a, b, c);
        }
      };
    }

    var _curry3_1 = _curry3;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Returns a single item by iterating through the list, successively calling
     * the iterator function and passing it an accumulator value and the current
     * value from the array, and then passing the result to the next call.
     *
     * The iterator function receives two values: *(acc, value)*. It may use
     * [`R.reduced`](#reduced) to shortcut the iteration.
     *
     * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function
     * is *(value, acc)*.
     *
     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
     * arrays), unlike the native `Array.prototype.reduce` method. For more details
     * on this behavior, see:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
     *
     * Dispatches to the `reduce` method of the third argument, if present. When
     * doing so, it is up to the user to handle the [`R.reduced`](#reduced)
     * shortcuting, as this is not implemented by `reduce`.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig ((a, b) -> a) -> a -> [b] -> a
     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
     *        current element from the array.
     * @param {*} acc The accumulator value.
     * @param {Array} list The list to iterate over.
     * @return {*} The final, accumulated value.
     * @see R.reduced, R.addIndex, R.reduceRight
     * @example
     *
     *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
     *      //          -               -10
     *      //         / \              / \
     *      //        -   4           -6   4
     *      //       / \              / \
     *      //      -   3   ==>     -3   3
     *      //     / \              / \
     *      //    -   2           -1   2
     *      //   / \              / \
     *      //  0   1            0   1
     *
     * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
     */


    var reduce =
    /*#__PURE__*/
    _curry3_1(_reduce_1);

    var reduce_1 = reduce;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _arrayFromIterator(iter) {
      var list = [];
      var next;

      while (!(next = iter.next()).done) {
        list.push(next.value);
      }

      return list;
    }

    var _arrayFromIterator_1 = _arrayFromIterator;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _includesWith(pred, x, list) {
      var idx = 0;
      var len = list.length;

      while (idx < len) {
        if (pred(x, list[idx])) {
          return true;
        }

        idx += 1;
      }

      return false;
    }

    var _includesWith_1 = _includesWith;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _functionName(f) {
      // String(x => x) evaluates to "x => x", so the pattern may not match.
      var match = String(f).match(/^function (\w*)/);
      return match == null ? '' : match[1];
    }

    var _functionName_1 = _functionName;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
    function _objectIs(a, b) {
      // SameValue algorithm
      if (a === b) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return a !== 0 || 1 / a === 1 / b;
      } else {
        // Step 6.a: NaN == NaN
        return a !== a && b !== b;
      }
    }

    var _objectIs_1 = typeof Object.is === 'function' ? Object.is : _objectIs;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Gives a single-word string description of the (native) type of a value,
     * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
     * attempt to distinguish user Object types any further, reporting them all as
     * 'Object'.
     *
     * @func
     * @memberOf R
     * @since v0.8.0
     * @category Type
     * @sig (* -> {*}) -> String
     * @param {*} val The value to test
     * @return {String}
     * @example
     *
     *      R.type({}); //=> "Object"
     *      R.type(1); //=> "Number"
     *      R.type(false); //=> "Boolean"
     *      R.type('s'); //=> "String"
     *      R.type(null); //=> "Null"
     *      R.type([]); //=> "Array"
     *      R.type(/[A-z]/); //=> "RegExp"
     *      R.type(() => {}); //=> "Function"
     *      R.type(undefined); //=> "Undefined"
     */


    var type$1 =
    /*#__PURE__*/
    _curry1_1(function type(val) {
      return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
    });

    var type_1 = type$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * private _uniqContentEquals function.
     * That function is checking equality of 2 iterator contents with 2 assumptions
     * - iterators lengths are the same
     * - iterators values are unique
     *
     * false-positive result will be returned for comparision of, e.g.
     * - [1,2,3] and [1,2,3,4]
     * - [1,1,1] and [1,2,3]
     * */


    function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
      var a = _arrayFromIterator_1(aIterator);

      var b = _arrayFromIterator_1(bIterator);

      function eq(_a, _b) {
        return _equals(_a, _b, stackA.slice(), stackB.slice());
      } // if *a* array contains any element that is not included in *b*


      return !_includesWith_1(function (b, aItem) {
        return !_includesWith_1(eq, aItem, b);
      }, b, a);
    }

    function _equals(a, b, stackA, stackB) {
      if (_objectIs_1(a, b)) {
        return true;
      }

      var typeA = type_1(a);

      if (typeA !== type_1(b)) {
        return false;
      }

      if (a == null || b == null) {
        return false;
      }

      if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {
        return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);
      }

      if (typeof a.equals === 'function' || typeof b.equals === 'function') {
        return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);
      }

      switch (typeA) {
        case 'Arguments':
        case 'Array':
        case 'Object':
          if (typeof a.constructor === 'function' && _functionName_1(a.constructor) === 'Promise') {
            return a === b;
          }

          break;

        case 'Boolean':
        case 'Number':
        case 'String':
          if (!(typeof a === typeof b && _objectIs_1(a.valueOf(), b.valueOf()))) {
            return false;
          }

          break;

        case 'Date':
          if (!_objectIs_1(a.valueOf(), b.valueOf())) {
            return false;
          }

          break;

        case 'Error':
          return a.name === b.name && a.message === b.message;

        case 'RegExp':
          if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
            return false;
          }

          break;
      }

      var idx = stackA.length - 1;

      while (idx >= 0) {
        if (stackA[idx] === a) {
          return stackB[idx] === b;
        }

        idx -= 1;
      }

      switch (typeA) {
        case 'Map':
          if (a.size !== b.size) {
            return false;
          }

          return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));

        case 'Set':
          if (a.size !== b.size) {
            return false;
          }

          return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));

        case 'Arguments':
        case 'Array':
        case 'Object':
        case 'Boolean':
        case 'Number':
        case 'String':
        case 'Date':
        case 'Error':
        case 'RegExp':
        case 'Int8Array':
        case 'Uint8Array':
        case 'Uint8ClampedArray':
        case 'Int16Array':
        case 'Uint16Array':
        case 'Int32Array':
        case 'Uint32Array':
        case 'Float32Array':
        case 'Float64Array':
        case 'ArrayBuffer':
          break;

        default:
          // Values of other types are only equal if identical.
          return false;
      }

      var keysA = keys_1(a);

      if (keysA.length !== keys_1(b).length) {
        return false;
      }

      var extendedStackA = stackA.concat([a]);
      var extendedStackB = stackB.concat([b]);
      idx = keysA.length - 1;

      while (idx >= 0) {
        var key = keysA[idx];

        if (!(_has_1(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {
          return false;
        }

        idx -= 1;
      }

      return true;
    }

    var _equals_1 = _equals;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
     * cyclical data structures.
     *
     * Dispatches symmetrically to the `equals` methods of both arguments, if
     * present.
     *
     * @func
     * @memberOf R
     * @since v0.15.0
     * @category Relation
     * @sig a -> b -> Boolean
     * @param {*} a
     * @param {*} b
     * @return {Boolean}
     * @example
     *
     *      R.equals(1, 1); //=> true
     *      R.equals(1, '1'); //=> false
     *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
     *
     *      const a = {}; a.v = a;
     *      const b = {}; b.v = b;
     *      R.equals(a, b); //=> true
     */


    var equals =
    /*#__PURE__*/
    _curry2_1(function equals(a, b) {
      return _equals_1(a, b, [], []);
    });

    var equals_1 = equals;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function _indexOf(list, a, idx) {
      var inf, item; // Array.prototype.indexOf doesn't exist below IE9

      if (typeof list.indexOf === 'function') {
        switch (typeof a) {
          case 'number':
            if (a === 0) {
              // manually crawl the list to distinguish between +0 and -0
              inf = 1 / a;

              while (idx < list.length) {
                item = list[idx];

                if (item === 0 && 1 / item === inf) {
                  return idx;
                }

                idx += 1;
              }

              return -1;
            } else if (a !== a) {
              // NaN
              while (idx < list.length) {
                item = list[idx];

                if (typeof item === 'number' && item !== item) {
                  return idx;
                }

                idx += 1;
              }

              return -1;
            } // non-zero numbers can utilise Set


            return list.indexOf(a, idx);
          // all these types can utilise Set

          case 'string':
          case 'boolean':
          case 'function':
          case 'undefined':
            return list.indexOf(a, idx);

          case 'object':
            if (a === null) {
              // null can utilise Set
              return list.indexOf(a, idx);
            }

        }
      } // anything else not covered above, defer to R.equals


      while (idx < list.length) {
        if (equals_1(list[idx], a)) {
          return idx;
        }

        idx += 1;
      }

      return -1;
    }

    var _indexOf_1 = _indexOf;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function _includes(a, list) {
      return _indexOf_1(list, a, 0) >= 0;
    }

    var _includes_1 = _includes;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Returns `true` if the specified value is equal, in [`R.equals`](#equals)
     * terms, to at least one element of the given list; `false` otherwise.
     * Works also with strings.
     *
     * @func
     * @memberOf R
     * @since v0.26.0
     * @category List
     * @sig a -> [a] -> Boolean
     * @param {Object} a The item to compare against.
     * @param {Array} list The array to consider.
     * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.
     * @see R.any
     * @example
     *
     *      R.includes(3, [1, 2, 3]); //=> true
     *      R.includes(4, [1, 2, 3]); //=> false
     *      R.includes({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true
     *      R.includes([42], [[42]]); //=> true
     *      R.includes('ba', 'banana'); //=>true
     */


    var includes =
    /*#__PURE__*/
    _curry2_1(_includes_1);

    var includes_1 = includes;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// These are all sourced from https://facebook.github.io/react/docs/tags-and-attributes.html -
    var HTML_ATTRIBUTES = [
      'accept', 'acceptCharset', 'accessKey', 'action', 'allowFullScreen', 'allowTransparency',
      'alt', 'async', 'autoComplete', 'autoFocus', 'autoPlay', 'capture', 'cellPadding',
      'cellSpacing', 'challenge', 'charSet', 'checked', 'cite', 'classID', 'className',
      'colSpan', 'cols', 'content', 'contentEditable', 'contextMenu', 'controls', 'coords',
      'crossOrigin', 'data', 'dateTime', 'default', 'defer', 'dir', 'disabled', 'download',
      'draggable', 'encType', 'form', 'formAction', 'formEncType', 'formMethod', 'formNoValidate',
      'formTarget', 'frameBorder', 'headers', 'height', 'hidden', 'high', 'href', 'hrefLang',
      'htmlFor', 'httpEquiv', 'icon', 'id', 'inputMode', 'integrity', 'is', 'keyParams', 'keyType',
      'kind', 'label', 'lang', 'list', 'loop', 'low', 'manifest', 'marginHeight', 'marginWidth',
      'max', 'maxLength', 'media', 'mediaGroup', 'method', 'min', 'minLength', 'multiple', 'muted',
      'name', 'noValidate', 'nonce', 'open', 'optimum', 'pattern', 'placeholder', 'poster',
      'preload', 'profile', 'radioGroup', 'readOnly', 'rel', 'required', 'reversed', 'role',
      'rowSpan', 'rows', 'sandbox', 'scope', 'scoped', 'scrolling', 'seamless', 'selected',
      'shape', 'size', 'sizes', 'span', 'spellCheck', 'src', 'srcDoc', 'srcLang', 'srcSet', 'start',
      'step', 'style', 'summary', 'tabIndex', 'target', 'title', 'type', 'useMap', 'value', 'width',
      'wmode', 'wrap', 'onClick',
    ];

    var NON_STANDARD_ATTRIBUTES = [
      'autoCapitalize', 'autoCorrect', 'color', 'itemProp', 'itemScope', 'itemType', 'itemRef',
      'itemID', 'security', 'unselectable', 'results', 'autoSave',
    ];

    var SVG_ATTRIBUTES = [
      'accentHeight', 'accumulate', 'additive', 'alignmentBaseline', 'allowReorder', 'alphabetic',
      'amplitude', 'arabicForm', 'ascent', 'attributeName', 'attributeType', 'autoReverse', 'azimuth',
      'baseFrequency', 'baseProfile', 'baselineShift', 'bbox', 'begin', 'bias', 'by', 'calcMode',
      'capHeight', 'clip', 'clipPath', 'clipPathUnits', 'clipRule', 'colorInterpolation',
      'colorInterpolationFilters', 'colorProfile', 'colorRendering', 'contentScriptType',
      'contentStyleType', 'cursor', 'cx', 'cy', 'd', 'decelerate', 'descent', 'diffuseConstant',
      'direction', 'display', 'divisor', 'dominantBaseline', 'dur', 'dx', 'dy', 'edgeMode',
      'elevation', 'enableBackground', 'end', 'exponent', 'externalResourcesRequired', 'fill',
      'fillOpacity', 'fillRule', 'filter', 'filterRes', 'filterUnits', 'floodColor', 'floodOpacity',
      'focusable', 'fontFamily', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle',
      'fontVariant', 'fontWeight', 'format', 'from', 'fx', 'fy', 'g1', 'g2', 'glyphName',
      'glyphOrientationHorizontal', 'glyphOrientationVertical', 'glyphRef',
      'gradientTransform', 'gradientUnits', 'hanging', 'horizAdvX', 'horizOriginX', 'ideographic',
      'imageRendering', 'in', 'in2', 'intercept', 'k', 'k1', 'k2', 'k3', 'k4', 'kernelMatrix',
      'kernelUnitLength', 'kerning', 'keyPoints', 'keySplines', 'keyTimes', 'lengthAdjust',
      'letterSpacing', 'lightingColor', 'limitingConeAngle', 'local', 'markerEnd', 'markerHeight',
      'markerMid', 'markerStart', 'markerUnits', 'markerWidth', 'mask', 'maskContentUnits',
      'maskUnits', 'mathematical', 'mode', 'numOctaves', 'offset', 'opacity', 'operator', 'order',
      'orient', 'orientation', 'origin', 'overflow', 'overlinePosition', 'overlineThickness',
      'paintOrder', 'panose1', 'pathLength', 'patternContentUnits', 'patternTransform',
      'patternUnits', 'pointerEvents', 'points', 'pointsAtX', 'pointsAtY', 'pointsAtZ',
      'preserveAlpha', 'preserveAspectRatio', 'primitiveUnits', 'r', 'radius', 'refX', 'refY',
      'renderingIntent', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures',
      'restart', 'result', 'rotate', 'rx', 'ry', 'scale', 'seed', 'shapeRendering', 'slope',
      'spacing', 'specularConstant', 'specularExponent', 'speed', 'spreadMethod', 'startOffset',
      'stdDeviation', 'stemh', 'stemv', 'stitchTiles', 'stopColor', 'stopOpacity',
      'strikethroughPosition', 'strikethroughThickness', 'string', 'stroke', 'strokeDasharray',
      'strokeDashoffset', 'strokeLinecap', 'strokeLinejoin', 'strokeMiterlimit', 'strokeOpacity',
      'strokeWidth', 'surfaceScale', 'systemLanguage', 'tableValues', 'targetX', 'targetY',
      'textAnchor', 'textDecoration', 'textLength', 'textRendering', 'to', 'transform', 'u1',
      'u2', 'underlinePosition', 'underlineThickness', 'unicode', 'unicodeBidi', 'unicodeRange',
      'unitsPerEm', 'vAlphabetic', 'vHanging', 'vIdeographic', 'vMathematical', 'values',
      'vectorEffect', 'version', 'vertAdvY', 'vertOriginX', 'vertOriginY', 'viewBox',
      'viewTarget', 'visibility', 'widths', 'wordSpacing', 'writingMode', 'x', 'x1', 'x2',
      'xChannelSelector', 'xHeight', 'xlinkActuate', 'xlinkArcrole', 'xlinkHref', 'xlinkRole',
      'xlinkShow', 'xlinkTitle', 'xlinkType', 'xmlns', 'xmlnsXlink', 'xmlBase', 'xmlLang',
      'xmlSpace', 'y', 'y1', 'y2', 'yChannelSelector', 'z', 'zoomAndPan',
    ];

    var camelCaseMap = HTML_ATTRIBUTES
      .concat(NON_STANDARD_ATTRIBUTES)
      .concat(SVG_ATTRIBUTES)
      .reduce(function (soFar, attr) {
        var lower = attr.toLowerCase();
        if (lower !== attr) {
          soFar[lower] = attr;
        }
        return soFar;
      }, {});

    var camelCaseAttributeNames = camelCaseMap;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};






    function createStyleJsonFromString(styleString) {
      styleString = styleString || '';
      var styles = styleString.split(/;(?!base64)/);
      var singleStyle, key, value, jsonStyles = {};
      for (var i = 0; i < styles.length; ++i) {
        singleStyle = styles[i].split(':');
        if (singleStyle.length > 2) {
          singleStyle[1] = singleStyle.slice(1).join(':');
        }

        key = singleStyle[0];
        value = singleStyle[1];
        if (typeof value === 'string'){
          value = value.trim();
        }

        if (key != null && value != null && key.length > 0 && value.length > 0) {
          jsonStyles[lodash_camelcase(key)] = value;
        }
      }
      return jsonStyles;
    }

    // Boolean HTML attributes, copied from https://meiert.com/en/blog/boolean-attributes-of-html/
    var booleanAttrs = [
      'allowfullscreen',
      'allowpaymentrequest',
      'async',
      'autofocus',
      'autoplay',
      'checked',
      'controls',
      'default',
      'disabled',
      'formnovalidate',
      'hidden',
      'ismap',
      'itemscope',
      'loop',
      'multiple',
      'muted',
      'nomodule',
      'novalidate',
      'open',
      'playsinline',
      'readonly',
      'required',
      'reversed',
      'selected',
      'truespeed',
    ];

    function createElement(node, index, data, children) {
      var elementProps = {
        key: index,
      };
      if (node.attribs) {
        elementProps = reduce_1(function(result, keyAndValue) {
          var key = keyAndValue[0];
          var value = keyAndValue[1];
          key = camelCaseAttributeNames[key.replace(/[-:]/, '')] || key;
          if (key === 'style') {
            value = createStyleJsonFromString(value);
          } else if (key === 'class') {
            key = 'className';
          } else if (key === 'for') {
            key = 'htmlFor';
          }

          if (includes_1(key, booleanAttrs) && (value || '') === '') {
            value = key;
          }

          result[key] = value;
          return result;
        }, elementProps, toPairs_1(node.attribs));
      }

      children = children || [];
      var allChildren = data != null ? [data,].concat(children) : children;
      return React__default['default'].createElement.apply(
        null, [node.name, elementProps,].concat(allChildren)
      );
    }

    var utils$1 = {
      createElement: createElement,
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    // eslint-disable-next-line max-len
    // https://github.com/facebook/react/blob/15.0-stable/src/renderers/dom/shared/ReactDOMComponent.js#L457
    var voidElementTags = [
      'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param',
      'source', 'track', 'wbr', 'menuitem', 'textarea',
    ];

    function ProcessNodeDefinitions() {
      function processDefaultNode(node, children, index) {
        if (node.type === 'text') {
          return node.data;
        } else if (node.type === 'comment') {
          // FIXME: The following doesn't work as the generated HTML results in
          // "&lt;!--  This is a comment  --&gt;"
          // return '<!-- ' + node.data + ' -->';
          return false;
        }

        if (voidElementTags.indexOf(node.name) > -1) {
          return utils$1.createElement(node, index);
        } else {
          return utils$1.createElement(node, index, node.data, children);
        }
      }

      return {
        processDefaultNode: processDefaultNode,
      };
    }

    var processNodeDefinitions$1 = ProcessNodeDefinitions;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    function ProcessingInstructions() {
      var processNodeDefinitions = new processNodeDefinitions$1();

      return {
        defaultProcessingInstructions: [{
          shouldProcessNode: shouldProcessNodeDefinitions.shouldProcessEveryNode,
          processNode: processNodeDefinitions.processDefaultNode,
        },],
      };
    }
    var processingInstructions = ProcessingInstructions;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function alwaysValid() {
      return true;
    }

    var isValidNodeDefinitions = {
      alwaysValid: alwaysValid,
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};




    var HtmlParser = lib$1.Parser;
    var DomHandler = lib.DomHandler;




    function Html2ReactParser(options) {
      function parseHtmlToTree(html) {
        options = options || {};
        options.decodeEntities = true;
        var handler = new DomHandler();
        var parser = new HtmlParser(handler, options);
        parser.parseComplete(html);
        return handler.dom.filter(function (element) {
          return element.type !== 'directive';
        });
      }
      function traverseDom(node, isValidNode, processingInstructions, preprocessingInstructions,
        index) {
        if (isValidNode(node)) {
          forEach_1(function (preprocessingInstruction) {
            if (preprocessingInstruction.shouldPreprocessNode(node)) {
              preprocessingInstruction.preprocessNode(node, index);
            }
          }, preprocessingInstructions || []);

          var processingInstruction = find_1(function (processingInstruction) {
            return processingInstruction.shouldProcessNode(node);
          }, processingInstructions || []);
          if (processingInstruction != null) {
            var children = reject_1(function (x) {return x == null || x === false;},
              addIndex_1(map_1)(function (child, i) {
                return traverseDom(child, isValidNode, processingInstructions,
                  preprocessingInstructions, i);
              }, node.children || []));

            if (processingInstruction.replaceChildren) {
              return utils$1.createElement(node, index, node.data, [
                processingInstruction.processNode(node, children, index),
              ]);
            } else {
              return processingInstruction.processNode(node, children, index);
            }
          } else {
            return false;
          }
        } else {
          return false;
        }
      }
      function parseWithInstructions(html, isValidNode, processingInstructions,
          preprocessingInstructions) {
        var domTree = parseHtmlToTree(html);
        var list = domTree.map(function (domTreeItem, index) {
          return traverseDom(domTreeItem, isValidNode, processingInstructions,
            preprocessingInstructions, index);
        });
        return list.length <= 1 ? list[0] : list;
      }
      function parse(html) {
        var processingInstructions$1 = new processingInstructions();
        return parseWithInstructions(html,
          isValidNodeDefinitions.alwaysValid,
          processingInstructions$1.defaultProcessingInstructions);
      }
      return {
        parse: parse,
        parseWithInstructions: parseWithInstructions,
      };
    }
    var parser$1 = Html2ReactParser;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};





    var htmlToReact = {
      Parser: parser$1,
      ProcessingInstructions: processingInstructions,
      IsValidNodeDefinitions: isValidNodeDefinitions,
      ProcessNodeDefinitions: processNodeDefinitions$1,
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Full blown HTML parsing based on htmlparser2.
     * Pulls in a heavy set of dependencies and thus WILL bloat your bundle size.
     * You have been warned.
     **/










    var type = 'parsedHtml';
    var selfClosingRe = /^<(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)\s*\/?>$/i;
    var startTagRe = /^<([a-z]+)\b/i;
    var closingTagRe = /^<\/([a-z]+)\s*>$/;
    var parser = new htmlToReact.Parser();
    var processNodeDefinitions = new htmlToReact.ProcessNodeDefinitions(React__default['default']);
    var defaultConfig = {
      isValidNode: function isValidNode(node) {
        return node.type !== 'script';
      },
      processingInstructions: [{
        shouldProcessNode: function shouldProcessNode() {
          return true;
        },
        processNode: processNodeDefinitions.processDefaultNode
      }]
    };

    function parseHtml$1(config, tree, props) {
      var open;
      var currentParent;
      unistUtilVisit(tree, 'html', function (node, index, parent) {
        if (!props.allowDangerousHtml && props.escapeHtml !== false) {
          parent.children.splice(index, 1, {
            type: 'text',
            position: node.position,
            value: node.value
          });
          return true;
        }

        if (props.skipHtml) {
          parent.children.splice(index, 1);
          return true;
        }

        if (currentParent !== parent) {
          open = [];
          currentParent = parent;
        }

        var selfClosing = getSelfClosingTagName(node);

        if (selfClosing) {
          parent.children.splice(index, 1, {
            type: 'virtualHtml',
            tag: selfClosing,
            position: node.position
          });
          return true;
        }

        var current = parseNode(node, config);

        if (!current || current.type === type) {
          return true;
        }

        var matching = findAndPull(open, current.tag);

        if (matching) {
          parent.children.splice(index, 0, parsedHtml(current, matching, parent));
        } else if (!current.opening) {
          open.push(current);
        }

        return true;
      }, true // Iterate in reverse
      ); // Find any leftover HTML elements and blindly replace them with a parsed version

      unistUtilVisit(tree, 'html', function (node, index, parent) {
        var element = parser.parseWithInstructions(node.value, config.isValidNode, config.processingInstructions);

        if (!element) {
          parent.children.splice(index, 1);
          return true;
        }

        parent.children.splice(index, 1, {
          type: type,
          element: element,
          value: node.value,
          position: node.position
        });
        return true;
      });
      return tree;
    }

    function findAndPull(open, matchingTag) {
      var i = open.length;

      while (i--) {
        if (open[i].tag === matchingTag) {
          return open.splice(i, 1)[0];
        }
      }

      return false;
    }

    function parseNode(node, config) {
      var match = node.value.trim().match(closingTagRe);

      if (match) {
        return {
          tag: match[1],
          opening: false,
          node: node
        };
      }

      var el = parser.parseWithInstructions(node.value, config.isValidNode, config.processingInstructions);
      /* istanbul ignore if - seems to never happen. Hiding it because we plan on
       * moving to rehype. */

      if (!el) {
        return false;
      }

      var isMultiple = React__default['default'].Children.count(el) > 1;
      var isSelfClosing = !isMultiple && selfClosingRe.test("<".concat(el.type, ">"));

      if (isMultiple || isSelfClosing) {
        return {
          type: type,
          position: node.position,
          node: el
        };
      }

      var startTagMatch = node.value.trim().match(startTagRe);
      /* istanbul ignore next - seems it’s always a start tag, hiding it because we
       * plan on moving to rehype. */

      var tag = startTagMatch ? startTagMatch[1] : el.type;
      return {
        tag: tag,
        opening: true,
        node: node,
        element: el
      };
    }

    function getSelfClosingTagName(node) {
      var match = node.value.match(selfClosingRe);
      return match ? match[1] : false;
    }

    function parsedHtml(fromNode, toNode, parent) {
      var fromIndex = parent.children.indexOf(fromNode.node);
      var toIndex = parent.children.indexOf(toNode.node);
      var extracted = parent.children.splice(fromIndex, toIndex - fromIndex + 1);
      var children = extracted.slice(1, -1);
      return {
        type: type,
        children: children,
        tag: fromNode.tag,
        element: fromNode.element,
        value: fromNode.node.value,
        position: {
          start: fromNode.node.position.start,
          end: toNode.node.position.end,
          indent: []
        }
      };
    }

    var htmlParser = function getHtmlParserPlugin(config, props) {
      if (props && (typeof config.source !== 'undefined' || typeof config.children !== 'undefined')) {
        throw new Error('react-markdown: `html-parser` must be called before use - see https://github.com/remarkjs/react-markdown#parsing-html');
      }

      var htmlConfig = immutable(defaultConfig, config || {});
      var plugin = parseHtml$1.bind(null, htmlConfig);
      plugin.identity = symbols.HtmlParser;
      return plugin;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};






    var parseHtml = htmlParser();

    function ReactMarkdownWithHtml(props) {
      var astPlugins = [parseHtml].concat(props.astPlugins || []);
      return reactMarkdown(immutable(props, {
        astPlugins: astPlugins
      }));
    }

    ReactMarkdownWithHtml.defaultProps = reactMarkdown.defaultProps;
    ReactMarkdownWithHtml.propTypes = reactMarkdown.propTypes;
    ReactMarkdownWithHtml.types = reactMarkdown.types;
    ReactMarkdownWithHtml.renderers = reactMarkdown.renderers;
    ReactMarkdownWithHtml.uriTransformer = reactMarkdown.uriTransformer;
    var withHtml$1 = ReactMarkdownWithHtml;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var withHtml = withHtml$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var lodash_uniqby = createCommonjsModule$1(function (module, exports) {
    /**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /** Used to compose bitmasks for comparison styles. */
    var UNORDERED_COMPARE_FLAG = 1,
        PARTIAL_COMPARE_FLAG = 2;

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        reLeadingDot = /^\./,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    typedArrayTags[setTag] = typedArrayTags[stringTag] =
    typedArrayTags[weakMapTag] = false;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        return freeProcess && freeProcess.binding('util');
      } catch (e) {}
    }());

    /* Node.js helper references. */
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    /**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludes(array, value) {
      var length = array ? array.length : 0;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    /**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array ? array.length : 0;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array ? array.length : 0;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
      }
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */
    function baseIsNaN(value) {
      return value !== value;
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }

    /**
     * Checks if a cache value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
      return cache.has(key);
    }

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    /**
     * Checks if `value` is a host object in IE < 9.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
     */
    function isHostObject(value) {
      // Many host objects are `Object` objects that can coerce to strings
      // despite having improperly defined `toString` methods.
      var result = false;
      if (value != null && typeof value.toString != 'function') {
        try {
          result = !!(value + '');
        } catch (e) {}
      }
      return result;
    }

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = root['__core-js_shared__'];

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Symbol = root.Symbol,
        Uint8Array = root.Uint8Array,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeKeys = overArg(Object.keys, Object);

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(root, 'DataView'),
        Map = getNative(root, 'Map'),
        Promise = getNative(root, 'Promise'),
        Set = getNative(root, 'Set'),
        WeakMap = getNative(root, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      return getMapData(this, key)['delete'](key);
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      return this.__data__['delete'](key);
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
      // Safari 9 makes `arguments.length` enumerable in strict mode.
      var result = (isArray(value) || isArguments(value))
        ? baseTimes(value.length, String)
        : [];

      var length = result.length,
          skipIndexes = !!length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getTag`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      return objectToString.call(value);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {boolean} [bitmask] The bitmask of comparison flags.
     *  The bitmask may be composed of the following flags:
     *     1 - Unordered comparison
     *     2 - Partial comparison
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object),
          othIsObj = othTag == objectTag && !isHostObject(other),
          isSameTag = objTag == othTag;

      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!seen.has(othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
                  return seen.add(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, customizer, bitmask, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11,
    // for data views in Edge < 14, and promises in Node.js.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : undefined;

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = isKey(path, object) ? [path] : castPath(path);

      var result,
          index = -1,
          length = path.length;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoize(function(string) {
      string = toString(string);

      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to process.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length)
        ? baseUniq(array, baseIteratee(iteratee))
        : [];
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 8-9 which returns 'object' for typed array and other constructors.
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    module.exports = uniqBy;
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var isOnlyEmojis = function (text) {
        if (!text)
            return false;
        var noEmojis = text.replace(emojiRegex(), '');
        var noSpace = noEmojis.replace(/[\s\n]/gm, '');
        return !noSpace;
    };
    var allowedMarkups$1 = [
        'html',
        // @ts-expect-error
        'root',
        'text',
        'break',
        'paragraph',
        'emphasis',
        'strong',
        'link',
        'list',
        'listItem',
        'code',
        'inlineCode',
        'blockquote',
        'delete',
    ];
    var matchMarkdownLinks$1 = function (message) {
        var regexMdLinks = /\[([^[]+)\](\(.*\))/gm;
        var matches = message.match(regexMdLinks);
        var singleMatch = /\[([^[]+)\]\((.*)\)/;
        var links = matches
            ? matches.map(function (match) {
                var i = singleMatch.exec(match);
                return i && [i[1], i[2]];
            })
            : [];
        return links.flat();
    };
    var messageCodeBlocks = function (message) {
        var codeRegex = /```[a-z]*\n[\s\S]*?\n```|`[a-z]*[\s\S]*?`/gm;
        var matches = message.match(codeRegex);
        return matches || [];
    };
    var detectHttp = /(http(s?):\/\/)?(www\.)?/;
    function formatUrlForDisplay(url) {
        try {
            return decodeURIComponent(url).replace(detectHttp, '');
        }
        catch (e) {
            return url;
        }
    }
    function encodeDecode(url) {
        try {
            return encodeURI(decodeURIComponent(url));
        }
        catch (error) {
            return url;
        }
    }
    var markDownRenderers$1 = {
        // eslint-disable-next-line react/display-name
        link: function (props) {
            var children = props.children, href = props.href;
            var isEmail = href === null || href === void 0 ? void 0 : href.startsWith('mailto:');
            var isUrl = href === null || href === void 0 ? void 0 : href.startsWith('http');
            if (!href || (!isEmail && !isUrl)) {
                return children;
            }
            return (React__default['default'].createElement("a", { className: "" + (isUrl ? 'str-chat__message-url-link' : ''), href: href, rel: 'nofollow noreferrer noopener', target: '_blank' }, children));
        },
        span: 'span',
    };
    var emojiMarkdownPlugin = function () {
        function replace(match) {
            return {
                children: [{ type: 'text', value: match }],
                className: 'inline-text-emoji',
                type: 'span',
            };
        }
        var transform = function (markdownAST) {
            mdastUtilFindAndReplace(markdownAST, emojiRegex(), replace);
            return markdownAST;
        };
        return transform;
    };
    var mentionsMarkdownPlugin = function (mentioned_users) { return function () {
        var mentioned_usernames = mentioned_users
            .map(function (user) { return user.name || user.id; })
            .filter(Boolean)
            .map(escapeRegExp);
        function replace(match) {
            var usernameOrId = match.replace('@', '');
            var user = mentioned_users.find(function (_a) {
                var id = _a.id, name = _a.name;
                return name === usernameOrId || id === usernameOrId;
            });
            return {
                children: [{ type: 'text', value: match }],
                mentioned_user: user,
                type: 'mention',
            };
        }
        var transform = function (markdownAST) {
            if (!mentioned_usernames.length) {
                return markdownAST;
            }
            var mentionedUsersRegex = new RegExp(mentioned_usernames.map(function (username) { return "@" + username; }).join('|'), 'g');
            mdastUtilFindAndReplace(markdownAST, mentionedUsersRegex, replace);
            return markdownAST;
        };
        return transform;
    }; };
    var Mention = function (props) { return React__default['default'].createElement("span", { className: 'str-chat__message-mention' }, props.children); };
    var renderText = function (text, mentioned_users, options) {
        if (options === void 0) { options = {}; }
        // take the @ mentions and turn them into markdown?
        // translate links
        if (!text)
            return null;
        var newText = text;
        var markdownLinks = matchMarkdownLinks$1(newText);
        var codeBlocks = messageCodeBlocks(newText);
        // extract all valid links/emails within text and replace it with proper markup
        lodash_uniqby(linkifyjs_1(newText), 'value').forEach(function (_a) {
            var href = _a.href, type = _a.type, value = _a.value;
            var linkIsInBlock = codeBlocks.some(function (block) { return block === null || block === void 0 ? void 0 : block.includes(value); });
            // check if message is already  markdown
            var noParsingNeeded = markdownLinks &&
                markdownLinks.filter(function (text) {
                    var strippedHref = href === null || href === void 0 ? void 0 : href.replace(detectHttp, '');
                    var strippedText = text === null || text === void 0 ? void 0 : text.replace(detectHttp, '');
                    if (!strippedHref || !strippedText)
                        return false;
                    return strippedHref.includes(strippedText) || strippedText.includes(strippedHref);
                });
            if (noParsingNeeded.length > 0 || linkIsInBlock)
                return;
            try {
                var displayLink = type === 'email' ? value : formatUrlForDisplay(href);
                newText = newText.replace(new RegExp(escapeRegExp(value), 'g'), "[" + displayLink + "](" + encodeDecode(href) + ")");
            }
            catch (e) {
            }
        });
        var plugins = [emojiMarkdownPlugin];
        if (mentioned_users === null || mentioned_users === void 0 ? void 0 : mentioned_users.length) {
            plugins.push(mentionsMarkdownPlugin(mentioned_users));
        }
        var renderers = __assign$2(__assign$2({ mention: Mention }, markDownRenderers$1), options.customMarkDownRenderers);
        return (React__default['default'].createElement(withHtml, { allowedTypes: allowedMarkups$1, escapeHtml: true, plugins: plugins, renderers: renderers, source: newText, transformLinkUri: function (uri) {
                return uri.startsWith('app://') ? uri : reactMarkdown.uriTransformer(uri);
            }, unwrapDisallowed: true }));
    };
    function escapeRegExp(text) {
        return text.replace(/[-[\]{}()*+?.,\\^$|#]/g, '\\$&');
    }
    /**
     * @deprecated will be removed in the next major release
     */
    var generateRandomId = nanoid;
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt#getting_whole_characters
    var getWholeChar = function (str, i) {
        var code = str.charCodeAt(i);
        if (Number.isNaN(code))
            return '';
        if (code < 0xd800 || code > 0xdfff)
            return str.charAt(i);
        if (0xd800 <= code && code <= 0xdbff) {
            if (str.length <= i + 1) {
                throw 'High surrogate without following low surrogate';
            }
            var next = str.charCodeAt(i + 1);
            if (0xdc00 > next || next > 0xdfff) {
                throw 'High surrogate without following low surrogate';
            }
            return str.charAt(i) + str.charAt(i + 1);
        }
        if (i === 0) {
            throw 'Low surrogate without preceding high surrogate';
        }
        var prev = str.charCodeAt(i - 1);
        if (0xd800 > prev || prev > 0xdbff) {
            throw 'Low surrogate without preceding high surrogate';
        }
        return '';
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DefaultSuggestionListHeader = function (props) {
        var currentTrigger = props.currentTrigger, value = props.value;
        var t = useTranslationContext('DefaultSuggestionListHeader').t;
        var triggerIndex = value.lastIndexOf(currentTrigger);
        if (currentTrigger === '/') {
            return (React__default['default'].createElement(React__default['default'].Fragment, null,
                t('Commands matching'),
                " ",
                React__default['default'].createElement("strong", null, value.slice(triggerIndex + 1))));
        }
        if (currentTrigger === ':') {
            return (React__default['default'].createElement(React__default['default'].Fragment, null,
                t('Emoji matching'),
                " ",
                React__default['default'].createElement("strong", null, value.slice(triggerIndex + 1))));
        }
        if (currentTrigger === '@') {
            return (React__default['default'].createElement(React__default['default'].Fragment, null,
                t('People matching'),
                " ",
                React__default['default'].createElement("strong", null, value.slice(triggerIndex + 1))));
        }
        return null;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
    var List = function List(props) {
      var className = props.className,
          component = props.component,
          currentTrigger = props.currentTrigger,
          dropdownScroll = props.dropdownScroll,
          getSelectedItem = props.getSelectedItem,
          getTextToReplace = props.getTextToReplace,
          PropHeader = props.Header,
          itemClassName = props.itemClassName,
          itemStyle = props.itemStyle,
          onSelect = props.onSelect,
          selectionEnd = props.selectionEnd,
          style = props.style,
          PropSuggestionItem = props.SuggestionItem,
          propValue = props.value,
          values = props.values;

      var _useComponentContext = useComponentContext(),
          AutocompleteSuggestionHeader = _useComponentContext.AutocompleteSuggestionHeader,
          AutocompleteSuggestionItem = _useComponentContext.AutocompleteSuggestionItem;

      var SuggestionItem = PropSuggestionItem || AutocompleteSuggestionItem || Item$1;
      var SuggestionHeader = PropHeader || AutocompleteSuggestionHeader || DefaultSuggestionListHeader;

      var _useState = React.useState(undefined),
          _useState2 = _slicedToArray(_useState, 2),
          selectedItem = _useState2[0],
          setSelectedItem = _useState2[1];

      var itemsRef = [];

      var isSelected = function isSelected(item) {
        return selectedItem === values.findIndex(function (value) {
          return getId(value) === getId(item);
        });
      };

      var getId = function getId(item) {
        var textToReplace = getTextToReplace(item);

        if (textToReplace.key) {
          return textToReplace.key;
        }

        if (typeof item === 'string' || !item.key) {
          return textToReplace.text;
        }

        return item.key;
      };

      var modifyText = function modifyText(value) {
        if (!value) return;
        onSelect(getTextToReplace(value));
        if (getSelectedItem) getSelectedItem(value);
      };

      var handleClick = function handleClick(e) {
        var _e$preventDefault;

        if (e) (_e$preventDefault = e.preventDefault) === null || _e$preventDefault === void 0 ? void 0 : _e$preventDefault.call(e);
        modifyText(values[selectedItem]);
      };

      var selectItem = function selectItem(item) {
        var index = values.findIndex(function (value) {
          return value.id ? value.id === item.id : value.name === item.name;
        });
        setSelectedItem(index);
      };

      var handleKeyDown = React.useCallback(function (event) {
        if (event.key === 'ArrowUp') {
          setSelectedItem(function (prevSelected) {
            if (prevSelected === undefined) return 0;
            var newID = prevSelected === 0 ? values.length - 1 : prevSelected - 1;
            dropdownScroll(itemsRef[newID]);
            return newID;
          });
        }

        if (event.key === 'ArrowDown') {
          setSelectedItem(function (prevSelected) {
            if (prevSelected === undefined) return 0;
            var newID = prevSelected === values.length - 1 ? 0 : prevSelected + 1;
            dropdownScroll(itemsRef[newID]);
            return newID;
          });
        }

        if ((event.key === 'Enter' || event.key === 'Tab') && selectedItem !== undefined) {
          handleClick(event);
        }

        return null;
      }, [selectedItem, values] // eslint-disable-line
      );
      React.useEffect(function () {
        document.addEventListener('keydown', handleKeyDown, false);
        return function () {
          return document.removeEventListener('keydown', handleKeyDown);
        };
      }, [handleKeyDown]);
      React.useEffect(function () {
        if (values !== null && values !== void 0 && values.length) selectItem(values[0]);
      }, [values]); // eslint-disable-line

      var restructureItem = function restructureItem(item) {
        var matched = item.name || item.id;
        var textBeforeCursor = propValue.slice(0, selectionEnd);
        var triggerIndex = textBeforeCursor.lastIndexOf(currentTrigger);
        var editedPropValue = escapeRegExp(textBeforeCursor.slice(triggerIndex + 1));
        var parts = matched.split(new RegExp("(".concat(editedPropValue, ")"), 'gi'));
        var itemNameParts = {
          match: editedPropValue,
          parts: parts
        };
        return _objectSpread$1(_objectSpread$1({}, item), {}, {
          itemNameParts: itemNameParts
        });
      };

      return /*#__PURE__*/React__default['default'].createElement("ul", {
        className: "rta__list ".concat(className || ''),
        style: style
      }, /*#__PURE__*/React__default['default'].createElement("li", {
        className: "rta__list-header"
      }, /*#__PURE__*/React__default['default'].createElement(SuggestionHeader, {
        currentTrigger: currentTrigger,
        value: propValue
      })), values.map(function (item, i) {
        return /*#__PURE__*/React__default['default'].createElement(SuggestionItem, {
          className: itemClassName,
          component: component,
          item: restructureItem(item),
          key: getId(item),
          onClickHandler: handleClick,
          onSelectHandler: selectItem,
          ref: function ref(_ref) {
            itemsRef[i] = _ref;
          },
          selected: isSelected(item),
          style: itemStyle,
          value: propValue
        });
      }));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var _extends_1 = createCommonjsModule$1(function (module) {
    function _extends() {
      module.exports = _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _extends.apply(this, arguments);
    }

    module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    var _extends$2 = unwrapExports(_extends_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var _typeof_1 = createCommonjsModule$1(function (module) {
    function _typeof(obj) {
      "@babel/helpers - typeof";

      return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
    }

    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    var _typeof = unwrapExports(_typeof_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var classCallCheck = createCommonjsModule$1(function (module) {
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    var _classCallCheck = unwrapExports(classCallCheck);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var createClass = createCommonjsModule$1(function (module) {
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    var _createClass = unwrapExports(createClass);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var assertThisInitialized = createCommonjsModule$1(function (module) {
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return self;
    }

    module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    var _assertThisInitialized = unwrapExports(assertThisInitialized);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var setPrototypeOf = createCommonjsModule$1(function (module) {
    function _setPrototypeOf(o, p) {
      module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _setPrototypeOf(o, p);
    }

    module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    unwrapExports(setPrototypeOf);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var inherits = createCommonjsModule$1(function (module) {
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) setPrototypeOf(subClass, superClass);
    }

    module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    var _inherits = unwrapExports(inherits);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var possibleConstructorReturn = createCommonjsModule$1(function (module) {
    var _typeof = _typeof_1["default"];



    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }

      return assertThisInitialized(self);
    }

    module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    var _possibleConstructorReturn = unwrapExports(possibleConstructorReturn);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var getPrototypeOf = createCommonjsModule$1(function (module) {
    function _getPrototypeOf(o) {
      module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _getPrototypeOf(o);
    }

    module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    var _getPrototypeOf = unwrapExports(getPrototypeOf);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _extends$1() {
      _extends$1 = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      return _extends$1.apply(this, arguments);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _objectWithoutPropertiesLoose$1(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;

      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }

      return target;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var index$1 =  React.useLayoutEffect ;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var useLatest = function useLatest(value) {
      var ref = React.useRef(value);
      index$1(function () {
        ref.current = value;
      });
      return ref;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var updateRef = function updateRef(ref, value) {
      if (typeof ref === 'function') {
        ref(value);
        return;
      }
      ref.current = value;
    };

    var useComposedRef = function useComposedRef(libRef, userRef) {
      var prevUserRef = React.useRef();
      return React.useCallback(function (instance) {
        libRef.current = instance;

        if (prevUserRef.current) {
          updateRef(prevUserRef.current, null);
        }

        prevUserRef.current = userRef;

        if (!userRef) {
          return;
        }

        updateRef(userRef, instance);
      }, [userRef]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var HIDDEN_TEXTAREA_STYLE = {
      'min-height': '0',
      'max-height': 'none',
      height: '0',
      visibility: 'hidden',
      overflow: 'hidden',
      position: 'absolute',
      'z-index': '-1000',
      top: '0',
      right: '0'
    };

    var forceHiddenStyles = function forceHiddenStyles(node) {
      Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(function (key) {
        node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], 'important');
      });
    };

    //   export type CalculatedNodeHeights = [height: number, rowHeight: number];
    // https://github.com/microsoft/TypeScript/issues/28259

    var hiddenTextarea = null;

    var getHeight = function getHeight(node, sizingData) {
      var height = node.scrollHeight;

      if (sizingData.sizingStyle.boxSizing === 'border-box') {
        // border-box: add border, since height = content + padding + border
        return height + sizingData.borderSize;
      } // remove padding, since height = content


      return height - sizingData.paddingSize;
    };

    function calculateNodeHeight(sizingData, value, minRows, maxRows) {
      if (minRows === void 0) {
        minRows = 1;
      }

      if (maxRows === void 0) {
        maxRows = Infinity;
      }

      if (!hiddenTextarea) {
        hiddenTextarea = document.createElement('textarea');
        hiddenTextarea.setAttribute('tab-index', '-1');
        hiddenTextarea.setAttribute('aria-hidden', 'true');
        forceHiddenStyles(hiddenTextarea);
      }

      if (hiddenTextarea.parentNode === null) {
        document.body.appendChild(hiddenTextarea);
      }

      var paddingSize = sizingData.paddingSize,
          borderSize = sizingData.borderSize,
          sizingStyle = sizingData.sizingStyle;
      var boxSizing = sizingStyle.boxSizing;
      Object.keys(sizingStyle).forEach(function (_key) {
        var key = _key;
        hiddenTextarea.style[key] = sizingStyle[key];
      });
      forceHiddenStyles(hiddenTextarea);
      hiddenTextarea.value = value;
      var height = getHeight(hiddenTextarea, sizingData); // measure height of a textarea with a single row

      hiddenTextarea.value = 'x';
      var rowHeight = hiddenTextarea.scrollHeight - paddingSize;
      var minHeight = rowHeight * minRows;

      if (boxSizing === 'border-box') {
        minHeight = minHeight + paddingSize + borderSize;
      }

      height = Math.max(minHeight, height);
      var maxHeight = rowHeight * maxRows;

      if (boxSizing === 'border-box') {
        maxHeight = maxHeight + paddingSize + borderSize;
      }

      height = Math.min(maxHeight, height);
      return [height, rowHeight];
    }

    var noop$1 = function noop() {};
    var pick = function pick(props, obj) {
      return props.reduce(function (acc, prop) {
        acc[prop] = obj[prop];
        return acc;
      }, {});
    };

    var SIZING_STYLE = ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'boxSizing', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'lineHeight', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop', // non-standard
    'tabSize', 'textIndent', // non-standard
    'textRendering', 'textTransform', 'width'];
    var isIE$1 = !!document.documentElement.currentStyle ;

    var getSizingData = function getSizingData(node) {
      var style = window.getComputedStyle(node);

      if (style === null) {
        return null;
      }

      var sizingStyle = pick(SIZING_STYLE, style);
      var boxSizing = sizingStyle.boxSizing; // probably node is detached from DOM, can't read computed dimensions

      if (boxSizing === '') {
        return null;
      } // IE (Edge has already correct behaviour) returns content width as computed width
      // so we need to add manually padding and border widths


      if (isIE$1 && boxSizing === 'border-box') {
        sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + 'px';
      }

      var paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);
      var borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);
      return {
        sizingStyle: sizingStyle,
        paddingSize: paddingSize,
        borderSize: borderSize
      };
    };

    var useWindowResizeListener = function useWindowResizeListener(listener) {
      var latestListener = useLatest(listener);
      React.useLayoutEffect(function () {
        var handler = function handler(event) {
          latestListener.current(event);
        };

        window.addEventListener('resize', handler);
        return function () {
          window.removeEventListener('resize', handler);
        };
      }, []);
    };

    var TextareaAutosize = function TextareaAutosize(_ref, userRef) {
      var cacheMeasurements = _ref.cacheMeasurements,
          maxRows = _ref.maxRows,
          minRows = _ref.minRows,
          _ref$onChange = _ref.onChange,
          onChange = _ref$onChange === void 0 ? noop$1 : _ref$onChange,
          _ref$onHeightChange = _ref.onHeightChange,
          onHeightChange = _ref$onHeightChange === void 0 ? noop$1 : _ref$onHeightChange,
          props = _objectWithoutPropertiesLoose$1(_ref, ["cacheMeasurements", "maxRows", "minRows", "onChange", "onHeightChange"]);

      var isControlled = props.value !== undefined;
      var libRef = React.useRef(null);
      var ref = useComposedRef(libRef, userRef);
      var heightRef = React.useRef(0);
      var measurementsCacheRef = React.useRef();

      var resizeTextarea = function resizeTextarea() {
        var node = libRef.current;
        var nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData(node);

        if (!nodeSizingData) {
          return;
        }

        measurementsCacheRef.current = nodeSizingData;

        var _calculateNodeHeight = calculateNodeHeight(nodeSizingData, node.value || node.placeholder || 'x', minRows, maxRows),
            height = _calculateNodeHeight[0],
            rowHeight = _calculateNodeHeight[1];

        if (heightRef.current !== height) {
          heightRef.current = height;
          node.style.setProperty('height', height + "px", 'important');
          onHeightChange(height, {
            rowHeight: rowHeight
          });
        }
      };

      var handleChange = function handleChange(event) {
        if (!isControlled) {
          resizeTextarea();
        }

        onChange(event);
      };

      {
        React.useLayoutEffect(resizeTextarea);
        useWindowResizeListener(resizeTextarea);
      }

      return /*#__PURE__*/React.createElement("textarea", _extends$1({}, props, {
        onChange: handleChange,
        ref: ref
      }));
    };

    var index = /* #__PURE__ */React.forwardRef(TextareaAutosize);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var textareaCaret = createCommonjsModule$1(function (module) {
    /* jshint browser: true */

    (function () {

    // We'll copy the properties below into the mirror div.
    // Note that some browsers, such as Firefox, do not concatenate properties
    // into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),
    // so we have to list every single property explicitly.
    var properties = [
      'direction',  // RTL support
      'boxSizing',
      'width',  // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does
      'height',
      'overflowX',
      'overflowY',  // copy the scrollbar for IE

      'borderTopWidth',
      'borderRightWidth',
      'borderBottomWidth',
      'borderLeftWidth',
      'borderStyle',

      'paddingTop',
      'paddingRight',
      'paddingBottom',
      'paddingLeft',

      // https://developer.mozilla.org/en-US/docs/Web/CSS/font
      'fontStyle',
      'fontVariant',
      'fontWeight',
      'fontStretch',
      'fontSize',
      'fontSizeAdjust',
      'lineHeight',
      'fontFamily',

      'textAlign',
      'textTransform',
      'textIndent',
      'textDecoration',  // might not make a difference, but better be safe

      'letterSpacing',
      'wordSpacing',

      'tabSize',
      'MozTabSize'

    ];

    var isBrowser = (typeof window !== 'undefined');
    var isFirefox = (isBrowser && window.mozInnerScreenX != null);

    function getCaretCoordinates(element, position, options) {
      if (!isBrowser) {
        throw new Error('textarea-caret-position#getCaretCoordinates should only be called in a browser');
      }

      var debug = options && options.debug || false;
      if (debug) {
        var el = document.querySelector('#input-textarea-caret-position-mirror-div');
        if (el) el.parentNode.removeChild(el);
      }

      // The mirror div will replicate the textarea's style
      var div = document.createElement('div');
      div.id = 'input-textarea-caret-position-mirror-div';
      document.body.appendChild(div);

      var style = div.style;
      var computed = window.getComputedStyle ? window.getComputedStyle(element) : element.currentStyle;  // currentStyle for IE < 9
      var isInput = element.nodeName === 'INPUT';

      // Default textarea styles
      style.whiteSpace = 'pre-wrap';
      if (!isInput)
        style.wordWrap = 'break-word';  // only for textarea-s

      // Position off-screen
      style.position = 'absolute';  // required to return coordinates properly
      if (!debug)
        style.visibility = 'hidden';  // not 'display: none' because we want rendering

      // Transfer the element's properties to the div
      properties.forEach(function (prop) {
        if (isInput && prop === 'lineHeight') {
          // Special case for <input>s because text is rendered centered and line height may be != height
          style.lineHeight = computed.height;
        } else {
          style[prop] = computed[prop];
        }
      });

      if (isFirefox) {
        // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275
        if (element.scrollHeight > parseInt(computed.height))
          style.overflowY = 'scroll';
      } else {
        style.overflow = 'hidden';  // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'
      }

      div.textContent = element.value.substring(0, position);
      // The second special handling for input type="text" vs textarea:
      // spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037
      if (isInput)
        div.textContent = div.textContent.replace(/\s/g, '\u00a0');

      var span = document.createElement('span');
      // Wrapping must be replicated *exactly*, including when a long word gets
      // onto the next line, with whitespace at the end of the line before (#7).
      // The  *only* reliable way to do that is to copy the *entire* rest of the
      // textarea's content into the <span> created at the caret position.
      // For inputs, just '.' would be enough, but no need to bother.
      span.textContent = element.value.substring(position) || '.';  // || because a completely empty faux span doesn't render at all
      div.appendChild(span);

      var coordinates = {
        top: span.offsetTop + parseInt(computed['borderTopWidth']),
        left: span.offsetLeft + parseInt(computed['borderLeftWidth']),
        height: parseInt(computed['lineHeight'])
      };

      if (debug) {
        span.style.backgroundColor = '#aaa';
      } else {
        document.body.removeChild(div);
      }

      return coordinates;
    }

    {
      module.exports = getCaretCoordinates;
    }

    }());
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @license React
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b=Symbol.for("react.element"),c=Symbol.for("react.portal"),d=Symbol.for("react.fragment"),e=Symbol.for("react.strict_mode"),f=Symbol.for("react.profiler"),g=Symbol.for("react.provider"),h=Symbol.for("react.context"),k$1=Symbol.for("react.server_context"),l=Symbol.for("react.forward_ref"),m=Symbol.for("react.suspense"),n$1=Symbol.for("react.suspense_list"),p=Symbol.for("react.memo"),q$1=Symbol.for("react.lazy"),t$1=Symbol.for("react.offscreen"),u;u=Symbol.for("react.module.reference");
    function v(a){if("object"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n$1:return a;default:switch(a=a&&a.$$typeof,a){case k$1:case h:case l:case q$1:case p:case g:return a;default:return r}}case c:return r}}}var ContextConsumer=h;var ContextProvider=g;var Element$1=b;var ForwardRef=l;var Fragment=d;var Lazy=q$1;var Memo=p;var Portal=c;var Profiler=f;var StrictMode=e;var Suspense=m;
    var SuspenseList=n$1;var isAsyncMode=function(){return !1};var isConcurrentMode=function(){return !1};var isContextConsumer=function(a){return v(a)===h};var isContextProvider=function(a){return v(a)===g};var isElement$1=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===b};var isForwardRef=function(a){return v(a)===l};var isFragment=function(a){return v(a)===d};var isLazy=function(a){return v(a)===q$1};var isMemo=function(a){return v(a)===p};
    var isPortal=function(a){return v(a)===c};var isProfiler=function(a){return v(a)===f};var isStrictMode=function(a){return v(a)===e};var isSuspense=function(a){return v(a)===m};var isSuspenseList=function(a){return v(a)===n$1};
    var isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===d||a===f||a===e||a===m||a===n$1||a===t$1||"object"===typeof a&&null!==a&&(a.$$typeof===q$1||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};var typeOf=v;

    var reactIs_production_min = {
    	ContextConsumer: ContextConsumer,
    	ContextProvider: ContextProvider,
    	Element: Element$1,
    	ForwardRef: ForwardRef,
    	Fragment: Fragment,
    	Lazy: Lazy,
    	Memo: Memo,
    	Portal: Portal,
    	Profiler: Profiler,
    	StrictMode: StrictMode,
    	Suspense: Suspense,
    	SuspenseList: SuspenseList,
    	isAsyncMode: isAsyncMode,
    	isConcurrentMode: isConcurrentMode,
    	isContextConsumer: isContextConsumer,
    	isContextProvider: isContextProvider,
    	isElement: isElement$1,
    	isForwardRef: isForwardRef,
    	isFragment: isFragment,
    	isLazy: isLazy,
    	isMemo: isMemo,
    	isPortal: isPortal,
    	isProfiler: isProfiler,
    	isStrictMode: isStrictMode,
    	isSuspense: isSuspense,
    	isSuspenseList: isSuspenseList,
    	isValidElementType: isValidElementType,
    	typeOf: typeOf
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var reactIs = createCommonjsModule$1(function (module) {

    {
      module.exports = reactIs_production_min;
    }
    });
    var reactIs_1 = reactIs.isValidElementType;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DEFAULT_CARET_POSITION = 'next';
    function defaultScrollToItem(container, item) {
      if (!item) return;
      var itemHeight = parseInt(getComputedStyle(item).getPropertyValue('height'), 10);
      var containerHight = parseInt(getComputedStyle(container).getPropertyValue('height'), 10) - itemHeight;
      var actualScrollTop = container.scrollTop;
      var itemOffsetTop = item.offsetTop;

      if (itemOffsetTop < actualScrollTop + containerHight && actualScrollTop < itemOffsetTop) {
        return;
      } // eslint-disable-next-line


      container.scrollTop = itemOffsetTop;
    }
    var errorMessage = function errorMessage(message) {
      return console.error("RTA: dataProvider fails: ".concat(message, "\n    \nCheck the documentation or create issue if you think it's bug. https://github.com/webscopeio/react-textarea-autocomplete/issues"));
    };
    var triggerPropsCheck = function triggerPropsCheck(_ref) {
      var trigger = _ref.trigger;
      if (!trigger) return Error('Invalid prop trigger. Prop missing.');
      var triggers = Object.entries(trigger);

      for (var i = 0; i < triggers.length; i += 1) {
        var _triggers$i = _slicedToArray(triggers[i], 2),
            triggerChar = _triggers$i[0],
            settings = _triggers$i[1];

        if (typeof triggerChar !== 'string' || triggerChar.length !== 1) {
          return Error('Invalid prop trigger. Keys of the object has to be string / one character.');
        } // $FlowFixMe


        var triggerSetting = settings;
        var callback = triggerSetting.callback,
            component = triggerSetting.component,
            dataProvider = triggerSetting.dataProvider,
            output = triggerSetting.output;

        if (!reactIs_1(component)) {
          return Error('Invalid prop trigger: component should be defined.');
        }

        if (!dataProvider || typeof dataProvider !== 'function') {
          return Error('Invalid prop trigger: dataProvider should be defined.');
        }

        if (output && typeof output !== 'function') {
          return Error('Invalid prop trigger: output should be a function.');
        }

        if (callback && typeof callback !== 'function') {
          return Error('Invalid prop trigger: callback should be a function.');
        }
      }

      return null;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedCommandItem = function (props) {
        var entity = props.entity;
        return (React__default['default'].createElement("div", { className: 'str-chat__slash-command' },
            React__default['default'].createElement("span", { className: 'str-chat__slash-command-header' },
                React__default['default'].createElement("strong", null, entity.name),
                " ",
                entity.args),
            React__default['default'].createElement("br", null),
            React__default['default'].createElement("span", { className: 'str-chat__slash-command-description' }, entity.description)));
    };
    var CommandItem = React__default['default'].memo(UnMemoizedCommandItem);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * A round avatar image with fallback to username's first letter
     */
    var Avatar = function (props) {
        var image = props.image, name = props.name, _a = props.onClick, onClick = _a === void 0 ? function () { return undefined; } : _a, _b = props.onMouseOver, onMouseOver = _b === void 0 ? function () { return undefined; } : _b, _c = props.shape, shape = _c === void 0 ? 'circle' : _c, _d = props.size, size = _d === void 0 ? 32 : _d;
        var _e = React.useState(false), error = _e[0], setError = _e[1];
        var _f = React.useState(false), loaded = _f[0], setLoaded = _f[1];
        React.useEffect(function () {
            setError(false);
            setLoaded(false);
        }, [image]);
        var nameStr = (name === null || name === void 0 ? void 0 : name.toString()) || '';
        var initials = getWholeChar(nameStr, 0);
        return (React__default['default'].createElement("div", { className: "str-chat__avatar str-chat__avatar--" + shape, "data-testid": 'avatar', onClick: onClick, onMouseOver: onMouseOver, style: {
                flexBasis: size + "px",
                fontSize: size / 2 + "px",
                height: size + "px",
                lineHeight: size + "px",
                width: size + "px",
            }, title: name }, image && !error ? (React__default['default'].createElement("img", { alt: initials, className: "str-chat__avatar-image" + (loaded ? ' str-chat__avatar-image--loaded' : ''), "data-testid": 'avatar-img', onError: function () { return setError(true); }, onLoad: function () { return setLoaded(true); }, src: image, style: {
                flexBasis: size + "px",
                height: size + "px",
                objectFit: 'cover',
                width: size + "px",
            } })) : (React__default['default'].createElement("div", { className: 'str-chat__avatar-fallback', "data-testid": 'avatar-fallback' }, initials))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * UI component for mentions rendered in suggestion list
     */
    var UnMemoizedUserItem = function (props) {
        var _a = props.Avatar, Avatar$1 = _a === void 0 ? Avatar : _a, entity = props.entity;
        var hasEntity = Object.keys(entity).length;
        var itemParts = entity === null || entity === void 0 ? void 0 : entity.itemNameParts;
        var renderName = function () {
            if (!hasEntity)
                return null;
            return (hasEntity &&
                itemParts.parts.map(function (part, i) {
                    return part.toLowerCase() === itemParts.match.toLowerCase() ? (React__default['default'].createElement("span", { className: 'str-chat__emoji-item--highlight', key: "part-" + i }, part)) : (React__default['default'].createElement("span", { className: 'str-chat__emoji-item--part', key: "part-" + i }, part));
                }));
        };
        return (React__default['default'].createElement("div", { className: 'str-chat__user-item' },
            React__default['default'].createElement(Avatar$1, { image: entity.image, name: entity.name || entity.id, size: 20 }),
            React__default['default'].createElement("span", { className: 'str-chat__user-item--name', "data-testid": 'user-item-name' }, renderName())));
    };
    var UserItem = React__default['default'].memo(UnMemoizedUserItem);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
    var ReactTextareaAutocomplete = /*#__PURE__*/function (_React$Component) {
      _inherits(ReactTextareaAutocomplete, _React$Component);

      var _super = _createSuper(ReactTextareaAutocomplete);

      function ReactTextareaAutocomplete(_props) {
        var _this;

        _classCallCheck(this, ReactTextareaAutocomplete);

        _this = _super.call(this, _props);

        _defineProperty(_assertThisInitialized(_this), "getSelectionPosition", function () {
          if (!_this.textareaRef) return null;
          return {
            selectionEnd: _this.textareaRef.selectionEnd,
            selectionStart: _this.textareaRef.selectionStart
          };
        });

        _defineProperty(_assertThisInitialized(_this), "getSelectedText", function () {
          if (!_this.textareaRef) return null;
          var _this$textareaRef = _this.textareaRef,
              selectionEnd = _this$textareaRef.selectionEnd,
              selectionStart = _this$textareaRef.selectionStart;
          if (selectionStart === selectionEnd) return null;
          return _this.state.value.substr(selectionStart, selectionEnd - selectionStart);
        });

        _defineProperty(_assertThisInitialized(_this), "setCaretPosition", function () {
          var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          if (!_this.textareaRef) return;

          _this.textareaRef.focus();

          _this.textareaRef.setSelectionRange(position, position);
        });

        _defineProperty(_assertThisInitialized(_this), "getCaretPosition", function () {
          if (!_this.textareaRef) return 0;
          return _this.textareaRef.selectionEnd;
        });

        _defineProperty(_assertThisInitialized(_this), "_defaultShouldSubmit", function (event) {
          return event.key === 'Enter' && !event.shiftKey;
        });

        _defineProperty(_assertThisInitialized(_this), "_handleKeyDown", function (event) {
          var _this$props$shouldSub = _this.props.shouldSubmit,
              shouldSubmit = _this$props$shouldSub === void 0 ? _this._defaultShouldSubmit : _this$props$shouldSub;
          if (shouldSubmit !== null && shouldSubmit !== void 0 && shouldSubmit(event)) return _this._onEnter(event);
          if (event.key === ' ') return _this._onSpace(event);
          if (event.key === 'Escape') return _this._closeAutocomplete();
        });

        _defineProperty(_assertThisInitialized(_this), "_onEnter", function (event) {
          if (!_this.textareaRef) return;
          var trigger = _this.state.currentTrigger;

          if (!trigger || !_this.state.data) {
            // trigger a submit
            _this._replaceWord();

            if (_this.textareaRef) {
              _this.textareaRef.selectionEnd = 0;
            }

            _this.props.handleSubmit(event);

            _this._closeAutocomplete();
          }
        });

        _defineProperty(_assertThisInitialized(_this), "_onSpace", function () {
          if (!_this.props.replaceWord || !_this.textareaRef) return; // don't change characters if the element doesn't have focus

          var hasFocus = _this.textareaRef.matches(':focus');

          if (!hasFocus) return;

          _this._replaceWord();
        });

        _defineProperty(_assertThisInitialized(_this), "_replaceWord", function () {
          var value = _this.state.value;
          var lastWordRegex = /([^\s]+)(\s*)$/;
          var match = lastWordRegex.exec(value.slice(0, _this.getCaretPosition()));
          var lastWord = match && match[1];
          if (!lastWord) return;
          var spaces = match[2];

          var newWord = _this.props.replaceWord(lastWord);

          if (newWord == null) return;
          var textBeforeWord = value.slice(0, _this.getCaretPosition() - match[0].length);
          var textAfterCaret = value.slice(_this.getCaretPosition(), -1);
          var newText = textBeforeWord + newWord + spaces + textAfterCaret;

          _this.setState({
            value: newText
          }, function () {
            // fire onChange event after successful selection
            var e = new CustomEvent('change', {
              bubbles: true
            });

            _this.textareaRef.dispatchEvent(e);

            if (_this.props.onChange) _this.props.onChange(e);
          });
        });

        _defineProperty(_assertThisInitialized(_this), "_onSelect", function (newToken) {
          var _this$props = _this.props,
              closeCommandsList = _this$props.closeCommandsList,
              closeMentionsList = _this$props.closeMentionsList,
              onChange = _this$props.onChange,
              showCommandsList = _this$props.showCommandsList,
              showMentionsList = _this$props.showMentionsList;
          var _this$state = _this.state,
              stateTrigger = _this$state.currentTrigger,
              selectionEnd = _this$state.selectionEnd,
              textareaValue = _this$state.value;
          var currentTrigger = showCommandsList ? '/' : showMentionsList ? '@' : stateTrigger;
          if (!currentTrigger) return;

          var computeCaretPosition = function computeCaretPosition(position, token, startToken) {
            switch (position) {
              case 'start':
                return startToken;

              case 'next':
              case 'end':
                return startToken + token.length;

              default:
                if (!Number.isInteger(position)) {
                  throw new Error('RTA: caretPosition should be "start", "next", "end" or number.');
                }

                return position;
            }
          };

          var textToModify = showCommandsList ? '/' : showMentionsList ? '@' : textareaValue.slice(0, selectionEnd);
          var startOfTokenPosition = textToModify.lastIndexOf(currentTrigger); // we add space after emoji is selected if a caret position is next

          var newTokenString = newToken.caretPosition === 'next' ? "".concat(newToken.text, " ") : newToken.text;
          var newCaretPosition = computeCaretPosition(newToken.caretPosition, newTokenString, startOfTokenPosition);
          var modifiedText = textToModify.substring(0, startOfTokenPosition) + newTokenString;
          var valueToReplace = textareaValue.replace(textToModify, modifiedText); // set the new textarea value and after that set the caret back to its position

          _this.setState({
            dataLoading: false,
            value: valueToReplace
          }, function () {
            // fire onChange event after successful selection
            var e = new CustomEvent('change', {
              bubbles: true
            });

            _this.textareaRef.dispatchEvent(e);

            if (onChange) onChange(e);

            _this.setCaretPosition(newCaretPosition);
          });

          _this._closeAutocomplete();

          if (showCommandsList) closeCommandsList();
          if (showMentionsList) closeMentionsList();
        });

        _defineProperty(_assertThisInitialized(_this), "_getItemOnSelect", function (paramTrigger) {
          var stateTrigger = _this.state.currentTrigger;

          var triggerSettings = _this._getCurrentTriggerSettings(paramTrigger);

          var currentTrigger = paramTrigger || stateTrigger;
          if (!currentTrigger || !triggerSettings) return null;
          var callback = triggerSettings.callback;
          if (!callback) return null;
          return function (item) {
            if (typeof callback !== 'function') {
              throw new Error('Output functor is not defined! You have to define "output" function. https://github.com/webscopeio/react-textarea-autocomplete#trigger-type');
            }

            if (callback) {
              return callback(item, currentTrigger);
            }

            return null;
          };
        });

        _defineProperty(_assertThisInitialized(_this), "_getTextToReplace", function (paramTrigger) {
          var _this$state2 = _this.state,
              actualToken = _this$state2.actualToken,
              stateTrigger = _this$state2.currentTrigger;

          var triggerSettings = _this._getCurrentTriggerSettings(paramTrigger);

          var currentTrigger = paramTrigger || stateTrigger;
          if (!currentTrigger || !triggerSettings) return null;
          var output = triggerSettings.output;
          return function (item) {
            if (_typeof(item) === 'object' && (!output || typeof output !== 'function')) {
              throw new Error('Output functor is not defined! If you are using items as object you have to define "output" function. https://github.com/webscopeio/react-textarea-autocomplete#trigger-type');
            }

            if (output) {
              var textToReplace = output(item, currentTrigger);

              if (!textToReplace || typeof textToReplace === 'number') {
                throw new Error("Output functor should return string or object in shape {text: string, caretPosition: string | number}.\nGot \"".concat(String(textToReplace), "\". Check the implementation for trigger \"").concat(currentTrigger, "\" and its token \"").concat(actualToken, "\"\n\nSee https://github.com/webscopeio/react-textarea-autocomplete#trigger-type for more informations.\n"));
              }

              if (typeof textToReplace === 'string') {
                return {
                  caretPosition: DEFAULT_CARET_POSITION,
                  text: textToReplace
                };
              }

              if (!textToReplace.text && currentTrigger !== ':') {
                throw new Error("Output \"text\" is not defined! Object should has shape {text: string, caretPosition: string | number}. Check the implementation for trigger \"".concat(currentTrigger, "\" and its token \"").concat(actualToken, "\"\n"));
              }

              if (!textToReplace.caretPosition) {
                throw new Error("Output \"caretPosition\" is not defined! Object should has shape {text: string, caretPosition: string | number}. Check the implementation for trigger \"".concat(currentTrigger, "\" and its token \"").concat(actualToken, "\"\n"));
              }

              return textToReplace;
            }

            if (typeof item !== 'string') {
              throw new Error('Output item should be string\n');
            }

            return {
              caretPosition: DEFAULT_CARET_POSITION,
              text: "".concat(currentTrigger).concat(item).concat(currentTrigger)
            };
          };
        });

        _defineProperty(_assertThisInitialized(_this), "_getCurrentTriggerSettings", function (paramTrigger) {
          var stateTrigger = _this.state.currentTrigger;
          var currentTrigger = paramTrigger || stateTrigger;
          if (!currentTrigger) return null;
          return _this.props.trigger[currentTrigger];
        });

        _defineProperty(_assertThisInitialized(_this), "_getValuesFromProvider", function () {
          var _this$state3 = _this.state,
              actualToken = _this$state3.actualToken,
              currentTrigger = _this$state3.currentTrigger;

          var triggerSettings = _this._getCurrentTriggerSettings();

          if (!currentTrigger || !triggerSettings) return;
          var component = triggerSettings.component,
              dataProvider = triggerSettings.dataProvider;

          if (typeof dataProvider !== 'function') {
            throw new Error('Trigger provider has to be a function!');
          }

          _this.setState({
            dataLoading: true
          }); // Modified: send the full text to support / style commands


          dataProvider(actualToken, _this.state.value, function (data, token) {
            // Make sure that the result is still relevant for current query
            if (token !== _this.state.actualToken) return;

            if (!Array.isArray(data)) {
              throw new Error('Trigger provider has to provide an array!');
            }

            if (!reactIs_1(component)) {
              throw new Error('Component should be defined!');
            } // throw away if we resolved old trigger


            if (currentTrigger !== _this.state.currentTrigger) return; // if we haven't resolved any data let's close the autocomplete

            if (!data.length) {
              _this._closeAutocomplete();

              return;
            }

            _this.setState({
              component: component,
              data: data,
              dataLoading: false
            });
          });
        });

        _defineProperty(_assertThisInitialized(_this), "_getSuggestions", function (paramTrigger) {
          var _this$state4 = _this.state,
              stateTrigger = _this$state4.currentTrigger,
              data = _this$state4.data;
          var currentTrigger = paramTrigger || stateTrigger;
          if (!currentTrigger || !data || data && !data.length) return null;
          return data;
        });

        _defineProperty(_assertThisInitialized(_this), "_closeAutocomplete", function () {
          _this.setState({
            currentTrigger: null,
            data: null,
            dataLoading: false,
            left: null,
            top: null
          });
        });

        _defineProperty(_assertThisInitialized(_this), "_cleanUpProps", function () {
          var props = _objectSpread({}, _this.props);

          var notSafe = ['additionalTextareaProps', 'className', 'closeCommandsList', 'closeMentionsList', 'closeOnClickOutside', 'containerClassName', 'containerStyle', 'disableMentions', 'dropdownClassName', 'dropdownStyle', 'grow', 'handleSubmit', 'innerRef', 'itemClassName', 'itemStyle', 'listClassName', 'listStyle', 'loaderClassName', 'loaderStyle', 'loadingComponent', 'minChar', 'movePopupAsYouType', 'onCaretPositionChange', 'onChange', 'ref', 'replaceWord', 'scrollToItem', 'shouldSubmit', 'showCommandsList', 'showMentionsList', 'SuggestionItem', 'SuggestionList', 'trigger', 'value']; // eslint-disable-next-line

          for (var prop in props) {
            if (notSafe.includes(prop)) delete props[prop];
          }

          return props;
        });

        _defineProperty(_assertThisInitialized(_this), "_isCommand", function (text) {
          if (text[0] !== '/') return false;
          var tokens = text.split(' ');
          return tokens.length <= 1;
        });

        _defineProperty(_assertThisInitialized(_this), "_changeHandler", function (e) {
          var _this$props2 = _this.props,
              minChar = _this$props2.minChar,
              movePopupAsYouType = _this$props2.movePopupAsYouType,
              onCaretPositionChange = _this$props2.onCaretPositionChange,
              onChange = _this$props2.onChange,
              trigger = _this$props2.trigger;
          var _this$state5 = _this.state,
              left = _this$state5.left,
              top = _this$state5.top;
          var textarea = e.target;
          var selectionEnd = textarea.selectionEnd,
              selectionStart = textarea.selectionStart,
              value = textarea.value;

          if (onChange) {
            e.persist();
            onChange(e);
          }

          if (onCaretPositionChange) onCaretPositionChange(_this.getCaretPosition());

          _this.setState({
            value: value
          });

          var currentTrigger;
          var lastToken;

          if (_this._isCommand(value)) {
            currentTrigger = '/';
            lastToken = value;
          } else {
            var triggerTokens = Object.keys(trigger).join().replace('/', '');
            var triggerNorWhitespace = "[^\\s".concat(triggerTokens, "]*");
            var regex = new RegExp("(?!^|\\W)?[".concat(triggerTokens, "]").concat(triggerNorWhitespace, "\\s?").concat(triggerNorWhitespace, "$"), 'g');
            var tokenMatch = value.slice(0, selectionEnd).match(regex);
            lastToken = tokenMatch && tokenMatch[tokenMatch.length - 1].trim();
            currentTrigger = lastToken && Object.keys(trigger).find(function (a) {
              return a === lastToken[0];
            }) || null;
          }
          /*
           if we lost the trigger token or there is no following character we want to close
           the autocomplete
          */


          if (!lastToken || lastToken.length <= minChar) {
            _this._closeAutocomplete();

            return;
          }

          var actualToken = lastToken.slice(1); // if trigger is not configured step out from the function, otherwise proceed

          if (!currentTrigger) return;

          if (movePopupAsYouType || top === null && left === null || // if we have single char - trigger it means we want to re-position the autocomplete
          lastToken.length === 1) {
            var _getCaretCoordinates = textareaCaret(textarea, selectionEnd),
                newLeft = _getCaretCoordinates.left,
                newTop = _getCaretCoordinates.top;

            _this.setState({
              // make position relative to textarea
              left: newLeft,
              top: newTop - _this.textareaRef.scrollTop || 0
            });
          }

          _this.setState({
            actualToken: actualToken,
            currentTrigger: currentTrigger,
            selectionEnd: selectionEnd,
            selectionStart: selectionStart
          }, function () {
            try {
              _this._getValuesFromProvider();
            } catch (err) {
              errorMessage(err.message);
            }
          });
        });

        _defineProperty(_assertThisInitialized(_this), "_selectHandler", function (e) {
          var _this$props3 = _this.props,
              onCaretPositionChange = _this$props3.onCaretPositionChange,
              onSelect = _this$props3.onSelect;
          if (onCaretPositionChange) onCaretPositionChange(_this.getCaretPosition());

          if (onSelect) {
            e.persist();
            onSelect(e);
          }
        });

        _defineProperty(_assertThisInitialized(_this), "_onClickAndBlurHandler", function (e) {
          var _this$props4 = _this.props,
              closeOnClickOutside = _this$props4.closeOnClickOutside,
              onBlur = _this$props4.onBlur; // If this is a click: e.target is the textarea, and e.relatedTarget is the thing
          // that was actually clicked. If we clicked inside the auto-select dropdown, then
          // that's not a blur, from the auto-select point of view, so then do nothing.

          var el = e.relatedTarget;

          if (_this.dropdownRef && el instanceof Node && _this.dropdownRef.contains(el)) {
            return;
          }

          if (closeOnClickOutside) _this._closeAutocomplete();

          if (onBlur) {
            e.persist();
            onBlur(e);
          }
        });

        _defineProperty(_assertThisInitialized(_this), "_onScrollHandler", function () {
          return _this._closeAutocomplete();
        });

        _defineProperty(_assertThisInitialized(_this), "_dropdownScroll", function (item) {
          var scrollToItem = _this.props.scrollToItem;
          if (!scrollToItem) return;

          if (scrollToItem === true) {
            defaultScrollToItem(_this.dropdownRef, item);
            return;
          }

          if (typeof scrollToItem !== 'function' || scrollToItem.length !== 2) {
            throw new Error('`scrollToItem` has to be boolean (true for default implementation) or function with two parameters: container, item.');
          }

          scrollToItem(_this.dropdownRef, item);
        });

        _defineProperty(_assertThisInitialized(_this), "getTriggerProps", function () {
          var _this$props5 = _this.props,
              showCommandsList = _this$props5.showCommandsList,
              showMentionsList = _this$props5.showMentionsList,
              trigger = _this$props5.trigger;
          var _this$state6 = _this.state,
              component = _this$state6.component,
              currentTrigger = _this$state6.currentTrigger,
              selectionEnd = _this$state6.selectionEnd,
              value = _this$state6.value;

          var selectedItem = _this._getItemOnSelect();

          var suggestionData = _this._getSuggestions();

          var textToReplace = _this._getTextToReplace();

          var triggerProps = {
            component: component,
            currentTrigger: currentTrigger,
            getSelectedItem: selectedItem,
            getTextToReplace: textToReplace,
            selectionEnd: selectionEnd,
            value: value,
            values: suggestionData
          };

          if (showCommandsList && trigger['/'] || showMentionsList && trigger['@']) {
            var currentCommands;
            var getCommands = trigger[showCommandsList ? '/' : '@'].dataProvider;
            getCommands === null || getCommands === void 0 ? void 0 : getCommands('', showCommandsList ? '/' : '@', function (data) {
              currentCommands = data;
            });
            triggerProps.component = showCommandsList ? CommandItem : UserItem;
            triggerProps.currentTrigger = showCommandsList ? '/' : '@';
            triggerProps.getTextToReplace = _this._getTextToReplace(showCommandsList ? '/' : '@');
            triggerProps.getSelectedItem = _this._getItemOnSelect(showCommandsList ? '/' : '@');
            triggerProps.selectionEnd = 1;
            triggerProps.value = showCommandsList ? '/' : '@';
            triggerProps.values = currentCommands;
          }

          return triggerProps;
        });

        var _this$props6 = _this.props,
            loadingComponent = _this$props6.loadingComponent,
            _trigger = _this$props6.trigger,
            _value = _this$props6.value; // TODO: it would be better to have the parent control state...
        // if (value) this.state.value = value;

        if (!loadingComponent) {
          throw new Error('RTA: loadingComponent is not defined');
        }

        if (!_trigger) {
          throw new Error('RTA: trigger is not defined');
        }

        _this.state = {
          actualToken: '',
          component: null,
          currentTrigger: null,
          data: null,
          dataLoading: false,
          left: null,
          selectionEnd: 0,
          selectionStart: 0,
          top: null,
          value: _value || ''
        };
        return _this;
      }

      _createClass(ReactTextareaAutocomplete, [{
        key: "renderSuggestionListContainer",
        value: function renderSuggestionListContainer() {
          var _this2 = this;

          var _this$props7 = this.props,
              disableMentions = _this$props7.disableMentions,
              dropdownClassName = _this$props7.dropdownClassName,
              dropdownStyle = _this$props7.dropdownStyle,
              itemClassName = _this$props7.itemClassName,
              itemStyle = _this$props7.itemStyle,
              listClassName = _this$props7.listClassName,
              SuggestionItem = _this$props7.SuggestionItem,
              _this$props7$Suggesti = _this$props7.SuggestionList,
              SuggestionList = _this$props7$Suggesti === void 0 ? List : _this$props7$Suggesti;
          var triggerProps = this.getTriggerProps();

          if (triggerProps.values && triggerProps.currentTrigger && !(disableMentions && triggerProps.currentTrigger === '@')) {
            return /*#__PURE__*/React__default['default'].createElement("div", {
              className: "rta__autocomplete ".concat(dropdownClassName || ''),
              ref: function ref(_ref) {
                _this2.dropdownRef = _ref;
              },
              style: dropdownStyle
            }, /*#__PURE__*/React__default['default'].createElement(SuggestionList, _extends$2({
              className: listClassName,
              dropdownScroll: this._dropdownScroll,
              itemClassName: itemClassName,
              itemStyle: itemStyle,
              onSelect: this._onSelect,
              SuggestionItem: SuggestionItem
            }, triggerProps)));
          }

          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var _this3 = this;

          var _this$props8 = this.props,
              className = _this$props8.className,
              containerClassName = _this$props8.containerClassName,
              containerStyle = _this$props8.containerStyle,
              style = _this$props8.style;
          var maxRows = this.props.maxRows;
          var _this$state7 = this.state,
              dataLoading = _this$state7.dataLoading,
              value = _this$state7.value;
          if (!this.props.grow) maxRows = 1; // By setting defaultValue to undefined, avoid error:
          // ForwardRef(TextareaAutosize) contains a textarea with both value and defaultValue props.
          // Textarea elements must be either controlled or uncontrolled

          return /*#__PURE__*/React__default['default'].createElement("div", {
            className: "rta ".concat(dataLoading === true ? 'rta--loading' : '', " ").concat(containerClassName || ''),
            style: containerStyle
          }, this.renderSuggestionListContainer(), /*#__PURE__*/React__default['default'].createElement(index, _extends$2({
            "data-testid": "message-input"
          }, this._cleanUpProps(), {
            className: "rta__textarea ".concat(className || ''),
            maxRows: maxRows,
            onBlur: this._onClickAndBlurHandler,
            onChange: this._changeHandler,
            onClick: this._onClickAndBlurHandler,
            onFocus: this.props.onFocus,
            onKeyDown: this._handleKeyDown,
            onScroll: this._onScrollHandler,
            onSelect: this._selectHandler,
            ref: function ref(_ref2) {
              if (_this3.props.innerRef) _this3.props.innerRef(_ref2);
              _this3.textareaRef = _ref2;
            },
            style: style,
            value: value
          }, this.props.additionalTextareaProps, {
            defaultValue: undefined
          })));
        }
      }], [{
        key: "getDerivedStateFromProps",
        value:
        /**
         * setup to emulate the UNSAFE_componentWillReceiveProps
         */
        function getDerivedStateFromProps(props, state) {
          if (props.value !== state.propsValue || !state.value) {
            return {
              propsValue: props.value,
              value: props.value
            };
          } else {
            return null;
          }
        }
        /**
         * Close autocomplete, also clean up trigger (to avoid slow promises)
         */

      }]);

      return ReactTextareaAutocomplete;
    }(React__default['default'].Component);

    _defineProperty(ReactTextareaAutocomplete, "defaultProps", {
      closeOnClickOutside: true,
      maxRows: 10,
      minChar: 1,
      movePopupAsYouType: false,
      scrollToItem: true,
      value: ''
    });

    ReactTextareaAutocomplete.propTypes = {
      className: propTypes$1.string,
      closeOnClickOutside: propTypes$1.bool,
      containerClassName: propTypes$1.string,
      containerStyle: propTypes$1.object,
      disableMentions: propTypes$1.bool,
      dropdownClassName: propTypes$1.string,
      dropdownStyle: propTypes$1.object,
      itemClassName: propTypes$1.string,
      itemStyle: propTypes$1.object,
      listClassName: propTypes$1.string,
      listStyle: propTypes$1.object,
      loaderClassName: propTypes$1.string,
      loaderStyle: propTypes$1.object,
      loadingComponent: propTypes$1.elementType,
      minChar: propTypes$1.number,
      onBlur: propTypes$1.func,
      onCaretPositionChange: propTypes$1.func,
      onChange: propTypes$1.func,
      onSelect: propTypes$1.func,
      shouldSubmit: propTypes$1.func,
      style: propTypes$1.object,
      SuggestionList: propTypes$1.elementType,
      trigger: triggerPropsCheck,
      value: propTypes$1.string
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT$1 = 'Expected a function';

    /** Used as references for various `Number` constants. */
    var NAN$1 = 0 / 0;

    /** `Object#toString` result references. */
    var symbolTag$2 = '[object Symbol]';

    /** Used to match leading and trailing whitespace. */
    var reTrim$1 = /^\s+|\s+$/g;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary$1 = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal$1 = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt$1 = parseInt;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal$2 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf$2 = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root$2 = freeGlobal$2 || freeSelf$2 || Function('return this')();

    /** Used for built-in method references. */
    var objectProto$2 = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString$2 = objectProto$2.toString;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$1 = Math.max,
        nativeMin$1 = Math.min;

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now$1 = function() {
      return root$2.Date.now();
    };

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce$1(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$1);
      }
      wait = toNumber$1(wait) || 0;
      if (isObject$1(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax$1(toNumber$1(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin$1(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now$1();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now$1());
      }

      function debounced() {
        var time = now$1(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject$1(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike$2(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol$2(value) {
      return typeof value == 'symbol' ||
        (isObjectLike$2(value) && objectToString$2.call(value) == symbolTag$2);
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber$1(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol$2(value)) {
        return NAN$1;
      }
      if (isObject$1(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject$1(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim$1, '');
      var isBinary = reIsBinary$1.test(value);
      return (isBinary || reIsOctal$1.test(value))
        ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex$1.test(value) ? NAN$1 : +value);
    }

    var lodash_debounce = debounce$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /** Used as references for various `Number` constants. */
    var NAN = 0 / 0;

    /** `Object#toString` result references. */
    var symbolTag$1 = '[object Symbol]';

    /** Used to match leading and trailing whitespace. */
    var reTrim = /^\s+|\s+$/g;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt = parseInt;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();

    /** Used for built-in method references. */
    var objectProto$1 = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString$1 = objectProto$1.toString;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax = Math.max,
        nativeMin = Math.min;

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = function() {
      return root$1.Date.now();
    };

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike$1(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol$1(value) {
      return typeof value == 'symbol' ||
        (isObjectLike$1(value) && objectToString$1.call(value) == symbolTag$1);
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol$1(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    var lodash_throttle = throttle;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var channelReducer = function (state, action) {
        var _a;
        switch (action.type) {
            case 'closeThread': {
                return __assign$2(__assign$2({}, state), { thread: null, threadLoadingMore: false, threadMessages: [] });
            }
            case 'copyMessagesFromChannel': {
                var channel = action.channel, parentId = action.parentId;
                return __assign$2(__assign$2({}, state), { messages: __spreadArray([], channel.state.messages), pinnedMessages: __spreadArray([], channel.state.pinnedMessages), 
                    // copying messages from channel happens with new message - this resets the suppressAutoscroll
                    suppressAutoscroll: false, threadMessages: parentId
                        ? __assign$2({}, channel.state.threads)[parentId] || []
                        : state.threadMessages });
            }
            case 'copyStateFromChannelOnEvent': {
                var channel = action.channel;
                return __assign$2(__assign$2({}, state), { members: __assign$2({}, channel.state.members), messages: __spreadArray([], channel.state.messages), pinnedMessages: __spreadArray([], channel.state.pinnedMessages), read: __assign$2({}, channel.state.read), watcherCount: channel.state.watcher_count, watchers: __assign$2({}, channel.state.watchers) });
            }
            case 'initStateFromChannel': {
                var channel = action.channel;
                return __assign$2(__assign$2({}, state), { loading: false, members: __assign$2({}, channel.state.members), messages: __spreadArray([], channel.state.messages), pinnedMessages: __spreadArray([], channel.state.pinnedMessages), read: __assign$2({}, channel.state.read), watcherCount: channel.state.watcher_count, watchers: __assign$2({}, channel.state.watchers) });
            }
            case 'jumpToLatestMessage': {
                return __assign$2(__assign$2({}, state), { hasMoreNewer: false, highlightedMessageId: undefined, loading: false, suppressAutoscroll: false });
            }
            case 'jumpToMessageFinished': {
                return __assign$2(__assign$2({}, state), { hasMoreNewer: action.hasMoreNewer, highlightedMessageId: action.highlightedMessageId });
            }
            case 'clearHighlightedMessage': {
                return __assign$2(__assign$2({}, state), { highlightedMessageId: undefined });
            }
            case 'loadMoreFinished': {
                var hasMore = action.hasMore, messages = action.messages;
                return __assign$2(__assign$2({}, state), { hasMore: hasMore, loadingMore: false, messages: messages });
            }
            case 'loadMoreNewerFinished': {
                var hasMoreNewer = action.hasMoreNewer, messages = action.messages;
                return __assign$2(__assign$2({}, state), { hasMoreNewer: hasMoreNewer, loadingMoreNewer: false, messages: messages });
            }
            case 'loadMoreThreadFinished': {
                var threadHasMore = action.threadHasMore, threadMessages = action.threadMessages;
                return __assign$2(__assign$2({}, state), { threadHasMore: threadHasMore, threadLoadingMore: false, threadMessages: threadMessages });
            }
            case 'openThread': {
                var channel = action.channel, message = action.message;
                return __assign$2(__assign$2({}, state), { thread: message, threadMessages: message.id ? __assign$2({}, channel.state.threads)[message.id] || [] : [] });
            }
            case 'setError': {
                var error = action.error;
                return __assign$2(__assign$2({}, state), { error: error });
            }
            case 'setLoadingMore': {
                var loadingMore = action.loadingMore;
                // suppress the autoscroll behavior
                return __assign$2(__assign$2({}, state), { loadingMore: loadingMore, suppressAutoscroll: true });
            }
            case 'setLoadingMoreNewer': {
                var loadingMoreNewer = action.loadingMoreNewer;
                return __assign$2(__assign$2({}, state), { loadingMoreNewer: loadingMoreNewer });
            }
            case 'setThread': {
                var message = action.message;
                return __assign$2(__assign$2({}, state), { thread: message });
            }
            case 'setTyping': {
                var channel = action.channel;
                return __assign$2(__assign$2({}, state), { typing: __assign$2({}, channel.state.typing) });
            }
            case 'startLoadingThread': {
                return __assign$2(__assign$2({}, state), { threadLoadingMore: true });
            }
            case 'updateThreadOnEvent': {
                var channel = action.channel, message = action.message;
                if (!state.thread)
                    return state;
                return __assign$2(__assign$2({}, state), { thread: (message === null || message === void 0 ? void 0 : message.id) === state.thread.id ? channel.state.formatMessage(message) : state.thread, threadMessages: ((_a = state.thread) === null || _a === void 0 ? void 0 : _a.id) ? __assign$2({}, channel.state.threads)[state.thread.id] || [] : [] });
            }
            default:
                return state;
        }
    };
    var initialState = {
        error: null,
        hasMore: true,
        hasMoreNewer: false,
        loading: true,
        loadingMore: false,
        members: {},
        messages: [],
        pinnedMessages: [],
        read: {},
        suppressAutoscroll: false,
        thread: null,
        threadHasMore: true,
        threadLoadingMore: false,
        threadMessages: [],
        typing: {},
        watcherCount: 0,
        watchers: {},
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var commonEmoji = {
        custom: true,
        emoticons: [],
        short_names: [],
    };
    var emojiSetDef = {
        imageUrl: '',
        sheetColumns: 2,
        sheetRows: 3,
        sheetSize: 64,
        spriteUrl: 'https://getstream.imgix.net/images/emoji-sprite.png',
    };
    var defaultMinimalEmojis = [
        __assign$2(__assign$2({ colons: ':+1:', id: 'like', name: 'like', sheet_x: 0, sheet_y: 0 }, commonEmoji), emojiSetDef),
        __assign$2(__assign$2({ colons: ':heart:', id: 'love', name: 'love', sheet_x: 1, sheet_y: 2 }, commonEmoji), emojiSetDef),
        __assign$2(__assign$2({ colons: ':joy:', id: 'haha', name: 'haha', sheet_x: 1, sheet_y: 0 }, commonEmoji), emojiSetDef),
        __assign$2(__assign$2({ colons: ':astonished:', id: 'wow', name: 'wow', sheet_x: 0, sheet_y: 2 }, commonEmoji), emojiSetDef),
        __assign$2(__assign$2({ colons: ':pensive:', id: 'sad', name: 'sad', sheet_x: 0, sheet_y: 1 }, commonEmoji), emojiSetDef),
        __assign$2(__assign$2({ colons: ':angry:', id: 'angry', name: 'angry', sheet_x: 1, sheet_y: 1 }, commonEmoji), emojiSetDef),
    ];
    // use this only for small lists like in ReactionSelector
    var getStrippedEmojiData = function (data) { return (__assign$2(__assign$2({}, data), { emojis: {} })); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useCreateChannelStateContext = function (value) {
        var _a;
        var acceptedFiles = value.acceptedFiles, channel = value.channel, _b = value.channelCapabilitiesArray, channelCapabilitiesArray = _b === void 0 ? [] : _b, channelConfig = value.channelConfig, dragAndDropWindow = value.dragAndDropWindow, giphyVersion = value.giphyVersion, error = value.error, hasMore = value.hasMore, hasMoreNewer = value.hasMoreNewer, suppressAutoscroll = value.suppressAutoscroll, highlightedMessageId = value.highlightedMessageId, loading = value.loading, loadingMore = value.loadingMore, maxNumberOfFiles = value.maxNumberOfFiles, members = value.members, _c = value.messages, messages = _c === void 0 ? [] : _c, multipleUploads = value.multipleUploads, mutes = value.mutes, notifications = value.notifications, pinnedMessages = value.pinnedMessages, quotedMessage = value.quotedMessage, _d = value.read, read = _d === void 0 ? {} : _d, skipMessageDataMemoization = value.skipMessageDataMemoization, thread = value.thread, threadHasMore = value.threadHasMore, threadLoadingMore = value.threadLoadingMore, _e = value.threadMessages, threadMessages = _e === void 0 ? [] : _e, watcherCount = value.watcherCount, watcher_count = value.watcher_count, watchers = value.watchers;
        var channelId = channel.cid;
        var lastRead = channel.initialized && ((_a = channel.lastRead()) === null || _a === void 0 ? void 0 : _a.getTime());
        var membersLength = Object.keys(members || []).length;
        var notificationsLength = notifications.length;
        var readUsers = Object.values(read);
        var readUsersLength = readUsers.length;
        var readUsersLastReads = readUsers.map(function (_a) {
            var last_read = _a.last_read;
            return last_read.toISOString();
        }).join();
        var threadMessagesLength = threadMessages === null || threadMessages === void 0 ? void 0 : threadMessages.length;
        var channelCapabilities = {};
        channelCapabilitiesArray.forEach(function (capability) {
            channelCapabilities[capability] = true;
        });
        var memoizedMessageData = skipMessageDataMemoization
            ? messages
            : messages
                .map(function (_a) {
                var deleted_at = _a.deleted_at, latest_reactions = _a.latest_reactions, pinned = _a.pinned, reply_count = _a.reply_count, status = _a.status, updated_at = _a.updated_at, user = _a.user;
                return "" + deleted_at + (latest_reactions ? latest_reactions.map(function (_a) {
                    var type = _a.type;
                    return type;
                }).join() : '') + pinned + reply_count + status + (updated_at && (isDayOrMoment(updated_at) || isDate(updated_at))
                    ? updated_at.toISOString()
                    : updated_at || '') + (user === null || user === void 0 ? void 0 : user.updated_at);
            })
                .join();
        var memoizedThreadMessageData = threadMessages
            .map(function (_a) {
            var deleted_at = _a.deleted_at, latest_reactions = _a.latest_reactions, pinned = _a.pinned, status = _a.status, updated_at = _a.updated_at, user = _a.user;
            return "" + deleted_at + (latest_reactions ? latest_reactions.map(function (_a) {
                var type = _a.type;
                return type;
            }).join() : '') + pinned + status + (updated_at && (isDayOrMoment(updated_at) || isDate(updated_at))
                ? updated_at.toISOString()
                : updated_at || '') + (user === null || user === void 0 ? void 0 : user.updated_at);
        })
            .join();
        var channelStateContext = React.useMemo(function () { return ({
            acceptedFiles: acceptedFiles,
            channel: channel,
            channelCapabilities: channelCapabilities,
            channelConfig: channelConfig,
            dragAndDropWindow: dragAndDropWindow,
            error: error,
            giphyVersion: giphyVersion,
            hasMore: hasMore,
            hasMoreNewer: hasMoreNewer,
            highlightedMessageId: highlightedMessageId,
            loading: loading,
            loadingMore: loadingMore,
            maxNumberOfFiles: maxNumberOfFiles,
            members: members,
            messages: messages,
            multipleUploads: multipleUploads,
            mutes: mutes,
            notifications: notifications,
            pinnedMessages: pinnedMessages,
            quotedMessage: quotedMessage,
            read: read,
            suppressAutoscroll: suppressAutoscroll,
            thread: thread,
            threadHasMore: threadHasMore,
            threadLoadingMore: threadLoadingMore,
            threadMessages: threadMessages,
            watcher_count: watcher_count,
            watcherCount: watcherCount,
            watchers: watchers,
        }); }, [
            channelId,
            error,
            hasMore,
            hasMoreNewer,
            highlightedMessageId,
            lastRead,
            loading,
            loadingMore,
            membersLength,
            memoizedMessageData,
            memoizedThreadMessageData,
            notificationsLength,
            quotedMessage,
            readUsersLength,
            readUsersLastReads,
            skipMessageDataMemoization,
            suppressAutoscroll,
            thread,
            threadHasMore,
            threadLoadingMore,
            threadMessagesLength,
            watcherCount,
        ]);
        return channelStateContext;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useCreateTypingContext = function (value) {
        var typing = value.typing;
        var typingValue = Object.keys(typing || {}).join();
        var typingContext = React.useMemo(function () { return ({
            typing: typing,
        }); }, [typingValue]);
        return typingContext;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ChatContext = React__default['default'].createContext(undefined);
    var ChatProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default['default'].createElement(ChatContext.Provider, { value: value }, children));
    };
    var useChatContext = function (componentName) {
        var contextValue = React.useContext(ChatContext);
        if (!contextValue) {
            console.warn("The useChatContext hook was called outside of the ChatContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the " + componentName + " component.");
            return {};
        }
        return contextValue;
    };
    /**
     * Typescript currently does not support partial inference so if ChatContext
     * typing is desired while using the HOC withChatContext the Props for the
     * wrapped component must be provided as the first generic.
     */
    var withChatContext = function (Component) {
        var WithChatContextComponent = function (props) {
            var chatContext = useChatContext();
            return React__default['default'].createElement(Component, __assign$2({}, props, chatContext));
        };
        WithChatContextComponent.displayName = "WithChatContext" + getDisplayName(Component);
        return WithChatContextComponent;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useEditMessageHandler = function (doUpdateMessageRequest) {
        var _a = useChatContext('useEditMessageHandler'), channel = _a.channel, client = _a.client;
        return function (updatedMessage) {
            if (doUpdateMessageRequest && channel) {
                return Promise.resolve(doUpdateMessageRequest(channel.cid, updatedMessage));
            }
            return client.updateMessage(updatedMessage);
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useIsMounted = function () {
        var isMounted = React.useRef(false);
        React.useEffect(function () {
            isMounted.current = true;
            return function () {
                isMounted.current = false;
            };
        }, []);
        return isMounted;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useMentionsHandlers = function (onMentionsHover, onMentionsClick) {
        return React.useCallback(function (event, mentioned_users) {
            if ((!onMentionsHover && !onMentionsClick) || !(event.target instanceof HTMLElement)) {
                return;
            }
            var target = event.target;
            var textContent = target.innerHTML.replace('*', '');
            if (textContent[0] === '@') {
                var userName_1 = textContent.replace('@', '');
                var user = mentioned_users === null || mentioned_users === void 0 ? void 0 : mentioned_users.find(function (_a) {
                    var id = _a.id, name = _a.name;
                    return name === userName_1 || id === userName_1;
                });
                if (onMentionsHover &&
                    typeof onMentionsHover === 'function' &&
                    event.type === 'mouseover') {
                    onMentionsHover(event, user);
                }
                if (onMentionsClick && event.type === 'click' && typeof onMentionsClick === 'function') {
                    onMentionsClick(event, user);
                }
            }
        }, [onMentionsClick, onMentionsHover]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var LoadingItems = function () { return (React__default['default'].createElement("div", { className: 'str-chat__loading-channels-item' },
        React__default['default'].createElement("div", { className: 'str-chat__loading-channels-avatar' }),
        React__default['default'].createElement("div", { className: 'str-chat__loading-channels-meta' },
            React__default['default'].createElement("div", { className: 'str-chat__loading-channels-username' }),
            React__default['default'].createElement("div", { className: 'str-chat__loading-channels-status' })))); };
    var UnMemoizedLoadingChannels = function () { return (React__default['default'].createElement("div", { className: 'str-chat__loading-channels' },
        React__default['default'].createElement(LoadingItems, null),
        React__default['default'].createElement(LoadingItems, null),
        React__default['default'].createElement(LoadingItems, null))); };
    /**
     * Loading indicator for the ChannelList
     */
    var LoadingChannels = React__default['default'].memo(UnMemoizedLoadingChannels);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * UI component for error indicator in a Channel
     */
    var UnMemoizedLoadingErrorIndicator = function (_a) {
        var error = _a.error;
        var t = useTranslationContext('LoadingErrorIndicator').t;
        if (!error)
            return null;
        return (React__default['default'].createElement("div", null, t('Error: {{ errorMessage }}', { errorMessage: error.message })));
    };
    var LoadingErrorIndicator = React__default['default'].memo(UnMemoizedLoadingErrorIndicator, function (prevProps, nextProps) { var _a, _b; return ((_a = prevProps.error) === null || _a === void 0 ? void 0 : _a.message) === ((_b = nextProps.error) === null || _b === void 0 ? void 0 : _b.message); });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedLoadingIndicator = function (props) {
        var _a = props.color, color = _a === void 0 ? '#006CFF' : _a, _b = props.size, size = _b === void 0 ? 15 : _b;
        return (React__default['default'].createElement("div", { className: "str-chat__loading-indicator " + color, "data-testid": 'loading-indicator-wrapper', style: { height: size, width: size } },
            React__default['default'].createElement("svg", { height: size, viewBox: "0 0 30 30", width: size, xmlns: 'http://www.w3.org/2000/svg' },
                React__default['default'].createElement("defs", null,
                    React__default['default'].createElement("linearGradient", { id: 'a', x1: '50%', x2: '50%', y1: '0%', y2: '100%' },
                        React__default['default'].createElement("stop", { offset: '0%', stopColor: '#FFF', stopOpacity: '0' }),
                        React__default['default'].createElement("stop", { "data-testid": 'loading-indicator-circle', offset: '100%', stopColor: color, stopOpacity: '1', style: { stopColor: color } }))),
                React__default['default'].createElement("path", { d: 'M2.518 23.321l1.664-1.11A12.988 12.988 0 0 0 15 28c7.18 0 13-5.82 13-13S22.18 2 15 2V0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-5.206 0-9.792-2.652-12.482-6.679z', fill: 'url(#a)', fillRule: 'evenodd' }))));
    };
    /**
     * Simple loading spinner
     */
    var LoadingIndicator = React__default['default'].memo(UnMemoizedLoadingIndicator, function (prevProps, nextProps) {
        return prevProps.color === nextProps.color && prevProps.size === nextProps.size;
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useUserRole = function (message, onlySenderCanEdit, disableQuotedMessages) {
        var _a, _b, _c;
        var _d = useChannelStateContext('useUserRole'), channel = _d.channel, _e = _d.channelCapabilities, channelCapabilities = _e === void 0 ? {} : _e, channelConfig = _d.channelConfig;
        var client = useChatContext('useUserRole').client;
        var isAdmin = ((_a = client.user) === null || _a === void 0 ? void 0 : _a.role) === 'admin' || channel.state.membership.role === 'admin';
        var isMyMessage = client.userID === ((_b = message.user) === null || _b === void 0 ? void 0 : _b.id);
        var isOwner = channel.state.membership.role === 'owner';
        var isModerator = ((_c = client.user) === null || _c === void 0 ? void 0 : _c.role) === 'channel_moderator' ||
            channel.state.membership.role === 'channel_moderator' ||
            channel.state.membership.role === 'moderator';
        var canEdit = (!onlySenderCanEdit && channelCapabilities['update-any-message']) ||
            (isMyMessage && channelCapabilities['update-own-message']);
        var canDelete = channelCapabilities['delete-any-message'] ||
            (isMyMessage && channelCapabilities['delete-own-message']);
        var canFlag = !isMyMessage;
        var canMute = !isMyMessage && (channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.mutes);
        var canQuote = !disableQuotedMessages && channelCapabilities['quote-message'];
        var canReact = (channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.reactions) !== false && channelCapabilities['send-reaction'];
        var canReply = (channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.replies) !== false && channelCapabilities['send-reply'];
        return {
            canDelete: canDelete,
            canEdit: canEdit,
            canFlag: canFlag,
            canMute: canMute,
            canQuote: canQuote,
            canReact: canReact,
            canReply: canReply,
            isAdmin: isAdmin,
            isModerator: isModerator,
            isMyMessage: isMyMessage,
            isOwner: isOwner,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageDeleted = function (props) {
        var message = props.message;
        var t = useTranslationContext('MessageDeleted').t;
        var isMyMessage = useUserRole(message).isMyMessage;
        var messageClasses = isMyMessage
            ? 'str-chat__message str-chat__message--me str-chat__message-simple str-chat__message-simple--me'
            : 'str-chat__message str-chat__message-simple';
        return (React__default['default'].createElement("div", { className: messageClasses + " str-chat__message--deleted " + message.type + " ", "data-testid": 'message-deleted-component', key: message.id },
            React__default['default'].createElement("div", { className: 'str-chat__message--deleted-inner' }, t('This message was deleted...'))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ActionsIcon = function () { return (React__default['default'].createElement("svg", { height: '4', viewBox: '0 0 11 4', width: '11', xmlns: 'http://www.w3.org/2000/svg' },
        React__default['default'].createElement("path", { d: 'M1.5 3a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z', fillRule: 'nonzero' }))); };
    var ReplyIcon = function () { return (React__default['default'].createElement("svg", { height: '15', width: '18', xmlns: 'http://www.w3.org/2000/svg' },
        React__default['default'].createElement("path", { d: 'M.56 10.946H.06l-.002-.498L.025.92a.5.5 0 1 1 1-.004l.032 9.029H9.06v-4l9 4.5-9 4.5v-4H.56z', fillRule: 'nonzero' }))); };
    var DeliveredCheckIcon = function () { return (React__default['default'].createElement("svg", { height: '16', width: '16', xmlns: 'http://www.w3.org/2000/svg' },
        React__default['default'].createElement("path", { d: 'M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zm3.72 6.633a.955.955 0 1 0-1.352-1.352L6.986 8.663 5.633 7.31A.956.956 0 1 0 4.28 8.663l2.029 2.028a.956.956 0 0 0 1.353 0l4.058-4.058z', fill: '#006CFF', fillRule: 'evenodd' }))); };
    var ReactionIcon = function () { return (React__default['default'].createElement("svg", { height: '12', viewBox: '0 0 12 12', width: '12', xmlns: 'http://www.w3.org/2000/svg' },
        React__default['default'].createElement("g", { clipRule: 'evenodd', fillRule: 'evenodd' },
            React__default['default'].createElement("path", { d: 'M6 1.2C3.3 1.2 1.2 3.3 1.2 6c0 2.7 2.1 4.8 4.8 4.8 2.7 0 4.8-2.1 4.8-4.8 0-2.7-2.1-4.8-4.8-4.8zM0 6c0-3.3 2.7-6 6-6s6 2.7 6 6-2.7 6-6 6-6-2.7-6-6z' }),
            React__default['default'].createElement("path", { d: 'M5.4 4.5c0 .5-.4.9-.9.9s-.9-.4-.9-.9.4-.9.9-.9.9.4.9.9zM8.4 4.5c0 .5-.4.9-.9.9s-.9-.4-.9-.9.4-.9.9-.9.9.4.9.9zM3.3 6.7c.3-.2.6-.1.8.1.3.4.8.9 1.5 1 .6.2 1.4.1 2.4-1 .2-.2.6-.3.8 0 .2.2.3.6 0 .8-1.1 1.3-2.4 1.7-3.5 1.5-1-.2-1.8-.9-2.2-1.5-.2-.3-.1-.7.2-.9z' })))); };
    var ThreadIcon = function () { return (React__default['default'].createElement("svg", { height: '10', width: '14', xmlns: 'http://www.w3.org/2000/svg' },
        React__default['default'].createElement("path", { d: 'M8.516 3c4.78 0 4.972 6.5 4.972 6.5-1.6-2.906-2.847-3.184-4.972-3.184v2.872L3.772 4.994 8.516.5V3zM.484 5l4.5-4.237v1.78L2.416 5l2.568 2.125v1.828L.484 5z', fillRule: 'evenodd' }))); };
    var ErrorIcon = function () { return (React__default['default'].createElement("svg", { height: '14', width: '14', xmlns: 'http://www.w3.org/2000/svg' },
        React__default['default'].createElement("path", { d: 'M7 0a7 7 0 1 0 0 14A7 7 0 0 0 7 0zm.875 10.938a.438.438 0 0 1-.438.437h-.875a.438.438 0 0 1-.437-.438v-.874c0-.242.196-.438.438-.438h.875c.241 0 .437.196.437.438v.874zm0-2.626a.438.438 0 0 1-.438.438h-.875a.438.438 0 0 1-.437-.438v-5.25c0-.241.196-.437.438-.437h.875c.241 0 .437.196.437.438v5.25z', fill: '#EA152F', fillRule: 'evenodd' }))); };
    var PinIcon = function () { return (React__default['default'].createElement("svg", { height: '13', viewBox: '0 0 14 13', width: '14', xmlns: 'http://www.w3.org/2000/svg' },
        React__default['default'].createElement("path", { d: 'M13.3518 6.686L6.75251 0.0866699L5.80984 1.02867L6.75318 1.972V1.97334L3.45318 5.272L3.45251 5.27334L2.50984 4.32934L1.56718 5.27267L4.39584 8.10067L0.624512 11.8713L1.56718 12.814L5.33851 9.04334L8.16718 11.8713L9.10984 10.9293L8.16718 9.986L11.4672 6.686L12.4098 7.62867L13.3518 6.686ZM7.22451 9.04267L7.22385 9.04334L4.39584 6.21467L7.69518 2.91467L10.5232 5.74267L7.22451 9.04267Z', fillRule: 'evenodd' }))); };
    var PinIndicator = function (_a) {
        var _b, _c;
        var message = _a.message, t = _a.t;
        if (!message || !t)
            return null;
        return (React__default['default'].createElement("div", { style: { alignItems: 'center', display: 'flex' } },
            React__default['default'].createElement(PinIcon, null),
            React__default['default'].createElement("div", { style: {
                    fontSize: '14px',
                    marginBottom: '0',
                    marginLeft: '8px',
                    marginTop: '0',
                } }, message.pinned_by
                ? t('Pinned by') + " " + (((_b = message.pinned_by) === null || _b === void 0 ? void 0 : _b.name) || ((_c = message.pinned_by) === null || _c === void 0 ? void 0 : _c.id))
                : t('Message pinned'))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Following function validates a function which returns notification message.
     * It validates if the first parameter is function and also if return value of function is string or no.
     */
    var validateAndGetMessage = function (func, args) {
        if (!func || typeof func !== 'function')
            return null;
        // below is due to tests passing a single argument
        // rather than an array.
        if (!(args instanceof Array)) {
            // @ts-expect-error
            args = [args];
        }
        var returnValue = func.apply(void 0, args);
        if (typeof returnValue !== 'string')
            return null;
        return returnValue;
    };
    /**
     * Tell if the owner of the current message is muted
     */
    var isUserMuted = function (message, mutes) {
        if (!mutes || !message)
            return false;
        var userMuted = mutes.filter(function (el) { var _a; return el.target.id === ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id); });
        return !!userMuted.length;
    };
    var MESSAGE_ACTIONS = {
        delete: 'delete',
        edit: 'edit',
        flag: 'flag',
        mute: 'mute',
        pin: 'pin',
        quote: 'quote',
        react: 'react',
        reply: 'reply',
    };
    // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release
    var defaultPinPermissions = {
        commerce: {
            admin: true,
            anonymous: false,
            channel_member: false,
            channel_moderator: true,
            guest: false,
            member: false,
            moderator: true,
            owner: true,
            user: false,
        },
        gaming: {
            admin: true,
            anonymous: false,
            channel_member: false,
            channel_moderator: true,
            guest: false,
            member: false,
            moderator: true,
            owner: false,
            user: false,
        },
        livestream: {
            admin: true,
            anonymous: false,
            channel_member: false,
            channel_moderator: true,
            guest: false,
            member: false,
            moderator: true,
            owner: true,
            user: false,
        },
        messaging: {
            admin: true,
            anonymous: false,
            channel_member: true,
            channel_moderator: true,
            guest: false,
            member: true,
            moderator: true,
            owner: true,
            user: false,
        },
        team: {
            admin: true,
            anonymous: false,
            channel_member: true,
            channel_moderator: true,
            guest: false,
            member: true,
            moderator: true,
            owner: true,
            user: false,
        },
    };
    var getMessageActions = function (actions, _a) {
        var canDelete = _a.canDelete, canEdit = _a.canEdit, canFlag = _a.canFlag, canMute = _a.canMute, canPin = _a.canPin, canQuote = _a.canQuote, canReact = _a.canReact, canReply = _a.canReply;
        var messageActionsAfterPermission = [];
        var messageActions = [];
        if (actions && typeof actions === 'boolean') {
            // If value of actions is true, then populate all the possible values
            messageActions = Object.keys(MESSAGE_ACTIONS);
        }
        else if (actions && actions.length > 0) {
            messageActions = __spreadArray([], actions);
        }
        else {
            return [];
        }
        if (canDelete && messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.delete);
        }
        if (canEdit && messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.edit);
        }
        if (canFlag && messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.flag);
        }
        if (canMute && messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.mute);
        }
        if (canPin && messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.pin);
        }
        if (canQuote && messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.quote);
        }
        if (canReact && messageActions.indexOf(MESSAGE_ACTIONS.react) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.react);
        }
        if (canReply && messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.reply);
        }
        return messageActionsAfterPermission;
    };
    var ACTIONS_NOT_WORKING_IN_THREAD = ['pin', 'react', 'reply'];
    var showMessageActionsBox = function (actions, inThread) {
        if (actions.length === 0) {
            return false;
        }
        if (inThread &&
            actions.filter(function (action) { return !ACTIONS_NOT_WORKING_IN_THREAD.includes(action); }).length === 0) {
            return false;
        }
        if (actions.length === 1 && (actions.includes('react') || actions.includes('reply'))) {
            return false;
        }
        if (actions.length === 2 && actions.includes('react') && actions.includes('reply')) {
            return false;
        }
        return true;
    };
    var areMessagePropsEqual = function (prevProps, nextProps) {
        var _a, _b, _c, _d, _e, _f;
        var prevMessage = prevProps.message, prevMessageUI = prevProps.Message;
        var nextMessage = nextProps.message, nextMessageUI = nextProps.Message;
        if (prevMessageUI !== nextMessageUI)
            return false;
        if (prevProps.endOfGroup !== nextProps.endOfGroup)
            return false;
        if (nextProps.showDetailedReactions !== prevProps.showDetailedReactions) {
            return false;
        }
        var messagesAreEqual = prevMessage.deleted_at === nextMessage.deleted_at &&
            ((_a = prevMessage.latest_reactions) === null || _a === void 0 ? void 0 : _a.length) === ((_b = nextMessage.latest_reactions) === null || _b === void 0 ? void 0 : _b.length) &&
            ((_c = prevMessage.own_reactions) === null || _c === void 0 ? void 0 : _c.length) === ((_d = nextMessage.own_reactions) === null || _d === void 0 ? void 0 : _d.length) &&
            prevMessage.pinned === nextMessage.pinned &&
            prevMessage.reply_count === nextMessage.reply_count &&
            prevMessage.status === nextMessage.status &&
            prevMessage.text === nextMessage.text &&
            prevMessage.type === nextMessage.type &&
            prevMessage.updated_at === nextMessage.updated_at &&
            ((_e = prevMessage.user) === null || _e === void 0 ? void 0 : _e.updated_at) === ((_f = nextMessage.user) === null || _f === void 0 ? void 0 : _f.updated_at);
        if (!messagesAreEqual)
            return false;
        var deepEqualProps = reactFastCompare(nextProps.readBy, prevProps.readBy) &&
            reactFastCompare(nextProps.highlighted, prevProps.highlighted) &&
            reactFastCompare(nextProps.groupStyles, prevProps.groupStyles) && // last 3 messages can have different group styles
            reactFastCompare(nextProps.mutes, prevProps.mutes) &&
            reactFastCompare(nextProps.lastReceivedId, prevProps.lastReceivedId);
        if (!deepEqualProps)
            return false;
        return (prevProps.messageListRect === nextProps.messageListRect // MessageList wrapper layout changes
        );
    };
    var areMessageUIPropsEqual = function (prevProps, nextProps) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var prevLastReceivedId = prevProps.lastReceivedId, prevMessage = prevProps.message;
        var nextLastReceivedId = nextProps.lastReceivedId, nextMessage = nextProps.message;
        if (prevProps.editing !== nextProps.editing)
            return false;
        if (prevProps.highlighted !== nextProps.highlighted)
            return false;
        if (prevProps.endOfGroup !== nextProps.endOfGroup)
            return false;
        if (((_a = prevProps.mutes) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = nextProps.mutes) === null || _b === void 0 ? void 0 : _b.length))
            return false;
        if (((_c = prevProps.readBy) === null || _c === void 0 ? void 0 : _c.length) !== ((_d = nextProps.readBy) === null || _d === void 0 ? void 0 : _d.length))
            return false;
        if (prevProps.showDetailedReactions !== nextProps.showDetailedReactions) {
            return false;
        }
        if ((prevMessage.id === prevLastReceivedId || prevMessage.id === nextLastReceivedId) &&
            prevLastReceivedId !== nextLastReceivedId) {
            return false;
        }
        return (prevMessage.deleted_at === nextMessage.deleted_at &&
            ((_e = prevMessage.latest_reactions) === null || _e === void 0 ? void 0 : _e.length) === ((_f = nextMessage.latest_reactions) === null || _f === void 0 ? void 0 : _f.length) &&
            ((_g = prevMessage.own_reactions) === null || _g === void 0 ? void 0 : _g.length) === ((_h = nextMessage.own_reactions) === null || _h === void 0 ? void 0 : _h.length) &&
            prevMessage.pinned === nextMessage.pinned &&
            prevMessage.reply_count === nextMessage.reply_count &&
            prevMessage.status === nextMessage.status &&
            prevMessage.text === nextMessage.text &&
            prevMessage.type === nextMessage.type &&
            prevMessage.updated_at === nextMessage.updated_at &&
            ((_j = prevMessage.user) === null || _j === void 0 ? void 0 : _j.updated_at) === ((_k = nextMessage.user) === null || _k === void 0 ? void 0 : _k.updated_at));
    };
    var messageHasReactions = function (message) { return !!(message === null || message === void 0 ? void 0 : message.latest_reactions) && !!message.latest_reactions.length; };
    var messageHasAttachments = function (message) { return !!(message === null || message === void 0 ? void 0 : message.attachments) && !!message.attachments.length; };
    var getImages = function (message) {
        if (!(message === null || message === void 0 ? void 0 : message.attachments)) {
            return [];
        }
        return message.attachments.filter(function (item) { return item.type === 'image'; });
    };
    var getNonImageAttachments = function (message) {
        if (!(message === null || message === void 0 ? void 0 : message.attachments)) {
            return [];
        }
        return message.attachments.filter(function (item) { return item.type !== 'image'; });
    };
    var getReadByTooltipText = function (users, t, client) {
        var outStr = '';
        if (!t) {
            throw new Error('`getReadByTooltipText was called, but translation function is not available`');
        }
        // first filter out client user, so restLength won't count it
        var otherUsers = users
            .filter(function (item) { return item && (client === null || client === void 0 ? void 0 : client.user) && item.id !== client.user.id; })
            .map(function (item) { return item.name || item.id; });
        var slicedArr = otherUsers.slice(0, 5);
        var restLength = otherUsers.length - slicedArr.length;
        if (slicedArr.length === 1) {
            outStr = slicedArr[0] + " ";
        }
        else if (slicedArr.length === 2) {
            // joins all with "and" but =no commas
            // example: "bob and sam"
            outStr = t('{{ firstUser }} and {{ secondUser }}', {
                firstUser: slicedArr[0],
                secondUser: slicedArr[1],
            });
        }
        else if (slicedArr.length > 2) {
            // joins all with commas, but last one gets ", and" (oxford comma!)
            // example: "bob, joe, sam and 4 more"
            if (restLength === 0) {
                // mutate slicedArr to remove last user to display it separately
                var lastUser = slicedArr.splice(slicedArr.length - 2, 1);
                outStr = t('{{ commaSeparatedUsers }}, and {{ lastUser }}', {
                    commaSeparatedUsers: slicedArr.join(', '),
                    lastUser: lastUser,
                });
            }
            else {
                outStr = t('{{ commaSeparatedUsers }} and {{ moreCount }} more', {
                    commaSeparatedUsers: slicedArr.join(', '),
                    moreCount: restLength,
                });
            }
        }
        return outStr;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ChannelActionContext = React__default['default'].createContext(undefined);
    var ChannelActionProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default['default'].createElement(ChannelActionContext.Provider, { value: value }, children));
    };
    var useChannelActionContext = function (componentName) {
        var contextValue = React.useContext(ChannelActionContext);
        if (!contextValue) {
            console.warn("The useChannelActionContext hook was called outside of the ChannelActionContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the " + componentName + " component.");
            return {};
        }
        return contextValue;
    };
    /**
     * Typescript currently does not support partial inference, so if ChannelActionContext
     * typing is desired while using the HOC withChannelActionContext, the Props for the
     * wrapped component must be provided as the first generic.
     */
    var withChannelActionContext = function (Component) {
        var WithChannelActionContextComponent = function (props) {
            var channelActionContext = useChannelActionContext();
            return React__default['default'].createElement(Component, __assign$2({}, props, channelActionContext));
        };
        WithChannelActionContextComponent.displayName = (Component.displayName ||
            Component.name ||
            'Component').replace('Base', '');
        return WithChannelActionContextComponent;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageContext = React__default['default'].createContext(undefined);
    var MessageProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default['default'].createElement(MessageContext.Provider, { value: value }, children));
    };
    var useMessageContext = function (componentName) {
        var contextValue = React.useContext(MessageContext);
        if (!contextValue) {
            console.warn("The useMessageContext hook was called outside of the MessageContext provider. Make sure this hook is called within the Message's UI component. The errored call is located in the " + componentName + " component.");
            return {};
        }
        return contextValue;
    };
    /**
     * Typescript currently does not support partial inference, so if MessageContext
     * typing is desired while using the HOC withMessageContext, the Props for the
     * wrapped component must be provided as the first generic.
     */
    var withMessageContext = function (Component) {
        var WithMessageContextComponent = function (props) {
            var messageContext = useMessageContext();
            return React__default['default'].createElement(Component, __assign$2({}, props, messageContext));
        };
        WithMessageContextComponent.displayName = (Component.displayName ||
            Component.name ||
            'Component').replace('Base', '');
        return WithMessageContextComponent;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var CustomMessageActionsList = function (props) {
        var customMessageActions = props.customMessageActions, message = props.message;
        var customActionsArray = Object.keys(customMessageActions);
        return (React__default['default'].createElement(React__default['default'].Fragment, null, customActionsArray.map(function (customAction) {
            var customHandler = customMessageActions[customAction];
            return (React__default['default'].createElement("button", { "aria-selected": 'false', className: 'str-chat__message-actions-list-item', key: customAction, onClick: function (event) { return customHandler(message, event); }, role: 'option' }, customAction));
        })));
    };
    var UnMemoizedMessageActionsBox = function (props) {
        var getMessageActions = props.getMessageActions, handleDelete = props.handleDelete, handleEdit = props.handleEdit, handleFlag = props.handleFlag, handleMute = props.handleMute, handlePin = props.handlePin, isUserMuted = props.isUserMuted, mine = props.mine, _a = props.open, open = _a === void 0 ? false : _a;
        var setQuotedMessage = useChannelActionContext('MessageActionsBox').setQuotedMessage;
        var _b = useMessageContext('MessageActionsBox'), customMessageActions = _b.customMessageActions, message = _b.message, messageListRect = _b.messageListRect;
        var t = useTranslationContext('MessageActionsBox').t;
        var _c = React.useState(false), reverse = _c[0], setReverse = _c[1];
        var messageActions = getMessageActions();
        var checkIfReverse = React.useCallback(function (containerElement) {
            if (!containerElement) {
                setReverse(false);
                return;
            }
            if (open) {
                var containerRect = containerElement.getBoundingClientRect();
                if (mine) {
                    setReverse(!!messageListRect && containerRect.left < messageListRect.left);
                }
                else {
                    setReverse(!!messageListRect && containerRect.right + 5 > messageListRect.right);
                }
            }
        }, [messageListRect, mine, open]);
        var handleQuote = function () {
            setQuotedMessage(message);
            var elements = message.parent_id
                ? document.querySelectorAll('.str-chat__thread .str-chat__textarea__textarea')
                : document.getElementsByClassName('str-chat__textarea__textarea');
            var textarea = elements.item(0);
            if (textarea instanceof HTMLTextAreaElement) {
                textarea.focus();
            }
        };
        return (React__default['default'].createElement("div", { className: "str-chat__message-actions-box\n        " + (open ? 'str-chat__message-actions-box--open' : '') + "\n        " + (mine ? 'str-chat__message-actions-box--mine' : '') + "\n        " + (reverse ? 'str-chat__message-actions-box--reverse' : '') + "\n      ", "data-testid": 'message-actions-box', ref: checkIfReverse },
            React__default['default'].createElement("div", { "aria-label": 'Message Options', className: 'str-chat__message-actions-list', role: 'listbox' },
                customMessageActions && (React__default['default'].createElement(CustomMessageActionsList, { customMessageActions: customMessageActions, message: message })),
                messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1 && !message.quoted_message && (React__default['default'].createElement("button", { "aria-selected": 'false', className: 'str-chat__message-actions-list-item', onClick: handleQuote, role: 'option' }, t('Reply'))),
                messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1 && !message.parent_id && (React__default['default'].createElement("button", { "aria-selected": 'false', className: 'str-chat__message-actions-list-item', onClick: handlePin, role: 'option' }, !message.pinned ? t('Pin') : t('Unpin'))),
                messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1 && (React__default['default'].createElement("button", { "aria-selected": 'false', className: 'str-chat__message-actions-list-item', onClick: handleFlag, role: 'option' }, t('Flag'))),
                messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1 && (React__default['default'].createElement("button", { "aria-selected": 'false', className: 'str-chat__message-actions-list-item', onClick: handleMute, role: 'option' }, isUserMuted() ? t('Unmute') : t('Mute'))),
                messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1 && (React__default['default'].createElement("button", { "aria-selected": 'false', className: 'str-chat__message-actions-list-item', onClick: handleEdit, role: 'option' }, t('Edit Message'))),
                messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1 && (React__default['default'].createElement("button", { "aria-selected": 'false', className: 'str-chat__message-actions-list-item', onClick: handleDelete, role: 'option' }, t('Delete'))))));
    };
    /**
     * A popup box that displays the available actions on a message, such as edit, delete, pin, etc.
     */
    var MessageActionsBox = React__default['default'].memo(UnMemoizedMessageActionsBox);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageActions = function (props) {
        var _a = props.ActionsIcon, ActionsIcon$1 = _a === void 0 ? ActionsIcon : _a, _b = props.customWrapperClass, customWrapperClass = _b === void 0 ? '' : _b, propGetMessageActions = props.getMessageActions, propHandleDelete = props.handleDelete, propHandleFlag = props.handleFlag, propHandleMute = props.handleMute, propHandlePin = props.handlePin, inline = props.inline, propMessage = props.message, messageWrapperRef = props.messageWrapperRef, mine = props.mine;
        var mutes = useChatContext('MessageActions').mutes;
        var _c = useMessageContext('MessageActions'), customMessageActions = _c.customMessageActions, contextGetMessageActions = _c.getMessageActions, contextHandleDelete = _c.handleDelete, contextHandleFlag = _c.handleFlag, contextHandleMute = _c.handleMute, contextHandlePin = _c.handlePin, isMyMessage = _c.isMyMessage, contextMessage = _c.message, setEditingState = _c.setEditingState;
        var getMessageActions = propGetMessageActions || contextGetMessageActions;
        var handleDelete = propHandleDelete || contextHandleDelete;
        var handleFlag = propHandleFlag || contextHandleFlag;
        var handleMute = propHandleMute || contextHandleMute;
        var handlePin = propHandlePin || contextHandlePin;
        var message = propMessage || contextMessage;
        var _d = React.useState(false), actionsBoxOpen = _d[0], setActionsBoxOpen = _d[1];
        var isMuted = React.useCallback(function () { return isUserMuted(message, mutes); }, [message, mutes]);
        var hideOptions = React.useCallback(function (event) {
            if (event instanceof KeyboardEvent && event.key !== 'Escape') {
                return;
            }
            setActionsBoxOpen(false);
        }, []);
        var messageActions = getMessageActions();
        var messageDeletedAt = !!(message === null || message === void 0 ? void 0 : message.deleted_at);
        React.useEffect(function () {
            if (messageWrapperRef === null || messageWrapperRef === void 0 ? void 0 : messageWrapperRef.current) {
                messageWrapperRef.current.addEventListener('mouseleave', hideOptions);
            }
        }, [hideOptions, messageWrapperRef]);
        React.useEffect(function () {
            if (messageDeletedAt) {
                document.removeEventListener('click', hideOptions);
            }
        }, [hideOptions, messageDeletedAt]);
        React.useEffect(function () {
            if (!actionsBoxOpen)
                return;
            document.addEventListener('click', hideOptions);
            document.addEventListener('keyup', hideOptions);
            return function () {
                document.removeEventListener('click', hideOptions);
                document.removeEventListener('keyup', hideOptions);
            };
        }, [actionsBoxOpen, hideOptions]);
        if (!messageActions.length && !customMessageActions)
            return null;
        return (React__default['default'].createElement(MessageActionsWrapper, { customWrapperClass: customWrapperClass, inline: inline, setActionsBoxOpen: setActionsBoxOpen },
            React__default['default'].createElement(MessageActionsBox, { getMessageActions: getMessageActions, handleDelete: handleDelete, handleEdit: setEditingState, handleFlag: handleFlag, handleMute: handleMute, handlePin: handlePin, isUserMuted: isMuted, mine: mine ? mine() : isMyMessage(), open: actionsBoxOpen }),
            React__default['default'].createElement("button", { "aria-expanded": actionsBoxOpen, "aria-haspopup": 'true', "aria-label": 'Open Message Actions Menu' },
                React__default['default'].createElement(ActionsIcon$1, null))));
    };
    var MessageActionsWrapper = function (props) {
        var children = props.children, customWrapperClass = props.customWrapperClass, inline = props.inline, setActionsBoxOpen = props.setActionsBoxOpen;
        var defaultWrapperClass = 'str-chat__message-simple__actions__action str-chat__message-simple__actions__action--options';
        var wrapperClass = customWrapperClass || defaultWrapperClass;
        var onClickOptionsAction = function (event) {
            event.stopPropagation();
            setActionsBoxOpen(function (prev) { return !prev; });
        };
        var wrapperProps = {
            className: wrapperClass,
            'data-testid': 'message-actions',
            onClick: onClickOptionsAction,
        };
        if (inline)
            return React__default['default'].createElement("span", __assign$2({}, wrapperProps), children);
        return React__default['default'].createElement("div", __assign$2({}, wrapperProps), children);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedMessageOptions = function (props) {
        var _a = props.ActionsIcon, ActionsIcon$1 = _a === void 0 ? ActionsIcon : _a, _b = props.displayLeft, displayLeft = _b === void 0 ? true : _b, _c = props.displayReplies, displayReplies = _c === void 0 ? true : _c, propHandleOpenThread = props.handleOpenThread, messageWrapperRef = props.messageWrapperRef, _d = props.ReactionIcon, ReactionIcon$1 = _d === void 0 ? ReactionIcon : _d, _e = props.theme, theme = _e === void 0 ? 'simple' : _e, _f = props.ThreadIcon, ThreadIcon$1 = _f === void 0 ? ThreadIcon : _f;
        var _g = useMessageContext('MessageOptions'), customMessageActions = _g.customMessageActions, getMessageActions = _g.getMessageActions, contextHandleOpenThread = _g.handleOpenThread, initialMessage = _g.initialMessage, isMyMessage = _g.isMyMessage, message = _g.message, onReactionListClick = _g.onReactionListClick, threadList = _g.threadList;
        var handleOpenThread = propHandleOpenThread || contextHandleOpenThread;
        var messageActions = getMessageActions();
        var showActionsBox = showMessageActionsBox(messageActions, threadList) || !!customMessageActions;
        var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;
        var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;
        if (!message.type ||
            message.type === 'error' ||
            message.type === 'system' ||
            message.type === 'ephemeral' ||
            message.status === 'failed' ||
            message.status === 'sending' ||
            initialMessage) {
            return null;
        }
        if (isMyMessage() && displayLeft) {
            return (React__default['default'].createElement("div", { className: "str-chat__message-" + theme + "__actions", "data-testid": 'message-options-left' },
                showActionsBox && (React__default['default'].createElement(MessageActions, { ActionsIcon: ActionsIcon$1, messageWrapperRef: messageWrapperRef })),
                shouldShowReplies && (React__default['default'].createElement("button", { "aria-label": 'Open Thread', className: "str-chat__message-" + theme + "__actions__action str-chat__message-" + theme + "__actions__action--thread", "data-testid": 'thread-action', onClick: handleOpenThread },
                    React__default['default'].createElement(ThreadIcon$1, null))),
                shouldShowReactions && (React__default['default'].createElement("button", { "aria-label": 'Open Reaction Selector', className: "str-chat__message-" + theme + "__actions__action str-chat__message-" + theme + "__actions__action--reactions", "data-testid": 'message-reaction-action', onClick: onReactionListClick },
                    React__default['default'].createElement(ReactionIcon$1, null)))));
        }
        return (React__default['default'].createElement("div", { className: "str-chat__message-" + theme + "__actions", "data-testid": 'message-options' },
            shouldShowReactions && (React__default['default'].createElement("button", { "aria-label": 'Open Reaction Selector', className: "str-chat__message-" + theme + "__actions__action str-chat__message-" + theme + "__actions__action--reactions", "data-testid": 'message-reaction-action', onClick: onReactionListClick },
                React__default['default'].createElement(ReactionIcon$1, null))),
            shouldShowReplies && (React__default['default'].createElement("button", { "aria-label": 'Open Thread', className: "str-chat__message-" + theme + "__actions__action str-chat__message-" + theme + "__actions__action--thread", "data-testid": 'thread-action', onClick: handleOpenThread },
                React__default['default'].createElement(ThreadIcon$1, null))),
            showActionsBox && (React__default['default'].createElement(MessageActions, { ActionsIcon: ActionsIcon$1, messageWrapperRef: messageWrapperRef }))));
    };
    var MessageOptions = React__default['default'].memo(UnMemoizedMessageOptions);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedMessageRepliesCountButton = function (props) {
        var labelPlural = props.labelPlural, labelSingle = props.labelSingle, onClick = props.onClick, _a = props.reply_count, reply_count = _a === void 0 ? 0 : _a;
        var t = useTranslationContext('MessageRepliesCountButton').t;
        if (!reply_count)
            return null;
        var replyCountText = t('replyCount', { count: reply_count });
        if (labelPlural && reply_count > 1) {
            replyCountText = reply_count + " " + labelPlural;
        }
        else if (labelSingle) {
            replyCountText = "1 " + labelSingle;
        }
        return (React__default['default'].createElement("button", { className: 'str-chat__message-replies-count-button', "data-testid": 'replies-count-button', onClick: onClick },
            React__default['default'].createElement(ReplyIcon, null),
            replyCountText));
    };
    var MessageRepliesCountButton = React__default['default'].memo(UnMemoizedMessageRepliesCountButton);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Tooltip = function (props) {
        var children = props.children, rest = __rest(props, ["children"]);
        return (React__default['default'].createElement("div", __assign$2({ className: 'str-chat__tooltip' }, rest), children));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedMessageStatus = function (props) {
        var _a;
        var propAvatar = props.Avatar, _b = props.messageType, messageType = _b === void 0 ? 'simple' : _b;
        var client = useChatContext('MessageStatus').client;
        var contextAvatar = useComponentContext('MessageStatus').Avatar;
        var _c = useMessageContext('MessageStatus'), isMyMessage = _c.isMyMessage, lastReceivedId = _c.lastReceivedId, message = _c.message, readBy = _c.readBy, threadList = _c.threadList;
        var t = useTranslationContext('MessageStatus').t;
        var Avatar$1 = propAvatar || contextAvatar || Avatar;
        if (!isMyMessage() || message.type === 'error') {
            return null;
        }
        var justReadByMe = (readBy === null || readBy === void 0 ? void 0 : readBy.length) === 1 && readBy[0].id === ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);
        if (message.status === 'sending') {
            return (React__default['default'].createElement("span", { className: "str-chat__message-" + messageType + "-status", "data-testid": 'message-status-sending' },
                React__default['default'].createElement(Tooltip, null, t('Sending...')),
                React__default['default'].createElement(LoadingIndicator, null)));
        }
        if ((readBy === null || readBy === void 0 ? void 0 : readBy.length) && !threadList && !justReadByMe) {
            var lastReadUser = readBy.filter(function (item) { var _a; return item.id !== ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id); })[0];
            return (React__default['default'].createElement("span", { className: "str-chat__message-" + messageType + "-status", "data-testid": 'message-status-read-by' },
                React__default['default'].createElement(Tooltip, null, getReadByTooltipText(readBy, t, client)),
                React__default['default'].createElement(Avatar$1, { image: lastReadUser.image, name: lastReadUser.name || lastReadUser.id, size: 15, user: lastReadUser }),
                readBy.length > 2 && (React__default['default'].createElement("span", { className: "str-chat__message-" + messageType + "-status-number", "data-testid": 'message-status-read-by-many' }, readBy.length - 1))));
        }
        if (message.status === 'received' && message.id === lastReceivedId && !threadList) {
            return (React__default['default'].createElement("span", { className: "str-chat__message-" + messageType + "-status", "data-testid": 'message-status-received' },
                React__default['default'].createElement(Tooltip, null, t('Delivered')),
                React__default['default'].createElement(DeliveredCheckIcon, null)));
        }
        return null;
    };
    var MessageStatus = React__default['default'].memo(UnMemoizedMessageStatus);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var handleActionWarning = "Action handler was called, but it is missing one of its required arguments. \nMake sure the ChannelAction and ChannelState contexts are properly set and the hook is initialized with a valid message.";
    function useActionHandler(message) {
        var _this = this;
        var _a = useChannelActionContext('useActionHandler'), removeMessage = _a.removeMessage, updateMessage = _a.updateMessage;
        var channel = useChannelStateContext('useActionHandler').channel;
        return function (dataOrName, value, event) { return __awaiter$1(_this, void 0, void 0, function () {
            var messageID, formData, data;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (event)
                            event.preventDefault();
                        if (!message || !updateMessage || !removeMessage || !channel) {
                            console.warn(handleActionWarning);
                            return [2 /*return*/];
                        }
                        messageID = message.id;
                        formData = {};
                        // deprecated: value&name should be removed in favor of data obj
                        if (typeof dataOrName === 'string') {
                            formData[dataOrName] = value;
                        }
                        else {
                            formData = __assign$2({}, dataOrName);
                        }
                        if (!messageID) return [3 /*break*/, 2];
                        return [4 /*yield*/, channel.sendAction(messageID, formData)];
                    case 1:
                        data = _a.sent();
                        if (data === null || data === void 0 ? void 0 : data.message) {
                            updateMessage(data.message);
                        }
                        else {
                            removeMessage(message);
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var getDeviceWidth = function (width) {
        if (width < 768)
            return { device: 'mobile', width: width };
        if (width < 1024)
            return { device: 'tablet', width: width };
        return { device: 'full', width: width };
    };
    var useBreakpoint = function () {
        var _a = React.useState(getDeviceWidth(window.innerWidth)), breakpoint = _a[0], setBreakpoint = _a[1];
        React.useEffect(function () {
            var getInnerWidth = lodash_throttle(function () { return setBreakpoint(getDeviceWidth(window.innerWidth)); }, 200);
            window.addEventListener('resize', getInnerWidth);
            return function () { return window.removeEventListener('resize', getInnerWidth); };
        }, []);
        return breakpoint;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useDeleteHandler = function (message, notifications) {
        if (notifications === void 0) { notifications = {}; }
        var getErrorNotification = notifications.getErrorNotification, notify = notifications.notify;
        var updateMessage = useChannelActionContext('useDeleteHandler').updateMessage;
        var client = useChatContext('useDeleteHandler').client;
        var t = useTranslationContext('useDeleteHandler').t;
        return function (event) { return __awaiter$1(void 0, void 0, void 0, function () {
            var data, errorMessage;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        event.preventDefault();
                        if (!(message === null || message === void 0 ? void 0 : message.id) || !client || !updateMessage) {
                            return [2 /*return*/];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.deleteMessage(message.id)];
                    case 2:
                        data = _a.sent();
                        updateMessage(data.message);
                        return [3 /*break*/, 4];
                    case 3:
                        _a.sent();
                        errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
                        if (notify)
                            notify(errorMessage || t('Error deleting message'), 'error');
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useEditHandler = function (customInitialState, customSetEditing, customClearEditingHandler) {
        if (customInitialState === void 0) { customInitialState = false; }
        var _a = React.useState(customInitialState), editing = _a[0], setEditing = _a[1];
        var setEdit = customSetEditing ||
            (function (event) {
                if (event === null || event === void 0 ? void 0 : event.preventDefault) {
                    event.preventDefault();
                }
                setEditing(true);
            });
        var clearEdit = customClearEditingHandler ||
            (function (event) {
                if (event === null || event === void 0 ? void 0 : event.preventDefault) {
                    event.preventDefault();
                }
                setEditing(false);
            });
        return { clearEdit: clearEdit, editing: editing, setEdit: setEdit };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var missingUseFlagHandlerParameterWarning = 'useFlagHandler was called but it is missing one or more necessary parameters.';
    var useFlagHandler = function (message, notifications) {
        if (notifications === void 0) { notifications = {}; }
        var client = useChatContext('useFlagHandler').client;
        var t = useTranslationContext('useFlagHandler').t;
        return function (event) { return __awaiter$1(void 0, void 0, void 0, function () {
            var getErrorNotification, getSuccessNotification, notify, successMessage, errorMessage;
            var _a;
            return __generator$1(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        event.preventDefault();
                        getErrorNotification = notifications.getErrorNotification, getSuccessNotification = notifications.getSuccessNotification, notify = notifications.notify;
                        if (!client || !t || !notify || !(message === null || message === void 0 ? void 0 : message.id)) {
                            console.warn(missingUseFlagHandlerParameterWarning);
                            return [2 /*return*/];
                        }
                        if ((_a = client.user) === null || _a === void 0 ? void 0 : _a.banned) {
                            return [2 /*return*/, notify(t('Error adding flag'), 'error')];
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.flagMessage(message.id)];
                    case 2:
                        _b.sent();
                        successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message]);
                        notify(successMessage || t('Message has been successfully flagged'), 'success');
                        return [3 /*break*/, 4];
                    case 3:
                        _b.sent();
                        errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
                        notify(errorMessage || t('Error adding flag'), 'error');
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function createEventHandler(fn, message) {
        return function (event) {
            var _a;
            if (typeof fn !== 'function' || !((_a = message === null || message === void 0 ? void 0 : message.mentioned_users) === null || _a === void 0 ? void 0 : _a.length)) {
                return;
            }
            fn(event, message.mentioned_users);
        };
    }
    var useMentionsHandler = function (message, customMentionHandler) {
        var _a = useChannelActionContext('useMentionsHandler'), contextOnMentionsClick = _a.onMentionsClick, contextOnMentionsHover = _a.onMentionsHover;
        var onMentionsClick = (customMentionHandler === null || customMentionHandler === void 0 ? void 0 : customMentionHandler.onMentionsClick) || contextOnMentionsClick || (function () { return null; });
        var onMentionsHover = (customMentionHandler === null || customMentionHandler === void 0 ? void 0 : customMentionHandler.onMentionsHover) || contextOnMentionsHover || (function () { return null; });
        return {
            onMentionsClick: createEventHandler(onMentionsClick, message),
            onMentionsHover: createEventHandler(onMentionsHover, message),
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useMobilePress = function () {
        var _a = React.useState(null), targetMessage = _a[0], setTargetMessage = _a[1];
        var breakpoint = useBreakpoint();
        var handleMobilePress = function (event) {
            if (event.target instanceof HTMLElement && breakpoint.device === 'mobile') {
                var closestMessage = event.target.closest('.str-chat__message-simple');
                if (!closestMessage)
                    return;
                setTargetMessage(closestMessage);
                if (closestMessage.classList.contains('mobile-press')) {
                    closestMessage.classList.remove('mobile-press');
                }
                else {
                    closestMessage.classList.add('mobile-press');
                }
            }
        };
        React.useEffect(function () {
            function handleClick(event) {
                var isClickInside = targetMessage === null || targetMessage === void 0 ? void 0 : targetMessage.contains(event.target);
                if (!isClickInside && targetMessage) {
                    targetMessage.classList.remove('mobile-press');
                }
            }
            if (breakpoint.device === 'mobile') {
                document.addEventListener('click', handleClick);
            }
            return function () { return document.removeEventListener('click', handleClick); };
        }, [breakpoint, targetMessage]);
        return { handleMobilePress: handleMobilePress };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var missingUseMuteHandlerParamsWarning = 'useMuteHandler was called but it is missing one or more necessary parameter.';
    var useMuteHandler = function (message, notifications) {
        if (notifications === void 0) { notifications = {}; }
        var mutes = useChannelStateContext('useMuteHandler').mutes;
        var client = useChatContext('useMuteHandler').client;
        var t = useTranslationContext('useMuteHandler').t;
        return function (event) { return __awaiter$1(void 0, void 0, void 0, function () {
            var getErrorNotification, getSuccessNotification, notify, successMessage, errorMessage, fallbackMessage, successMessage, errorMessage;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        event.preventDefault();
                        getErrorNotification = notifications.getErrorNotification, getSuccessNotification = notifications.getSuccessNotification, notify = notifications.notify;
                        if (!t || !(message === null || message === void 0 ? void 0 : message.user) || !notify || !client) {
                            console.warn(missingUseMuteHandlerParamsWarning);
                            return [2 /*return*/];
                        }
                        if (!!isUserMuted(message, mutes)) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.muteUser(message.user.id)];
                    case 2:
                        _a.sent();
                        successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message.user]);
                        notify(successMessage ||
                            t("{{ user }} has been muted", {
                                user: message.user.name || message.user.id,
                            }), 'success');
                        return [3 /*break*/, 4];
                    case 3:
                        _a.sent();
                        errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user]);
                        notify(errorMessage || t('Error muting a user ...'), 'error');
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 8];
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, client.unmuteUser(message.user.id)];
                    case 6:
                        _a.sent();
                        fallbackMessage = t("{{ user }} has been unmuted", {
                            user: message.user.name || message.user.id,
                        });
                        successMessage = (getSuccessNotification &&
                            validateAndGetMessage(getSuccessNotification, [message.user])) ||
                            fallbackMessage;
                        if (typeof successMessage === 'string') {
                            notify(successMessage, 'success');
                        }
                        return [3 /*break*/, 8];
                    case 7:
                        _a.sent();
                        errorMessage = (getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user])) ||
                            t('Error unmuting a user ...');
                        if (typeof errorMessage === 'string') {
                            notify(errorMessage, 'error');
                        }
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        }); };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useOpenThreadHandler = function (message, customOpenThread) {
        var channelOpenThread = useChannelActionContext('useOpenThreadHandler').openThread;
        var openThread = customOpenThread || channelOpenThread;
        return function (event) {
            if (!openThread || !message) {
                console.warn('Open thread handler was called but it is missing one of its parameters');
                return;
            }
            openThread(message, event);
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var usePinHandler = function (message, 
    // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release
    _permissions, // eslint-disable-line
    notifications) {
        if (notifications === void 0) { notifications = {}; }
        var getErrorNotification = notifications.getErrorNotification, notify = notifications.notify;
        var updateMessage = useChannelActionContext('usePinHandler').updateMessage;
        var _a = useChannelStateContext('usePinHandler').channelCapabilities, channelCapabilities = _a === void 0 ? {} : _a;
        var client = useChatContext('usePinHandler').client;
        var t = useTranslationContext('usePinHandler').t;
        var canPin = !!channelCapabilities['pin-message'];
        var handlePin = function (event) { return __awaiter$1(void 0, void 0, void 0, function () {
            var optimisticMessage, messageResponse, errorMessage, optimisticMessage, messageResponse, errorMessage;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        event.preventDefault();
                        if (!message)
                            return [2 /*return*/];
                        if (!!message.pinned) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        optimisticMessage = __assign$2(__assign$2({}, message), { pinned: true, pinned_at: new Date(), pinned_by: client.user });
                        updateMessage(optimisticMessage);
                        return [4 /*yield*/, client.pinMessage(message)];
                    case 2:
                        messageResponse = _a.sent();
                        updateMessage(messageResponse.message);
                        return [3 /*break*/, 4];
                    case 3:
                        _a.sent();
                        errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
                        if (notify)
                            notify(errorMessage || t('Error pinning message'), 'error');
                        updateMessage(message);
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 8];
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        optimisticMessage = __assign$2(__assign$2({}, message), { pin_expires: null, pinned: false, pinned_at: null, pinned_by: null });
                        updateMessage(optimisticMessage);
                        return [4 /*yield*/, client.unpinMessage(message)];
                    case 6:
                        messageResponse = _a.sent();
                        updateMessage(messageResponse.message);
                        return [3 /*break*/, 8];
                    case 7:
                        _a.sent();
                        errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
                        if (notify)
                            notify(errorMessage || t('Error removing message pin'), 'error');
                        updateMessage(message);
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        }); };
        return { canPin: canPin, handlePin: handlePin };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var reactionHandlerWarning = "Reaction handler was called, but it is missing one of its required arguments.\nMake sure the ChannelAction and ChannelState contexts are properly set and the hook is initialized with a valid message.";
    var useReactionHandler = function (message) {
        var updateMessage = useChannelActionContext('useReactionHandler').updateMessage;
        var channel = useChannelStateContext('useReactionHandler').channel;
        var client = useChatContext('useReactionHandler').client;
        var createMessagePreview = React.useCallback(function (add, reaction, message) {
            var _a, _b;
            var newReactionCounts = (message === null || message === void 0 ? void 0 : message.reaction_counts) || {};
            var reactionType = reaction.type;
            var hasReaction = !!newReactionCounts[reactionType];
            if (add) {
                newReactionCounts[reactionType] = hasReaction ? newReactionCounts[reactionType] + 1 : 1;
            }
            else {
                if (hasReaction && newReactionCounts[reactionType] > 1) {
                    newReactionCounts[reactionType]--;
                }
                else {
                    delete newReactionCounts[reactionType];
                }
            }
            var newReactions = add
                ? __spreadArray([reaction], ((message === null || message === void 0 ? void 0 : message.latest_reactions) || [])) : (_a = message.latest_reactions) === null || _a === void 0 ? void 0 : _a.filter(function (item) { return !(item.type === reaction.type && item.user_id === reaction.user_id); });
            var newOwnReactions = add
                ? __spreadArray([reaction], ((message === null || message === void 0 ? void 0 : message.own_reactions) || [])) : (_b = message === null || message === void 0 ? void 0 : message.own_reactions) === null || _b === void 0 ? void 0 : _b.filter(function (item) { return item.type !== reaction.type; });
            return __assign$2(__assign$2({}, message), { latest_reactions: newReactions || message.latest_reactions, own_reactions: newOwnReactions, reaction_counts: newReactionCounts, reaction_scores: newReactionCounts });
        }, [client.user, client.userID]);
        var creatReactionPreview = function (type) {
            var _a;
            return ({
                message_id: message === null || message === void 0 ? void 0 : message.id,
                score: 1,
                type: type,
                user: client.user,
                user_id: (_a = client.user) === null || _a === void 0 ? void 0 : _a.id,
            });
        };
        var toggleReaction = lodash_throttle(function (id, type, add) { return __awaiter$1(void 0, void 0, void 0, function () {
            var newReaction, tempMessage, messageResponse, _a;
            var _b;
            return __generator$1(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!message || ((_b = channel.data) === null || _b === void 0 ? void 0 : _b.frozen))
                            return [2 /*return*/];
                        newReaction = creatReactionPreview(type);
                        tempMessage = createMessagePreview(add, newReaction, message);
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 6, , 7]);
                        updateMessage(tempMessage);
                        if (!add) return [3 /*break*/, 3];
                        return [4 /*yield*/, channel.sendReaction(id, { type: type })];
                    case 2:
                        _a = _c.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, channel.deleteReaction(id, type)];
                    case 4:
                        _a = _c.sent();
                        _c.label = 5;
                    case 5:
                        messageResponse = _a;
                        updateMessage(messageResponse.message);
                        return [3 /*break*/, 7];
                    case 6:
                        _c.sent();
                        // revert to the original message if the API call fails
                        updateMessage(message);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        }); }, 1000);
        return function (reactionType, event) { return __awaiter$1(void 0, void 0, void 0, function () {
            var userExistingReaction, error_2;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (event === null || event === void 0 ? void 0 : event.preventDefault) {
                            event.preventDefault();
                        }
                        if (!message) {
                            return [2 /*return*/, console.warn(reactionHandlerWarning)];
                        }
                        userExistingReaction = null;
                        if (message.own_reactions) {
                            message.own_reactions.forEach(function (reaction) {
                                // own user should only ever contain the current user id
                                // just in case we check to prevent bugs with message updates from breaking reactions
                                if (reaction.user && client.userID === reaction.user.id && reaction.type === reactionType) {
                                    userExistingReaction = reaction;
                                }
                                else if (reaction.user && client.userID !== reaction.user.id) {
                                    console.warn("message.own_reactions contained reactions from a different user, this indicates a bug");
                                }
                            });
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        if (!userExistingReaction) return [3 /*break*/, 3];
                        return [4 /*yield*/, toggleReaction(message.id, userExistingReaction.type, false)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, toggleReaction(message.id, reactionType, true)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        error_2 = _a.sent();
                        console.log({ error: error_2 });
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        }); };
    };
    var useReactionClick = function (message, reactionSelectorRef, messageWrapperRef, closeReactionSelectorOnClick) {
        var _a;
        var _b = useChannelStateContext('useReactionClick'), channel = _b.channel, _c = _b.channelCapabilities, channelCapabilities = _c === void 0 ? {} : _c, channelConfig = _b.channelConfig;
        var _d = React.useState(false), showDetailedReactions = _d[0], setShowDetailedReactions = _d[1];
        var hasListener = React.useRef(false);
        var isFrozen = !!((_a = channel.data) === null || _a === void 0 ? void 0 : _a.frozen);
        var isReactionEnabled = ((channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.reactions) !== false && channelCapabilities['send-reaction']) || isFrozen;
        var messageDeleted = !!(message === null || message === void 0 ? void 0 : message.deleted_at);
        var closeDetailedReactions = React.useCallback(function (event) {
            var _a;
            if (event.target instanceof HTMLElement &&
                ((_a = reactionSelectorRef === null || reactionSelectorRef === void 0 ? void 0 : reactionSelectorRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target)) &&
                !closeReactionSelectorOnClick) {
                return;
            }
            setShowDetailedReactions(false);
        }, [setShowDetailedReactions, reactionSelectorRef]);
        React.useEffect(function () {
            var messageWrapper = messageWrapperRef === null || messageWrapperRef === void 0 ? void 0 : messageWrapperRef.current;
            if (showDetailedReactions && !hasListener.current) {
                hasListener.current = true;
                document.addEventListener('click', closeDetailedReactions);
                if (messageWrapper) {
                    messageWrapper.addEventListener('mouseleave', closeDetailedReactions);
                }
            }
            if (!showDetailedReactions && hasListener.current) {
                document.removeEventListener('click', closeDetailedReactions);
                if (messageWrapper) {
                    messageWrapper.removeEventListener('mouseleave', closeDetailedReactions);
                }
                hasListener.current = false;
            }
            return function () {
                if (hasListener.current) {
                    document.removeEventListener('click', closeDetailedReactions);
                    if (messageWrapper) {
                        messageWrapper.removeEventListener('mouseleave', closeDetailedReactions);
                    }
                    hasListener.current = false;
                }
            };
        }, [showDetailedReactions, closeDetailedReactions, messageWrapperRef]);
        React.useEffect(function () {
            var messageWrapper = messageWrapperRef === null || messageWrapperRef === void 0 ? void 0 : messageWrapperRef.current;
            if (messageDeleted && hasListener.current) {
                document.removeEventListener('click', closeDetailedReactions);
                if (messageWrapper) {
                    messageWrapper.removeEventListener('mouseleave', closeDetailedReactions);
                }
                hasListener.current = false;
            }
        }, [messageDeleted, closeDetailedReactions, messageWrapperRef]);
        var onReactionListClick = function (event) {
            if (event === null || event === void 0 ? void 0 : event.stopPropagation) {
                event.stopPropagation();
            }
            setShowDetailedReactions(true);
        };
        return {
            isReactionEnabled: isReactionEnabled,
            onReactionListClick: onReactionListClick,
            showDetailedReactions: showDetailedReactions,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useRetryHandler = function (customRetrySendMessage) {
        var contextRetrySendMessage = useChannelActionContext('useRetryHandler').retrySendMessage;
        var retrySendMessage = customRetrySendMessage || contextRetrySendMessage;
        return function (message) { return __awaiter$1(void 0, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!message) return [3 /*break*/, 2];
                        return [4 /*yield*/, retrySendMessage(message)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useUserHandler = function (message, eventHandlers) { return ({
        onUserClick: function (event) {
            if (typeof (eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.onUserClickHandler) !== 'function' || !(message === null || message === void 0 ? void 0 : message.user)) {
                return;
            }
            eventHandlers.onUserClickHandler(event, message.user);
        },
        onUserHover: function (event) {
            if (typeof (eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.onUserHoverHandler) !== 'function' || !(message === null || message === void 0 ? void 0 : message.user)) {
                return;
            }
            eventHandlers.onUserHoverHandler(event, message.user);
        },
    }); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var QuotedMessage = function () {
        var _a, _b;
        var _c = useComponentContext('QuotedMessage'), Attachment = _c.Attachment, ContextAvatar = _c.Avatar;
        var _d = useMessageContext('QuotedMessage'), isMyMessage = _d.isMyMessage, message = _d.message;
        var userLanguage = useTranslationContext('QuotedMessage').userLanguage;
        var jumpToMessage = useChannelActionContext('QuotedMessage').jumpToMessage;
        var Avatar$1 = ContextAvatar || Avatar;
        var quoted_message = message.quoted_message;
        if (!quoted_message)
            return null;
        var quotedMessageText = ((_a = quoted_message.i18n) === null || _a === void 0 ? void 0 : _a[userLanguage + "_text"]) ||
            quoted_message.text;
        // @ts-expect-error
        var quotedMessageAttachment = quoted_message.attachments.length
            ? // @ts-expect-error
                quoted_message.attachments[0]
            : null;
        if (!quotedMessageText && !quotedMessageAttachment)
            return null;
        return (React__default['default'].createElement(React__default['default'].Fragment, null,
            React__default['default'].createElement("div", { className: "" + (isMyMessage() ? 'quoted-message mine' : 'quoted-message'), onClick: function () { return jumpToMessage(quoted_message.id); } },
                quoted_message.user && (React__default['default'].createElement(Avatar$1, { image: quoted_message.user.image, name: quoted_message.user.name || quoted_message.user.id, size: 20, user: quoted_message.user })),
                React__default['default'].createElement("div", { className: 'quoted-message-inner' },
                    quotedMessageAttachment && React__default['default'].createElement(Attachment, { attachments: [quotedMessageAttachment] }),
                    React__default['default'].createElement("div", null, quotedMessageText))),
            ((_b = message.attachments) === null || _b === void 0 ? void 0 : _b.length) && message.quoted_message ? (React__default['default'].createElement(Attachment, { attachments: message.attachments })) : null));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedMessageTextComponent = function (props) {
        var _a;
        var customInnerClass = props.customInnerClass, _b = props.customWrapperClass, customWrapperClass = _b === void 0 ? '' : _b, propMessage = props.message, _c = props.theme, theme = _c === void 0 ? 'simple' : _c;
        var _d = useComponentContext('MessageText').QuotedMessage, QuotedMessage$1 = _d === void 0 ? QuotedMessage : _d;
        var _e = useMessageContext('MessageText'), contextMessage = _e.message, onMentionsClickMessage = _e.onMentionsClickMessage, onMentionsHoverMessage = _e.onMentionsHoverMessage, _f = _e.renderText, renderText$1 = _f === void 0 ? renderText : _f, unsafeHTML = _e.unsafeHTML;
        var _g = useTranslationContext('MessageText'), t = _g.t, userLanguage = _g.userLanguage;
        var handleMobilePress = useMobilePress().handleMobilePress;
        var message = propMessage || contextMessage;
        var hasAttachment = messageHasAttachments(message);
        var messageTextToRender = ((_a = message.i18n) === null || _a === void 0 ? void 0 : _a[userLanguage + "_text"]) || message.text;
        var messageText = React.useMemo(function () { return renderText$1(messageTextToRender, message.mentioned_users); }, [
            message.mentioned_users,
            messageTextToRender,
        ]);
        var wrapperClass = customWrapperClass || 'str-chat__message-text';
        var innerClass = customInnerClass || "str-chat__message-text-inner str-chat__message-" + theme + "-text-inner";
        if (!messageTextToRender && !message.quoted_message)
            return null;
        return (React__default['default'].createElement("div", { className: wrapperClass },
            React__default['default'].createElement("div", { className: ("\n          " + innerClass + "\n          " + (hasAttachment ? " str-chat__message-" + theme + "-text-inner--has-attachment" : '') + "\n          " + (isOnlyEmojis(message.text) && !message.quoted_message
                    ? " str-chat__message-" + theme + "-text-inner--is-emoji"
                    : '') + "\n        ").trim(), "data-testid": 'message-text-inner-wrapper', onClick: onMentionsClickMessage, onMouseOver: onMentionsHoverMessage },
                message.quoted_message && React__default['default'].createElement(QuotedMessage$1, null),
                message.type === 'error' && (React__default['default'].createElement("div", { className: "str-chat__" + theme + "-message--error-message" }, t('Error · Unsent'))),
                message.status === 'failed' && (React__default['default'].createElement("div", { className: "str-chat__" + theme + "-message--error-message" }, message.errorStatusCode !== 403
                    ? t('Message Failed · Click to try again')
                    : t('Message Failed · Unauthorized'))),
                unsafeHTML && message.html ? (React__default['default'].createElement("div", { dangerouslySetInnerHTML: { __html: message.html } })) : (React__default['default'].createElement("div", { onClick: handleMobilePress }, messageText)))));
    };
    var MessageText = React__default['default'].memo(UnMemoizedMessageTextComponent);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var interopRequireDefault = createCommonjsModule$1(function (module) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    unwrapExports(interopRequireDefault);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var data = createCommonjsModule$1(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.uncompress = exports.compress = exports.buildSearch = void 0;
    var mapping = {
      name: 'a',
      unified: 'b',
      non_qualified: 'c',
      has_img_apple: 'd',
      has_img_google: 'e',
      has_img_twitter: 'f',
      has_img_facebook: 'h',
      keywords: 'j',
      sheet: 'k',
      emoticons: 'l',
      text: 'm',
      short_names: 'n',
      added_in: 'o'
    };

    var buildSearch = function buildSearch(emoji) {
      var search = [];

      var addToSearch = function addToSearch(strings, split) {
        if (!strings) {
          return;
        }
        (Array.isArray(strings) ? strings : [strings]).forEach(function (string) {
          (split ? string.split(/[-|_|\s]+/) : [string]).forEach(function (s) {
            s = s.toLowerCase();

            if (search.indexOf(s) == -1) {
              search.push(s);
            }
          });
        });
      };

      addToSearch(emoji.short_names, true);
      addToSearch(emoji.name, true);
      addToSearch(emoji.keywords, false);
      addToSearch(emoji.emoticons, false);
      return search.join(',');
    };

    exports.buildSearch = buildSearch;

    var compress = function compress(emoji) {
      emoji.short_names = emoji.short_names.filter(function (short_name) {
        return short_name !== emoji.short_name;
      });
      delete emoji.short_name;
      emoji.sheet = [emoji.sheet_x, emoji.sheet_y];
      delete emoji.sheet_x;
      delete emoji.sheet_y;
      emoji.added_in = parseInt(emoji.added_in);

      if (emoji.added_in === 6) {
        delete emoji.added_in;
      }

      for (var key in mapping) {
        emoji[mapping[key]] = emoji[key];
        delete emoji[key];
      }

      for (var _key in emoji) {
        var value = emoji[_key];

        if (Array.isArray(value) && !value.length) {
          delete emoji[_key];
        } else if (typeof value === 'string' && !value.length) {
          delete emoji[_key];
        } else if (value === null) {
          delete emoji[_key];
        }
      }
    };

    exports.compress = compress;

    var uncompress = function uncompress(data) {
      data.compressed = false;

      for (var id in data.emojis) {
        var emoji = data.emojis[id];

        for (var key in mapping) {
          emoji[key] = emoji[mapping[key]];
          delete emoji[mapping[key]];
        }

        if (!emoji.short_names) emoji.short_names = [];
        emoji.short_names.unshift(id);
        emoji.sheet_x = emoji.sheet[0];
        emoji.sheet_y = emoji.sheet[1];
        delete emoji.sheet;
        if (!emoji.text) emoji.text = '';
        if (!emoji.added_in) emoji.added_in = 6;
        emoji.added_in = emoji.added_in.toFixed(1);
        emoji.search = buildSearch(emoji);
      }
    };

    exports.uncompress = uncompress;
    });

    unwrapExports(data);
    data.uncompress;
    data.compress;
    data.buildSearch;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var stringFromCodePoint = createCommonjsModule$1(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _String = String;

    var _default = _String.fromCodePoint || function stringFromCodePoint() {
      var MAX_SIZE = 0x4000;
      var codeUnits = [];
      var highSurrogate;
      var lowSurrogate;
      var index = -1;
      var length = arguments.length;

      if (!length) {
        return '';
      }

      var result = '';

      while (++index < length) {
        var codePoint = Number(arguments[index]);

        if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
        codePoint < 0 || // not a valid Unicode code point
        codePoint > 0x10ffff || // not a valid Unicode code point
        Math.floor(codePoint) != codePoint // not an integer
        ) {
            throw RangeError('Invalid code point: ' + codePoint);
          }

        if (codePoint <= 0xffff) {
          // BMP code point
          codeUnits.push(codePoint);
        } else {
          // Astral code point; split in surrogate halves
          // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
          codePoint -= 0x10000;
          highSurrogate = (codePoint >> 10) + 0xd800;
          lowSurrogate = codePoint % 0x400 + 0xdc00;
          codeUnits.push(highSurrogate, lowSurrogate);
        }

        if (index + 1 === length || codeUnits.length > MAX_SIZE) {
          result += String.fromCharCode.apply(null, codeUnits);
          codeUnits.length = 0;
        }
      }

      return result;
    };

    exports["default"] = _default;
    });

    unwrapExports(stringFromCodePoint);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var utils = createCommonjsModule$1(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getData = getData;
    exports.getEmojiDataFromNative = getEmojiDataFromNative;
    exports.getSanitizedData = getSanitizedData;
    exports.uniq = uniq;
    exports.intersect = intersect;
    exports.deepMerge = deepMerge;
    exports.unifiedToNative = unifiedToNative;
    exports.measureScrollbar = measureScrollbar;
    exports.throttleIdleTask = throttleIdleTask;

    var _typeof2 = interopRequireDefault(_typeof_1);



    var _stringFromCodePoint = interopRequireDefault(stringFromCodePoint);

    var COLONS_REGEX = /^(?:\:([^\:]+)\:)(?:\:skin-tone-(\d)\:)?$/;
    var SKINS = ['1F3FA', '1F3FB', '1F3FC', '1F3FD', '1F3FE', '1F3FF'];

    function unifiedToNative(unified) {
      var unicodes = unified.split('-'),
          codePoints = unicodes.map(function (u) {
        return "0x".concat(u);
      });
      return _stringFromCodePoint["default"].apply(null, codePoints);
    }

    function sanitize(emoji) {
      var name = emoji.name,
          short_names = emoji.short_names,
          skin_tone = emoji.skin_tone,
          skin_variations = emoji.skin_variations,
          emoticons = emoji.emoticons,
          unified = emoji.unified,
          custom = emoji.custom,
          customCategory = emoji.customCategory,
          imageUrl = emoji.imageUrl,
          id = emoji.id || short_names[0],
          colons = ":".concat(id, ":");

      if (custom) {
        return {
          id: id,
          name: name,
          short_names: short_names,
          colons: colons,
          emoticons: emoticons,
          custom: custom,
          customCategory: customCategory,
          imageUrl: imageUrl
        };
      }

      if (skin_tone) {
        colons += ":skin-tone-".concat(skin_tone, ":");
      }

      return {
        id: id,
        name: name,
        short_names: short_names,
        colons: colons,
        emoticons: emoticons,
        unified: unified.toLowerCase(),
        skin: skin_tone || (skin_variations ? 1 : null),
        "native": unifiedToNative(unified)
      };
    }

    function getSanitizedData() {
      return sanitize(getData.apply(void 0, arguments));
    }

    function getData(emoji, skin, set, data$1) {
      var emojiData = {};

      if (typeof emoji == 'string') {
        var matches = emoji.match(COLONS_REGEX);

        if (matches) {
          emoji = matches[1];

          if (matches[2]) {
            skin = parseInt(matches[2], 10);
          }
        }

        if (data$1.aliases.hasOwnProperty(emoji)) {
          emoji = data$1.aliases[emoji];
        }

        if (data$1.emojis.hasOwnProperty(emoji)) {
          emojiData = data$1.emojis[emoji];
        } else {
          return null;
        }
      } else if (emoji.id) {
        if (data$1.aliases.hasOwnProperty(emoji.id)) {
          emoji.id = data$1.aliases[emoji.id];
        }

        if (data$1.emojis.hasOwnProperty(emoji.id)) {
          emojiData = data$1.emojis[emoji.id];
          skin || (skin = emoji.skin);
        }
      }

      if (!Object.keys(emojiData).length) {
        emojiData = emoji;
        emojiData.custom = true;

        if (!emojiData.search) {
          emojiData.search = (0, data.buildSearch)(emoji);
        }
      }

      emojiData.emoticons || (emojiData.emoticons = []);
      emojiData.variations || (emojiData.variations = []);

      if (emojiData.skin_variations && skin > 1) {
        emojiData = JSON.parse(JSON.stringify(emojiData));
        var skinKey = SKINS[skin - 1],
            variationData = emojiData.skin_variations[skinKey];

        if (variationData) {
          if (!variationData.variations && emojiData.variations) {
            delete emojiData.variations;
          }

          if (set && (variationData["has_img_".concat(set)] == undefined || variationData["has_img_".concat(set)]) || !set) {
            emojiData.skin_tone = skin;

            for (var k in variationData) {
              var v = variationData[k];
              emojiData[k] = v;
            }
          }
        }
      }

      if (emojiData.variations && emojiData.variations.length) {
        emojiData = JSON.parse(JSON.stringify(emojiData));
        emojiData.unified = emojiData.variations.shift();
      }

      return emojiData;
    }

    function getEmojiDataFromNative(nativeString, set, data$1) {
      if (data$1.compressed) {
        (0, data.uncompress)(data$1);
      }

      var skinTones = ['🏻', '🏼', '🏽', '🏾', '🏿'];
      var skinCodes = ['1F3FB', '1F3FC', '1F3FD', '1F3FE', '1F3FF'];
      var skin;
      var skinCode;
      var baseNativeString = nativeString;
      skinTones.forEach(function (skinTone, skinToneIndex) {
        if (nativeString.indexOf(skinTone) > 0) {
          skin = skinToneIndex + 2;
          skinCode = skinCodes[skinToneIndex];
        }
      });
      var emojiData;

      for (var id in data$1.emojis) {
        var emoji = data$1.emojis[id];
        var emojiUnified = emoji.unified;

        if (emoji.variations && emoji.variations.length) {
          emojiUnified = emoji.variations.shift();
        }

        if (skin && emoji.skin_variations && emoji.skin_variations[skinCode]) {
          emojiUnified = emoji.skin_variations[skinCode].unified;
        }

        if (unifiedToNative(emojiUnified) === baseNativeString) emojiData = emoji;
      }

      if (!emojiData) {
        return null;
      }

      emojiData.id = emojiData.short_names[0];
      return getSanitizedData(emojiData, skin, set, data$1);
    }

    function uniq(arr) {
      return arr.reduce(function (acc, item) {
        if (acc.indexOf(item) === -1) {
          acc.push(item);
        }

        return acc;
      }, []);
    }

    function intersect(a, b) {
      var uniqA = uniq(a);
      var uniqB = uniq(b);
      return uniqA.filter(function (item) {
        return uniqB.indexOf(item) >= 0;
      });
    }

    function deepMerge(a, b) {
      var o = {};

      for (var key in a) {
        var originalValue = a[key],
            value = originalValue;

        if (b.hasOwnProperty(key)) {
          value = b[key];
        }

        if ((0, _typeof2["default"])(value) === 'object') {
          value = deepMerge(originalValue, value);
        }

        o[key] = value;
      }

      return o;
    } // https://github.com/sonicdoe/measure-scrollbar


    function measureScrollbar() {
      if (typeof document == 'undefined') return 0;
      var div = document.createElement('div');
      div.style.width = '100px';
      div.style.height = '100px';
      div.style.overflow = 'scroll';
      div.style.position = 'absolute';
      div.style.top = '-9999px';
      document.body.appendChild(div);
      var scrollbarWidth = div.offsetWidth - div.clientWidth;
      document.body.removeChild(div);
      return scrollbarWidth;
    } // Use requestIdleCallback() if available, else fall back to setTimeout().
    // Throttle so as not to run too frequently.


    function throttleIdleTask(func) {
      var doIdleTask = typeof requestIdleCallback === 'function' ? requestIdleCallback : setTimeout;
      var running = false;
      return function throttled() {
        if (running) {
          return;
        }

        running = true;
        doIdleTask(function () {
          running = false;
          func();
        });
      };
    }
    });

    unwrapExports(utils);
    utils.getData;
    utils.getEmojiDataFromNative;
    utils.getSanitizedData;
    utils.uniq;
    utils.intersect;
    utils.deepMerge;
    utils.unifiedToNative;
    utils.measureScrollbar;
    utils.throttleIdleTask;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var store = createCommonjsModule$1(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var NAMESPACE = 'emoji-mart';
    var isLocalStorageSupported = typeof window !== 'undefined' && 'localStorage' in window;
    var getter;
    var setter;

    function setHandlers(handlers) {
      handlers || (handlers = {});
      getter = handlers.getter;
      setter = handlers.setter;
    }

    function setNamespace(namespace) {
      NAMESPACE = namespace;
    }

    function update(state) {
      for (var key in state) {
        var value = state[key];
        set(key, value);
      }
    }

    function set(key, value) {
      if (setter) {
        setter(key, value);
      } else {
        if (!isLocalStorageSupported) return;

        try {
          window.localStorage["".concat(NAMESPACE, ".").concat(key)] = JSON.stringify(value);
        } catch (e) {}
      }
    }

    function get(key) {
      if (getter) {
        return getter(key);
      } else {
        if (!isLocalStorageSupported) return;

        try {
          var value = window.localStorage["".concat(NAMESPACE, ".").concat(key)];

          if (value) {
            return JSON.parse(value);
          }
        } catch (e) {
          return;
        }
      }
    }

    var _default = {
      update: update,
      set: set,
      get: get,
      setNamespace: setNamespace,
      setHandlers: setHandlers
    };
    exports["default"] = _default;
    });

    unwrapExports(store);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var nimbleEmojiIndex = createCommonjsModule$1(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _classCallCheck2 = interopRequireDefault(classCallCheck);

    var _createClass2 = interopRequireDefault(createClass);





    var _store = interopRequireDefault(store);

    var NimbleEmojiIndex =
    /*#__PURE__*/
    function () {
      function NimbleEmojiIndex(data$1, set) {
        (0, _classCallCheck2["default"])(this, NimbleEmojiIndex);

        if (data$1.compressed) {
          (0, data.uncompress)(data$1);
        }

        this.data = data$1 || {};
        this.set = set || null;
        this.originalPool = {};
        this.index = {};
        this.emojis = {};
        this.emoticons = {};
        this.customEmojisList = [];
        this.buildIndex();
      }

      (0, _createClass2["default"])(NimbleEmojiIndex, [{
        key: "buildIndex",
        value: function buildIndex() {
          var _this = this;

          var _loop = function _loop(emoji) {
            var emojiData = _this.data.emojis[emoji],
                short_names = emojiData.short_names,
                emoticons = emojiData.emoticons,
                skin_variations = emojiData.skin_variations,
                id = short_names[0];

            if (emoticons) {
              emoticons.forEach(function (emoticon) {
                if (_this.emoticons[emoticon]) {
                  return;
                }

                _this.emoticons[emoticon] = id;
              });
            } // If skin variations include them


            if (skin_variations) {
              _this.emojis[id] = {};

              for (var skinTone = 1; skinTone <= 6; skinTone++) {
                _this.emojis[id][skinTone] = (0, utils.getSanitizedData)({
                  id: id,
                  skin: skinTone
                }, skinTone, _this.set, _this.data);
              }
            } else {
              _this.emojis[id] = (0, utils.getSanitizedData)(id, null, _this.set, _this.data);
            }

            _this.originalPool[id] = emojiData;
          };

          for (var emoji in this.data.emojis) {
            _loop(emoji);
          }
        }
      }, {
        key: "clearCustomEmojis",
        value: function clearCustomEmojis(pool) {
          var _this2 = this;

          this.customEmojisList.forEach(function (emoji) {
            var emojiId = emoji.id || emoji.short_names[0];
            delete pool[emojiId];
            delete _this2.emojis[emojiId];
          });
        }
      }, {
        key: "addCustomToPool",
        value: function addCustomToPool(custom, pool) {
          var _this3 = this;

          if (this.customEmojisList.length) this.clearCustomEmojis(pool);
          custom.forEach(function (emoji) {
            var emojiId = emoji.id || emoji.short_names[0];

            if (emojiId && !pool[emojiId]) {
              pool[emojiId] = (0, utils.getData)(emoji, null, null, _this3.data);
              _this3.emojis[emojiId] = (0, utils.getSanitizedData)(emoji, null, null, _this3.data);
            }
          });
          this.customEmojisList = custom;
          this.index = {};
        }
      }, {
        key: "search",
        value: function search(value) {
          var _this4 = this;

          var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
              emojisToShowFilter = _ref.emojisToShowFilter,
              maxResults = _ref.maxResults,
              include = _ref.include,
              exclude = _ref.exclude,
              _ref$custom = _ref.custom,
              custom = _ref$custom === void 0 ? [] : _ref$custom;

          if (this.customEmojisList != custom) this.addCustomToPool(custom, this.originalPool);
          var skinTone = _store["default"].get('skin') || 1;
          maxResults || (maxResults = 75);
          include || (include = []);
          exclude || (exclude = []);
          var results = null,
              pool = this.originalPool;

          if (value.length) {
            if (value == '-' || value == '-1') {
              return [this.emojis['-1'][skinTone]];
            }

            var values = value.toLowerCase().split(/[\s|,|\-|_]+/),
                allResults = [];

            if (values.length > 2) {
              values = [values[0], values[1]];
            }

            if (include.length || exclude.length) {
              pool = {};
              this.data.categories.forEach(function (category) {
                var isIncluded = include && include.length ? include.indexOf(category.id) > -1 : true;
                var isExcluded = exclude && exclude.length ? exclude.indexOf(category.id) > -1 : false;

                if (!isIncluded || isExcluded) {
                  return;
                }

                category.emojis.forEach(function (emojiId) {
                  return pool[emojiId] = _this4.data.emojis[emojiId];
                });
              });

              if (custom.length) {
                var customIsIncluded = include && include.length ? include.indexOf('custom') > -1 : true;
                var customIsExcluded = exclude && exclude.length ? exclude.indexOf('custom') > -1 : false;

                if (customIsIncluded && !customIsExcluded) {
                  this.addCustomToPool(custom, pool);
                }
              }
            }

            allResults = values.map(function (value) {
              var aPool = pool,
                  aIndex = _this4.index,
                  length = 0;

              for (var charIndex = 0; charIndex < value.length; charIndex++) {
                var _char = value[charIndex];
                length++;
                aIndex[_char] || (aIndex[_char] = {});
                aIndex = aIndex[_char];

                if (!aIndex.results) {
                  (function () {
                    var scores = {};
                    aIndex.results = [];
                    aIndex.pool = {};

                    for (var id in aPool) {
                      var emoji = aPool[id],
                          search = emoji.search,
                          sub = value.substr(0, length),
                          subIndex = search.indexOf(sub);

                      if (subIndex != -1) {
                        var score = subIndex + 1;
                        if (sub == id) score = 0;

                        if (_this4.emojis[id] && _this4.emojis[id][skinTone]) {
                          aIndex.results.push(_this4.emojis[id][skinTone]);
                        } else {
                          aIndex.results.push(_this4.emojis[id]);
                        }

                        aIndex.pool[id] = emoji;
                        scores[id] = score;
                      }
                    }

                    aIndex.results.sort(function (a, b) {
                      var aScore = scores[a.id],
                          bScore = scores[b.id];

                      if (aScore == bScore) {
                        return a.id.localeCompare(b.id);
                      } else {
                        return aScore - bScore;
                      }
                    });
                  })();
                }

                aPool = aIndex.pool;
              }

              return aIndex.results;
            }).filter(function (a) {
              return a;
            });

            if (allResults.length > 1) {
              results = utils.intersect.apply(null, allResults);
            } else if (allResults.length) {
              results = allResults[0];
            } else {
              results = [];
            }
          }

          if (results) {
            if (emojisToShowFilter) {
              results = results.filter(function (result) {
                return emojisToShowFilter(pool[result.id]);
              });
            }

            if (results && results.length > maxResults) {
              results = results.slice(0, maxResults);
            }
          }

          return results;
        }
      }]);
      return NimbleEmojiIndex;
    }();

    exports["default"] = NimbleEmojiIndex;
    });

    var DefaultEmojiIndex = unwrapExports(nimbleEmojiIndex);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DefaultEmoji = React__default['default'].lazy(function () { return __awaiter$1(void 0, void 0, void 0, function () {
        var emoji;
        return __generator$1(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.resolve().then(function () { return nimbleEmoji$2; })];
                case 1:
                    emoji = _a.sent();
                    return [2 /*return*/, { default: emoji.default }];
            }
        });
    }); });
    var DefaultEmojiPicker = React__default['default'].lazy(function () { return __awaiter$1(void 0, void 0, void 0, function () {
        var emojiPicker;
        return __generator$1(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.resolve().then(function () { return nimblePicker$2; })];
                case 1:
                    emojiPicker = _a.sent();
                    return [2 /*return*/, { default: emojiPicker.default }];
            }
        });
    }); });
    var EmojiContext = React__default['default'].createContext(undefined);
    var EmojiProvider = function (_a) {
        var children = _a.children, value = _a.value;
        var _b = value.Emoji, Emoji = _b === void 0 ? DefaultEmoji : _b, emojiConfig = value.emojiConfig, _c = value.EmojiIndex, EmojiIndex = _c === void 0 ? DefaultEmojiIndex : _c, _d = value.EmojiPicker, EmojiPicker = _d === void 0 ? DefaultEmojiPicker : _d;
        var emojiContextValue = {
            Emoji: Emoji,
            emojiConfig: emojiConfig,
            EmojiIndex: EmojiIndex,
            EmojiPicker: EmojiPicker,
        };
        return React__default['default'].createElement(EmojiContext.Provider, { value: emojiContextValue }, children);
    };
    var useEmojiContext = function (componentName) {
        var contextValue = React.useContext(EmojiContext);
        if (!contextValue) {
            console.warn("The useEmojiContext hook was called outside of the EmojiContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the " + componentName + " component.");
            return {};
        }
        return contextValue;
    };
    /**
     * Typescript currently does not support partial inference, so if EmojiContext
     * typing is desired while using the HOC withEmojiContext, the Props for the
     * wrapped component must be provided as the first generic.
     */
    var withEmojiContext = function (Component) {
        var WithEmojiContextComponent = function (props) {
            var componentContext = useEmojiContext();
            return React__default['default'].createElement(Component, __assign$2({}, props, componentContext));
        };
        WithEmojiContextComponent.displayName = (Component.displayName ||
            Component.name ||
            'Component').replace('Base', '');
        return WithEmojiContextComponent;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageInputContext = React.createContext(undefined);
    var MessageInputContextProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default['default'].createElement(MessageInputContext.Provider, { value: value }, children));
    };
    var useMessageInputContext = function (componentName) {
        var contextValue = React.useContext(MessageInputContext);
        if (!contextValue) {
            console.warn("The useMessageInputContext hook was called outside of the MessageInputContext provider. Make sure this hook is called within the MessageInput's UI component. The errored call is located in the " + componentName + " component.");
            return {};
        }
        return contextValue;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var TypingContext = React__default['default'].createContext(undefined);
    var TypingProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default['default'].createElement(TypingContext.Provider, { value: value }, children));
    };
    var useTypingContext = function (componentName) {
        var contextValue = React.useContext(TypingContext);
        if (!contextValue) {
            console.warn("The useTypingContext hook was called outside of the TypingContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the " + componentName + " component.");
            return {};
        }
        return contextValue;
    };
    /**
     * Typescript currently does not support partial inference, so if TypingContext
     * typing is desired while using the HOC withTypingContext, the Props for the
     * wrapped component must be provided as the first generic.
     */
    var withTypingContext = function (Component) {
        var WithTypingContextComponent = function (props) {
            var typingContext = useTypingContext();
            return React__default['default'].createElement(Component, __assign$2({}, props, typingContext));
        };
        WithTypingContextComponent.displayName = (Component.displayName ||
            Component.name ||
            'Component').replace('Base', '');
        return WithTypingContextComponent;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var notValidDateWarning = 'MessageTimestamp was called without a message, or message has invalid created_at date.';
    var noParsingFunctionWarning = 'MessageTimestamp was called but there is no datetime parsing function available';
    function getDateString(_a) {
        var calendar = _a.calendar, format = _a.format, formatDate = _a.formatDate, messageCreatedAt = _a.messageCreatedAt, tDateTimeParser = _a.tDateTimeParser;
        if (!messageCreatedAt ||
            (typeof messageCreatedAt === 'string' && !Date.parse(messageCreatedAt))) {
            console.warn(notValidDateWarning);
            return null;
        }
        if (typeof formatDate === 'function') {
            return formatDate(new Date(messageCreatedAt));
        }
        if (!tDateTimeParser) {
            console.warn(noParsingFunctionWarning);
            return null;
        }
        var parsedTime = tDateTimeParser(messageCreatedAt);
        if (isDayOrMoment(parsedTime)) {
            /**
             * parsedTime.calendar is guaranteed on the type but is only
             * available when a user calls dayjs.extend(calendar)
             */
            return calendar && parsedTime.calendar ? parsedTime.calendar() : parsedTime.format(format);
        }
        if (isDate(parsedTime)) {
            return parsedTime.toDateString();
        }
        if (isNumberOrString(parsedTime)) {
            return parsedTime;
        }
        return null;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var defaultTimestampFormat = 'h:mmA';
    var UnMemoizedMessageTimestamp = function (props) {
        var _a = props.calendar, calendar = _a === void 0 ? false : _a, _b = props.customClass, customClass = _b === void 0 ? '' : _b, _c = props.format, format = _c === void 0 ? defaultTimestampFormat : _c, propMessage = props.message;
        var _d = useMessageContext('MessageTimestamp'), formatDate = _d.formatDate, contextMessage = _d.message;
        var tDateTimeParser = useTranslationContext('MessageTimestamp').tDateTimeParser;
        var message = propMessage || contextMessage;
        var messageCreatedAt = message.created_at && isDate(message.created_at)
            ? message.created_at.toISOString()
            : message.created_at;
        var when = React.useMemo(function () { return getDateString({ calendar: calendar, format: format, formatDate: formatDate, messageCreatedAt: messageCreatedAt, tDateTimeParser: tDateTimeParser }); }, [formatDate, calendar, tDateTimeParser, format, messageCreatedAt]);
        if (!when)
            return null;
        return (React__default['default'].createElement("time", { className: customClass, dateTime: messageCreatedAt, title: messageCreatedAt }, when));
    };
    var MessageTimestamp = React__default['default'].memo(UnMemoizedMessageTimestamp);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var CUSTOM_MESSAGE_TYPE = {
        date: 'message.date',
        intro: 'channel.intro',
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useCommandTrigger = function () {
        var channelConfig = useChannelStateContext('useCommandTrigger').channelConfig;
        var commands = channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.commands;
        return {
            component: CommandItem,
            dataProvider: function (query, text, onReady) {
                if (text.indexOf('/') !== 0 || !commands) {
                    return [];
                }
                var selectedCommands = commands.filter(function (command) { var _a; return ((_a = command.name) === null || _a === void 0 ? void 0 : _a.indexOf(query)) !== -1; });
                // sort alphabetically unless the you're matching the first char
                selectedCommands.sort(function (a, b) {
                    var _a, _b;
                    var nameA = (_a = a.name) === null || _a === void 0 ? void 0 : _a.toLowerCase();
                    var nameB = (_b = b.name) === null || _b === void 0 ? void 0 : _b.toLowerCase();
                    if ((nameA === null || nameA === void 0 ? void 0 : nameA.indexOf(query)) === 0) {
                        nameA = "0" + nameA;
                    }
                    if ((nameB === null || nameB === void 0 ? void 0 : nameB.indexOf(query)) === 0) {
                        nameB = "0" + nameB;
                    }
                    // Should confirm possible null / undefined when TS is fully implemented
                    if (nameA != null && nameB != null) {
                        if (nameA < nameB) {
                            return -1;
                        }
                        if (nameA > nameB) {
                            return 1;
                        }
                    }
                    return 0;
                });
                var result = selectedCommands.slice(0, 10);
                if (onReady)
                    onReady(result.filter(function (result) {
                        return result.name !== undefined;
                    }), query);
                return result;
            },
            output: function (entity) { return ({
                caretPosition: 'next',
                key: entity.name,
                text: "/" + entity.name,
            }); },
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedEmoticonItem = function (props) {
        var entity = props.entity;
        var hasEntity = Object.keys(entity).length;
        var itemParts = entity === null || entity === void 0 ? void 0 : entity.itemNameParts;
        var renderName = function () {
            if (!hasEntity)
                return null;
            return (hasEntity &&
                itemParts.parts.map(function (part, i) {
                    return part.toLowerCase() === itemParts.match.toLowerCase() ? (React__default['default'].createElement("span", { className: 'str-chat__emoji-item--highlight', key: "part-" + i }, part)) : (React__default['default'].createElement("span", { className: 'str-chat__emoji-item--part', key: "part-" + i }, part));
                }));
        };
        return (React__default['default'].createElement("div", { className: 'str-chat__emoji-item' },
            React__default['default'].createElement("span", { className: 'str-chat__emoji-item--entity' }, entity.native),
            React__default['default'].createElement("span", { className: 'str-chat__emoji-item--name' }, renderName())));
    };
    var EmoticonItem = React__default['default'].memo(UnMemoizedEmoticonItem);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useEmojiTrigger = function (emojiIndex) { return ({
        component: EmoticonItem,
        dataProvider: function (query, _, onReady) {
            if (query.length === 0 || query.charAt(0).match(/[^a-zA-Z0-9+-]/)) {
                return [];
            }
            var emojis = (emojiIndex === null || emojiIndex === void 0 ? void 0 : emojiIndex.search(query)) || [];
            // emojiIndex.search sometimes returns undefined values, so filter those out first
            var result = emojis.filter(Boolean).slice(0, 10);
            if (onReady)
                onReady(result, query);
            return result;
        },
        output: function (entity) { return ({
            caretPosition: 'next',
            key: entity.id,
            text: "" + ('native' in entity ? entity.native : ''),
        }); },
    }); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var accentsMap = {
        a: 'á|à|ã|â|À|Á|Ã|Â',
        c: 'ç|Ç',
        e: 'é|è|ê|É|È|Ê',
        i: 'í|ì|î|Í|Ì|Î',
        n: 'ñ|Ñ',
        o: 'ó|ò|ô|ő|õ|Ó|Ò|Ô|Õ',
        u: 'ú|ù|û|ü|Ú|Ù|Û|Ü',
    };
    var removeDiacritics = function (text) {
        if (!text)
            return '';
        return Object.keys(accentsMap).reduce(function (acc, current) { return acc.replace(new RegExp(accentsMap[current], 'g'), current); }, text);
    };
    var calculateLevenshtein = function (query, name) {
        if (query.length === 0)
            return name.length;
        if (name.length === 0)
            return query.length;
        var matrix = [];
        var i;
        for (i = 0; i <= name.length; i++) {
            matrix[i] = [i];
        }
        var j;
        for (j = 0; j <= query.length; j++) {
            matrix[0][j] = j;
        }
        for (i = 1; i <= name.length; i++) {
            for (j = 1; j <= query.length; j++) {
                if (name.charAt(i - 1) === query.charAt(j - 1)) {
                    matrix[i][j] = matrix[i - 1][j - 1];
                }
                else {
                    matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution
                    Math.min(matrix[i][j - 1] + 1, // insertion
                    matrix[i - 1][j] + 1)); // deletion
                }
            }
        }
        return matrix[name.length][query.length];
    };
    var searchLocalUsers = function (params) {
        var ownUserId = params.ownUserId, query = params.query, text = params.text, useMentionsTransliteration = params.useMentionsTransliteration, users = params.users;
        var matchingUsers = users.filter(function (user) {
            if (user.id === ownUserId)
                return false;
            if (!query)
                return true;
            var updatedId = removeDiacritics(user.id).toLowerCase();
            var updatedName = removeDiacritics(user.name).toLowerCase();
            var updatedQuery = removeDiacritics(query).toLowerCase();
            if (useMentionsTransliteration) {
                (function () { return __awaiter$1(void 0, void 0, void 0, function () {
                    var transliterate;
                    return __generator$1(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, Promise.resolve().then(function () { return index_module; })];
                            case 1:
                                transliterate = (_a.sent()).default;
                                updatedName = transliterate(user.name || '').toLowerCase();
                                updatedQuery = transliterate(query).toLowerCase();
                                updatedId = transliterate(user.id).toLowerCase();
                                return [2 /*return*/];
                        }
                    });
                }); })();
            }
            var maxDistance = 3;
            var lastDigits = text.slice(-(maxDistance + 1)).includes('@');
            if (updatedName) {
                var levenshtein_1 = calculateLevenshtein(updatedQuery, updatedName);
                if (updatedName.includes(updatedQuery) || (levenshtein_1 <= maxDistance && lastDigits)) {
                    return true;
                }
            }
            var levenshtein = calculateLevenshtein(updatedQuery, updatedId);
            return updatedId.includes(updatedQuery) || (levenshtein <= maxDistance && lastDigits);
        });
        return matchingUsers;
    };
    var checkUploadPermissions = function (params) { return __awaiter$1(void 0, void 0, void 0, function () {
        var addNotification, file, getAppSettings, t, uploadType, appSettings, _a, allowed_file_extensions, allowed_mime_types, blocked_file_extensions, blocked_mime_types, sendErrorNotification, allowed, blocked, allowed, blocked;
        var _b, _c;
        return __generator$1(this, function (_d) {
            switch (_d.label) {
                case 0:
                    addNotification = params.addNotification, file = params.file, getAppSettings = params.getAppSettings, t = params.t, uploadType = params.uploadType;
                    appSettings = null;
                    return [4 /*yield*/, getAppSettings()];
                case 1:
                    appSettings = _d.sent();
                    _a = (uploadType === 'image'
                        ? (_b = appSettings === null || appSettings === void 0 ? void 0 : appSettings.app) === null || _b === void 0 ? void 0 : _b.image_upload_config
                        : (_c = appSettings === null || appSettings === void 0 ? void 0 : appSettings.app) === null || _c === void 0 ? void 0 : _c.file_upload_config) || {}, allowed_file_extensions = _a.allowed_file_extensions, allowed_mime_types = _a.allowed_mime_types, blocked_file_extensions = _a.blocked_file_extensions, blocked_mime_types = _a.blocked_mime_types;
                    sendErrorNotification = function () {
                        return addNotification(t("Upload type: \"{{ type }}\" is not allowed", { type: file.type || 'unknown type' }), 'error');
                    };
                    if (allowed_file_extensions === null || allowed_file_extensions === void 0 ? void 0 : allowed_file_extensions.length) {
                        allowed = allowed_file_extensions.some(function (ext) {
                            return file.name.toLowerCase().endsWith(ext.toLowerCase());
                        });
                        if (!allowed) {
                            sendErrorNotification();
                            return [2 /*return*/, false];
                        }
                    }
                    if (blocked_file_extensions === null || blocked_file_extensions === void 0 ? void 0 : blocked_file_extensions.length) {
                        blocked = blocked_file_extensions.some(function (ext) {
                            return file.name.toLowerCase().endsWith(ext.toLowerCase());
                        });
                        if (blocked) {
                            sendErrorNotification();
                            return [2 /*return*/, false];
                        }
                    }
                    if (allowed_mime_types === null || allowed_mime_types === void 0 ? void 0 : allowed_mime_types.length) {
                        allowed = allowed_mime_types.some(function (type) { var _a; return type.toLowerCase() === ((_a = file.type) === null || _a === void 0 ? void 0 : _a.toLowerCase()); });
                        if (!allowed) {
                            sendErrorNotification();
                            return [2 /*return*/, false];
                        }
                    }
                    if (blocked_mime_types === null || blocked_mime_types === void 0 ? void 0 : blocked_mime_types.length) {
                        blocked = blocked_mime_types.some(function (type) { var _a; return type.toLowerCase() === ((_a = file.type) === null || _a === void 0 ? void 0 : _a.toLowerCase()); });
                        if (blocked) {
                            sendErrorNotification();
                            return [2 /*return*/, false];
                        }
                    }
                    return [2 /*return*/, true];
            }
        });
    }); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useUserTrigger = function (params) {
        var disableMentions = params.disableMentions, mentionAllAppUsers = params.mentionAllAppUsers, _a = params.mentionQueryParams, mentionQueryParams = _a === void 0 ? {} : _a, onSelectUser = params.onSelectUser, useMentionsTransliteration = params.useMentionsTransliteration;
        var _b = React.useState(false), searching = _b[0], setSearching = _b[1];
        var _c = useChatContext('useUserTrigger'), client = _c.client, mutes = _c.mutes;
        var channel = useChannelStateContext('useUserTrigger').channel;
        var members = channel.state.members;
        var watchers = channel.state.watchers;
        var getMembersAndWatchers = React.useCallback(function () {
            var memberUsers = members ? Object.values(members).map(function (_a) {
                var user = _a.user;
                return user;
            }) : [];
            var watcherUsers = watchers ? Object.values(watchers) : [];
            var users = __spreadArray(__spreadArray([], memberUsers), watcherUsers);
            // make sure we don't list users twice
            var uniqueUsers = {};
            users.forEach(function (user) {
                if (user && !uniqueUsers[user.id]) {
                    uniqueUsers[user.id] = user;
                }
            });
            return Object.values(uniqueUsers);
        }, [members, watchers]);
        var queryMembersThrottled = React.useCallback(lodash_throttle(function (query, onReady) { return __awaiter$1(void 0, void 0, void 0, function () {
            var response, users, error_1;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, channel.queryMembers({
                                name: { $autocomplete: query },
                            })];
                    case 1:
                        response = _a.sent();
                        users = response.members.map(function (member) { return member.user; });
                        if (onReady && users.length) {
                            onReady(users);
                        }
                        else {
                            onReady([]);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        console.log({ error: error_1 });
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); }, 200), [channel]);
        var queryUsers = function (query, onReady) { return __awaiter$1(void 0, void 0, void 0, function () {
            var users, error_2;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!query || searching)
                            return [2 /*return*/];
                        setSearching(true);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.queryUsers(__assign$2({ $or: [{ id: { $autocomplete: query } }, { name: { $autocomplete: query } }], id: { $ne: client.userID } }, mentionQueryParams.filters), __assign$2({ id: 1 }, mentionQueryParams.sort), __assign$2({ limit: 10 }, mentionQueryParams.options))];
                    case 2:
                        users = (_a.sent()).users;
                        if (onReady && users.length) {
                            onReady(users);
                        }
                        else {
                            onReady([]);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _a.sent();
                        console.log({ error: error_2 });
                        return [3 /*break*/, 4];
                    case 4:
                        setSearching(false);
                        return [2 /*return*/];
                }
            });
        }); };
        var queryUsersThrottled = lodash_throttle(queryUsers, 200);
        return {
            callback: function (item) { return onSelectUser(item); },
            component: UserItem,
            dataProvider: function (query, text, onReady) {
                var _a;
                if (disableMentions)
                    return;
                var filterMutes = function (data) {
                    if (text.includes('/unmute') && !mutes.length) {
                        return [];
                    }
                    if (!mutes.length)
                        return data;
                    if (text.includes('/unmute')) {
                        return data.filter(function (suggestion) {
                            return mutes.some(function (mute) { return mute.target.id === suggestion.id; });
                        });
                    }
                    return data.filter(function (suggestion) { return mutes.every(function (mute) { return mute.target.id !== suggestion.id; }); });
                };
                if (mentionAllAppUsers) {
                    return queryUsersThrottled(query, function (data) {
                        if (onReady)
                            onReady(filterMutes(data), query);
                    });
                }
                /**
                 * By default, we return maximum 100 members via queryChannels api call.
                 * Thus it is safe to assume, that if number of members in channel.state is < 100,
                 * then all the members are already available on client side and we don't need to
                 * make any api call to queryMembers endpoint.
                 */
                if (!query || Object.values(members || {}).length < 100) {
                    var users = getMembersAndWatchers();
                    var params_1 = {
                        ownUserId: client.userID,
                        query: query,
                        text: text,
                        useMentionsTransliteration: useMentionsTransliteration,
                        users: users,
                    };
                    var matchingUsers = searchLocalUsers(params_1);
                    var usersToShow = ((_a = mentionQueryParams.options) === null || _a === void 0 ? void 0 : _a.limit) || 10;
                    var data = matchingUsers.slice(0, usersToShow);
                    if (onReady)
                        onReady(filterMutes(data), query);
                    return data;
                }
                return queryMembersThrottled(query, function (data) {
                    if (onReady)
                        onReady(filterMutes(data), query);
                });
            },
            output: function (entity) { return ({
                caretPosition: 'next',
                key: entity.id,
                text: "@" + (entity.name || entity.id),
            }); },
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DefaultTriggerProvider = function (_a) {
        var children = _a.children;
        var currentValue = useMessageInputContext('DefaultTriggerProvider');
        var defaultAutocompleteTriggers = {
            '/': useCommandTrigger(),
            ':': useEmojiTrigger(currentValue.emojiIndex),
            '@': useUserTrigger({
                disableMentions: currentValue.disableMentions,
                mentionAllAppUsers: currentValue.mentionAllAppUsers,
                mentionQueryParams: currentValue.mentionQueryParams,
                onSelectUser: currentValue.onSelectUser,
                useMentionsTransliteration: currentValue.useMentionsTransliteration,
            }),
        };
        var newValue = __assign$2(__assign$2({}, currentValue), { autocompleteTriggers: defaultAutocompleteTriggers });
        return React__default['default'].createElement(MessageInputContextProvider, { value: newValue }, children);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var filterEmoji = function (emoji) {
        if (emoji.name === 'White Smiling Face' || emoji.name === 'White Frowning Face') {
            return false;
        }
        return true;
    };
    var EmojiPicker = function (props) {
        var small = props.small;
        var _a = useEmojiContext('EmojiPicker'), emojiConfig = _a.emojiConfig, EmojiPickerComponent = _a.EmojiPicker;
        var t = useTranslationContext('EmojiPicker').t;
        var messageInput = useMessageInputContext('EmojiPicker');
        var emojiData = (emojiConfig || {}).emojiData;
        if (messageInput.emojiPickerIsOpen && emojiData) {
            var className = small
                ? 'str-chat__small-message-input-emojipicker'
                : 'str-chat__input--emojipicker';
            return (React__default['default'].createElement("div", { className: className, ref: messageInput.emojiPickerRef },
                React__default['default'].createElement(React.Suspense, { fallback: null },
                    React__default['default'].createElement(EmojiPickerComponent, { color: '#006CFF', data: emojiData, emoji: 'point_up', emojisToShowFilter: filterEmoji, native: true, onSelect: messageInput.onSelectEmoji, set: 'facebook', showPreview: false, showSkinTones: false, title: t('Pick your emoji'), useButton: true }))));
        }
        return null;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var EmojiIconLarge = function () {
        var t = useTranslationContext('EmojiIconLarge').t;
        return (React__default['default'].createElement("svg", { height: '28', width: '28', xmlns: 'http://www.w3.org/2000/svg' },
            React__default['default'].createElement("title", null, t('Open emoji picker')),
            React__default['default'].createElement("g", { clipRule: 'evenodd', fillRule: 'evenodd' },
                React__default['default'].createElement("path", { d: 'M14 4.4C8.6 4.4 4.4 8.6 4.4 14c0 5.4 4.2 9.6 9.6 9.6c5.4 0 9.6-4.2 9.6-9.6c0-5.4-4.2-9.6-9.6-9.6zM2 14c0-6.6 5.4-12 12-12s12 5.4 12 12s-5.4 12-12 12s-12-5.4-12-12zM12.8 11c0 1-.8 1.8-1.8 1.8s-1.8-.8-1.8-1.8s.8-1.8 1.8-1.8s1.8.8 1.8 1.8zM18.8 11c0 1-.8 1.8-1.8 1.8s-1.8-.8-1.8-1.8s.8-1.8 1.8-1.8s1.8.8 1.8 1.8zM8.6 15.4c.6-.4 1.2-.2 1.6.2c.6.8 1.6 1.8 3 2c1.2.4 2.8.2 4.8-2c.4-.4 1.2-.6 1.6 0c.4.4.6 1.2 0 1.6c-2.2 2.6-4.8 3.4-7 3c-2-.4-3.6-1.8-4.4-3c-.4-.6-.2-1.2.4-1.8z' }))));
    };
    var EmojiIconSmall = function () {
        var t = useTranslationContext('EmojiIconSmall').t;
        return (React__default['default'].createElement("svg", { height: '14', width: '14', xmlns: 'http://www.w3.org/2000/svg' },
            React__default['default'].createElement("title", null, t('Open emoji picker')),
            React__default['default'].createElement("g", { clipRule: 'evenodd', fillRule: 'evenodd' },
                React__default['default'].createElement("path", { d: 'M6.7 1.42C3.73 1.42 1.42 3.73 1.42 6.7c0 2.97 2.31 5.28 5.28 5.28c2.97 0 5.28-2.31 5.28-5.28c0-2.97-2.31-5.28-5.28-5.28zM.1 6.7c0-3.63 2.97-6.6 6.6-6.6s6.6 2.97 6.6 6.6s-2.97 6.6-6.6 6.6s-6.6-2.97-6.6-6.6zM6.04 5.05c0 .55-.44.99-.99.99s-.99-.44-.99-.99s.44-.99.99-.99s.99.44.99.99zM9.34 5.05c0 .55-.44.99-.99.99s-.99-.44-.99-.99s.44-.99.99-.99s.99.44.99.99zM3.73 7.47c.33-.22.66-.11.88.11c.33.44.88.99 1.65 1.1c.66.22 1.54.11 2.64-1.1c.22-.22.66-.33.88 0c.22.22.33.66 0 .88c-1.21 1.43-2.64 1.87-3.85 1.65c-1.1-.22-1.98-.99-2.42-1.65c-.22-.33-.11-.66.22-.99z' }))));
    };
    var FileUploadIcon = function () {
        var t = useTranslationContext('FileUploadIcon').t;
        return (React__default['default'].createElement("svg", { height: '14', width: '14', xmlns: 'http://www.w3.org/2000/svg' },
            React__default['default'].createElement("title", null, t('Attach files')),
            React__default['default'].createElement("path", { d: 'M7 .5c3.59 0 6.5 2.91 6.5 6.5s-2.91 6.5-6.5 6.5S.5 10.59.5 7 3.41.5 7 .5zm0 12c3.031 0 5.5-2.469 5.5-5.5S10.031 1.5 7 1.5A5.506 5.506 0 0 0 1.5 7c0 3.034 2.469 5.5 5.5 5.5zM7.506 3v3.494H11v1.05H7.506V11h-1.05V7.544H3v-1.05h3.456V3h1.05z', fillRule: 'nonzero' })));
    };
    var FileUploadIconFlat = function () {
        var t = useTranslationContext('FileUploadIconFlat').t;
        return (React__default['default'].createElement("svg", { height: '14', width: '14', xmlns: 'http://www.w3.org/2000/svg' },
            React__default['default'].createElement("title", null, t('Attach files')),
            React__default['default'].createElement("path", { d: 'M1.667.333h10.666c.737 0 1.334.597 1.334 1.334v10.666c0 .737-.597 1.334-1.334 1.334H1.667a1.333 1.333 0 0 1-1.334-1.334V1.667C.333.93.93.333 1.667.333zm2 1.334a1.667 1.667 0 1 0 0 3.333 1.667 1.667 0 0 0 0-3.333zm-2 9.333v1.333h10.666v-4l-2-2-4 4-2-2L1.667 11z', fillRule: 'nonzero' })));
    };
    var SendButton = function (_a) {
        var sendMessage = _a.sendMessage;
        var t = useTranslationContext('SendButton').t;
        return (React__default['default'].createElement("button", { "aria-label": 'Send', className: 'str-chat__send-button', onClick: sendMessage },
            React__default['default'].createElement("svg", { height: '17', viewBox: '0 0 18 17', width: '18', xmlns: 'http://www.w3.org/2000/svg' },
                React__default['default'].createElement("title", null, t('Send')),
                React__default['default'].createElement("path", { d: 'M0 17.015l17.333-8.508L0 0v6.617l12.417 1.89L0 10.397z', fill: '#006cff', fillRule: 'evenodd' }))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UploadsPreview = function () {
        var _a = useChannelStateContext('UploadsPreview'), maxNumberOfFiles = _a.maxNumberOfFiles, multipleUploads = _a.multipleUploads;
        var messageInput = useMessageInputContext('UploadsPreview');
        var fileOrder = messageInput.fileOrder, fileUploads = messageInput.fileUploads, imageOrder = messageInput.imageOrder, imageUploads = messageInput.imageUploads, numberOfUploads = messageInput.numberOfUploads, removeFile = messageInput.removeFile, removeImage = messageInput.removeImage, uploadFile = messageInput.uploadFile, uploadImage = messageInput.uploadImage, uploadNewFiles = messageInput.uploadNewFiles;
        var imagesToPreview = imageOrder
            .map(function (id) { return imageUploads[id]; })
            .filter(function (image) { return !image.og_scrape_url; });
        var filesToPreview = fileOrder.map(function (id) { return fileUploads[id]; });
        return (React__default['default'].createElement(React__default['default'].Fragment, null,
            imageOrder.length > 0 && (React__default['default'].createElement(ImagePreviewer, { disabled: !multipleUploads ||
                    (maxNumberOfFiles !== undefined && numberOfUploads >= maxNumberOfFiles), handleFiles: uploadNewFiles, handleRemove: removeImage, handleRetry: uploadImage, imageUploads: imagesToPreview, multiple: multipleUploads })),
            fileOrder.length > 0 && (React__default['default'].createElement(FilePreviewer, { handleFiles: uploadNewFiles, handleRemove: removeFile, handleRetry: uploadFile, uploads: filesToPreview }))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedChatAutoComplete = function (props) {
        var _a = useComponentContext('ChatAutoComplete'), SuggestionItem = _a.AutocompleteSuggestionItem, SuggestionList = _a.AutocompleteSuggestionList;
        var t = useTranslationContext('ChatAutoComplete').t;
        var messageInput = useMessageInputContext('ChatAutoComplete');
        var cooldownRemaining = messageInput.cooldownRemaining, disabled = messageInput.disabled, emojiIndex = messageInput.emojiIndex, innerRef = messageInput.textareaRef;
        var placeholder = props.placeholder || t('Type your message');
        var emojiReplace = props.wordReplace
            ? function (word) { var _a; return (_a = props.wordReplace) === null || _a === void 0 ? void 0 : _a.call(props, word, emojiIndex); }
            : function (word) {
                var found = (emojiIndex === null || emojiIndex === void 0 ? void 0 : emojiIndex.search(word)) || [];
                var emoji = found
                    .filter(Boolean)
                    .slice(0, 10)
                    .find(function (_a) {
                    var emoticons = _a.emoticons;
                    return !!(emoticons === null || emoticons === void 0 ? void 0 : emoticons.includes(word));
                });
                if (!emoji || !('native' in emoji))
                    return null;
                return emoji.native;
            };
        var updateInnerRef = React.useCallback(function (ref) {
            if (innerRef) {
                innerRef.current = ref;
            }
        }, [innerRef]);
        return (React__default['default'].createElement(ReactTextareaAutocomplete, { additionalTextareaProps: messageInput.additionalTextareaProps, "aria-label": cooldownRemaining ? t('Slow Mode ON') : placeholder, className: 'str-chat__textarea__textarea', closeCommandsList: messageInput.closeCommandsList, closeMentionsList: messageInput.closeMentionsList, containerClassName: 'str-chat__textarea', disabled: disabled || !!cooldownRemaining, disableMentions: messageInput.disableMentions, dropdownClassName: 'str-chat__emojisearch', grow: messageInput.grow, handleSubmit: props.handleSubmit || messageInput.handleSubmit, innerRef: updateInnerRef, itemClassName: 'str-chat__emojisearch__item', listClassName: 'str-chat__emojisearch__list', loadingComponent: LoadingIndicator, maxRows: messageInput.maxRows, minChar: 0, onBlur: props.onBlur, onChange: props.onChange || messageInput.handleChange, onFocus: props.onFocus, onPaste: props.onPaste || messageInput.onPaste, placeholder: cooldownRemaining ? t('Slow Mode ON') : placeholder, replaceWord: emojiReplace, rows: props.rows || 1, shouldSubmit: messageInput.shouldSubmit, showCommandsList: messageInput.showCommandsList, showMentionsList: messageInput.showMentionsList, SuggestionItem: SuggestionItem, SuggestionList: SuggestionList, trigger: messageInput.autocompleteTriggers || {}, value: props.value || messageInput.text }));
    };
    var ChatAutoComplete = React__default['default'].memo(UnMemoizedChatAutoComplete);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var EditMessageForm = function () {
        var _a = useChannelStateContext('EditMessageForm'), acceptedFiles = _a.acceptedFiles, multipleUploads = _a.multipleUploads;
        var t = useTranslationContext('EditMessageForm').t;
        var _b = useMessageInputContext('EditMessageForm'), clearEditingState = _b.clearEditingState, closeEmojiPicker = _b.closeEmojiPicker, emojiPickerIsOpen = _b.emojiPickerIsOpen, handleSubmit = _b.handleSubmit, isUploadEnabled = _b.isUploadEnabled, maxFilesLeft = _b.maxFilesLeft, openEmojiPicker = _b.openEmojiPicker, uploadNewFiles = _b.uploadNewFiles;
        var _c = useComponentContext('EditMessageForm'), _d = _c.EmojiIcon, EmojiIcon = _d === void 0 ? EmojiIconSmall : _d, _e = _c.FileUploadIcon, FileUploadIcon$1 = _e === void 0 ? FileUploadIcon : _e;
        React.useEffect(function () {
            var onKeyDown = function (event) {
                if (event.key === 'Escape')
                    clearEditingState === null || clearEditingState === void 0 ? void 0 : clearEditingState();
            };
            document.addEventListener('keydown', onKeyDown);
            return function () { return document.removeEventListener('keydown', onKeyDown); };
        }, [clearEditingState]);
        return (React__default['default'].createElement("div", { className: 'str-chat__edit-message-form' },
            React__default['default'].createElement(ImageDropzone, { accept: acceptedFiles, disabled: !isUploadEnabled || maxFilesLeft === 0, handleFiles: uploadNewFiles, maxNumberOfFiles: maxFilesLeft, multiple: multipleUploads },
                React__default['default'].createElement("form", { onSubmit: handleSubmit },
                    isUploadEnabled && React__default['default'].createElement(UploadsPreview, null),
                    React__default['default'].createElement(EmojiPicker, { small: true }),
                    React__default['default'].createElement(ChatAutoComplete, null),
                    React__default['default'].createElement("div", { className: 'str-chat__message-team-form-footer' },
                        React__default['default'].createElement("div", { className: 'str-chat__edit-message-form-options' },
                            React__default['default'].createElement("button", { "aria-label": 'Open Emoji Picker', className: 'str-chat__input-emojiselect', onClick: emojiPickerIsOpen ? closeEmojiPicker : openEmojiPicker },
                                React__default['default'].createElement(EmojiIcon, null)),
                            isUploadEnabled && (React__default['default'].createElement("div", { className: 'str-chat__fileupload-wrapper', "data-testid": 'fileinput' },
                                React__default['default'].createElement(Tooltip, null, maxFilesLeft
                                    ? t('Attach files')
                                    : t("You've reached the maximum number of files")),
                                React__default['default'].createElement(FileUploadButton, { accepts: acceptedFiles, disabled: maxFilesLeft === 0, handleFiles: uploadNewFiles, multiple: multipleUploads },
                                    React__default['default'].createElement("span", { className: 'str-chat__input-fileupload' },
                                        React__default['default'].createElement(FileUploadIcon$1, null)))))),
                        React__default['default'].createElement("div", null,
                            React__default['default'].createElement("button", { onClick: clearEditingState }, t('Cancel')),
                            React__default['default'].createElement("button", { type: 'submit' }, t('Send'))))))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var CooldownTimer = function (props) {
        var cooldownInterval = props.cooldownInterval, setCooldownRemaining = props.setCooldownRemaining;
        var _a = React.useState(cooldownInterval), seconds = _a[0], setSeconds = _a[1];
        React.useEffect(function () {
            var countdownInterval = setInterval(function () {
                if (seconds > 0) {
                    setSeconds(seconds - 1);
                }
                else {
                    setCooldownRemaining(0);
                }
            }, 1000);
            return function () { return clearInterval(countdownInterval); };
        });
        return React__default['default'].createElement("div", null, seconds === 0 ? null : seconds);
    };
    var useCooldownTimer = function () {
        var latestMessageDatesByChannels = useChatContext('useCooldownTimer').latestMessageDatesByChannels;
        var channel = useChannelStateContext('useCooldownTimer').channel;
        var _a = (channel.data ||
            {}), cooldownInterval = _a.cooldown, own_capabilities = _a.own_capabilities;
        var _b = React.useState(), cooldownRemaining = _b[0], setCooldownRemaining = _b[1];
        var skipCooldown = !(own_capabilities === null || own_capabilities === void 0 ? void 0 : own_capabilities.includes('slow-mode'));
        React.useEffect(function () {
            var latestMessageDate = latestMessageDatesByChannels[channel.cid];
            if (!cooldownInterval || !latestMessageDate) {
                return;
            }
            var remainingCooldown = Math.round(cooldownInterval - (new Date().getTime() - latestMessageDate.getTime()) / 1000);
            if (remainingCooldown > 0 && !skipCooldown) {
                setCooldownRemaining(remainingCooldown);
            }
        }, [channel.id, cooldownInterval, latestMessageDatesByChannels[channel.cid]]);
        return {
            cooldownInterval: cooldownInterval || 0,
            cooldownRemaining: cooldownRemaining,
            setCooldownRemaining: setCooldownRemaining,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useEmojiIndex = function () {
        var _a = useEmojiContext('useEmojiIndex'), emojiConfig = _a.emojiConfig, EmojiIndex = _a.EmojiIndex;
        var emojiData = (emojiConfig || {}).emojiData;
        var emojiIndex = React.useMemo(function () {
            if (EmojiIndex) {
                // @ts-expect-error type here isn't registering the constructor type
                return new EmojiIndex(emojiData);
            }
        }, [emojiData, EmojiIndex]);
        return emojiIndex;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useImageUploads = function (props, state, dispatch) {
        var doImageUploadRequest = props.doImageUploadRequest, errorHandler = props.errorHandler;
        var imageUploads = state.imageUploads;
        var channel = useChannelStateContext('useImageUploads').channel;
        var getAppSettings = useChatContext('useImageUploads').getAppSettings;
        var addNotification = useChannelActionContext('useImageUploads').addNotification;
        var t = useTranslationContext('useImageUploads').t;
        var removeImage = React.useCallback(function (id) {
            dispatch({ id: id, type: 'removeImageUpload' });
            // TODO: cancel upload if still uploading
        }, []);
        var uploadImage = React.useCallback(function (id) { return __awaiter$1(void 0, void 0, void 0, function () {
            var img, file, canUpload, response, error_1, errorMessage, alreadyRemoved;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        img = imageUploads[id];
                        if (!img)
                            return [2 /*return*/];
                        file = img.file;
                        if (img.state !== 'uploading') {
                            dispatch({ id: id, state: 'uploading', type: 'setImageUpload' });
                        }
                        return [4 /*yield*/, checkUploadPermissions({
                                addNotification: addNotification,
                                file: file,
                                getAppSettings: getAppSettings,
                                t: t,
                                uploadType: 'image',
                            })];
                    case 1:
                        canUpload = _a.sent();
                        if (!canUpload)
                            return [2 /*return*/, removeImage(id)];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 7, , 8]);
                        if (!doImageUploadRequest) return [3 /*break*/, 4];
                        return [4 /*yield*/, doImageUploadRequest(file, channel)];
                    case 3:
                        response = _a.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, channel.sendImage(file)];
                    case 5:
                        response = _a.sent();
                        _a.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        error_1 = _a.sent();
                        errorMessage = typeof error_1.message === 'string'
                            ? error_1.message
                            : t('Error uploading image');
                        addNotification(errorMessage, 'error');
                        alreadyRemoved = false;
                        if (!imageUploads[id]) {
                            alreadyRemoved = true;
                        }
                        else {
                            dispatch({ id: id, state: 'failed', type: 'setImageUpload' });
                        }
                        if (!alreadyRemoved && errorHandler) {
                            // TODO: verify if the parameters passed to the error handler actually make sense
                            errorHandler(error_1, 'upload-image', __assign$2(__assign$2({}, file), { id: id }));
                        }
                        return [2 /*return*/];
                    case 8:
                        // If doImageUploadRequest returns any falsy value, then don't create the upload preview.
                        // This is for the case if someone wants to handle failure on app level.
                        if (!response) {
                            removeImage(id);
                            return [2 /*return*/];
                        }
                        dispatch({
                            id: id,
                            state: 'finished',
                            type: 'setImageUpload',
                            url: response.file,
                        });
                        return [2 /*return*/];
                }
            });
        }); }, [imageUploads, channel, doImageUploadRequest, errorHandler, removeImage]);
        React.useEffect(function () {
            if (FileReader) {
                var upload = Object.values(imageUploads).find(function (imageUpload) {
                    return imageUpload.state === 'uploading' && !!imageUpload.file && !imageUpload.previewUri;
                });
                if (upload) {
                    var file = upload.file, id_1 = upload.id;
                    // TODO: Possibly use URL.createObjectURL instead. However, then we need
                    // to release the previews when not used anymore though.
                    var reader_1 = new FileReader();
                    reader_1.onload = function (event) {
                        var _a;
                        if (typeof ((_a = event.target) === null || _a === void 0 ? void 0 : _a.result) !== 'string')
                            return;
                        dispatch({
                            id: id_1,
                            previewUri: event.target.result,
                            type: 'setImageUpload',
                        });
                    };
                    reader_1.readAsDataURL(file);
                    uploadImage(id_1);
                    return function () {
                        reader_1.onload = null;
                    };
                }
            }
            return;
        }, [imageUploads, uploadImage]);
        return {
            removeImage: removeImage,
            uploadImage: uploadImage,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useFileUploads = function (props, state, dispatch) {
        var doFileUploadRequest = props.doFileUploadRequest, errorHandler = props.errorHandler;
        var fileUploads = state.fileUploads;
        var channel = useChannelStateContext('useFileUploads').channel;
        var addNotification = useChannelActionContext('useFileUploads').addNotification;
        var getAppSettings = useChatContext('useFileUploads').getAppSettings;
        var t = useTranslationContext('useFileUploads').t;
        var uploadFile = React.useCallback(function (id) {
            dispatch({ id: id, state: 'uploading', type: 'setFileUpload' });
        }, []);
        var removeFile = React.useCallback(function (id) {
            // TODO: cancel upload if still uploading
            dispatch({ id: id, type: 'removeFileUpload' });
        }, []);
        React.useEffect(function () {
            (function () { return __awaiter$1(void 0, void 0, void 0, function () {
                var upload, file, id, canUpload, response, error_1, errorMessage, alreadyRemoved;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            upload = Object.values(fileUploads).find(function (fileUpload) { return fileUpload.state === 'uploading' && fileUpload.file; });
                            if (!upload)
                                return [2 /*return*/];
                            file = upload.file, id = upload.id;
                            return [4 /*yield*/, checkUploadPermissions({
                                    addNotification: addNotification,
                                    file: file,
                                    getAppSettings: getAppSettings,
                                    t: t,
                                    uploadType: 'file',
                                })];
                        case 1:
                            canUpload = _a.sent();
                            if (!canUpload)
                                return [2 /*return*/, removeFile(id)];
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 7, , 8]);
                            if (!doFileUploadRequest) return [3 /*break*/, 4];
                            return [4 /*yield*/, doFileUploadRequest(file, channel)];
                        case 3:
                            response = _a.sent();
                            return [3 /*break*/, 6];
                        case 4: return [4 /*yield*/, channel.sendFile(file)];
                        case 5:
                            response = _a.sent();
                            _a.label = 6;
                        case 6: return [3 /*break*/, 8];
                        case 7:
                            error_1 = _a.sent();
                            errorMessage = typeof error_1.message === 'string'
                                ? error_1.message
                                : t('Error uploading file');
                            addNotification(errorMessage, 'error');
                            alreadyRemoved = false;
                            if (!fileUploads[id]) {
                                alreadyRemoved = true;
                            }
                            else {
                                dispatch({ id: id, state: 'failed', type: 'setFileUpload' });
                            }
                            if (!alreadyRemoved && errorHandler) {
                                // TODO: verify if the parameters passed to the error handler actually make sense
                                errorHandler(error_1, 'upload-file', file);
                            }
                            return [2 /*return*/];
                        case 8:
                            // If doImageUploadRequest returns any falsy value, then don't create the upload preview.
                            // This is for the case if someone wants to handle failure on app level.
                            if (!response) {
                                removeFile(id);
                                return [2 /*return*/];
                            }
                            dispatch({
                                id: id,
                                state: 'finished',
                                type: 'setFileUpload',
                                url: response.file,
                            });
                            return [2 /*return*/];
                    }
                });
            }); })();
        }, [fileUploads, channel, doFileUploadRequest, errorHandler, removeFile]);
        return {
            removeFile: removeFile,
            uploadFile: uploadFile,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var apiMaxNumberOfFiles = 10;
    var useAttachments = function (props, state, dispatch, textareaRef) {
        var noFiles = props.noFiles;
        var fileUploads = state.fileUploads, imageUploads = state.imageUploads;
        var _a = useChannelStateContext('useAttachments'), maxNumberOfFiles = _a.maxNumberOfFiles, multipleUploads = _a.multipleUploads;
        var _b = useFileUploads(props, state, dispatch), removeFile = _b.removeFile, uploadFile = _b.uploadFile;
        var _c = useImageUploads(props, state, dispatch), removeImage = _c.removeImage, uploadImage = _c.uploadImage;
        // Number of files that the user can still add. Should never be more than the amount allowed by the API.
        // If multipleUploads is false, we only want to allow a single upload.
        var maxFilesAllowed = !multipleUploads ? 1 : maxNumberOfFiles || apiMaxNumberOfFiles;
        // OG attachments should not be counted towards "numberOfImages"
        var numberOfImages = Object.values(imageUploads).filter(function (_a) {
            var og_scrape_url = _a.og_scrape_url, state = _a.state;
            return state !== 'failed' && !og_scrape_url;
        }).length;
        var numberOfFiles = Object.values(fileUploads).filter(function (_a) {
            var state = _a.state;
            return state !== 'failed';
        }).length;
        var numberOfUploads = numberOfImages + numberOfFiles;
        var maxFilesLeft = maxFilesAllowed - numberOfUploads;
        var uploadNewFiles = React.useCallback(function (files) {
            var _a;
            Array.from(files)
                .slice(0, maxFilesLeft)
                .forEach(function (file) {
                var id = nanoid();
                if (file.type.startsWith('image/') &&
                    !file.type.endsWith('.photoshop') // photoshop files begin with 'image/'
                ) {
                    dispatch({ file: file, id: id, state: 'uploading', type: 'setImageUpload' });
                }
                else if (file instanceof File && !noFiles) {
                    dispatch({ file: file, id: id, state: 'uploading', type: 'setFileUpload' });
                }
            });
            (_a = textareaRef === null || textareaRef === void 0 ? void 0 : textareaRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }, [maxFilesLeft, noFiles]);
        return {
            maxFilesLeft: maxFilesLeft,
            numberOfUploads: numberOfUploads,
            removeFile: removeFile,
            removeImage: removeImage,
            uploadFile: uploadFile,
            uploadImage: uploadImage,
            uploadNewFiles: uploadNewFiles,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=streamChat.logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useMessageInputText = function (props, state, dispatch) {
        var channel = useChannelStateContext('useMessageInputText').channel;
        var additionalTextareaProps = props.additionalTextareaProps, focus = props.focus, parent = props.parent, _a = props.publishTypingEvent, publishTypingEvent = _a === void 0 ? true : _a;
        var text = state.text;
        var textareaRef = React.useRef();
        // Focus
        React.useEffect(function () {
            if (focus && textareaRef.current) {
                textareaRef.current.focus();
            }
        }, [focus]);
        // Text + cursor position
        var newCursorPosition = React.useRef();
        var insertText = React.useCallback(function (textToInsert) {
            var maxLength = (additionalTextareaProps || {}).maxLength;
            if (!textareaRef.current) {
                dispatch({
                    getNewText: function (text) {
                        var updatedText = text + textToInsert;
                        if (maxLength && updatedText.length > maxLength) {
                            return updatedText.slice(0, maxLength);
                        }
                        return updatedText;
                    },
                    type: 'setText',
                });
                return;
            }
            var _a = textareaRef.current, selectionEnd = _a.selectionEnd, selectionStart = _a.selectionStart;
            newCursorPosition.current = selectionStart + textToInsert.length;
            dispatch({
                getNewText: function (prevText) {
                    var updatedText = prevText.slice(0, selectionStart) + textToInsert + prevText.slice(selectionEnd);
                    if (maxLength && updatedText.length > maxLength) {
                        return updatedText.slice(0, maxLength);
                    }
                    return updatedText;
                },
                type: 'setText',
            });
        }, [additionalTextareaProps, newCursorPosition, textareaRef]);
        React.useEffect(function () {
            var textareaElement = textareaRef.current;
            if (textareaElement && newCursorPosition.current !== undefined) {
                textareaElement.selectionStart = newCursorPosition.current;
                textareaElement.selectionEnd = newCursorPosition.current;
                newCursorPosition.current = undefined;
            }
        }, [text, newCursorPosition]);
        var handleChange = React.useCallback(function (event) {
            event.preventDefault();
            if (!event || !event.target) {
                return;
            }
            var newText = event.target.value;
            dispatch({
                getNewText: function () { return newText; },
                type: 'setText',
            });
            if (publishTypingEvent && newText && channel) {
                streamChat.logChatPromiseExecution(channel.keystroke(parent === null || parent === void 0 ? void 0 : parent.id), 'start typing event');
            }
        }, [channel, parent, publishTypingEvent]);
        return {
            handleChange: handleChange,
            insertText: insertText,
            textareaRef: textareaRef,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useEmojiPicker = function (state, dispatch, insertText, textareaRef, closeEmojiPickerOnClick) {
        var emojiPickerRef = React.useRef(null);
        var closeEmojiPicker = React.useCallback(function (event) {
            event.preventDefault();
            if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target)) {
                dispatch({
                    type: 'setEmojiPickerIsOpen',
                    value: false,
                });
            }
        }, [emojiPickerRef]);
        var openEmojiPicker = React.useCallback(function (event) {
            event.preventDefault();
            dispatch({
                type: 'setEmojiPickerIsOpen',
                value: true,
            });
            // Prevent event from bubbling to document, so the close handler is never called for this event
            event.stopPropagation();
        }, []);
        var handleEmojiKeyDown = function (event) {
            if (event.key === ' ' || event.key === 'Enter' || event.key === 'Spacebar') {
                event.preventDefault();
                /**
                 * TODO: fix the below at some point because this type casting is wrong
                 * and just forced to not have warnings currently with the unknown casting
                 */
                openEmojiPicker(event);
            }
        };
        var handleEmojiEscape = function (event) {
            if (event.key === 'Escape') {
                dispatch({
                    type: 'setEmojiPickerIsOpen',
                    value: false,
                });
            }
        };
        React.useEffect(function () {
            if (state.emojiPickerIsOpen) {
                document.addEventListener('click', closeEmojiPicker, false);
                document.addEventListener('keydown', handleEmojiEscape);
            }
            return function () {
                document.removeEventListener('click', closeEmojiPicker, false);
                document.removeEventListener('keydown', handleEmojiEscape);
            };
        }, [closeEmojiPicker, state.emojiPickerIsOpen]);
        var onSelectEmoji = React.useCallback(function (emoji) {
            var _a;
            insertText(emoji.native);
            if (closeEmojiPickerOnClick) {
                dispatch({
                    type: 'setEmojiPickerIsOpen',
                    value: false,
                });
            }
            (_a = textareaRef === null || textareaRef === void 0 ? void 0 : textareaRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }, [insertText]);
        return {
            closeEmojiPicker: closeEmojiPicker,
            emojiPickerRef: emojiPickerRef,
            handleEmojiKeyDown: handleEmojiKeyDown,
            onSelectEmoji: onSelectEmoji,
            openEmojiPicker: openEmojiPicker,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var getAttachmentTypeFromMime = function (mime) {
        if (mime.includes('video/'))
            return 'video';
        if (mime.includes('audio/'))
            return 'audio';
        return 'file';
    };
    var useSubmitHandler = function (props, state, dispatch, numberOfUploads) {
        var clearEditingState = props.clearEditingState, message = props.message, overrideSubmitHandler = props.overrideSubmitHandler, parent = props.parent, publishTypingEvent = props.publishTypingEvent;
        var attachments = state.attachments, fileOrder = state.fileOrder, fileUploads = state.fileUploads, imageOrder = state.imageOrder, imageUploads = state.imageUploads, mentioned_users = state.mentioned_users, text = state.text;
        var channel = useChannelStateContext('useSubmitHandler').channel;
        var _a = useChannelActionContext('useSubmitHandler'), addNotification = _a.addNotification, editMessage = _a.editMessage, sendMessage = _a.sendMessage;
        var t = useTranslationContext('useSubmitHandler').t;
        var textReference = React.useRef({ hasChanged: false, initialText: text });
        React.useEffect(function () {
            if (!textReference.current.initialText.length) {
                textReference.current.initialText = text;
                return;
            }
            textReference.current.hasChanged = text !== textReference.current.initialText;
        }, [text]);
        var getAttachmentsFromUploads = function () {
            var imageAttachments = imageOrder
                .map(function (id) { return imageUploads[id]; })
                .filter(function (upload) { return upload.state !== 'failed'; })
                .filter(function (_a, _, self) {
                var id = _a.id, url = _a.url;
                return self.every(function (upload) { return upload.id === id || upload.url !== url; });
            })
                .filter(function (upload) {
                // keep the OG attachments in case the text has not changed as the BE
                // won't re-enrich the message when only attachments have changed
                if (!textReference.current.hasChanged)
                    return true;
                return !upload.og_scrape_url;
            })
                .map(function (_a) {
                var name = _a.file.name, url = _a.url, rest = __rest(_a, ["file", "url"]);
                return ({
                    author_name: rest.author_name,
                    fallback: name,
                    image_url: url,
                    og_scrape_url: rest.og_scrape_url,
                    text: rest.text,
                    title: rest.title,
                    title_link: rest.title_link,
                    type: 'image',
                });
            });
            var fileAttachments = fileOrder
                .map(function (id) { return fileUploads[id]; })
                .filter(function (upload) { return upload.state !== 'failed'; })
                .map(function (upload) { return ({
                asset_url: upload.url,
                file_size: upload.file.size,
                mime_type: upload.file.type,
                title: upload.file.name,
                type: getAttachmentTypeFromMime(upload.file.type || ''),
            }); });
            return __spreadArray(__spreadArray(__spreadArray([], attachments), imageAttachments), fileAttachments);
        };
        var handleSubmit = function (event, customMessageData) { return __awaiter$1(void 0, void 0, void 0, function () {
            var trimmedMessage, isEmptyMessage, someAttachmentsUploading, newAttachments, actualMentionedUsers, updatedMessage;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        event.preventDefault();
                        trimmedMessage = text.trim();
                        isEmptyMessage = trimmedMessage === '' ||
                            trimmedMessage === '>' ||
                            trimmedMessage === '``````' ||
                            trimmedMessage === '``' ||
                            trimmedMessage === '**' ||
                            trimmedMessage === '____' ||
                            trimmedMessage === '__' ||
                            trimmedMessage === '****';
                        if (isEmptyMessage && numberOfUploads === 0)
                            return [2 /*return*/];
                        someAttachmentsUploading = Object.values(imageUploads).some(function (upload) { return upload.state === 'uploading'; }) ||
                            Object.values(fileUploads).some(function (upload) { return upload.state === 'uploading'; });
                        if (someAttachmentsUploading) {
                            return [2 /*return*/, addNotification(t('Wait until all attachments have uploaded'), 'error')];
                        }
                        newAttachments = getAttachmentsFromUploads();
                        actualMentionedUsers = Array.from(new Set(mentioned_users.filter(function (_a) {
                            var id = _a.id, name = _a.name;
                            return text.includes("@" + id) || text.includes("@" + name);
                        })));
                        updatedMessage = {
                            attachments: newAttachments,
                            mentioned_users: actualMentionedUsers,
                            text: text,
                        };
                        if (!message) return [3 /*break*/, 5];
                        delete message.i18n;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, editMessage(__assign$2(__assign$2({}, message), updatedMessage))];
                    case 2:
                        _a.sent();
                        clearEditingState === null || clearEditingState === void 0 ? void 0 : clearEditingState();
                        dispatch({ type: 'clear' });
                        return [3 /*break*/, 4];
                    case 3:
                        _a.sent();
                        addNotification(t('Edit message request failed'), 'error');
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 13];
                    case 5:
                        _a.trys.push([5, 12, , 13]);
                        dispatch({ type: 'clear' });
                        if (!overrideSubmitHandler) return [3 /*break*/, 7];
                        return [4 /*yield*/, overrideSubmitHandler(__assign$2(__assign$2({}, updatedMessage), { parent: parent }), channel.cid, customMessageData)];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 9];
                    case 7: return [4 /*yield*/, sendMessage(__assign$2(__assign$2({}, updatedMessage), { parent: parent }), customMessageData)];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9:
                        if (!publishTypingEvent) return [3 /*break*/, 11];
                        return [4 /*yield*/, channel.stopTyping()];
                    case 10:
                        _a.sent();
                        _a.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        _a.sent();
                        dispatch({
                            getNewText: function () { return text; },
                            type: 'setText',
                        });
                        actualMentionedUsers === null || actualMentionedUsers === void 0 ? void 0 : actualMentionedUsers.forEach(function (user) {
                            dispatch({ type: 'addMentionedUser', user: user });
                        });
                        addNotification(t('Send message request failed'), 'error');
                        return [3 /*break*/, 13];
                    case 13: return [2 /*return*/];
                }
            });
        }); };
        return { handleSubmit: handleSubmit };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var usePasteHandler = function (uploadNewFiles, insertText, isUploadEnabled) {
        var onPaste = React.useCallback(function (clipboardEvent) {
            if (!isUploadEnabled)
                return;
            (function (event) { return __awaiter$1(void 0, void 0, void 0, function () {
                var items, plainTextPromise, _loop_1, i, state_1, fileLikes, pastedText;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            items = event.clipboardData.items;
                            if (!dataTransferItemsHaveFiles(Array.from(items)))
                                return [2 /*return*/];
                            event.preventDefault();
                            plainTextPromise = undefined;
                            _loop_1 = function (i) {
                                var item = items[i];
                                if (item.kind === 'string' && item.type === 'text/plain') {
                                    plainTextPromise = new Promise(function (resolve) {
                                        item.getAsString(function (string) {
                                            resolve(string);
                                        });
                                    });
                                    return "break";
                                }
                            };
                            for (i = 0; i < items.length; i++) {
                                state_1 = _loop_1(i);
                                if (state_1 === "break")
                                    break;
                            }
                            return [4 /*yield*/, dataTransferItemsToFiles(Array.from(items))];
                        case 1:
                            fileLikes = _a.sent();
                            if (fileLikes.length) {
                                uploadNewFiles(fileLikes);
                                return [2 /*return*/];
                            }
                            if (!plainTextPromise) return [3 /*break*/, 3];
                            return [4 /*yield*/, plainTextPromise];
                        case 2:
                            pastedText = _a.sent();
                            insertText(pastedText);
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); })(clipboardEvent);
        }, [insertText, uploadNewFiles]);
        return { onPaste: onPaste };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var makeEmptyMessageInputState = function () { return ({
        attachments: [],
        emojiPickerIsOpen: false,
        fileOrder: [],
        fileUploads: {},
        imageOrder: [],
        imageUploads: {},
        mentioned_users: [],
        setText: function () { return null; },
        text: '',
    }); };
    /**
     * Initializes the state. Empty if the message prop is falsy.
     */
    var initState = function (message) {
        var _a, _b, _c, _d, _e;
        if (!message) {
            return makeEmptyMessageInputState();
        }
        // if message prop is defined, get image uploads, file uploads, text, etc.
        var imageUploads = (_b = (_a = message.attachments) === null || _a === void 0 ? void 0 : _a.filter(function (_a) {
            var type = _a.type;
            return type === 'image';
        }).reduce(function (acc, _a) {
            var author_name = _a.author_name, _b = _a.fallback, fallback = _b === void 0 ? '' : _b, image_url = _a.image_url, og_scrape_url = _a.og_scrape_url, text = _a.text, title = _a.title, title_link = _a.title_link;
            var id = nanoid();
            acc[id] = {
                author_name: author_name,
                file: {
                    name: fallback,
                },
                id: id,
                og_scrape_url: og_scrape_url,
                state: 'finished',
                text: text,
                title: title,
                title_link: title_link,
                url: image_url,
            };
            return acc;
        }, {})) !== null && _b !== void 0 ? _b : {};
        var fileUploads = (_d = (_c = message.attachments) === null || _c === void 0 ? void 0 : _c.filter(function (_a) {
            var type = _a.type;
            return type === 'file';
        }).reduce(function (acc, _a) {
            var asset_url = _a.asset_url, file_size = _a.file_size, mime_type = _a.mime_type, _b = _a.title, title = _b === void 0 ? '' : _b;
            var id = nanoid();
            acc[id] = {
                file: {
                    name: title,
                    size: file_size,
                    type: mime_type,
                },
                id: id,
                state: 'finished',
                url: asset_url,
            };
            return acc;
        }, {})) !== null && _d !== void 0 ? _d : {};
        var imageOrder = Object.keys(imageUploads);
        var fileOrder = Object.keys(fileUploads);
        var attachments = ((_e = message.attachments) === null || _e === void 0 ? void 0 : _e.filter(function (_a) {
            var type = _a.type;
            return type !== 'file' && type !== 'image';
        })) || [];
        var mentioned_users = message.mentioned_users || [];
        return {
            attachments: attachments,
            emojiPickerIsOpen: false,
            fileOrder: fileOrder,
            fileUploads: fileUploads,
            imageOrder: imageOrder,
            imageUploads: imageUploads,
            mentioned_users: mentioned_users,
            setText: function () { return null; },
            text: message.text || '',
        };
    };
    /**
     * MessageInput state reducer
     */
    var messageInputReducer = function (state, action) {
        var _a, _b;
        switch (action.type) {
            case 'setEmojiPickerIsOpen':
                return __assign$2(__assign$2({}, state), { emojiPickerIsOpen: action.value });
            case 'setText':
                return __assign$2(__assign$2({}, state), { text: action.getNewText(state.text) });
            case 'clear':
                return makeEmptyMessageInputState();
            case 'setImageUpload': {
                var imageAlreadyExists = state.imageUploads[action.id];
                if (!imageAlreadyExists && !action.file)
                    return state;
                var imageOrder = imageAlreadyExists ? state.imageOrder : state.imageOrder.concat(action.id);
                var newUploadFields = __assign$2({}, action);
                delete newUploadFields.type;
                return __assign$2(__assign$2({}, state), { imageOrder: imageOrder, imageUploads: __assign$2(__assign$2({}, state.imageUploads), (_a = {}, _a[action.id] = __assign$2(__assign$2({}, state.imageUploads[action.id]), newUploadFields), _a)) });
            }
            case 'setFileUpload': {
                var fileAlreadyExists = state.fileUploads[action.id];
                if (!fileAlreadyExists && !action.file)
                    return state;
                var fileOrder = fileAlreadyExists ? state.fileOrder : state.fileOrder.concat(action.id);
                var newUploadFields = __assign$2({}, action);
                delete newUploadFields.type;
                return __assign$2(__assign$2({}, state), { fileOrder: fileOrder, fileUploads: __assign$2(__assign$2({}, state.fileUploads), (_b = {}, _b[action.id] = __assign$2(__assign$2({}, state.fileUploads[action.id]), newUploadFields), _b)) });
            }
            case 'removeImageUpload': {
                if (!state.imageUploads[action.id])
                    return state; // cannot remove anything
                var newImageUploads = __assign$2({}, state.imageUploads);
                delete newImageUploads[action.id];
                return __assign$2(__assign$2({}, state), { imageOrder: state.imageOrder.filter(function (_id) { return _id !== action.id; }), imageUploads: newImageUploads });
            }
            case 'removeFileUpload': {
                if (!state.fileUploads[action.id])
                    return state; // cannot remove anything
                var newFileUploads = __assign$2({}, state.fileUploads);
                delete newFileUploads[action.id];
                return __assign$2(__assign$2({}, state), { fileOrder: state.fileOrder.filter(function (_id) { return _id !== action.id; }), fileUploads: newFileUploads });
            }
            case 'addMentionedUser':
                return __assign$2(__assign$2({}, state), { mentioned_users: state.mentioned_users.concat(action.user) });
            default:
                return state;
        }
    };
    /**
     * hook for MessageInput state
     */
    var useMessageInputState = function (props) {
        var additionalTextareaProps = props.additionalTextareaProps, closeEmojiPickerOnClick = props.closeEmojiPickerOnClick, message = props.message;
        var _a = useChannelStateContext('useMessageInputState'), _b = _a.channelCapabilities, channelCapabilities = _b === void 0 ? {} : _b, channelConfig = _a.channelConfig;
        var defaultValue = additionalTextareaProps === null || additionalTextareaProps === void 0 ? void 0 : additionalTextareaProps.defaultValue;
        var initialStateValue = message ||
            (Array.isArray(defaultValue)
                ? { text: defaultValue.join('') }
                : { text: defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.toString() });
        var _c = React.useReducer(messageInputReducer, initialStateValue, initState), state = _c[0], dispatch = _c[1];
        var _d = useMessageInputText(props, state, dispatch), handleChange = _d.handleChange, insertText = _d.insertText, textareaRef = _d.textareaRef;
        var _e = React.useState(false), showCommandsList = _e[0], setShowCommandsList = _e[1];
        var _f = React.useState(false), showMentionsList = _f[0], setShowMentionsList = _f[1];
        var openCommandsList = function () {
            dispatch({
                getNewText: function () { return '/'; },
                type: 'setText',
            });
            setShowCommandsList(true);
        };
        var closeCommandsList = function () { return setShowCommandsList(false); };
        var openMentionsList = function () {
            dispatch({
                getNewText: function (currentText) { return currentText + '@'; },
                type: 'setText',
            });
            setShowMentionsList(true);
        };
        var closeMentionsList = function () { return setShowMentionsList(false); };
        var _g = useEmojiPicker(state, dispatch, insertText, textareaRef, closeEmojiPickerOnClick), closeEmojiPicker = _g.closeEmojiPicker, emojiPickerRef = _g.emojiPickerRef, handleEmojiKeyDown = _g.handleEmojiKeyDown, onSelectEmoji = _g.onSelectEmoji, openEmojiPicker = _g.openEmojiPicker;
        var _h = useAttachments(props, state, dispatch, textareaRef), maxFilesLeft = _h.maxFilesLeft, numberOfUploads = _h.numberOfUploads, removeFile = _h.removeFile, removeImage = _h.removeImage, uploadFile = _h.uploadFile, uploadImage = _h.uploadImage, uploadNewFiles = _h.uploadNewFiles;
        var handleSubmit = useSubmitHandler(props, state, dispatch, numberOfUploads).handleSubmit;
        var isUploadEnabled = (channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.uploads) !== false && channelCapabilities['upload-file'] !== false;
        var onPaste = usePasteHandler(uploadNewFiles, insertText, isUploadEnabled).onPaste;
        var onSelectUser = React.useCallback(function (item) {
            dispatch({ type: 'addMentionedUser', user: item });
        }, []);
        var setText = React.useCallback(function (text) {
            dispatch({ getNewText: function () { return text; }, type: 'setText' });
        }, []);
        return __assign$2(__assign$2({}, state), { closeCommandsList: closeCommandsList, 
            /**
             * TODO: fix the below at some point because this type casting is wrong
             * and just forced to not have warnings currently with the unknown casting
             */
            closeEmojiPicker: closeEmojiPicker, closeMentionsList: closeMentionsList, emojiIndex: useEmojiIndex(), emojiPickerRef: emojiPickerRef, handleChange: handleChange, handleEmojiKeyDown: handleEmojiKeyDown, handleSubmit: handleSubmit, insertText: insertText, isUploadEnabled: isUploadEnabled, maxFilesLeft: maxFilesLeft, numberOfUploads: numberOfUploads, onPaste: onPaste, onSelectEmoji: onSelectEmoji, onSelectUser: onSelectUser, openCommandsList: openCommandsList, openEmojiPicker: openEmojiPicker, openMentionsList: openMentionsList, removeFile: removeFile, removeImage: removeImage, setText: setText, showCommandsList: showCommandsList, showMentionsList: showMentionsList, textareaRef: textareaRef, uploadFile: uploadFile, uploadImage: uploadImage, uploadNewFiles: uploadNewFiles });
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var QuotedMessagePreviewHeader = function () {
        var setQuotedMessage = useChannelActionContext('QuotedMessagePreview').setQuotedMessage;
        var t = useTranslationContext('QuotedMessagePreview').t;
        return (React__default['default'].createElement("div", { className: 'quoted-message-preview-header' },
            React__default['default'].createElement("div", null, t('Reply to Message')),
            React__default['default'].createElement("button", { "aria-label": 'Cancel Reply', className: 'str-chat__square-button', onClick: function () { return setQuotedMessage(undefined); } },
                React__default['default'].createElement("svg", { height: '10', width: '10', xmlns: 'http://www.w3.org/2000/svg' },
                    React__default['default'].createElement("path", { d: 'M9.916 1.027L8.973.084 5 4.058 1.027.084l-.943.943L4.058 5 .084 8.973l.943.943L5 5.942l3.973 3.974.943-.943L5.942 5z', fillRule: 'evenodd' })))));
    };
    var QuotedMessagePreview = function (props) {
        var _a, _b;
        var quotedMessage = props.quotedMessage;
        var _c = useComponentContext('QuotedMessagePreview'), Attachment = _c.Attachment, ContextAvatar = _c.Avatar;
        var userLanguage = useTranslationContext('QuotedMessagePreview').userLanguage;
        var Avatar$1 = ContextAvatar || Avatar;
        var quotedMessageText = ((_a = quotedMessage.i18n) === null || _a === void 0 ? void 0 : _a[userLanguage + "_text"]) ||
            quotedMessage.text;
        var quotedMessageAttachment = ((_b = quotedMessage.attachments) === null || _b === void 0 ? void 0 : _b.length)
            ? quotedMessage.attachments[0]
            : null;
        if (!quotedMessageText && !quotedMessageAttachment)
            return null;
        return (React__default['default'].createElement("div", { className: 'quoted-message-preview' },
            React__default['default'].createElement(QuotedMessagePreviewHeader, null),
            React__default['default'].createElement("div", { className: 'quoted-message-preview-content' },
                quotedMessage.user && (React__default['default'].createElement(Avatar$1, { image: quotedMessage.user.image, name: quotedMessage.user.name || quotedMessage.user.id, size: 20, user: quotedMessage.user })),
                React__default['default'].createElement("div", { className: 'quoted-message-preview-content-inner' },
                    quotedMessageAttachment && React__default['default'].createElement(Attachment, { attachments: [quotedMessageAttachment] }),
                    React__default['default'].createElement("div", null, quotedMessageText)))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageInputFlat = function () {
        var _a = useChannelStateContext('MessageInputFlat'), acceptedFiles = _a.acceptedFiles, multipleUploads = _a.multipleUploads, quotedMessage = _a.quotedMessage;
        var setQuotedMessage = useChannelActionContext('MessageInputFlat').setQuotedMessage;
        var t = useTranslationContext('MessageInputFlat').t;
        var channel = useChatContext('MessageInputFlat').channel;
        var _b = useMessageInputContext('MessageInputFlat'), closeEmojiPicker = _b.closeEmojiPicker, cooldownRemaining = _b.cooldownRemaining, emojiPickerIsOpen = _b.emojiPickerIsOpen, handleSubmit = _b.handleSubmit, isUploadEnabled = _b.isUploadEnabled, maxFilesLeft = _b.maxFilesLeft, numberOfUploads = _b.numberOfUploads, openEmojiPicker = _b.openEmojiPicker, setCooldownRemaining = _b.setCooldownRemaining, uploadNewFiles = _b.uploadNewFiles;
        var _c = useComponentContext('MessageInputFlat'), _d = _c.CooldownTimer, CooldownTimer$1 = _d === void 0 ? CooldownTimer : _d, _e = _c.EmojiIcon, EmojiIcon = _e === void 0 ? EmojiIconLarge : _e, _f = _c.FileUploadIcon, FileUploadIcon = _f === void 0 ? FileUploadIconFlat : _f, _g = _c.QuotedMessagePreview, QuotedMessagePreview$1 = _g === void 0 ? QuotedMessagePreview : _g, _h = _c.SendButton, SendButton$1 = _h === void 0 ? SendButton : _h;
        React.useEffect(function () {
            var handleQuotedMessageUpdate = function (e) {
                var _a;
                if (((_a = e.message) === null || _a === void 0 ? void 0 : _a.id) !== (quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.id))
                    return;
                if (e.type === 'message.deleted') {
                    setQuotedMessage(undefined);
                    return;
                }
                setQuotedMessage(e.message);
            };
            channel === null || channel === void 0 ? void 0 : channel.on('message.deleted', handleQuotedMessageUpdate);
            channel === null || channel === void 0 ? void 0 : channel.on('message.updated', handleQuotedMessageUpdate);
            return function () {
                channel === null || channel === void 0 ? void 0 : channel.off('message.deleted', handleQuotedMessageUpdate);
                channel === null || channel === void 0 ? void 0 : channel.off('message.updated', handleQuotedMessageUpdate);
            };
        }, [channel, quotedMessage]);
        return (React__default['default'].createElement("div", { className: "str-chat__input-flat " + (SendButton$1 ? 'str-chat__input-flat--send-button-active' : '') + " " + (quotedMessage && !quotedMessage.parent_id ? 'str-chat__input-flat-quoted' : '') + "\n      " + (numberOfUploads ? 'str-chat__input-flat-has-attachments' : '') + "\n      " },
            React__default['default'].createElement(ImageDropzone, { accept: acceptedFiles, disabled: !isUploadEnabled || maxFilesLeft === 0 || !!cooldownRemaining, handleFiles: uploadNewFiles, maxNumberOfFiles: maxFilesLeft, multiple: multipleUploads },
                quotedMessage && !quotedMessage.parent_id && (React__default['default'].createElement(QuotedMessagePreview$1, { quotedMessage: quotedMessage })),
                React__default['default'].createElement("div", { className: 'str-chat__input-flat-wrapper' },
                    isUploadEnabled && React__default['default'].createElement(UploadsPreview, null),
                    React__default['default'].createElement("div", { className: 'str-chat__input-flat--textarea-wrapper' },
                        React__default['default'].createElement("div", { className: 'str-chat__emojiselect-wrapper' },
                            React__default['default'].createElement(Tooltip, null, emojiPickerIsOpen
                                ? t('Close emoji picker')
                                : t('Open emoji picker')),
                            React__default['default'].createElement("button", { "aria-label": 'Emoji picker', className: 'str-chat__input-flat-emojiselect', onClick: emojiPickerIsOpen ? closeEmojiPicker : openEmojiPicker }, cooldownRemaining ? (React__default['default'].createElement("div", { className: 'str-chat__input-flat-cooldown' },
                                React__default['default'].createElement(CooldownTimer$1, { cooldownInterval: cooldownRemaining, setCooldownRemaining: setCooldownRemaining }))) : (React__default['default'].createElement(EmojiIcon, null)))),
                        React__default['default'].createElement(EmojiPicker, null),
                        React__default['default'].createElement(ChatAutoComplete, null),
                        isUploadEnabled && !cooldownRemaining && (React__default['default'].createElement("div", { className: 'str-chat__fileupload-wrapper', "data-testid": 'fileinput' },
                            React__default['default'].createElement(Tooltip, null, maxFilesLeft
                                ? t('Attach files')
                                : t("You've reached the maximum number of files")),
                            React__default['default'].createElement(FileUploadButton, { accepts: acceptedFiles, disabled: maxFilesLeft === 0, handleFiles: uploadNewFiles, multiple: multipleUploads },
                                React__default['default'].createElement("span", { className: 'str-chat__input-flat-fileupload' },
                                    React__default['default'].createElement(FileUploadIcon, null)))))),
                    !cooldownRemaining && React__default['default'].createElement(SendButton$1, { sendMessage: handleSubmit })))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useCreateMessageInputContext = function (value) {
        var additionalTextareaProps = value.additionalTextareaProps, attachments = value.attachments, autocompleteTriggers = value.autocompleteTriggers, clearEditingState = value.clearEditingState, closeCommandsList = value.closeCommandsList, closeEmojiPicker = value.closeEmojiPicker, closeMentionsList = value.closeMentionsList, cooldownInterval = value.cooldownInterval, cooldownRemaining = value.cooldownRemaining, disabled = value.disabled, disableMentions = value.disableMentions, doFileUploadRequest = value.doFileUploadRequest, doImageUploadRequest = value.doImageUploadRequest, emojiIndex = value.emojiIndex, emojiPickerIsOpen = value.emojiPickerIsOpen, emojiPickerRef = value.emojiPickerRef, errorHandler = value.errorHandler, fileOrder = value.fileOrder, fileUploads = value.fileUploads, focus = value.focus, grow = value.grow, handleChange = value.handleChange, handleEmojiKeyDown = value.handleEmojiKeyDown, handleSubmit = value.handleSubmit, imageOrder = value.imageOrder, imageUploads = value.imageUploads, insertText = value.insertText, isUploadEnabled = value.isUploadEnabled, maxFilesLeft = value.maxFilesLeft, maxRows = value.maxRows, mentionAllAppUsers = value.mentionAllAppUsers, mentioned_users = value.mentioned_users, mentionQueryParams = value.mentionQueryParams, message = value.message, noFiles = value.noFiles, numberOfUploads = value.numberOfUploads, onPaste = value.onPaste, onSelectEmoji = value.onSelectEmoji, onSelectUser = value.onSelectUser, openCommandsList = value.openCommandsList, openEmojiPicker = value.openEmojiPicker, openMentionsList = value.openMentionsList, overrideSubmitHandler = value.overrideSubmitHandler, parent = value.parent, publishTypingEvent = value.publishTypingEvent, removeFile = value.removeFile, removeImage = value.removeImage, setCooldownRemaining = value.setCooldownRemaining, setText = value.setText, shouldSubmit = value.shouldSubmit, showCommandsList = value.showCommandsList, showMentionsList = value.showMentionsList, text = value.text, textareaRef = value.textareaRef, uploadFile = value.uploadFile, uploadImage = value.uploadImage, uploadNewFiles = value.uploadNewFiles, useMentionsTransliteration = value.useMentionsTransliteration;
        var editing = message === null || message === void 0 ? void 0 : message.editing;
        var fileUploadsValue = Object.entries(fileUploads)
            // eslint-disable-next-line
            .map(function (_a) {
            _a[0]; var value = _a[1];
            return value.state;
        })
            .join();
        var imageUploadsValue = Object.entries(imageUploads)
            // eslint-disable-next-line
            .map(function (_a) {
            _a[0]; var value = _a[1];
            return value.state;
        })
            .join();
        var mentionedUsersLength = mentioned_users.length;
        var parentId = parent === null || parent === void 0 ? void 0 : parent.id;
        var messageInputContext = React.useMemo(function () { return ({
            additionalTextareaProps: additionalTextareaProps,
            attachments: attachments,
            autocompleteTriggers: autocompleteTriggers,
            clearEditingState: clearEditingState,
            closeCommandsList: closeCommandsList,
            closeEmojiPicker: closeEmojiPicker,
            closeMentionsList: closeMentionsList,
            cooldownInterval: cooldownInterval,
            cooldownRemaining: cooldownRemaining,
            disabled: disabled,
            disableMentions: disableMentions,
            doFileUploadRequest: doFileUploadRequest,
            doImageUploadRequest: doImageUploadRequest,
            emojiIndex: emojiIndex,
            emojiPickerIsOpen: emojiPickerIsOpen,
            emojiPickerRef: emojiPickerRef,
            errorHandler: errorHandler,
            fileOrder: fileOrder,
            fileUploads: fileUploads,
            focus: focus,
            grow: grow,
            handleChange: handleChange,
            handleEmojiKeyDown: handleEmojiKeyDown,
            handleSubmit: handleSubmit,
            imageOrder: imageOrder,
            imageUploads: imageUploads,
            insertText: insertText,
            isUploadEnabled: isUploadEnabled,
            maxFilesLeft: maxFilesLeft,
            maxRows: maxRows,
            mentionAllAppUsers: mentionAllAppUsers,
            mentioned_users: mentioned_users,
            mentionQueryParams: mentionQueryParams,
            message: message,
            noFiles: noFiles,
            numberOfUploads: numberOfUploads,
            onPaste: onPaste,
            onSelectEmoji: onSelectEmoji,
            onSelectUser: onSelectUser,
            openCommandsList: openCommandsList,
            openEmojiPicker: openEmojiPicker,
            openMentionsList: openMentionsList,
            overrideSubmitHandler: overrideSubmitHandler,
            parent: parent,
            publishTypingEvent: publishTypingEvent,
            removeFile: removeFile,
            removeImage: removeImage,
            setCooldownRemaining: setCooldownRemaining,
            setText: setText,
            shouldSubmit: shouldSubmit,
            showCommandsList: showCommandsList,
            showMentionsList: showMentionsList,
            text: text,
            textareaRef: textareaRef,
            uploadFile: uploadFile,
            uploadImage: uploadImage,
            uploadNewFiles: uploadNewFiles,
            useMentionsTransliteration: useMentionsTransliteration,
        }); }, [
            cooldownInterval,
            cooldownRemaining,
            editing,
            emojiPickerIsOpen,
            fileUploadsValue,
            imageUploadsValue,
            isUploadEnabled,
            mentionedUsersLength,
            parentId,
            publishTypingEvent,
            showCommandsList,
            showMentionsList,
            text,
        ]);
        return messageInputContext;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageInputProvider = function (props) {
        var cooldownTimerState = useCooldownTimer();
        var messageInputState = useMessageInputState(props);
        var messageInputContextValue = useCreateMessageInputContext(__assign$2(__assign$2(__assign$2({}, cooldownTimerState), messageInputState), props));
        return (React__default['default'].createElement(MessageInputContextProvider, { value: messageInputContextValue }, props.children));
    };
    var UnMemoizedMessageInput = function (props) {
        var PropInput = props.Input;
        var dragAndDropWindow = useChannelStateContext().dragAndDropWindow;
        var _a = useComponentContext('MessageInput'), ContextInput = _a.Input, _b = _a.TriggerProvider, TriggerProvider = _b === void 0 ? DefaultTriggerProvider : _b;
        var Input = PropInput || ContextInput || MessageInputFlat;
        var OptionalMessageInputProvider = React.useMemo(function () { return (dragAndDropWindow ? React__default['default'].Fragment : MessageInputProvider); }, [dragAndDropWindow]);
        return (React__default['default'].createElement(OptionalMessageInputProvider, __assign$2({}, props),
            React__default['default'].createElement(TriggerProvider, null,
                React__default['default'].createElement(Input, null))));
    };
    /**
     * A high level component that has provides all functionality to the Input it renders.
     */
    var MessageInput = React__default['default'].memo(UnMemoizedMessageInput);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageInputSmall = function () {
        var _a = useChannelStateContext('MessageInputSmall'), acceptedFiles = _a.acceptedFiles, multipleUploads = _a.multipleUploads, quotedMessage = _a.quotedMessage;
        var setQuotedMessage = useChannelActionContext('MessageInputSmall').setQuotedMessage;
        var t = useTranslationContext('MessageInputSmall').t;
        var channel = useChatContext('MessageInputSmall').channel;
        var _b = useMessageInputContext('MessageInputSmall'), closeEmojiPicker = _b.closeEmojiPicker, cooldownRemaining = _b.cooldownRemaining, emojiPickerIsOpen = _b.emojiPickerIsOpen, handleSubmit = _b.handleSubmit, isUploadEnabled = _b.isUploadEnabled, maxFilesLeft = _b.maxFilesLeft, numberOfUploads = _b.numberOfUploads, openEmojiPicker = _b.openEmojiPicker, setCooldownRemaining = _b.setCooldownRemaining, uploadNewFiles = _b.uploadNewFiles;
        var _c = useComponentContext('MessageInputSmall'), _d = _c.CooldownTimer, CooldownTimer$1 = _d === void 0 ? CooldownTimer : _d, _e = _c.EmojiIcon, EmojiIcon = _e === void 0 ? EmojiIconSmall : _e, _f = _c.FileUploadIcon, FileUploadIcon = _f === void 0 ? FileUploadIconFlat : _f, _g = _c.SendButton, SendButton$1 = _g === void 0 ? SendButton : _g, _h = _c.QuotedMessagePreview, QuotedMessagePreview$1 = _h === void 0 ? QuotedMessagePreview : _h;
        React.useEffect(function () {
            var handleQuotedMessageUpdate = function (e) {
                var _a;
                if (!(quotedMessage && ((_a = e.message) === null || _a === void 0 ? void 0 : _a.id) === quotedMessage.id))
                    return;
                if (e.type === 'message.deleted') {
                    setQuotedMessage(undefined);
                    return;
                }
                setQuotedMessage(e.message);
            };
            channel === null || channel === void 0 ? void 0 : channel.on('message.deleted', handleQuotedMessageUpdate);
            channel === null || channel === void 0 ? void 0 : channel.on('message.updated', handleQuotedMessageUpdate);
            return function () {
                channel === null || channel === void 0 ? void 0 : channel.off('message.deleted', handleQuotedMessageUpdate);
                channel === null || channel === void 0 ? void 0 : channel.off('message.updated', handleQuotedMessageUpdate);
            };
        }, [channel, quotedMessage]);
        return (React__default['default'].createElement("div", { className: 'str-chat__small-message-input__wrapper' },
            React__default['default'].createElement(ImageDropzone, { accept: acceptedFiles, disabled: !isUploadEnabled || maxFilesLeft === 0 || !!cooldownRemaining, handleFiles: uploadNewFiles, maxNumberOfFiles: maxFilesLeft, multiple: multipleUploads },
                React__default['default'].createElement("div", { className: "str-chat__small-message-input " + (SendButton$1 ? 'str-chat__small-message-input--send-button-active' : '') + " " + (quotedMessage && quotedMessage.parent_id ? 'str-chat__input-flat-quoted' : '') + " " + (numberOfUploads ? 'str-chat__small-message-input-has-attachments' : '') + " " },
                    quotedMessage && quotedMessage.parent_id && (React__default['default'].createElement(QuotedMessagePreview$1, { quotedMessage: quotedMessage })),
                    isUploadEnabled && React__default['default'].createElement(UploadsPreview, null),
                    React__default['default'].createElement("div", { className: 'str-chat__small-message-input--textarea-wrapper' },
                        React__default['default'].createElement(ChatAutoComplete, null),
                        cooldownRemaining ? (React__default['default'].createElement("div", { className: 'str-chat__input-small-cooldown' },
                            React__default['default'].createElement(CooldownTimer$1, { cooldownInterval: cooldownRemaining, setCooldownRemaining: setCooldownRemaining }))) : (React__default['default'].createElement(React__default['default'].Fragment, null,
                            isUploadEnabled && (React__default['default'].createElement("div", { className: 'str-chat__fileupload-wrapper', "data-testid": 'fileinput' },
                                React__default['default'].createElement(Tooltip, null, maxFilesLeft
                                    ? t('Attach files')
                                    : t("You've reached the maximum number of files")),
                                React__default['default'].createElement(FileUploadButton, { accepts: acceptedFiles, disabled: maxFilesLeft === 0, handleFiles: uploadNewFiles, multiple: multipleUploads },
                                    React__default['default'].createElement("span", { className: 'str-chat__small-message-input-fileupload' },
                                        React__default['default'].createElement(FileUploadIcon, null))))),
                            React__default['default'].createElement("div", { className: 'str-chat__emojiselect-wrapper' },
                                React__default['default'].createElement(Tooltip, null, emojiPickerIsOpen
                                    ? t('Close emoji picker')
                                    : t('Open emoji picker')),
                                React__default['default'].createElement("button", { "aria-label": 'Emoji picker', className: 'str-chat__small-message-input-emojiselect', onClick: emojiPickerIsOpen ? closeEmojiPicker : openEmojiPicker },
                                    React__default['default'].createElement(EmojiIcon, null))))),
                        React__default['default'].createElement(EmojiPicker, { small: true })),
                    !cooldownRemaining && React__default['default'].createElement(SendButton$1, { sendMessage: handleSubmit })))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MMLReact = React__default['default'].lazy(function () { return __awaiter$1(void 0, void 0, void 0, function () {
        var mml;
        return __generator$1(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.resolve().then(function () { return mmlReact_esm; })];
                case 1:
                    mml = _a.sent();
                    return [2 /*return*/, { default: mml.MML }];
            }
        });
    }); });
    /**
     * A wrapper component around MML-React library
     */
    var MML$1 = function (props) {
        var actionHandler = props.actionHandler, _a = props.align, align = _a === void 0 ? 'right' : _a, source = props.source;
        var theme = useChatContext('MML').theme;
        return (React__default['default'].createElement(React.Suspense, { fallback: null },
            React__default['default'].createElement(MMLReact, { className: "mml-align-" + align, Loading: null, onSubmit: actionHandler, source: source, Success: null, theme: (theme || '').replace(' ', '-') })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var isMutableRef = function (ref) {
        if (ref) {
            return ref.current !== undefined;
        }
        return false;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedReactionSelector = React__default['default'].forwardRef(function (props, ref) {
        var _a;
        var _b = props.additionalEmojiProps, additionalEmojiProps = _b === void 0 ? {} : _b, propAvatar = props.Avatar, _c = props.detailedView, detailedView = _c === void 0 ? true : _c, propHandleReaction = props.handleReaction, propLatestReactions = props.latest_reactions, propReactionCounts = props.reaction_counts, propReactionOptions = props.reactionOptions, _d = props.reverse, reverse = _d === void 0 ? false : _d;
        var contextAvatar = useComponentContext('ReactionSelector').Avatar;
        var _e = useEmojiContext('ReactionSelector'), Emoji = _e.Emoji, emojiConfig = _e.emojiConfig;
        var _f = useMessageContext('ReactionSelector'), contextHandleReaction = _f.handleReaction, message = _f.message;
        var _g = emojiConfig || {}, defaultMinimalEmojis = _g.defaultMinimalEmojis, fullEmojiData = _g.emojiData, emojiSetDef = _g.emojiSetDef;
        var Avatar$1 = propAvatar || contextAvatar || Avatar;
        var handleReaction = propHandleReaction || contextHandleReaction;
        var latestReactions = propLatestReactions || (message === null || message === void 0 ? void 0 : message.latest_reactions) || [];
        var reactionCounts = propReactionCounts || (message === null || message === void 0 ? void 0 : message.reaction_counts) || {};
        var reactionOptions = propReactionOptions || defaultMinimalEmojis;
        var reactionsAreCustom = !!(propReactionOptions === null || propReactionOptions === void 0 ? void 0 : propReactionOptions.length);
        var emojiData = React.useMemo(function () { return (reactionsAreCustom ? fullEmojiData : getStrippedEmojiData(fullEmojiData)); }, [fullEmojiData, reactionsAreCustom]);
        var _h = React.useState(null), tooltipReactionType = _h[0], setTooltipReactionType = _h[1];
        var _j = React.useState(null), tooltipPositions = _j[0], setTooltipPositions = _j[1];
        var targetRef = React.useRef(null);
        var tooltipRef = React.useRef(null);
        var showTooltip = React.useCallback(function (event, reactionType) {
            targetRef.current = event.currentTarget;
            setTooltipReactionType(reactionType);
        }, []);
        var hideTooltip = React.useCallback(function () {
            setTooltipReactionType(null);
            setTooltipPositions(null);
        }, []);
        React.useEffect(function () {
            var _a, _b, _c;
            if (tooltipReactionType) {
                var tooltip = (_a = tooltipRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
                var target = (_b = targetRef.current) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect();
                var container = isMutableRef(ref) ? (_c = ref.current) === null || _c === void 0 ? void 0 : _c.getBoundingClientRect() : null;
                if (!tooltip || !target || !container)
                    return;
                var tooltipPosition = tooltip.width === container.width || tooltip.x < container.x
                    ? 0
                    : target.left + target.width / 2 - container.left - tooltip.width / 2;
                var arrowPosition = target.x - tooltip.x + target.width / 2 - tooltipPosition;
                setTooltipPositions({
                    arrow: arrowPosition,
                    tooltip: tooltipPosition,
                });
            }
        }, [tooltipReactionType, ref]);
        var getUsersPerReactionType = function (type) {
            return latestReactions
                .map(function (reaction) {
                var _a, _b;
                if (reaction.type === type) {
                    return ((_a = reaction.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = reaction.user) === null || _b === void 0 ? void 0 : _b.id);
                }
                return null;
            })
                .filter(Boolean);
        };
        var getLatestUserForReactionType = function (type) {
            var _a;
            return ((_a = latestReactions.find(function (reaction) { return reaction.type === type && !!reaction.user; })) === null || _a === void 0 ? void 0 : _a.user) ||
                undefined;
        };
        return (React__default['default'].createElement("div", { className: "str-chat__reaction-selector " + (reverse ? 'str-chat__reaction-selector--reverse' : ''), "data-testid": 'reaction-selector', ref: ref },
            !!tooltipReactionType && detailedView && (React__default['default'].createElement("div", { className: 'str-chat__reaction-selector-tooltip', ref: tooltipRef, style: {
                    left: tooltipPositions === null || tooltipPositions === void 0 ? void 0 : tooltipPositions.tooltip,
                    visibility: tooltipPositions ? 'visible' : 'hidden',
                } },
                React__default['default'].createElement("div", { className: 'arrow', style: { left: tooltipPositions === null || tooltipPositions === void 0 ? void 0 : tooltipPositions.arrow } }), (_a = getUsersPerReactionType(tooltipReactionType)) === null || _a === void 0 ? void 0 :
                _a.map(function (user, i, users) { return (React__default['default'].createElement("span", { className: 'latest-user-username', key: "key-" + i + "-" + user }, "" + user + (i < users.length - 1 ? ', ' : ''))); }))),
            React__default['default'].createElement("ul", { className: 'str-chat__message-reactions-list' }, reactionOptions.map(function (reactionOption) {
                var latestUser = getLatestUserForReactionType(reactionOption.id);
                var count = reactionCounts && reactionCounts[reactionOption.id];
                return (React__default['default'].createElement("li", { key: "item-" + reactionOption.id },
                    React__default['default'].createElement("button", { "aria-label": "Select Reaction: " + reactionOption.name, className: 'str-chat__message-reactions-list-item', "data-text": reactionOption.id, onClick: function (event) { return handleReaction(reactionOption.id, event); } },
                        !!count && detailedView && (React__default['default'].createElement(React__default['default'].Fragment, null,
                            React__default['default'].createElement("div", { className: 'latest-user', onClick: hideTooltip, onMouseEnter: function (e) { return showTooltip(e, reactionOption.id); }, onMouseLeave: hideTooltip }, latestUser ? (React__default['default'].createElement(Avatar$1, { image: latestUser.image, name: latestUser.name, size: 20, user: latestUser })) : (React__default['default'].createElement("div", { className: 'latest-user-not-found' }))))),
                        React__default['default'].createElement(React.Suspense, { fallback: null },
                            React__default['default'].createElement(Emoji, __assign$2({ data: emojiData, emoji: reactionOption, size: 20 }, (reactionsAreCustom ? additionalEmojiProps : emojiSetDef)))),
                        Boolean(count) && detailedView && (React__default['default'].createElement("span", { className: 'str-chat__message-reactions-list-item__count' }, count || '')))));
            }))));
    });
    /**
     * Component that allows a user to select a reaction.
     */
    var ReactionSelector = React__default['default'].memo(UnMemoizedReactionSelector);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedReactionsList = function (props) {
        var additionalEmojiProps = props.additionalEmojiProps, onClick = props.onClick, propReactionCounts = props.reaction_counts, propReactionOptions = props.reactionOptions, propReactions = props.reactions, _a = props.reverse, reverse = _a === void 0 ? false : _a;
        var _b = useEmojiContext('ReactionsList'), Emoji = _b.Emoji, emojiConfig = _b.emojiConfig;
        var _c = useMessageContext('ReactionsList'), message = _c.message, onReactionListClick = _c.onReactionListClick;
        var _d = emojiConfig || {}, defaultMinimalEmojis = _d.defaultMinimalEmojis, fullEmojiData = _d.emojiData, emojiSetDef = _d.emojiSetDef;
        var reactions = propReactions || message.latest_reactions || [];
        var reactionCounts = propReactionCounts || message.reaction_counts || {};
        var reactionOptions = propReactionOptions || defaultMinimalEmojis;
        var reactionsAreCustom = !!(propReactionOptions === null || propReactionOptions === void 0 ? void 0 : propReactionOptions.length);
        var emojiData = React.useMemo(function () { return (reactionsAreCustom ? fullEmojiData : getStrippedEmojiData(fullEmojiData)); }, [fullEmojiData, reactionsAreCustom]);
        if (!reactions.length)
            return null;
        var getTotalReactionCount = function () {
            return Object.values(reactionCounts).reduce(function (total, count) { return total + count; }, 0);
        };
        var getCurrentMessageReactionTypes = function () {
            var reactionTypes = [];
            reactions.forEach(function (_a) {
                var type = _a.type;
                if (reactionTypes.indexOf(type) === -1) {
                    reactionTypes.push(type);
                }
            });
            return reactionTypes;
        };
        var getEmojiByReactionType = function (type) {
            var reactionEmoji = reactionOptions.find(function (option) { return option.id === type; });
            return reactionEmoji;
        };
        var getSupportedReactionMap = function () {
            var reactionMap = {};
            reactionOptions.forEach(function (_a) {
                var id = _a.id;
                return (reactionMap[id] = true);
            });
            return reactionMap;
        };
        var messageReactionTypes = getCurrentMessageReactionTypes();
        var supportedReactionMap = getSupportedReactionMap();
        var supportedReactionsArePresent = messageReactionTypes.some(function (type) { return supportedReactionMap[type]; });
        if (!supportedReactionsArePresent)
            return null;
        return (React__default['default'].createElement("div", { "aria-label": 'Reaction list', className: "str-chat__reaction-list " + (reverse ? 'str-chat__reaction-list--reverse' : ''), "data-testid": 'reaction-list', onClick: onClick || onReactionListClick, onKeyPress: onClick || onReactionListClick, role: 'figure' },
            React__default['default'].createElement("ul", null,
                messageReactionTypes.map(function (reactionType) {
                    var emojiObject = getEmojiByReactionType(reactionType);
                    return emojiObject ? (React__default['default'].createElement("li", { key: emojiObject.id },
                        React__default['default'].createElement("button", { "aria-label": "Reactions: " + reactionType },
                            React__default['default'].createElement(React.Suspense, { fallback: null },
                                React__default['default'].createElement(Emoji, __assign$2({ data: emojiData, emoji: emojiObject, size: 16 }, (reactionsAreCustom ? additionalEmojiProps : emojiSetDef)))),
                            "\u00A0"))) : null;
                }),
                React__default['default'].createElement("li", null,
                    React__default['default'].createElement("span", { className: 'str-chat__reaction-list--counter' }, getTotalReactionCount())))));
    };
    /**
     * Component that displays a list of reactions on a message.
     */
    var ReactionsList = React__default['default'].memo(UnMemoizedReactionsList);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedSimpleReactionsList = function (props) {
        var _a = props.additionalEmojiProps, additionalEmojiProps = _a === void 0 ? {} : _a, propHandleReaction = props.handleReaction, propReactionCounts = props.reaction_counts, propReactionOptions = props.reactionOptions, propReactions = props.reactions;
        var _b = useEmojiContext('SimpleReactionsList'), Emoji = _b.Emoji, emojiConfig = _b.emojiConfig;
        var _c = useMessageContext('SimpleReactionsList'), contextHandleReaction = _c.handleReaction, message = _c.message;
        var _d = emojiConfig || {}, defaultMinimalEmojis = _d.defaultMinimalEmojis, fullEmojiData = _d.emojiData, emojiSetDef = _d.emojiSetDef;
        var _e = React.useState(undefined), tooltipReactionType = _e[0], setTooltipReactionType = _e[1];
        var handleReaction = propHandleReaction || contextHandleReaction;
        var reactions = propReactions || message.latest_reactions || [];
        var reactionCounts = propReactionCounts || message.reaction_counts || {};
        var reactionOptions = propReactionOptions || defaultMinimalEmojis;
        var reactionsAreCustom = !!(propReactionOptions === null || propReactionOptions === void 0 ? void 0 : propReactionOptions.length);
        var emojiData = React.useMemo(function () { return (reactionsAreCustom ? fullEmojiData : getStrippedEmojiData(fullEmojiData)); }, [fullEmojiData, reactionsAreCustom]);
        if (!reactions.length)
            return null;
        var getUsersPerReactionType = function (type) {
            return reactions
                .map(function (reaction) {
                var _a, _b;
                if (reaction.type === type) {
                    return ((_a = reaction.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = reaction.user) === null || _b === void 0 ? void 0 : _b.id);
                }
                return null;
            })
                .filter(Boolean);
        };
        var getTotalReactionCount = function () {
            return Object.values(reactionCounts).reduce(function (total, count) { return total + count; }, 0);
        };
        var getCurrentMessageReactionTypes = function () {
            var reactionTypes = [];
            reactions.forEach(function (_a) {
                var type = _a.type;
                if (reactionTypes.indexOf(type) === -1) {
                    reactionTypes.push(type);
                }
            });
            return reactionTypes;
        };
        var getEmojiByReactionType = function (type) {
            var reactionEmoji = reactionOptions.find(function (option) { return option.id === type; });
            return reactionEmoji;
        };
        var getSupportedReactionMap = function () {
            var reactionMap = {};
            reactionOptions.forEach(function (_a) {
                var id = _a.id;
                return (reactionMap[id] = true);
            });
            return reactionMap;
        };
        var messageReactionTypes = getCurrentMessageReactionTypes();
        var supportedReactionMap = getSupportedReactionMap();
        var supportedReactionsArePresent = messageReactionTypes.some(function (type) { return supportedReactionMap[type]; });
        if (!supportedReactionsArePresent)
            return null;
        return (React__default['default'].createElement("ul", { className: 'str-chat__simple-reactions-list', "data-testid": 'simple-reaction-list', onMouseLeave: function () { return setTooltipReactionType(undefined); } },
            messageReactionTypes.map(function (reactionType, i) {
                var _a;
                var emojiObject = getEmojiByReactionType(reactionType);
                return emojiObject ? (React__default['default'].createElement("li", { className: 'str-chat__simple-reactions-list-item', key: emojiObject.id + "-" + i, onClick: function (event) { return handleReaction(reactionType, event); }, onKeyPress: function (event) { return handleReaction(reactionType, event); } },
                    React__default['default'].createElement("span", { onMouseEnter: function () { return setTooltipReactionType(reactionType); } },
                        React__default['default'].createElement(React.Suspense, { fallback: null },
                            React__default['default'].createElement(Emoji, __assign$2({ data: emojiData, emoji: emojiObject, size: 13 }, (reactionsAreCustom ? additionalEmojiProps : emojiSetDef)))),
                        "\u00A0"),
                    tooltipReactionType === emojiObject.id && (React__default['default'].createElement("div", { className: 'str-chat__simple-reactions-list-tooltip' },
                        React__default['default'].createElement("div", { className: 'arrow' }), (_a = getUsersPerReactionType(tooltipReactionType)) === null || _a === void 0 ? void 0 :
                        _a.join(', '))))) : null;
            }),
            React__default['default'].createElement("li", { className: 'str-chat__simple-reactions-list-item--last-number' }, getTotalReactionCount())));
    };
    var SimpleReactionsList = React__default['default'].memo(UnMemoizedSimpleReactionsList);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageSimpleWithContext = function (props) {
        var _a;
        var additionalMessageInputProps = props.additionalMessageInputProps, clearEditingState = props.clearEditingState, editing = props.editing, endOfGroup = props.endOfGroup, firstOfGroup = props.firstOfGroup, groupedByUser = props.groupedByUser, handleAction = props.handleAction, handleOpenThread = props.handleOpenThread, handleRetry = props.handleRetry, highlighted = props.highlighted, isMyMessage = props.isMyMessage, isReactionEnabled = props.isReactionEnabled, message = props.message, onUserClick = props.onUserClick, onUserHover = props.onUserHover, reactionSelectorRef = props.reactionSelectorRef, showDetailedReactions = props.showDetailedReactions, threadList = props.threadList;
        var _b = useComponentContext('MessageSimple'), Attachment = _b.Attachment, _c = _b.Avatar, Avatar$1 = _c === void 0 ? Avatar : _c, _d = _b.EditMessageInput, EditMessageInput = _d === void 0 ? EditMessageForm : _d, _e = _b.MessageDeleted, MessageDeleted$1 = _e === void 0 ? MessageDeleted : _e, _f = _b.MessageOptions, MessageOptions$1 = _f === void 0 ? MessageOptions : _f, _g = _b.MessageRepliesCountButton, MessageRepliesCountButton$1 = _g === void 0 ? MessageRepliesCountButton : _g, _h = _b.MessageStatus, MessageStatus$1 = _h === void 0 ? MessageStatus : _h, _j = _b.MessageTimestamp, MessageTimestamp$1 = _j === void 0 ? MessageTimestamp : _j, _k = _b.ReactionSelector, ReactionSelector$1 = _k === void 0 ? ReactionSelector : _k, _l = _b.ReactionsList, ReactionsList$1 = _l === void 0 ? ReactionsList : _l;
        var hasAttachment = messageHasAttachments(message);
        var hasReactions = messageHasReactions(message);
        var messageClasses = isMyMessage()
            ? 'str-chat__message str-chat__message--me str-chat__message-simple str-chat__message-simple--me'
            : 'str-chat__message str-chat__message-simple';
        if (message.customType === CUSTOM_MESSAGE_TYPE.date) {
            return null;
        }
        if (message.deleted_at || message.type === 'deleted') {
            return React__default['default'].createElement(MessageDeleted$1, { message: message });
        }
        return (React__default['default'].createElement(React__default['default'].Fragment, null,
            editing && (React__default['default'].createElement(Modal, { onClose: clearEditingState, open: editing },
                React__default['default'].createElement(MessageInput, __assign$2({ clearEditingState: clearEditingState, Input: EditMessageInput, message: message }, additionalMessageInputProps)))),
            React__default['default'].createElement("div", { className: ("\n\t\t\t\t\t\t" + messageClasses + "\n\t\t\t\t\t\tstr-chat__message--" + message.type + "\n\t\t\t\t\t\tstr-chat__message--" + message.status + "\n\t\t\t\t\t\t" + (message.text ? 'str-chat__message--has-text' : 'has-no-text') + "\n\t\t\t\t\t\t" + (hasAttachment ? 'str-chat__message--has-attachment' : '') + "\n            " + (hasReactions && isReactionEnabled ? 'str-chat__message--with-reactions' : '') + "\n            " + (highlighted ? 'str-chat__message--highlighted' : '') + "\n            " + (message.pinned ? 'pinned-message' : '') + "\n            " + (groupedByUser ? 'str-chat__virtual-message__wrapper--group' : '') + "\n            " + (firstOfGroup ? 'str-chat__virtual-message__wrapper--first' : '') + "\n            " + (endOfGroup ? 'str-chat__virtual-message__wrapper--end' : '') + "\n\t\t\t\t\t").trim(), key: message.id },
                React__default['default'].createElement(MessageStatus$1, null),
                message.user && (React__default['default'].createElement(Avatar$1, { image: message.user.image, name: message.user.name || message.user.id, onClick: onUserClick, onMouseOver: onUserHover, user: message.user })),
                React__default['default'].createElement("div", { className: 'str-chat__message-inner', "data-testid": 'message-inner', onClick: message.status === 'failed' && message.errorStatusCode !== 403
                        ? function () { return handleRetry(message); }
                        : undefined, onKeyPress: message.status === 'failed' && message.errorStatusCode !== 403
                        ? function () { return handleRetry(message); }
                        : undefined },
                    React__default['default'].createElement(React__default['default'].Fragment, null,
                        React__default['default'].createElement(MessageOptions$1, null),
                        hasReactions && !showDetailedReactions && isReactionEnabled && (React__default['default'].createElement(ReactionsList$1, { reverse: true })),
                        showDetailedReactions && isReactionEnabled && (React__default['default'].createElement(ReactionSelector$1, { ref: reactionSelectorRef }))),
                    ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) && !message.quoted_message ? (React__default['default'].createElement(Attachment, { actionHandler: handleAction, attachments: message.attachments })) : null,
                    React__default['default'].createElement(MessageText, { message: message }),
                    message.mml && (React__default['default'].createElement(MML$1, { actionHandler: handleAction, align: isMyMessage() ? 'right' : 'left', source: message.mml })),
                    !threadList && !!message.reply_count && (React__default['default'].createElement("div", { className: 'str-chat__message-simple-reply-button' },
                        React__default['default'].createElement(MessageRepliesCountButton$1, { onClick: handleOpenThread, reply_count: message.reply_count }))),
                    (!groupedByUser || endOfGroup) && (React__default['default'].createElement("div", { className: "str-chat__message-data str-chat__message-simple-data" },
                        !isMyMessage() && message.user ? (React__default['default'].createElement("span", { className: 'str-chat__message-simple-name' }, message.user.name || message.user.id)) : null,
                        React__default['default'].createElement(MessageTimestamp$1, { calendar: true, customClass: 'str-chat__message-simple-timestamp' })))))));
    };
    var MemoizedMessageSimple = React__default['default'].memo(MessageSimpleWithContext, areMessageUIPropsEqual);
    /**
     * The default UI component that renders a message and receives functionality and logic from the MessageContext.
     */
    var MessageSimple = function (props) {
        var messageContext = useMessageContext('MessageSimple');
        return React__default['default'].createElement(MemoizedMessageSimple, __assign$2({}, messageContext, props));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DropzoneInner = function (_a) {
        var children = _a.children;
        var _b = useChannelStateContext('DropzoneProvider'), acceptedFiles = _b.acceptedFiles, multipleUploads = _b.multipleUploads;
        var _c = useMessageInputContext('DropzoneProvider'), cooldownRemaining = _c.cooldownRemaining, isUploadEnabled = _c.isUploadEnabled, maxFilesLeft = _c.maxFilesLeft, uploadNewFiles = _c.uploadNewFiles;
        return (React__default['default'].createElement(ImageDropzone, { accept: acceptedFiles, disabled: !isUploadEnabled || maxFilesLeft === 0 || !!cooldownRemaining, handleFiles: uploadNewFiles, maxNumberOfFiles: maxFilesLeft, multiple: multipleUploads }, children));
    };
    var DropzoneProvider = function (props) {
        var cooldownTimerState = useCooldownTimer();
        var messageInputState = useMessageInputState(props);
        var messageInputContextValue = useCreateMessageInputContext(__assign$2(__assign$2(__assign$2({}, cooldownTimerState), messageInputState), props));
        return (React__default['default'].createElement(MessageInputContextProvider, { value: messageInputContextValue },
            React__default['default'].createElement(DropzoneInner, null, props.children)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var compressed=true;var categories=[{id:"people",name:"Smileys & People",emojis:["grinning","smiley","smile","grin","laughing","sweat_smile","rolling_on_the_floor_laughing","joy","slightly_smiling_face","upside_down_face","wink","blush","innocent","smiling_face_with_3_hearts","heart_eyes","star-struck","kissing_heart","kissing","relaxed","kissing_closed_eyes","kissing_smiling_eyes","yum","stuck_out_tongue","stuck_out_tongue_winking_eye","zany_face","stuck_out_tongue_closed_eyes","money_mouth_face","hugging_face","face_with_hand_over_mouth","shushing_face","thinking_face","zipper_mouth_face","face_with_raised_eyebrow","neutral_face","expressionless","no_mouth","smirk","unamused","face_with_rolling_eyes","grimacing","lying_face","relieved","pensive","sleepy","drooling_face","sleeping","mask","face_with_thermometer","face_with_head_bandage","nauseated_face","face_vomiting","sneezing_face","hot_face","cold_face","woozy_face","dizzy_face","exploding_head","face_with_cowboy_hat","partying_face","sunglasses","nerd_face","face_with_monocle","confused","worried","slightly_frowning_face","white_frowning_face","open_mouth","hushed","astonished","flushed","pleading_face","frowning","anguished","fearful","cold_sweat","disappointed_relieved","cry","sob","scream","confounded","persevere","disappointed","sweat","weary","tired_face","yawning_face","triumph","rage","angry","face_with_symbols_on_mouth","smiling_imp","imp","skull","skull_and_crossbones","hankey","clown_face","japanese_ogre","japanese_goblin","ghost","alien","space_invader","robot_face","smiley_cat","smile_cat","joy_cat","heart_eyes_cat","smirk_cat","kissing_cat","scream_cat","crying_cat_face","pouting_cat","see_no_evil","hear_no_evil","speak_no_evil","wave","raised_back_of_hand","raised_hand_with_fingers_splayed","hand","spock-hand","ok_hand","pinching_hand","v","crossed_fingers","i_love_you_hand_sign","the_horns","call_me_hand","point_left","point_right","point_up_2","middle_finger","point_down","point_up","+1","-1","fist","facepunch","left-facing_fist","right-facing_fist","clap","raised_hands","open_hands","palms_up_together","handshake","pray","writing_hand","nail_care","selfie","muscle","mechanical_arm","mechanical_leg","leg","foot","ear","ear_with_hearing_aid","nose","brain","tooth","bone","eyes","eye","tongue","lips","baby","child","boy","girl","adult","man","bearded_person","red_haired_man","curly_haired_man","white_haired_man","bald_man","woman","red_haired_woman","curly_haired_woman","white_haired_woman","bald_woman","blond-haired-woman","blond-haired-man","older_adult","older_man","older_woman","man-frowning","woman-frowning","man-pouting","woman-pouting","man-gesturing-no","woman-gesturing-no","man-gesturing-ok","woman-gesturing-ok","man-tipping-hand","woman-tipping-hand","man-raising-hand","woman-raising-hand","deaf_person","deaf_man","deaf_woman","man-bowing","woman-bowing","man-facepalming","woman-facepalming","man-shrugging","woman-shrugging","male-doctor","female-doctor","male-student","female-student","male-teacher","female-teacher","male-judge","female-judge","male-farmer","female-farmer","male-cook","female-cook","male-mechanic","female-mechanic","male-factory-worker","female-factory-worker","male-office-worker","female-office-worker","male-scientist","female-scientist","male-technologist","female-technologist","male-singer","female-singer","male-artist","female-artist","male-pilot","female-pilot","male-astronaut","female-astronaut","male-firefighter","female-firefighter","male-police-officer","female-police-officer","male-guard","female-guard","male-construction-worker","female-construction-worker","prince","princess","man-wearing-turban","woman-wearing-turban","man_with_gua_pi_mao","person_with_headscarf","man_in_tuxedo","bride_with_veil","pregnant_woman","breast-feeding","angel","santa","mrs_claus","superhero","male_superhero","female_superhero","supervillain","male_supervillain","female_supervillain","mage","male_mage","female_mage","fairy","male_fairy","female_fairy","vampire","male_vampire","female_vampire","merperson","merman","mermaid","elf","male_elf","female_elf","genie","male_genie","female_genie","zombie","male_zombie","female_zombie","man-getting-massage","woman-getting-massage","man-getting-haircut","woman-getting-haircut","man-walking","woman-walking","standing_person","man_standing","woman_standing","kneeling_person","man_kneeling","woman_kneeling","man_with_probing_cane","woman_with_probing_cane","man_in_motorized_wheelchair","woman_in_motorized_wheelchair","man_in_manual_wheelchair","woman_in_manual_wheelchair","man-running","woman-running","dancer","man_dancing","man_in_business_suit_levitating","dancers","man-with-bunny-ears-partying","woman-with-bunny-ears-partying","person_in_steamy_room","man_in_steamy_room","woman_in_steamy_room","person_climbing","man_climbing","woman_climbing","fencer","horse_racing","skier","snowboarder","man-surfing","woman-surfing","man-rowing-boat","woman-rowing-boat","man-swimming","woman-swimming","man-biking","woman-biking","man-mountain-biking","woman-mountain-biking","man-cartwheeling","woman-cartwheeling","wrestlers","man-wrestling","woman-wrestling","man-playing-water-polo","woman-playing-water-polo","man-playing-handball","woman-playing-handball","juggling","man-juggling","woman-juggling","person_in_lotus_position","man_in_lotus_position","woman_in_lotus_position","bath","sleeping_accommodation","people_holding_hands","two_women_holding_hands","couple","two_men_holding_hands","couplekiss","woman-kiss-man","man-kiss-man","woman-kiss-woman","couple_with_heart","woman-heart-man","man-heart-man","woman-heart-woman","family","man-woman-boy","man-woman-girl","man-woman-girl-boy","man-woman-boy-boy","man-woman-girl-girl","man-man-boy","man-man-girl","man-man-girl-boy","man-man-boy-boy","man-man-girl-girl","woman-woman-boy","woman-woman-girl","woman-woman-girl-boy","woman-woman-boy-boy","woman-woman-girl-girl","man-boy","man-boy-boy","man-girl","man-girl-boy","man-girl-girl","woman-boy","woman-boy-boy","woman-girl","woman-girl-boy","woman-girl-girl","speaking_head_in_silhouette","bust_in_silhouette","busts_in_silhouette","footprints","kiss","love_letter","cupid","gift_heart","sparkling_heart","heartpulse","heartbeat","revolving_hearts","two_hearts","heart_decoration","heavy_heart_exclamation_mark_ornament","broken_heart","heart","orange_heart","yellow_heart","green_heart","blue_heart","purple_heart","brown_heart","black_heart","white_heart","100","anger","boom","dizzy","sweat_drops","dash","hole","bomb","speech_balloon","left_speech_bubble","right_anger_bubble","thought_balloon","zzz"]},{id:"nature",name:"Animals & Nature",emojis:["monkey_face","monkey","gorilla","orangutan","dog","dog2","guide_dog","service_dog","poodle","wolf","fox_face","raccoon","cat","cat2","lion_face","tiger","tiger2","leopard","horse","racehorse","unicorn_face","zebra_face","deer","cow","ox","water_buffalo","cow2","pig","pig2","boar","pig_nose","ram","sheep","goat","dromedary_camel","camel","llama","giraffe_face","elephant","rhinoceros","hippopotamus","mouse","mouse2","rat","hamster","rabbit","rabbit2","chipmunk","hedgehog","bat","bear","koala","panda_face","sloth","otter","skunk","kangaroo","badger","feet","turkey","chicken","rooster","hatching_chick","baby_chick","hatched_chick","bird","penguin","dove_of_peace","eagle","duck","swan","owl","flamingo","peacock","parrot","frog","crocodile","turtle","lizard","snake","dragon_face","dragon","sauropod","t-rex","whale","whale2","dolphin","fish","tropical_fish","blowfish","shark","octopus","shell","snail","butterfly","bug","ant","bee","beetle","cricket","spider","spider_web","scorpion","mosquito","microbe","bouquet","cherry_blossom","white_flower","rosette","rose","wilted_flower","hibiscus","sunflower","blossom","tulip","seedling","evergreen_tree","deciduous_tree","palm_tree","cactus","ear_of_rice","herb","shamrock","four_leaf_clover","maple_leaf","fallen_leaf","leaves"]},{id:"foods",name:"Food & Drink",emojis:["grapes","melon","watermelon","tangerine","lemon","banana","pineapple","mango","apple","green_apple","pear","peach","cherries","strawberry","kiwifruit","tomato","coconut","avocado","eggplant","potato","carrot","corn","hot_pepper","cucumber","leafy_green","broccoli","garlic","onion","mushroom","peanuts","chestnut","bread","croissant","baguette_bread","pretzel","bagel","pancakes","waffle","cheese_wedge","meat_on_bone","poultry_leg","cut_of_meat","bacon","hamburger","fries","pizza","hotdog","sandwich","taco","burrito","stuffed_flatbread","falafel","egg","fried_egg","shallow_pan_of_food","stew","bowl_with_spoon","green_salad","popcorn","butter","salt","canned_food","bento","rice_cracker","rice_ball","rice","curry","ramen","spaghetti","sweet_potato","oden","sushi","fried_shrimp","fish_cake","moon_cake","dango","dumpling","fortune_cookie","takeout_box","crab","lobster","shrimp","squid","oyster","icecream","shaved_ice","ice_cream","doughnut","cookie","birthday","cake","cupcake","pie","chocolate_bar","candy","lollipop","custard","honey_pot","baby_bottle","glass_of_milk","coffee","tea","sake","champagne","wine_glass","cocktail","tropical_drink","beer","beers","clinking_glasses","tumbler_glass","cup_with_straw","beverage_box","mate_drink","ice_cube","chopsticks","knife_fork_plate","fork_and_knife","spoon","hocho","amphora"]},{id:"activity",name:"Activities",emojis:["jack_o_lantern","christmas_tree","fireworks","sparkler","firecracker","sparkles","balloon","tada","confetti_ball","tanabata_tree","bamboo","dolls","flags","wind_chime","rice_scene","red_envelope","ribbon","gift","reminder_ribbon","admission_tickets","ticket","medal","trophy","sports_medal","first_place_medal","second_place_medal","third_place_medal","soccer","baseball","softball","basketball","volleyball","football","rugby_football","tennis","flying_disc","bowling","cricket_bat_and_ball","field_hockey_stick_and_ball","ice_hockey_stick_and_puck","lacrosse","table_tennis_paddle_and_ball","badminton_racquet_and_shuttlecock","boxing_glove","martial_arts_uniform","goal_net","golf","ice_skate","fishing_pole_and_fish","diving_mask","running_shirt_with_sash","ski","sled","curling_stone","dart","yo-yo","kite","8ball","crystal_ball","nazar_amulet","video_game","joystick","slot_machine","game_die","jigsaw","teddy_bear","spades","hearts","diamonds","clubs","chess_pawn","black_joker","mahjong","flower_playing_cards","performing_arts","frame_with_picture","art","thread","yarn"]},{id:"places",name:"Travel & Places",emojis:["earth_africa","earth_americas","earth_asia","globe_with_meridians","world_map","japan","compass","snow_capped_mountain","mountain","volcano","mount_fuji","camping","beach_with_umbrella","desert","desert_island","national_park","stadium","classical_building","building_construction","bricks","house_buildings","derelict_house_building","house","house_with_garden","office","post_office","european_post_office","hospital","bank","hotel","love_hotel","convenience_store","school","department_store","factory","japanese_castle","european_castle","wedding","tokyo_tower","statue_of_liberty","church","mosque","hindu_temple","synagogue","shinto_shrine","kaaba","fountain","tent","foggy","night_with_stars","cityscape","sunrise_over_mountains","sunrise","city_sunset","city_sunrise","bridge_at_night","hotsprings","carousel_horse","ferris_wheel","roller_coaster","barber","circus_tent","steam_locomotive","railway_car","bullettrain_side","bullettrain_front","train2","metro","light_rail","station","tram","monorail","mountain_railway","train","bus","oncoming_bus","trolleybus","minibus","ambulance","fire_engine","police_car","oncoming_police_car","taxi","oncoming_taxi","car","oncoming_automobile","blue_car","truck","articulated_lorry","tractor","racing_car","racing_motorcycle","motor_scooter","manual_wheelchair","motorized_wheelchair","auto_rickshaw","bike","scooter","skateboard","busstop","motorway","railway_track","oil_drum","fuelpump","rotating_light","traffic_light","vertical_traffic_light","octagonal_sign","construction","anchor","boat","canoe","speedboat","passenger_ship","ferry","motor_boat","ship","airplane","small_airplane","airplane_departure","airplane_arriving","parachute","seat","helicopter","suspension_railway","mountain_cableway","aerial_tramway","satellite","rocket","flying_saucer","bellhop_bell","luggage","hourglass","hourglass_flowing_sand","watch","alarm_clock","stopwatch","timer_clock","mantelpiece_clock","clock12","clock1230","clock1","clock130","clock2","clock230","clock3","clock330","clock4","clock430","clock5","clock530","clock6","clock630","clock7","clock730","clock8","clock830","clock9","clock930","clock10","clock1030","clock11","clock1130","new_moon","waxing_crescent_moon","first_quarter_moon","moon","full_moon","waning_gibbous_moon","last_quarter_moon","waning_crescent_moon","crescent_moon","new_moon_with_face","first_quarter_moon_with_face","last_quarter_moon_with_face","thermometer","sunny","full_moon_with_face","sun_with_face","ringed_planet","star","star2","stars","milky_way","cloud","partly_sunny","thunder_cloud_and_rain","mostly_sunny","barely_sunny","partly_sunny_rain","rain_cloud","snow_cloud","lightning","tornado","fog","wind_blowing_face","cyclone","rainbow","closed_umbrella","umbrella","umbrella_with_rain_drops","umbrella_on_ground","zap","snowflake","snowman","snowman_without_snow","comet","fire","droplet","ocean"]},{id:"objects",name:"Objects",emojis:["eyeglasses","dark_sunglasses","goggles","lab_coat","safety_vest","necktie","shirt","jeans","scarf","gloves","coat","socks","dress","kimono","sari","one-piece_swimsuit","briefs","shorts","bikini","womans_clothes","purse","handbag","pouch","shopping_bags","school_satchel","mans_shoe","athletic_shoe","hiking_boot","womans_flat_shoe","high_heel","sandal","ballet_shoes","boot","crown","womans_hat","tophat","mortar_board","billed_cap","helmet_with_white_cross","prayer_beads","lipstick","ring","gem","mute","speaker","sound","loud_sound","loudspeaker","mega","postal_horn","bell","no_bell","musical_score","musical_note","notes","studio_microphone","level_slider","control_knobs","microphone","headphones","radio","saxophone","guitar","musical_keyboard","trumpet","violin","banjo","drum_with_drumsticks","iphone","calling","phone","telephone_receiver","pager","fax","battery","electric_plug","computer","desktop_computer","printer","keyboard","three_button_mouse","trackball","minidisc","floppy_disk","cd","dvd","abacus","movie_camera","film_frames","film_projector","clapper","tv","camera","camera_with_flash","video_camera","vhs","mag","mag_right","candle","bulb","flashlight","izakaya_lantern","diya_lamp","notebook_with_decorative_cover","closed_book","book","green_book","blue_book","orange_book","books","notebook","ledger","page_with_curl","scroll","page_facing_up","newspaper","rolled_up_newspaper","bookmark_tabs","bookmark","label","moneybag","yen","dollar","euro","pound","money_with_wings","credit_card","receipt","chart","currency_exchange","heavy_dollar_sign","email","e-mail","incoming_envelope","envelope_with_arrow","outbox_tray","inbox_tray","package","mailbox","mailbox_closed","mailbox_with_mail","mailbox_with_no_mail","postbox","ballot_box_with_ballot","pencil2","black_nib","lower_left_fountain_pen","lower_left_ballpoint_pen","lower_left_paintbrush","lower_left_crayon","memo","briefcase","file_folder","open_file_folder","card_index_dividers","date","calendar","spiral_note_pad","spiral_calendar_pad","card_index","chart_with_upwards_trend","chart_with_downwards_trend","bar_chart","clipboard","pushpin","round_pushpin","paperclip","linked_paperclips","straight_ruler","triangular_ruler","scissors","card_file_box","file_cabinet","wastebasket","lock","unlock","lock_with_ink_pen","closed_lock_with_key","key","old_key","hammer","axe","pick","hammer_and_pick","hammer_and_wrench","dagger_knife","crossed_swords","gun","bow_and_arrow","shield","wrench","nut_and_bolt","gear","compression","scales","probing_cane","link","chains","toolbox","magnet","alembic","test_tube","petri_dish","dna","microscope","telescope","satellite_antenna","syringe","drop_of_blood","pill","adhesive_bandage","stethoscope","door","bed","couch_and_lamp","chair","toilet","shower","bathtub","razor","lotion_bottle","safety_pin","broom","basket","roll_of_paper","soap","sponge","fire_extinguisher","shopping_trolley","smoking","coffin","funeral_urn","moyai"]},{id:"symbols",name:"Symbols",emojis:["atm","put_litter_in_its_place","potable_water","wheelchair","mens","womens","restroom","baby_symbol","wc","passport_control","customs","baggage_claim","left_luggage","warning","children_crossing","no_entry","no_entry_sign","no_bicycles","no_smoking","do_not_litter","non-potable_water","no_pedestrians","no_mobile_phones","underage","radioactive_sign","biohazard_sign","arrow_up","arrow_upper_right","arrow_right","arrow_lower_right","arrow_down","arrow_lower_left","arrow_left","arrow_upper_left","arrow_up_down","left_right_arrow","leftwards_arrow_with_hook","arrow_right_hook","arrow_heading_up","arrow_heading_down","arrows_clockwise","arrows_counterclockwise","back","end","on","soon","top","place_of_worship","atom_symbol","om_symbol","star_of_david","wheel_of_dharma","yin_yang","latin_cross","orthodox_cross","star_and_crescent","peace_symbol","menorah_with_nine_branches","six_pointed_star","aries","taurus","gemini","cancer","leo","virgo","libra","scorpius","sagittarius","capricorn","aquarius","pisces","ophiuchus","twisted_rightwards_arrows","repeat","repeat_one","arrow_forward","fast_forward","black_right_pointing_double_triangle_with_vertical_bar","black_right_pointing_triangle_with_double_vertical_bar","arrow_backward","rewind","black_left_pointing_double_triangle_with_vertical_bar","arrow_up_small","arrow_double_up","arrow_down_small","arrow_double_down","double_vertical_bar","black_square_for_stop","black_circle_for_record","eject","cinema","low_brightness","high_brightness","signal_strength","vibration_mode","mobile_phone_off","female_sign","male_sign","medical_symbol","infinity","recycle","fleur_de_lis","trident","name_badge","beginner","o","white_check_mark","ballot_box_with_check","heavy_check_mark","heavy_multiplication_x","x","negative_squared_cross_mark","heavy_plus_sign","heavy_minus_sign","heavy_division_sign","curly_loop","loop","part_alternation_mark","eight_spoked_asterisk","eight_pointed_black_star","sparkle","bangbang","interrobang","question","grey_question","grey_exclamation","exclamation","wavy_dash","tm","keycap_ten","capital_abcd","abcd","1234","symbols","abc","a","ab","b","cl","cool","free","information_source","id","m","new","ng","o2","ok","parking","sos","up","vs","koko","sa","u6708","u6709","u6307","ideograph_advantage","u5272","u7121","u7981","accept","u7533","u5408","u7a7a","congratulations","secret","u55b6","u6e80","red_circle","large_orange_circle","large_yellow_circle","large_green_circle","large_blue_circle","large_purple_circle","large_brown_circle","black_circle","white_circle","large_red_square","large_orange_square","large_yellow_square","large_green_square","large_blue_square","large_purple_square","large_brown_square","black_large_square","white_large_square","black_medium_square","white_medium_square","black_medium_small_square","white_medium_small_square","black_small_square","white_small_square","large_orange_diamond","large_blue_diamond","small_orange_diamond","small_blue_diamond","small_red_triangle","small_red_triangle_down","diamond_shape_with_a_dot_inside","radio_button","white_square_button","black_square_button"]},{id:"flags",name:"Flags",emojis:["checkered_flag","cn","crossed_flags","de","es","flag-ac","flag-ad","flag-ae","flag-af","flag-ag","flag-ai","flag-al","flag-am","flag-ao","flag-aq","flag-ar","flag-as","flag-at","flag-au","flag-aw","flag-ax","flag-az","flag-ba","flag-bb","flag-bd","flag-be","flag-bf","flag-bg","flag-bh","flag-bi","flag-bj","flag-bl","flag-bm","flag-bn","flag-bo","flag-bq","flag-br","flag-bs","flag-bt","flag-bv","flag-bw","flag-by","flag-bz","flag-ca","flag-cc","flag-cd","flag-cf","flag-cg","flag-ch","flag-ci","flag-ck","flag-cl","flag-cm","flag-co","flag-cp","flag-cr","flag-cu","flag-cv","flag-cw","flag-cx","flag-cy","flag-cz","flag-dg","flag-dj","flag-dk","flag-dm","flag-do","flag-dz","flag-ea","flag-ec","flag-ee","flag-eg","flag-eh","flag-england","flag-er","flag-et","flag-eu","flag-fi","flag-fj","flag-fk","flag-fm","flag-fo","flag-ga","flag-gd","flag-ge","flag-gf","flag-gg","flag-gh","flag-gi","flag-gl","flag-gm","flag-gn","flag-gp","flag-gq","flag-gr","flag-gs","flag-gt","flag-gu","flag-gw","flag-gy","flag-hk","flag-hm","flag-hn","flag-hr","flag-ht","flag-hu","flag-ic","flag-id","flag-ie","flag-il","flag-im","flag-in","flag-io","flag-iq","flag-ir","flag-is","flag-je","flag-jm","flag-jo","flag-ke","flag-kg","flag-kh","flag-ki","flag-km","flag-kn","flag-kp","flag-kw","flag-ky","flag-kz","flag-la","flag-lb","flag-lc","flag-li","flag-lk","flag-lr","flag-ls","flag-lt","flag-lu","flag-lv","flag-ly","flag-ma","flag-mc","flag-md","flag-me","flag-mf","flag-mg","flag-mh","flag-mk","flag-ml","flag-mm","flag-mn","flag-mo","flag-mp","flag-mq","flag-mr","flag-ms","flag-mt","flag-mu","flag-mv","flag-mw","flag-mx","flag-my","flag-mz","flag-na","flag-nc","flag-ne","flag-nf","flag-ng","flag-ni","flag-nl","flag-no","flag-np","flag-nr","flag-nu","flag-nz","flag-om","flag-pa","flag-pe","flag-pf","flag-pg","flag-ph","flag-pk","flag-pl","flag-pm","flag-pn","flag-pr","flag-ps","flag-pt","flag-pw","flag-py","flag-qa","flag-re","flag-ro","flag-rs","flag-rw","flag-sa","flag-sb","flag-sc","flag-scotland","flag-sd","flag-se","flag-sg","flag-sh","flag-si","flag-sj","flag-sk","flag-sl","flag-sm","flag-sn","flag-so","flag-sr","flag-ss","flag-st","flag-sv","flag-sx","flag-sy","flag-sz","flag-ta","flag-tc","flag-td","flag-tf","flag-tg","flag-th","flag-tj","flag-tk","flag-tl","flag-tm","flag-tn","flag-to","flag-tr","flag-tt","flag-tv","flag-tw","flag-tz","flag-ua","flag-ug","flag-um","flag-uy","flag-uz","flag-va","flag-vc","flag-ve","flag-vg","flag-vi","flag-vn","flag-vu","flag-wales","flag-wf","flag-ws","flag-xk","flag-ye","flag-yt","flag-za","flag-zm","flag-zw","fr","gb","it","jp","kr","pirate_flag","rainbow-flag","ru","triangular_flag_on_post","us","waving_black_flag","waving_white_flag"]}];var emojis={"100":{a:"Hundred Points Symbol",b:"1F4AF",j:["score","perfect","numbers","century","exam","quiz","test","pass","hundred"],k:[26,5],o:2},"1234":{a:"Input Symbol for Numbers",b:"1F522",j:["numbers","blue-square"],k:[28,5],o:2},grinning:{a:"Grinning Face",b:"1F600",j:["face","smile","happy","joy",":D","grin"],k:[30,35],m:":D",o:2},monkey_face:{a:"Monkey Face",b:"1F435",j:["animal","nature","circus"],k:[12,25],l:[":o)"],o:2},grapes:{a:"Grapes",b:"1F347",j:["fruit","food","wine"],k:[6,31],o:2},eyeglasses:{a:"Eyeglasses",b:"1F453",j:["fashion","accessories","eyesight","nerdy","dork","geek"],k:[14,7],o:2},checkered_flag:{a:"Chequered Flag",b:"1F3C1",j:["contest","finishline","race","gokart"],k:[8,39],o:2},jack_o_lantern:{a:"Jack-O-Lantern",b:"1F383",j:["halloween","light","pumpkin","creepy","fall"],k:[7,34],o:2},wave:{a:"Waving Hand Sign",b:"1F44B",j:["hands","gesture","goodbye","solong","farewell","hello","hi","palm"],k:[13,26],o:2},earth_africa:{a:"Earth Globe Europe-Africa",b:"1F30D",j:["globe","world","international"],k:[5,32],o:2},atm:{a:"Automated Teller Machine",b:"1F3E7",j:["money","sales","cash","blue-square","payment","bank"],k:[11,1],o:2},melon:{a:"Melon",b:"1F348",j:["fruit","nature","food"],k:[6,32],o:2},triangular_flag_on_post:{a:"Triangular Flag on Post",b:"1F6A9",j:["mark","milestone","place"],k:[35,0],o:2},put_litter_in_its_place:{a:"Put Litter in Its Place Symbol",b:"1F6AE",j:["blue-square","sign","human","info"],k:[35,5],o:2},christmas_tree:{a:"Christmas Tree",b:"1F384",j:["festival","vacation","december","xmas","celebration"],k:[7,35],o:2},monkey:{a:"Monkey",b:"1F412",j:["animal","nature","banana","circus"],k:[11,46],o:2},earth_americas:{a:"Earth Globe Americas",b:"1F30E",j:["globe","world","USA","international"],k:[5,33],o:2},dark_sunglasses:{a:"Dark Sunglasses",b:"1F576-FE0F",c:"1F576",j:["face","cool","accessories"],k:[29,33],o:2},raised_back_of_hand:{a:"Raised Back of Hand",b:"1F91A",j:["fingers","raised","backhand"],k:[37,43],o:4},smiley:{a:"Smiling Face with Open Mouth",b:"1F603",j:["face","happy","joy","haha",":D",":)","smile","funny"],k:[30,38],l:["=)","=-)"],m:":)",o:2},earth_asia:{a:"Earth Globe Asia-Australia",b:"1F30F",j:["globe","world","east","international"],k:[5,34],o:2},crossed_flags:{a:"Crossed Flags",b:"1F38C",j:["japanese","nation","country","border"],k:[7,48],o:2},watermelon:{a:"Watermelon",b:"1F349",j:["fruit","food","picnic","summer"],k:[6,33],o:2},goggles:{a:"Goggles",b:"1F97D",k:[42,15],o:11},raised_hand_with_fingers_splayed:{a:"Raised Hand with Fingers Splayed",b:"1F590-FE0F",c:"1F590",j:["hand","fingers","palm"],k:[29,48],o:2},smile:{a:"Smiling Face with Open Mouth and Smiling Eyes",b:"1F604",j:["face","happy","joy","funny","haha","laugh","like",":D",":)"],k:[30,39],l:["C:","c:",":D",":-D"],m:":)",o:2},potable_water:{a:"Potable Water Symbol",b:"1F6B0",j:["blue-square","liquid","restroom","cleaning","faucet"],k:[35,7],o:2},fireworks:{a:"Fireworks",b:"1F386",j:["photo","festival","carnival","congratulations"],k:[7,42],o:2},gorilla:{a:"Gorilla",b:"1F98D",j:["animal","nature","circus"],k:[42,31],o:4},lab_coat:{a:"Lab Coat",b:"1F97C",k:[42,14],o:11},tangerine:{a:"Tangerine",b:"1F34A",j:["food","fruit","nature","orange"],k:[6,34],o:2},wheelchair:{a:"Wheelchair Symbol",b:"267F",j:["blue-square","disabled","a11y","accessibility"],k:[53,40],o:2},waving_black_flag:{a:"Waving Black Flag",b:"1F3F4",k:[11,17],o:2},orangutan:{a:"Orangutan",b:"1F9A7",k:[42,55],o:12},sparkler:{a:"Firework Sparkler",b:"1F387",j:["stars","night","shine"],k:[7,43],o:2},globe_with_meridians:{a:"Globe with Meridians",b:"1F310",j:["earth","international","world","internet","interweb","i18n"],k:[5,35],o:2},grin:{a:"Grinning Face with Smiling Eyes",b:"1F601",j:["face","happy","smile","joy","kawaii"],k:[30,36],o:2},hand:{a:"Raised Hand",b:"270B",k:[54,49],n:["raised_hand"],o:2},firecracker:{a:"Firecracker",b:"1F9E8",k:[51,27],o:11},lemon:{a:"Lemon",b:"1F34B",j:["fruit","nature"],k:[6,35],o:2},dog:{a:"Dog Face",b:"1F436",j:["animal","friend","nature","woof","puppy","pet","faithful"],k:[12,26],o:2},mens:{a:"Mens Symbol",b:"1F6B9",j:["toilet","restroom","wc","blue-square","gender","male"],k:[36,10],o:2},"spock-hand":{a:"Raised Hand with Part Between Middle and Ring Fingers",b:"1F596",k:[30,3],o:2},world_map:{a:"World Map",b:"1F5FA-FE0F",c:"1F5FA",j:["location","direction"],k:[30,29],o:2},laughing:{a:"Smiling Face with Open Mouth and Tightly-Closed Eyes",b:"1F606",j:["happy","joy","lol","satisfied","haha","face","glad","XD","laugh"],k:[30,41],l:[":>",":->"],n:["satisfied"],o:2},waving_white_flag:{a:"Waving White Flag",b:"1F3F3-FE0F",c:"1F3F3",k:[11,12],o:2},safety_vest:{a:"Safety Vest",b:"1F9BA",k:[43,54],o:12},sweat_smile:{a:"Smiling Face with Open Mouth and Cold Sweat",b:"1F605",j:["face","hot","happy","laugh","sweat","smile","relief"],k:[30,40],o:2},sparkles:{a:"Sparkles",b:"2728",j:["stars","shine","shiny","cool","awesome","good","magic"],k:[55,16],o:2},banana:{a:"Banana",b:"1F34C",j:["fruit","food","monkey"],k:[6,36],o:2},"rainbow-flag":{a:"Rainbow Flag",b:"1F3F3-FE0F-200D-1F308",c:"1F3F3-200D-1F308",k:[11,11],o:4},ok_hand:{a:"Ok Hand Sign",b:"1F44C",j:["fingers","limbs","perfect","ok","okay"],k:[13,32],o:2},japan:{a:"Silhouette of Japan",b:"1F5FE",j:["nation","country","japanese","asia"],k:[30,33],o:2},dog2:{a:"Dog",b:"1F415",j:["animal","nature","friend","doge","pet","faithful"],k:[11,50],o:2},womens:{a:"Womens Symbol",b:"1F6BA",j:["purple-square","woman","female","toilet","loo","restroom","gender"],k:[36,11],o:2},necktie:{a:"Necktie",b:"1F454",j:["shirt","suitup","formal","fashion","cloth","business"],k:[14,8],o:2},pirate_flag:{a:"Pirate Flag",b:"1F3F4-200D-2620-FE0F",c:"1F3F4-200D-2620",k:[11,13],o:11},guide_dog:{a:"Guide Dog",b:"1F9AE",k:[43,2],o:12},restroom:{a:"Restroom",b:"1F6BB",j:["blue-square","toilet","refresh","wc","gender"],k:[36,12],o:2},compass:{a:"Compass",b:"1F9ED",k:[51,32],o:11},rolling_on_the_floor_laughing:{a:"Rolling on the Floor Laughing",b:"1F923",k:[38,20],o:4},balloon:{a:"Balloon",b:"1F388",j:["party","celebration","birthday","circus"],k:[7,44],o:2},pinching_hand:{a:"Pinching Hand",b:"1F90F",k:[37,17],o:12},pineapple:{a:"Pineapple",b:"1F34D",j:["fruit","nature","food"],k:[6,37],o:2},shirt:{a:"T-Shirt",b:"1F455",k:[14,9],n:["tshirt"],o:2},service_dog:{a:"Service Dog",b:"1F415-200D-1F9BA",k:[11,49],o:12},baby_symbol:{a:"Baby Symbol",b:"1F6BC",j:["orange-square","child"],k:[36,13],o:2},joy:{a:"Face with Tears of Joy",b:"1F602",j:["face","cry","tears","weep","happy","happytears","haha"],k:[30,37],o:2},tada:{a:"Party Popper",b:"1F389",j:["party","congratulations","birthday","magic","circus","celebration"],k:[7,45],o:2},mango:{a:"Mango",b:"1F96D",k:[42,3],o:11},v:{a:"Victory Hand",b:"270C-FE0F",c:"270C",j:["fingers","ohyeah","hand","peace","victory","two"],k:[54,55],o:2},snow_capped_mountain:{a:"Snow Capped Mountain",b:"1F3D4-FE0F",c:"1F3D4",k:[10,39],o:2},"flag-ac":{a:"Ascension Island Flag",b:"1F1E6-1F1E8",k:[0,31],o:2},jeans:{a:"Jeans",b:"1F456",j:["fashion","shopping"],k:[14,10],o:2},poodle:{a:"Poodle",b:"1F429",j:["dog","animal","101","nature","pet"],k:[12,13],o:2},crossed_fingers:{a:"Hand with Index and Middle Fingers Crossed",b:"1F91E",j:["good","lucky"],k:[38,5],n:["hand_with_index_and_middle_fingers_crossed"],o:4},"flag-ad":{a:"Andorra Flag",b:"1F1E6-1F1E9",k:[0,32],o:2},slightly_smiling_face:{a:"Slightly Smiling Face",b:"1F642",j:["face","smile"],k:[31,44],l:[":)","(:",":-)"],o:2},apple:{a:"Red Apple",b:"1F34E",j:["fruit","mac","school"],k:[6,38],o:2},wc:{a:"Water Closet",b:"1F6BE",j:["toilet","restroom","blue-square"],k:[36,15],o:2},scarf:{a:"Scarf",b:"1F9E3",k:[51,22],o:5},mountain:{a:"Mountain",b:"26F0-FE0F",c:"26F0",j:["photo","nature","environment"],k:[54,11],o:2},confetti_ball:{a:"Confetti Ball",b:"1F38A",j:["festival","party","birthday","circus"],k:[7,46],o:2},i_love_you_hand_sign:{a:"I Love You Hand Sign",b:"1F91F",k:[38,11],o:5},wolf:{a:"Wolf Face",b:"1F43A",j:["animal","nature","wild"],k:[12,30],o:2},gloves:{a:"Gloves",b:"1F9E4",k:[51,23],o:5},"flag-ae":{a:"United Arab Emirates Flag",b:"1F1E6-1F1EA",k:[0,33],o:2},upside_down_face:{a:"Upside-Down Face",b:"1F643",j:["face","flipped","silly","smile"],k:[31,45],o:2},green_apple:{a:"Green Apple",b:"1F34F",j:["fruit","nature"],k:[6,39],o:2},passport_control:{a:"Passport Control",b:"1F6C2",j:["custom","blue-square"],k:[36,24],o:2},volcano:{a:"Volcano",b:"1F30B",j:["photo","nature","disaster"],k:[5,30],o:2},tanabata_tree:{a:"Tanabata Tree",b:"1F38B",j:["plant","nature","branch","summer"],k:[7,47],o:2},customs:{a:"Customs",b:"1F6C3",j:["passport","border","blue-square"],k:[36,25],o:2},coat:{a:"Coat",b:"1F9E5",k:[51,24],o:5},wink:{a:"Winking Face",b:"1F609",j:["face","happy","mischievous","secret",";)","smile","eye"],k:[30,44],l:[";)",";-)"],m:";)",o:2},bamboo:{a:"Pine Decoration",b:"1F38D",j:["plant","nature","vegetable","panda","pine_decoration"],k:[7,49],o:2},"flag-af":{a:"Afghanistan Flag",b:"1F1E6-1F1EB",k:[0,34],o:2},fox_face:{a:"Fox Face",b:"1F98A",j:["animal","nature","face"],k:[42,28],o:4},pear:{a:"Pear",b:"1F350",j:["fruit","nature","food"],k:[6,40],o:2},mount_fuji:{a:"Mount Fuji",b:"1F5FB",j:["photo","mountain","nature","japanese"],k:[30,30],o:2},the_horns:{a:"Sign of the Horns",b:"1F918",k:[37,31],n:["sign_of_the_horns"],o:2},call_me_hand:{a:"Call Me Hand",b:"1F919",j:["hands","gesture"],k:[37,37],o:4},"flag-ag":{a:"Antigua & Barbuda Flag",b:"1F1E6-1F1EC",k:[0,35],o:2},raccoon:{a:"Raccoon",b:"1F99D",k:[42,47],o:11},dolls:{a:"Japanese Dolls",b:"1F38E",j:["japanese","toy","kimono"],k:[7,50],o:2},blush:{a:"Smiling Face with Smiling Eyes",b:"1F60A",j:["face","smile","happy","flushed","crush","embarrassed","shy","joy"],k:[30,45],m:":)",o:2},peach:{a:"Peach",b:"1F351",j:["fruit","nature","food"],k:[6,41],o:2},baggage_claim:{a:"Baggage Claim",b:"1F6C4",j:["blue-square","airport","transport"],k:[36,26],o:2},socks:{a:"Socks",b:"1F9E6",k:[51,25],o:5},camping:{a:"Camping",b:"1F3D5-FE0F",c:"1F3D5",j:["photo","outdoors","tent"],k:[10,40],o:2},dress:{a:"Dress",b:"1F457",j:["clothes","fashion","shopping"],k:[14,11],o:2},beach_with_umbrella:{a:"Beach with Umbrella",b:"1F3D6-FE0F",c:"1F3D6",k:[10,41],o:2},cherries:{a:"Cherries",b:"1F352",j:["food","fruit"],k:[6,42],o:2},cat:{a:"Cat Face",b:"1F431",j:["animal","meow","nature","pet","kitten"],k:[12,21],o:2},point_left:{a:"White Left Pointing Backhand Index",b:"1F448",j:["direction","fingers","hand","left"],k:[13,8],o:2},left_luggage:{a:"Left Luggage",b:"1F6C5",j:["blue-square","travel"],k:[36,27],o:2},"flag-ai":{a:"Anguilla Flag",b:"1F1E6-1F1EE",k:[0,36],o:2},innocent:{a:"Smiling Face with Halo",b:"1F607",j:["face","angel","heaven","halo"],k:[30,42],o:2},flags:{a:"Carp Streamer",b:"1F38F",j:["fish","japanese","koinobori","carp","banner"],k:[7,51],o:2},warning:{a:"Warning Sign",b:"26A0-FE0F",c:"26A0",j:["exclamation","wip","alert","error","problem","issue"],k:[53,50],o:2},strawberry:{a:"Strawberry",b:"1F353",j:["fruit","food","nature"],k:[6,43],o:2},point_right:{a:"White Right Pointing Backhand Index",b:"1F449",j:["fingers","hand","direction","right"],k:[13,14],o:2},desert:{a:"Desert",b:"1F3DC-FE0F",c:"1F3DC",j:["photo","warm","saharah"],k:[10,47],o:2},kimono:{a:"Kimono",b:"1F458",j:["dress","fashion","women","female","japanese"],k:[14,12],o:2},"flag-al":{a:"Albania Flag",b:"1F1E6-1F1F1",k:[0,37],o:2},wind_chime:{a:"Wind Chime",b:"1F390",j:["nature","ding","spring","bell"],k:[7,52],o:2},smiling_face_with_3_hearts:{a:"Smiling Face with Smiling Eyes and Three Hearts",b:"1F970",k:[42,6],o:11},cat2:{a:"Cat",b:"1F408",j:["animal","meow","pet","cats"],k:[11,36],o:2},rice_scene:{a:"Moon Viewing Ceremony",b:"1F391",j:["photo","japan","asia","tsukimi"],k:[7,53],o:2},heart_eyes:{a:"Smiling Face with Heart-Shaped Eyes",b:"1F60D",j:["face","love","like","affection","valentines","infatuation","crush","heart"],k:[30,48],o:2},sari:{a:"Sari",b:"1F97B",k:[42,13],o:12},"flag-am":{a:"Armenia Flag",b:"1F1E6-1F1F2",k:[0,38],o:2},lion_face:{a:"Lion Face",b:"1F981",k:[42,19],o:2},desert_island:{a:"Desert Island",b:"1F3DD-FE0F",c:"1F3DD",j:["photo","tropical","mojito"],k:[10,48],o:2},point_up_2:{a:"White Up Pointing Backhand Index",b:"1F446",j:["fingers","hand","direction","up"],k:[12,53],o:2},kiwifruit:{a:"Kiwifruit",b:"1F95D",k:[41,44],o:4},children_crossing:{a:"Children Crossing",b:"1F6B8",j:["school","warning","danger","sign","driving","yellow-diamond"],k:[36,9],o:2},national_park:{a:"National Park",b:"1F3DE-FE0F",c:"1F3DE",j:["photo","environment","nature"],k:[10,49],o:2},no_entry:{a:"No Entry",b:"26D4",j:["limit","security","privacy","bad","denied","stop","circle"],k:[54,8],o:2},"one-piece_swimsuit":{a:"One-Piece Swimsuit",b:"1FA71",k:[51,52],o:12},tiger:{a:"Tiger Face",b:"1F42F",j:["animal","cat","danger","wild","nature","roar"],k:[12,19],o:2},red_envelope:{a:"Red Gift Envelope",b:"1F9E7",k:[51,26],o:11},"star-struck":{a:"Grinning Face with Star Eyes",b:"1F929",k:[38,43],n:["grinning_face_with_star_eyes"],o:5},middle_finger:{a:"Reversed Hand with Middle Finger Extended",b:"1F595",k:[29,54],n:["reversed_hand_with_middle_finger_extended"],o:2},"flag-ao":{a:"Angola Flag",b:"1F1E6-1F1F4",k:[0,39],o:2},tomato:{a:"Tomato",b:"1F345",j:["fruit","vegetable","nature","food"],k:[6,29],o:2},coconut:{a:"Coconut",b:"1F965",k:[41,52],o:5},ribbon:{a:"Ribbon",b:"1F380",j:["decoration","pink","girl","bowtie"],k:[7,31],o:2},no_entry_sign:{a:"No Entry Sign",b:"1F6AB",j:["forbid","stop","limit","denied","disallow","circle"],k:[35,2],o:2},point_down:{a:"White Down Pointing Backhand Index",b:"1F447",j:["fingers","hand","direction","down"],k:[13,2],o:2},"flag-aq":{a:"Antarctica Flag",b:"1F1E6-1F1F6",k:[0,40],o:2},briefs:{a:"Briefs",b:"1FA72",k:[51,53],o:12},kissing_heart:{a:"Face Throwing a Kiss",b:"1F618",j:["face","love","like","affection","valentines","infatuation","kiss"],k:[31,2],l:[":*",":-*"],o:2},tiger2:{a:"Tiger",b:"1F405",j:["animal","nature","roar"],k:[11,33],o:2},stadium:{a:"Stadium",b:"1F3DF-FE0F",c:"1F3DF",j:["photo","place","sports","concert","venue"],k:[10,50],o:2},leopard:{a:"Leopard",b:"1F406",j:["animal","nature"],k:[11,34],o:2},no_bicycles:{a:"No Bicycles",b:"1F6B3",j:["cyclist","prohibited","circle"],k:[35,10],o:2},kissing:{a:"Kissing Face",b:"1F617",j:["love","like","face","3","valentines","infatuation","kiss"],k:[31,1],o:2},"flag-ar":{a:"Argentina Flag",b:"1F1E6-1F1F7",k:[0,41],o:2},avocado:{a:"Avocado",b:"1F951",j:["fruit","food"],k:[41,32],o:4},point_up:{a:"White Up Pointing Index",b:"261D-FE0F",c:"261D",j:["hand","fingers","direction","up"],k:[53,2],o:2},gift:{a:"Wrapped Present",b:"1F381",j:["present","birthday","christmas","xmas"],k:[7,32],o:2},classical_building:{a:"Classical Building",b:"1F3DB-FE0F",c:"1F3DB",j:["art","culture","history"],k:[10,46],o:2},shorts:{a:"Shorts",b:"1FA73",k:[51,54],o:12},"+1":{a:"Thumbs Up Sign",b:"1F44D",j:["thumbsup","yes","awesome","good","agree","accept","cool","hand","like"],k:[13,38],n:["thumbsup"],o:2},horse:{a:"Horse Face",b:"1F434",j:["animal","brown","nature"],k:[12,24],o:2},bikini:{a:"Bikini",b:"1F459",j:["swimming","female","woman","girl","fashion","beach","summer"],k:[14,13],o:2},no_smoking:{a:"No Smoking Symbol",b:"1F6AD",j:["cigarette","blue-square","smell","smoke"],k:[35,4],o:2},eggplant:{a:"Aubergine",b:"1F346",j:["vegetable","nature","food","aubergine"],k:[6,30],o:2},"flag-as":{a:"American Samoa Flag",b:"1F1E6-1F1F8",k:[0,42],o:2},reminder_ribbon:{a:"Reminder Ribbon",b:"1F397-FE0F",c:"1F397",j:["sports","cause","support","awareness"],k:[8,0],o:2},building_construction:{a:"Building Construction",b:"1F3D7-FE0F",c:"1F3D7",j:["wip","working","progress"],k:[10,42],o:2},relaxed:{a:"White Smiling Face",b:"263A-FE0F",c:"263A",j:["face","blush","massage","happiness"],k:[53,17],o:2},kissing_closed_eyes:{a:"Kissing Face with Closed Eyes",b:"1F61A",j:["face","love","like","affection","valentines","infatuation","kiss"],k:[31,4],o:2},"-1":{a:"Thumbs Down Sign",b:"1F44E",j:["thumbsdown","no","dislike","hand"],k:[13,44],n:["thumbsdown"],o:2},admission_tickets:{a:"Admission Tickets",b:"1F39F-FE0F",c:"1F39F",k:[8,5],o:2},"flag-at":{a:"Austria Flag",b:"1F1E6-1F1F9",k:[0,43],o:2},womans_clothes:{a:"Womans Clothes",b:"1F45A",j:["fashion","shopping_bags","female"],k:[14,14],o:2},do_not_litter:{a:"Do Not Litter Symbol",b:"1F6AF",j:["trash","bin","garbage","circle"],k:[35,6],o:2},potato:{a:"Potato",b:"1F954",j:["food","tuber","vegatable","starch"],k:[41,35],o:4},racehorse:{a:"Horse",b:"1F40E",j:["animal","gamble","luck"],k:[11,42],o:2},bricks:{a:"Brick",b:"1F9F1",k:[51,36],o:11},fist:{a:"Raised Fist",b:"270A",j:["fingers","hand","grasp"],k:[54,43],o:2},house_buildings:{a:"House Buildings",b:"1F3D8-FE0F",c:"1F3D8",k:[10,43],o:2},carrot:{a:"Carrot",b:"1F955",j:["vegetable","food","orange"],k:[41,36],o:4},ticket:{a:"Ticket",b:"1F3AB",j:["event","concert","pass"],k:[8,17],o:2},"flag-au":{a:"Australia Flag",b:"1F1E6-1F1FA",k:[0,44],o:2},"non-potable_water":{a:"Non-Potable Water Symbol",b:"1F6B1",j:["drink","faucet","tap","circle"],k:[35,8],o:2},purse:{a:"Purse",b:"1F45B",j:["fashion","accessories","money","sales","shopping"],k:[14,15],o:2},unicorn_face:{a:"Unicorn Face",b:"1F984",k:[42,22],o:2},kissing_smiling_eyes:{a:"Kissing Face with Smiling Eyes",b:"1F619",j:["face","affection","valentines","infatuation","kiss"],k:[31,3],o:2},facepunch:{a:"Fisted Hand Sign",b:"1F44A",j:["angry","violence","fist","hit","attack","hand"],k:[13,20],n:["punch"],o:2},medal:{a:"Medal",b:"1F396-FE0F",c:"1F396",k:[7,56],o:2},zebra_face:{a:"Zebra Face",b:"1F993",k:[42,37],o:5},handbag:{a:"Handbag",b:"1F45C",j:["fashion","accessory","accessories","shopping"],k:[14,16],o:2},derelict_house_building:{a:"Derelict House Building",b:"1F3DA-FE0F",c:"1F3DA",k:[10,45],o:2},yum:{a:"Face Savouring Delicious Food",b:"1F60B",j:["happy","joy","tongue","smile","face","silly","yummy","nom","delicious","savouring"],k:[30,46],o:2},corn:{a:"Ear of Maize",b:"1F33D",j:["food","vegetable","plant"],k:[6,21],o:2},"flag-aw":{a:"Aruba Flag",b:"1F1E6-1F1FC",k:[0,45],o:2},no_pedestrians:{a:"No Pedestrians",b:"1F6B7",j:["rules","crossing","walking","circle"],k:[36,8],o:2},house:{a:"House Building",b:"1F3E0",j:["building","home"],k:[10,51],o:2},hot_pepper:{a:"Hot Pepper",b:"1F336-FE0F",c:"1F336",j:["food","spicy","chilli","chili"],k:[6,14],o:2},"flag-ax":{a:"Åland Islands Flag",b:"1F1E6-1F1FD",k:[0,46],o:2},trophy:{a:"Trophy",b:"1F3C6",j:["win","award","contest","place","ftw","ceremony"],k:[9,26],o:2},deer:{a:"Deer",b:"1F98C",j:["animal","nature","horns","venison"],k:[42,30],o:4},"left-facing_fist":{a:"Left-Facing Fist",b:"1F91B",k:[37,49],o:4},stuck_out_tongue:{a:"Face with Stuck-out Tongue",b:"1F61B",j:["face","prank","childish","playful","mischievous","smile","tongue"],k:[31,5],l:[":p",":-p",":P",":-P",":b",":-b"],m:":p",o:2},pouch:{a:"Pouch",b:"1F45D",j:["bag","accessories","shopping"],k:[14,17],o:2},no_mobile_phones:{a:"No Mobile Phones",b:"1F4F5",j:["iphone","mute","circle"],k:[27,18],o:2},stuck_out_tongue_winking_eye:{a:"Face with Stuck-out Tongue and Winking Eye",b:"1F61C",j:["face","prank","childish","playful","mischievous","smile","wink","tongue"],k:[31,6],l:[";p",";-p",";b",";-b",";P",";-P"],m:";p",o:2},sports_medal:{a:"Sports Medal",b:"1F3C5",k:[9,25],o:2},cucumber:{a:"Cucumber",b:"1F952",j:["fruit","food","pickle"],k:[41,33],o:4},cow:{a:"Cow Face",b:"1F42E",j:["beef","ox","animal","nature","moo","milk"],k:[12,18],o:2},underage:{a:"No One Under Eighteen Symbol",b:"1F51E",j:["18","drink","pub","night","minor","circle"],k:[28,1],o:2},"flag-az":{a:"Azerbaijan Flag",b:"1F1E6-1F1FF",k:[0,47],o:2},shopping_bags:{a:"Shopping Bags",b:"1F6CD-FE0F",c:"1F6CD",k:[36,35],o:2},"right-facing_fist":{a:"Right-Facing Fist",b:"1F91C",k:[37,55],o:4},house_with_garden:{a:"House with Garden",b:"1F3E1",j:["home","plant","nature"],k:[10,52],o:2},clap:{a:"Clapping Hands Sign",b:"1F44F",j:["hands","praise","applause","congrats","yay"],k:[13,50],o:2},leafy_green:{a:"Leafy Green",b:"1F96C",k:[42,2],o:11},office:{a:"Office Building",b:"1F3E2",j:["building","bureau","work"],k:[10,53],o:2},"flag-ba":{a:"Bosnia & Herzegovina Flag",b:"1F1E7-1F1E6",k:[0,48],o:2},zany_face:{a:"Grinning Face with One Large and One Small Eye",b:"1F92A",k:[38,44],n:["grinning_face_with_one_large_and_one_small_eye"],o:5},first_place_medal:{a:"First Place Medal",b:"1F947",k:[41,22],o:4},ox:{a:"Ox",b:"1F402",j:["animal","cow","beef"],k:[11,30],o:2},school_satchel:{a:"School Satchel",b:"1F392",j:["student","education","bag","backpack"],k:[7,54],o:2},radioactive_sign:{a:"Radioactive Sign",b:"2622-FE0F",c:"2622",k:[53,9],o:2},second_place_medal:{a:"Second Place Medal",b:"1F948",k:[41,23],o:4},stuck_out_tongue_closed_eyes:{a:"Face with Stuck-out Tongue and Tightly-Closed Eyes",b:"1F61D",j:["face","prank","playful","mischievous","smile","tongue"],k:[31,7],o:2},broccoli:{a:"Broccoli",b:"1F966",k:[41,53],o:5},biohazard_sign:{a:"Biohazard Sign",b:"2623-FE0F",c:"2623",k:[53,10],o:2},mans_shoe:{a:"Mans Shoe",b:"1F45E",j:["fashion","male"],k:[14,18],n:["shoe"],o:2},raised_hands:{a:"Person Raising Both Hands in Celebration",b:"1F64C",j:["gesture","hooray","yea","celebration","hands"],k:[33,8],o:2},post_office:{a:"Japanese Post Office",b:"1F3E3",j:["building","envelope","communication"],k:[10,54],o:2},"flag-bb":{a:"Barbados Flag",b:"1F1E7-1F1E7",k:[0,49],o:2},water_buffalo:{a:"Water Buffalo",b:"1F403",j:["animal","nature","ox","cow"],k:[11,31],o:2},third_place_medal:{a:"Third Place Medal",b:"1F949",k:[41,24],o:4},european_post_office:{a:"European Post Office",b:"1F3E4",j:["building","email"],k:[10,55],o:2},athletic_shoe:{a:"Athletic Shoe",b:"1F45F",j:["shoes","sports","sneakers"],k:[14,19],o:2},arrow_up:{a:"Upwards Black Arrow",b:"2B06-FE0F",c:"2B06",j:["blue-square","continue","top","direction"],k:[55,38],o:2},cow2:{a:"Cow",b:"1F404",j:["beef","ox","animal","nature","moo","milk"],k:[11,32],o:2},open_hands:{a:"Open Hands Sign",b:"1F450",j:["fingers","butterfly","hands","open"],k:[13,56],o:2},garlic:{a:"Garlic",b:"1F9C4",k:[44,12],o:12},money_mouth_face:{a:"Money-Mouth Face",b:"1F911",j:["face","rich","dollar","money"],k:[37,24],o:2},"flag-bd":{a:"Bangladesh Flag",b:"1F1E7-1F1E9",k:[0,50],o:2},soccer:{a:"Soccer Ball",b:"26BD",j:["sports","football"],k:[53,56],o:2},hugging_face:{a:"Hugging Face",b:"1F917",k:[37,30],o:2},onion:{a:"Onion",b:"1F9C5",k:[44,13],o:12},arrow_upper_right:{a:"North East Arrow",b:"2197-FE0F",c:"2197",j:["blue-square","point","direction","diagonal","northeast"],k:[52,17],o:2},palms_up_together:{a:"Palms Up Together",b:"1F932",k:[39,5],o:5},pig:{a:"Pig Face",b:"1F437",j:["animal","oink","nature"],k:[12,27],o:2},hospital:{a:"Hospital",b:"1F3E5",j:["building","health","surgery","doctor"],k:[10,56],o:2},hiking_boot:{a:"Hiking Boot",b:"1F97E",k:[42,16],o:11},"flag-be":{a:"Belgium Flag",b:"1F1E7-1F1EA",k:[0,51],o:2},"flag-bf":{a:"Burkina Faso Flag",b:"1F1E7-1F1EB",k:[0,52],o:2},mushroom:{a:"Mushroom",b:"1F344",j:["plant","vegetable"],k:[6,28],o:2},pig2:{a:"Pig",b:"1F416",j:["animal","nature"],k:[11,51],o:2},baseball:{a:"Baseball",b:"26BE",j:["sports","balls"],k:[54,0],o:2},face_with_hand_over_mouth:{a:"Smiling Face with Smiling Eyes and Hand Covering Mouth",b:"1F92D",k:[38,47],n:["smiling_face_with_smiling_eyes_and_hand_covering_mouth"],o:5},handshake:{a:"Handshake",b:"1F91D",j:["agreement","shake"],k:[38,4],o:4},womans_flat_shoe:{a:"Flat Shoe",b:"1F97F",k:[42,17],o:11},bank:{a:"Bank",b:"1F3E6",j:["building","money","sales","cash","business","enterprise"],k:[11,0],o:2},arrow_right:{a:"Black Rightwards Arrow",b:"27A1-FE0F",c:"27A1",j:["blue-square","next"],k:[55,32],o:2},peanuts:{a:"Peanuts",b:"1F95C",j:["food","nut"],k:[41,43],o:4},shushing_face:{a:"Face with Finger Covering Closed Lips",b:"1F92B",k:[38,45],n:["face_with_finger_covering_closed_lips"],o:5},pray:{a:"Person with Folded Hands",b:"1F64F",j:["please","hope","wish","namaste","highfive"],k:[33,50],o:2},softball:{a:"Softball",b:"1F94E",k:[41,29],o:11},high_heel:{a:"High-Heeled Shoe",b:"1F460",j:["fashion","shoes","female","pumps","stiletto"],k:[14,20],o:2},"flag-bg":{a:"Bulgaria Flag",b:"1F1E7-1F1EC",k:[0,53],o:2},arrow_lower_right:{a:"South East Arrow",b:"2198-FE0F",c:"2198",j:["blue-square","direction","diagonal","southeast"],k:[52,18],o:2},hotel:{a:"Hotel",b:"1F3E8",j:["building","accomodation","checkin"],k:[11,2],o:2},boar:{a:"Boar",b:"1F417",j:["animal","nature"],k:[11,52],o:2},sandal:{a:"Womans Sandal",b:"1F461",j:["shoes","fashion","flip flops"],k:[14,21],o:2},"flag-bh":{a:"Bahrain Flag",b:"1F1E7-1F1ED",k:[0,54],o:2},arrow_down:{a:"Downwards Black Arrow",b:"2B07-FE0F",c:"2B07",j:["blue-square","direction","bottom"],k:[55,39],o:2},thinking_face:{a:"Thinking Face",b:"1F914",k:[37,27],o:2},writing_hand:{a:"Writing Hand",b:"270D-FE0F",c:"270D",j:["lower_left_ballpoint_pen","stationery","write","compose"],k:[55,4],o:2},chestnut:{a:"Chestnut",b:"1F330",j:["food","squirrel"],k:[6,8],o:2},basketball:{a:"Basketball and Hoop",b:"1F3C0",j:["sports","balls","NBA"],k:[8,38],o:2},pig_nose:{a:"Pig Nose",b:"1F43D",j:["animal","oink"],k:[12,33],o:2},love_hotel:{a:"Love Hotel",b:"1F3E9",j:["like","affection","dating"],k:[11,3],o:2},nail_care:{a:"Nail Polish",b:"1F485",j:["beauty","manicure","finger","fashion","nail"],k:[24,33],o:2},volleyball:{a:"Volleyball",b:"1F3D0",j:["sports","balls"],k:[10,35],o:2},"flag-bi":{a:"Burundi Flag",b:"1F1E7-1F1EE",k:[0,55],o:2},arrow_lower_left:{a:"South West Arrow",b:"2199-FE0F",c:"2199",j:["blue-square","direction","diagonal","southwest"],k:[52,19],o:2},ram:{a:"Ram",b:"1F40F",j:["animal","sheep","nature"],k:[11,43],o:2},ballet_shoes:{a:"Ballet Shoes",b:"1FA70",k:[51,51],o:12},zipper_mouth_face:{a:"Zipper-Mouth Face",b:"1F910",j:["face","sealed","zipper","secret"],k:[37,23],o:2},bread:{a:"Bread",b:"1F35E",j:["food","wheat","breakfast","toast"],k:[6,54],o:2},convenience_store:{a:"Convenience Store",b:"1F3EA",j:["building","shopping","groceries"],k:[11,4],o:2},boot:{a:"Womans Boots",b:"1F462",j:["shoes","fashion"],k:[14,22],o:2},sheep:{a:"Sheep",b:"1F411",j:["animal","nature","wool","shipit"],k:[11,45],o:2},face_with_raised_eyebrow:{a:"Face with One Eyebrow Raised",b:"1F928",k:[38,42],n:["face_with_one_eyebrow_raised"],o:5},"flag-bj":{a:"Benin Flag",b:"1F1E7-1F1EF",k:[0,56],o:2},arrow_left:{a:"Leftwards Black Arrow",b:"2B05-FE0F",c:"2B05",j:["blue-square","previous","back"],k:[55,37],o:2},selfie:{a:"Selfie",b:"1F933",j:["camera","phone"],k:[39,11],o:4},croissant:{a:"Croissant",b:"1F950",j:["food","bread","french"],k:[41,31],o:4},school:{a:"School",b:"1F3EB",j:["building","student","education","learn","teach"],k:[11,5],o:2},football:{a:"American Football",b:"1F3C8",j:["sports","balls","NFL"],k:[9,33],o:2},goat:{a:"Goat",b:"1F410",j:["animal","nature"],k:[11,44],o:2},department_store:{a:"Department Store",b:"1F3EC",j:["building","shopping","mall"],k:[11,6],o:2},"flag-bl":{a:"St. Barthélemy Flag",b:"1F1E7-1F1F1",k:[1,0],o:2},crown:{a:"Crown",b:"1F451",j:["king","kod","leader","royalty","lord"],k:[14,5],o:2},arrow_upper_left:{a:"North West Arrow",b:"2196-FE0F",c:"2196",j:["blue-square","point","direction","diagonal","northwest"],k:[52,16],o:2},neutral_face:{a:"Neutral Face",b:"1F610",j:["indifference","meh",":|","neutral"],k:[30,51],l:[":|",":-|"],o:2},rugby_football:{a:"Rugby Football",b:"1F3C9",j:["sports","team"],k:[9,34],o:2},muscle:{a:"Flexed Biceps",b:"1F4AA",j:["arm","flex","hand","summer","strong","biceps"],k:[25,52],o:2},baguette_bread:{a:"Baguette Bread",b:"1F956",j:["food","bread","french"],k:[41,37],o:4},expressionless:{a:"Expressionless Face",b:"1F611",j:["face","indifferent","-_-","meh","deadpan"],k:[30,52],o:2},womans_hat:{a:"Womans Hat",b:"1F452",j:["fashion","accessories","female","lady","spring"],k:[14,6],o:2},pretzel:{a:"Pretzel",b:"1F968",k:[41,55],o:5},mechanical_arm:{a:"Mechanical Arm",b:"1F9BE",k:[44,6],o:12},arrow_up_down:{a:"Up Down Arrow",b:"2195-FE0F",c:"2195",j:["blue-square","direction","way","vertical"],k:[52,15],o:2},dromedary_camel:{a:"Dromedary Camel",b:"1F42A",j:["animal","hot","desert","hump"],k:[12,14],o:2},tennis:{a:"Tennis Racquet and Ball",b:"1F3BE",j:["sports","balls","green"],k:[8,36],o:2},"flag-bm":{a:"Bermuda Flag",b:"1F1E7-1F1F2",k:[1,1],o:2},factory:{a:"Factory",b:"1F3ED",j:["building","industry","pollution","smoke"],k:[11,7],o:2},japanese_castle:{a:"Japanese Castle",b:"1F3EF",j:["photo","building"],k:[11,9],o:2},no_mouth:{a:"Face Without Mouth",b:"1F636",j:["face","hellokitty"],k:[31,32],o:2},mechanical_leg:{a:"Mechanical Leg",b:"1F9BF",k:[44,7],o:12},bagel:{a:"Bagel",b:"1F96F",k:[42,5],o:11},camel:{a:"Bactrian Camel",b:"1F42B",j:["animal","nature","hot","desert","hump"],k:[12,15],o:2},tophat:{a:"Top Hat",b:"1F3A9",j:["magic","gentleman","classy","circus"],k:[8,15],o:2},left_right_arrow:{a:"Left Right Arrow",b:"2194-FE0F",c:"2194",j:["shape","direction","horizontal","sideways"],k:[52,14],o:2},"flag-bn":{a:"Brunei Flag",b:"1F1E7-1F1F3",k:[1,2],o:2},flying_disc:{a:"Flying Disc",b:"1F94F",k:[41,30],o:11},smirk:{a:"Smirking Face",b:"1F60F",j:["face","smile","mean","prank","smug","sarcasm"],k:[30,50],o:2},mortar_board:{a:"Graduation Cap",b:"1F393",j:["school","college","degree","university","graduation","cap","hat","legal","learn","education"],k:[7,55],o:2},european_castle:{a:"European Castle",b:"1F3F0",j:["building","royalty","history"],k:[11,10],o:2},leg:{a:"Leg",b:"1F9B5",k:[43,5],o:11},pancakes:{a:"Pancakes",b:"1F95E",j:["food","breakfast","flapjacks","hotcakes"],k:[41,45],o:4},leftwards_arrow_with_hook:{a:"Leftwards Arrow with Hook",b:"21A9-FE0F",c:"21A9",j:["back","return","blue-square","undo","enter"],k:[52,20],o:2},"flag-bo":{a:"Bolivia Flag",b:"1F1E7-1F1F4",k:[1,3],o:2},bowling:{a:"Bowling",b:"1F3B3",j:["sports","fun","play"],k:[8,25],o:2},llama:{a:"Llama",b:"1F999",k:[42,43],o:11},arrow_right_hook:{a:"Rightwards Arrow with Hook",b:"21AA-FE0F",c:"21AA",j:["blue-square","return","rotate","direction"],k:[52,21],o:2},wedding:{a:"Wedding",b:"1F492",j:["love","like","affection","couple","marriage","bride","groom"],k:[25,28],o:2},"flag-bq":{a:"Caribbean Netherlands Flag",b:"1F1E7-1F1F6",k:[1,4],o:2},foot:{a:"Foot",b:"1F9B6",k:[43,11],o:11},giraffe_face:{a:"Giraffe Face",b:"1F992",k:[42,36],o:5},unamused:{a:"Unamused Face",b:"1F612",j:["indifference","bored","straight face","serious","sarcasm"],k:[30,53],m:":(",o:2},billed_cap:{a:"Billed Cap",b:"1F9E2",k:[51,21],o:5},waffle:{a:"Waffle",b:"1F9C7",k:[44,15],o:12},cricket_bat_and_ball:{a:"Cricket Bat and Ball",b:"1F3CF",k:[10,34],o:2},helmet_with_white_cross:{a:"Helmet with White Cross",b:"26D1-FE0F",c:"26D1",k:[54,6],o:2},ear:{a:"Ear",b:"1F442",j:["face","hear","sound","listen"],k:[12,39],o:2},elephant:{a:"Elephant",b:"1F418",j:["animal","nature","nose","th","circus"],k:[11,53],o:2},cheese_wedge:{a:"Cheese Wedge",b:"1F9C0",k:[44,8],o:2},tokyo_tower:{a:"Tokyo Tower",b:"1F5FC",j:["photo","japanese"],k:[30,31],o:2},arrow_heading_up:{a:"Arrow Pointing Rightwards Then Curving Upwards",b:"2934-FE0F",c:"2934",j:["blue-square","direction","top"],k:[55,35],o:2},field_hockey_stick_and_ball:{a:"Field Hockey Stick and Ball",b:"1F3D1",k:[10,36],o:2},"flag-br":{a:"Brazil Flag",b:"1F1E7-1F1F7",k:[1,5],o:2},face_with_rolling_eyes:{a:"Face with Rolling Eyes",b:"1F644",k:[31,46],o:2},ear_with_hearing_aid:{a:"Ear with Hearing Aid",b:"1F9BB",k:[43,55],o:12},arrow_heading_down:{a:"Arrow Pointing Rightwards Then Curving Downwards",b:"2935-FE0F",c:"2935",j:["blue-square","direction","bottom"],k:[55,36],o:2},ice_hockey_stick_and_puck:{a:"Ice Hockey Stick and Puck",b:"1F3D2",k:[10,37],o:2},meat_on_bone:{a:"Meat on Bone",b:"1F356",j:["good","food","drumstick"],k:[6,46],o:2},prayer_beads:{a:"Prayer Beads",b:"1F4FF",j:["dhikr","religious"],k:[27,27],o:2},statue_of_liberty:{a:"Statue of Liberty",b:"1F5FD",j:["american","newyork"],k:[30,32],o:2},grimacing:{a:"Grimacing Face",b:"1F62C",j:["face","grimace","teeth"],k:[31,22],o:2},"flag-bs":{a:"Bahamas Flag",b:"1F1E7-1F1F8",k:[1,6],o:2},rhinoceros:{a:"Rhinoceros",b:"1F98F",j:["animal","nature","horn"],k:[42,33],o:4},lacrosse:{a:"Lacrosse Stick and Ball",b:"1F94D",k:[41,28],o:11},poultry_leg:{a:"Poultry Leg",b:"1F357",j:["food","meat","drumstick","bird","chicken","turkey"],k:[6,47],o:2},hippopotamus:{a:"Hippopotamus",b:"1F99B",k:[42,45],o:11},nose:{a:"Nose",b:"1F443",j:["smell","sniff"],k:[12,45],o:2},arrows_clockwise:{a:"Clockwise Downwards and Upwards Open Circle Arrows",b:"1F503",j:["sync","cycle","round","repeat"],k:[27,31],o:2},"flag-bt":{a:"Bhutan Flag",b:"1F1E7-1F1F9",k:[1,7],o:2},church:{a:"Church",b:"26EA",j:["building","religion","christ"],k:[54,10],o:2},lipstick:{a:"Lipstick",b:"1F484",j:["female","girl","fashion","woman"],k:[24,32],o:2},lying_face:{a:"Lying Face",b:"1F925",j:["face","lie","pinocchio"],k:[38,22],o:4},arrows_counterclockwise:{a:"Anticlockwise Downwards and Upwards Open Circle Arrows",b:"1F504",j:["blue-square","sync","cycle"],k:[27,32],o:2},"flag-bv":{a:"Bouvet Island Flag",b:"1F1E7-1F1FB",k:[1,8],o:2},cut_of_meat:{a:"Cut of Meat",b:"1F969",k:[41,56],o:5},mosque:{a:"Mosque",b:"1F54C",j:["islam","worship","minaret"],k:[28,36],o:2},ring:{a:"Ring",b:"1F48D",j:["wedding","propose","marriage","valentines","diamond","fashion","jewelry","gem","engagement"],k:[25,23],o:2},brain:{a:"Brain",b:"1F9E0",k:[51,19],o:5},table_tennis_paddle_and_ball:{a:"Table Tennis Paddle and Ball",b:"1F3D3",k:[10,38],o:2},relieved:{a:"Relieved Face",b:"1F60C",j:["face","relaxed","phew","massage","happiness"],k:[30,47],o:2},mouse:{a:"Mouse Face",b:"1F42D",j:["animal","nature","cheese_wedge","rodent"],k:[12,17],o:2},hindu_temple:{a:"Hindu Temple",b:"1F6D5",k:[36,41],o:12},back:{a:"Back with Leftwards Arrow Above",b:"1F519",j:["arrow","words","return"],k:[27,53],o:2},gem:{a:"Gem Stone",b:"1F48E",j:["blue","ruby","diamond","jewelry"],k:[25,24],o:2},pensive:{a:"Pensive Face",b:"1F614",j:["face","sad","depressed","upset"],k:[30,55],o:2},"flag-bw":{a:"Botswana Flag",b:"1F1E7-1F1FC",k:[1,9],o:2},mouse2:{a:"Mouse",b:"1F401",j:["animal","nature","rodent"],k:[11,29],o:2},bacon:{a:"Bacon",b:"1F953",j:["food","breakfast","pork","pig","meat"],k:[41,34],o:4},tooth:{a:"Tooth",b:"1F9B7",k:[43,17],o:11},badminton_racquet_and_shuttlecock:{a:"Badminton Racquet and Shuttlecock",b:"1F3F8",k:[11,20],o:2},rat:{a:"Rat",b:"1F400",j:["animal","mouse","rodent"],k:[11,28],o:2},synagogue:{a:"Synagogue",b:"1F54D",j:["judaism","worship","temple","jewish"],k:[28,37],o:2},end:{a:"End with Leftwards Arrow Above",b:"1F51A",j:["words","arrow"],k:[27,54],o:2},bone:{a:"Bone",b:"1F9B4",k:[43,4],o:11},boxing_glove:{a:"Boxing Glove",b:"1F94A",j:["sports","fighting"],k:[41,25],o:4},mute:{a:"Speaker with Cancellation Stroke",b:"1F507",j:["sound","volume","silence","quiet"],k:[27,35],o:2},hamburger:{a:"Hamburger",b:"1F354",j:["meat","fast food","beef","cheeseburger","mcdonalds","burger king"],k:[6,44],o:2},"flag-by":{a:"Belarus Flag",b:"1F1E7-1F1FE",k:[1,10],o:2},sleepy:{a:"Sleepy Face",b:"1F62A",j:["face","tired","rest","nap"],k:[31,20],o:2},on:{a:"On with Exclamation Mark with Left Right Arrow Above",b:"1F51B",j:["arrow","words"],k:[27,55],o:2},martial_arts_uniform:{a:"Martial Arts Uniform",b:"1F94B",j:["judo","karate","taekwondo"],k:[41,26],o:4},speaker:{a:"Speaker",b:"1F508",j:["sound","volume","silence","broadcast"],k:[27,36],o:2},drooling_face:{a:"Drooling Face",b:"1F924",j:["face"],k:[38,21],o:4},eyes:{a:"Eyes",b:"1F440",j:["look","watch","stalk","peek","see"],k:[12,36],o:2},"flag-bz":{a:"Belize Flag",b:"1F1E7-1F1FF",k:[1,11],o:2},hamster:{a:"Hamster Face",b:"1F439",j:["animal","nature"],k:[12,29],o:2},shinto_shrine:{a:"Shinto Shrine",b:"26E9-FE0F",c:"26E9",j:["temple","japan","kyoto"],k:[54,9],o:2},fries:{a:"French Fries",b:"1F35F",j:["chips","snack","fast food"],k:[6,55],o:2},goal_net:{a:"Goal Net",b:"1F945",j:["sports"],k:[41,21],o:4},kaaba:{a:"Kaaba",b:"1F54B",j:["mecca","mosque","islam"],k:[28,35],o:2},soon:{a:"Soon with Rightwards Arrow Above",b:"1F51C",j:["arrow","words"],k:[27,56],o:2},"flag-ca":{a:"Canada Flag",b:"1F1E8-1F1E6",k:[1,12],o:2},rabbit:{a:"Rabbit Face",b:"1F430",j:["animal","nature","pet","spring","magic","bunny"],k:[12,20],o:2},eye:{a:"Eye",b:"1F441-FE0F",c:"1F441",j:["face","look","see","watch","stare"],k:[12,38],o:2},sleeping:{a:"Sleeping Face",b:"1F634",j:["face","tired","sleepy","night","zzz"],k:[31,30],o:2},pizza:{a:"Slice of Pizza",b:"1F355",j:["food","party"],k:[6,45],o:2},sound:{a:"Speaker with One Sound Wave",b:"1F509",j:["volume","speaker","broadcast"],k:[27,37],o:2},rabbit2:{a:"Rabbit",b:"1F407",j:["animal","nature","pet","magic","spring"],k:[11,35],o:2},fountain:{a:"Fountain",b:"26F2",j:["photo","summer","water","fresh"],k:[54,13],o:2},golf:{a:"Flag in Hole",b:"26F3",j:["sports","business","flag","hole","summer"],k:[54,14],o:2},top:{a:"Top with Upwards Arrow Above",b:"1F51D",j:["words","blue-square"],k:[28,0],o:2},mask:{a:"Face with Medical Mask",b:"1F637",j:["face","sick","ill","disease"],k:[31,33],o:2},"flag-cc":{a:"Cocos (keeling) Islands Flag",b:"1F1E8-1F1E8",k:[1,13],o:2},hotdog:{a:"Hot Dog",b:"1F32D",j:["food","frankfurter"],k:[6,5],o:2},loud_sound:{a:"Speaker with Three Sound Waves",b:"1F50A",j:["volume","noise","noisy","speaker","broadcast"],k:[27,38],o:2},tongue:{a:"Tongue",b:"1F445",j:["mouth","playful"],k:[12,52],o:2},place_of_worship:{a:"Place of Worship",b:"1F6D0",j:["religion","church","temple","prayer"],k:[36,38],o:2},ice_skate:{a:"Ice Skate",b:"26F8-FE0F",c:"26F8",j:["sports"],k:[54,18],o:2},sandwich:{a:"Sandwich",b:"1F96A",k:[42,0],o:5},chipmunk:{a:"Chipmunk",b:"1F43F-FE0F",c:"1F43F",j:["animal","nature","rodent","squirrel"],k:[12,35],o:2},loudspeaker:{a:"Public Address Loudspeaker",b:"1F4E2",j:["volume","sound"],k:[26,56],o:2},lips:{a:"Mouth",b:"1F444",j:["mouth","kiss"],k:[12,51],o:2},"flag-cd":{a:"Congo - Kinshasa Flag",b:"1F1E8-1F1E9",k:[1,14],o:2},tent:{a:"Tent",b:"26FA",j:["photo","camping","outdoors"],k:[54,37],o:2},face_with_thermometer:{a:"Face with Thermometer",b:"1F912",j:["sick","temperature","thermometer","cold","fever"],k:[37,25],o:2},taco:{a:"Taco",b:"1F32E",j:["food","mexican"],k:[6,6],o:2},foggy:{a:"Foggy",b:"1F301",j:["photo","mountain"],k:[5,20],o:2},"flag-cf":{a:"Central African Republic Flag",b:"1F1E8-1F1EB",k:[1,15],o:2},baby:{a:"Baby",b:"1F476",j:["child","boy","girl","toddler"],k:[23,4],o:2},atom_symbol:{a:"Atom Symbol",b:"269B-FE0F",c:"269B",j:["science","physics","chemistry"],k:[53,48],o:2},fishing_pole_and_fish:{a:"Fishing Pole and Fish",b:"1F3A3",j:["food","hobby","summer"],k:[8,9],o:2},hedgehog:{a:"Hedgehog",b:"1F994",k:[42,38],o:5},face_with_head_bandage:{a:"Face with Head-Bandage",b:"1F915",j:["injured","clumsy","bandage","hurt"],k:[37,28],o:2},mega:{a:"Cheering Megaphone",b:"1F4E3",j:["sound","speaker","volume"],k:[27,0],o:2},nauseated_face:{a:"Nauseated Face",b:"1F922",j:["face","vomit","gross","green","sick","throw up","ill"],k:[38,19],o:4},child:{a:"Child",b:"1F9D2",k:[48,16],o:5},"flag-cg":{a:"Congo - Brazzaville Flag",b:"1F1E8-1F1EC",k:[1,16],o:2},bat:{a:"Bat",b:"1F987",j:["animal","nature","blind","vampire"],k:[42,25],o:4},diving_mask:{a:"Diving Mask",b:"1F93F",k:[41,15],o:12},burrito:{a:"Burrito",b:"1F32F",j:["food","mexican"],k:[6,7],o:2},postal_horn:{a:"Postal Horn",b:"1F4EF",j:["instrument","music"],k:[27,12],o:2},night_with_stars:{a:"Night with Stars",b:"1F303",j:["evening","city","downtown"],k:[5,22],o:2},om_symbol:{a:"Om Symbol",b:"1F549-FE0F",c:"1F549",k:[28,33],o:2},star_of_david:{a:"Star of David",b:"2721-FE0F",c:"2721",j:["judaism"],k:[55,15],o:2},boy:{a:"Boy",b:"1F466",j:["man","male","guy","teenager"],k:[14,26],o:2},bell:{a:"Bell",b:"1F514",j:["sound","notification","christmas","xmas","chime"],k:[27,48],o:2},"flag-ch":{a:"Switzerland Flag",b:"1F1E8-1F1ED",k:[1,17],o:2},running_shirt_with_sash:{a:"Running Shirt with Sash",b:"1F3BD",j:["play","pageant"],k:[8,35],o:2},stuffed_flatbread:{a:"Stuffed Flatbread",b:"1F959",j:["food","flatbread","stuffed","gyro"],k:[41,40],o:4},bear:{a:"Bear Face",b:"1F43B",j:["animal","nature","wild"],k:[12,31],o:2},cityscape:{a:"Cityscape",b:"1F3D9-FE0F",c:"1F3D9",j:["photo","night life","urban"],k:[10,44],o:2},face_vomiting:{a:"Face with Open Mouth Vomiting",b:"1F92E",k:[38,48],n:["face_with_open_mouth_vomiting"],o:5},wheel_of_dharma:{a:"Wheel of Dharma",b:"2638-FE0F",c:"2638",j:["hinduism","buddhism","sikhism","jainism"],k:[53,15],o:2},ski:{a:"Ski and Ski Boot",b:"1F3BF",j:["sports","winter","cold","snow"],k:[8,37],o:2},girl:{a:"Girl",b:"1F467",j:["female","woman","teenager"],k:[14,32],o:2},falafel:{a:"Falafel",b:"1F9C6",k:[44,14],o:12},sneezing_face:{a:"Sneezing Face",b:"1F927",j:["face","gesundheit","sneeze","sick","allergy"],k:[38,41],o:4},no_bell:{a:"Bell with Cancellation Stroke",b:"1F515",j:["sound","volume","mute","quiet","silent"],k:[27,49],o:2},koala:{a:"Koala",b:"1F428",j:["animal","nature"],k:[12,12],o:2},sunrise_over_mountains:{a:"Sunrise over Mountains",b:"1F304",j:["view","vacation","photo"],k:[5,23],o:2},"flag-ci":{a:"Côte D’ivoire Flag",b:"1F1E8-1F1EE",k:[1,18],o:2},sunrise:{a:"Sunrise",b:"1F305",j:["morning","view","vacation","photo"],k:[5,24],o:2},yin_yang:{a:"Yin Yang",b:"262F-FE0F",c:"262F",j:["balance"],k:[53,14],o:2},adult:{a:"Adult",b:"1F9D1",k:[48,10],o:5},hot_face:{a:"Overheated Face",b:"1F975",k:[42,10],o:11},musical_score:{a:"Musical Score",b:"1F3BC",j:["treble","clef","compose"],k:[8,34],o:2},sled:{a:"Sled",b:"1F6F7",k:[36,56],o:5},egg:{a:"Egg",b:"1F95A",j:["food","chicken","breakfast"],k:[41,41],o:4},panda_face:{a:"Panda Face",b:"1F43C",j:["animal","nature","panda"],k:[12,32],o:2},"flag-ck":{a:"Cook Islands Flag",b:"1F1E8-1F1F0",k:[1,19],o:2},"flag-cl":{a:"Chile Flag",b:"1F1E8-1F1F1",k:[1,20],o:2},sloth:{a:"Sloth",b:"1F9A5",k:[42,53],o:12},latin_cross:{a:"Latin Cross",b:"271D-FE0F",c:"271D",j:["christianity"],k:[55,14],o:2},curling_stone:{a:"Curling Stone",b:"1F94C",k:[41,27],o:5},cold_face:{a:"Freezing Face",b:"1F976",k:[42,11],o:11},fried_egg:{a:"Cooking",b:"1F373",j:["food","breakfast","kitchen","egg"],k:[7,18],n:["cooking"],o:2},city_sunset:{a:"Cityscape at Dusk",b:"1F306",j:["photo","evening","sky","buildings"],k:[5,25],o:2},musical_note:{a:"Musical Note",b:"1F3B5",j:["score","tone","sound"],k:[8,27],o:2},"flag-cm":{a:"Cameroon Flag",b:"1F1E8-1F1F2",k:[1,21],o:2},notes:{a:"Multiple Musical Notes",b:"1F3B6",j:["music","score"],k:[8,28],o:2},woozy_face:{a:"Face with Uneven Eyes and Wavy Mouth",b:"1F974",k:[42,9],o:11},dart:{a:"Direct Hit",b:"1F3AF",j:["game","play","bar"],k:[8,21],o:2},orthodox_cross:{a:"Orthodox Cross",b:"2626-FE0F",c:"2626",j:["suppedaneum","religion"],k:[53,11],o:2},shallow_pan_of_food:{a:"Shallow Pan of Food",b:"1F958",j:["food","cooking","casserole","paella"],k:[41,39],o:4},otter:{a:"Otter",b:"1F9A6",k:[42,54],o:12},man:{a:"Man",b:"1F468",j:["mustache","father","dad","guy","classy","sir","moustache"],k:[17,22],o:2},city_sunrise:{a:"Sunset over Buildings",b:"1F307",j:["photo","good morning","dawn"],k:[5,26],o:2},bearded_person:{a:"Bearded Person",b:"1F9D4",k:[48,28],o:5},skunk:{a:"Skunk",b:"1F9A8",k:[42,56],o:12},stew:{a:"Pot of Food",b:"1F372",j:["food","meat","soup"],k:[7,17],o:2},cn:{a:"China Flag",b:"1F1E8-1F1F3",j:["china","chinese","prc","flag","country","nation","banner"],k:[1,22],n:["flag-cn"],o:2},studio_microphone:{a:"Studio Microphone",b:"1F399-FE0F",c:"1F399",j:["sing","recording","artist","talkshow"],k:[8,1],o:2},star_and_crescent:{a:"Star and Crescent",b:"262A-FE0F",c:"262A",j:["islam"],k:[53,12],o:2},"yo-yo":{a:"Yo-Yo",b:"1FA80",k:[52,1],o:12},bridge_at_night:{a:"Bridge at Night",b:"1F309",j:["photo","sanfrancisco"],k:[5,28],o:2},dizzy_face:{a:"Dizzy Face",b:"1F635",j:["spent","unconscious","xox","dizzy"],k:[31,31],o:2},red_haired_man:{a:"Red Haired Man",b:"1F468-200D-1F9B0",k:[16,23],o:11},kite:{a:"Kite",b:"1FA81",k:[52,2],o:12},bowl_with_spoon:{a:"Bowl with Spoon",b:"1F963",k:[41,50],o:5},"flag-co":{a:"Colombia Flag",b:"1F1E8-1F1F4",k:[1,23],o:2},peace_symbol:{a:"Peace Symbol",b:"262E-FE0F",c:"262E",j:["hippie"],k:[53,13],o:2},kangaroo:{a:"Kangaroo",b:"1F998",k:[42,42],o:11},hotsprings:{a:"Hot Springs",b:"2668-FE0F",c:"2668",j:["bath","warm","relax"],k:[53,37],o:2},exploding_head:{a:"Shocked Face with Exploding Head",b:"1F92F",k:[38,49],n:["shocked_face_with_exploding_head"],o:5},level_slider:{a:"Level Slider",b:"1F39A-FE0F",c:"1F39A",j:["scale"],k:[8,2],o:2},badger:{a:"Badger",b:"1F9A1",k:[42,51],o:11},"8ball":{a:"Billiards",b:"1F3B1",j:["pool","hobby","game","luck","magic"],k:[8,23],o:2},curly_haired_man:{a:"Curly Haired Man",b:"1F468-200D-1F9B1",k:[16,29],o:11},"flag-cp":{a:"Clipperton Island Flag",b:"1F1E8-1F1F5",k:[1,24],o:2},carousel_horse:{a:"Carousel Horse",b:"1F3A0",j:["photo","carnival"],k:[8,6],o:2},face_with_cowboy_hat:{a:"Face with Cowboy Hat",b:"1F920",k:[38,17],o:4},menorah_with_nine_branches:{a:"Menorah with Nine Branches",b:"1F54E",k:[28,38],o:2},green_salad:{a:"Green Salad",b:"1F957",j:["food","healthy","lettuce"],k:[41,38],o:4},control_knobs:{a:"Control Knobs",b:"1F39B-FE0F",c:"1F39B",j:["dial"],k:[8,3],o:2},popcorn:{a:"Popcorn",b:"1F37F",j:["food","movie theater","films","snack"],k:[7,30],o:2},six_pointed_star:{a:"Six Pointed Star with Middle Dot",b:"1F52F",j:["purple-square","religion","jewish","hexagram"],k:[28,18],o:2},feet:{a:"Paw Prints",b:"1F43E",k:[12,34],n:["paw_prints"],o:2},ferris_wheel:{a:"Ferris Wheel",b:"1F3A1",j:["photo","carnival","londoneye"],k:[8,7],o:2},microphone:{a:"Microphone",b:"1F3A4",j:["sound","music","PA","sing","talkshow"],k:[8,10],o:2},crystal_ball:{a:"Crystal Ball",b:"1F52E",j:["disco","party","magic","circus","fortune_teller"],k:[28,17],o:2},partying_face:{a:"Face with Party Horn and Party Hat",b:"1F973",k:[42,8],o:11},"flag-cr":{a:"Costa Rica Flag",b:"1F1E8-1F1F7",k:[1,25],o:2},white_haired_man:{a:"White Haired Man",b:"1F468-200D-1F9B3",k:[16,41],o:11},headphones:{a:"Headphone",b:"1F3A7",j:["music","score","gadgets"],k:[8,13],o:2},bald_man:{a:"Bald Man",b:"1F468-200D-1F9B2",k:[16,35],o:11},sunglasses:{a:"Smiling Face with Sunglasses",b:"1F60E",j:["face","cool","smile","summer","beach","sunglass"],k:[30,49],l:["8)"],o:2},butter:{a:"Butter",b:"1F9C8",k:[44,16],o:12},roller_coaster:{a:"Roller Coaster",b:"1F3A2",j:["carnival","playground","photo","fun"],k:[8,8],o:2},turkey:{a:"Turkey",b:"1F983",j:["animal","bird"],k:[42,21],o:2},nazar_amulet:{a:"Nazar Amulet",b:"1F9FF",k:[51,50],o:11},"flag-cu":{a:"Cuba Flag",b:"1F1E8-1F1FA",k:[1,26],o:2},aries:{a:"Aries",b:"2648",j:["sign","purple-square","zodiac","astrology"],k:[53,20],o:2},"flag-cv":{a:"Cape Verde Flag",b:"1F1E8-1F1FB",k:[1,27],o:2},barber:{a:"Barber Pole",b:"1F488",j:["hair","salon","style"],k:[25,18],o:2},taurus:{a:"Taurus",b:"2649",j:["purple-square","sign","zodiac","astrology"],k:[53,21],o:2},salt:{a:"Salt Shaker",b:"1F9C2",k:[44,10],o:11},woman:{a:"Woman",b:"1F469",j:["female","girls","lady"],k:[20,9],o:2},video_game:{a:"Video Game",b:"1F3AE",j:["play","console","PS4","controller"],k:[8,20],o:2},chicken:{a:"Chicken",b:"1F414",j:["animal","cluck","nature","bird"],k:[11,48],o:2},radio:{a:"Radio",b:"1F4FB",j:["communication","music","podcast","program"],k:[27,24],o:2},nerd_face:{a:"Nerd Face",b:"1F913",j:["face","nerdy","geek","dork"],k:[37,26],o:2},red_haired_woman:{a:"Red Haired Woman",b:"1F469-200D-1F9B0",k:[19,8],o:11},circus_tent:{a:"Circus Tent",b:"1F3AA",j:["festival","carnival","party"],k:[8,16],o:2},face_with_monocle:{a:"Face with Monocle",b:"1F9D0",k:[45,16],o:5},canned_food:{a:"Canned Food",b:"1F96B",k:[42,1],o:5},"flag-cw":{a:"Curaçao Flag",b:"1F1E8-1F1FC",k:[1,28],o:2},gemini:{a:"Gemini",b:"264A",j:["sign","zodiac","purple-square","astrology"],k:[53,22],o:2},saxophone:{a:"Saxophone",b:"1F3B7",j:["music","instrument","jazz","blues"],k:[8,29],o:2},rooster:{a:"Rooster",b:"1F413",j:["animal","nature","chicken"],k:[11,47],o:2},joystick:{a:"Joystick",b:"1F579-FE0F",c:"1F579",j:["game","play"],k:[29,36],o:2},guitar:{a:"Guitar",b:"1F3B8",j:["music","instrument"],k:[8,30],o:2},slot_machine:{a:"Slot Machine",b:"1F3B0",j:["bet","gamble","vegas","fruit machine","luck","casino"],k:[8,22],o:2},bento:{a:"Bento Box",b:"1F371",j:["food","japanese","box"],k:[7,16],o:2},steam_locomotive:{a:"Steam Locomotive",b:"1F682",j:["transportation","vehicle","train"],k:[34,1],o:2},confused:{a:"Confused Face",b:"1F615",j:["face","indifference","huh","weird","hmmm",":/"],k:[30,56],l:[":\\",":-\\",":/",":-/"],o:2},"flag-cx":{a:"Christmas Island Flag",b:"1F1E8-1F1FD",k:[1,29],o:2},hatching_chick:{a:"Hatching Chick",b:"1F423",j:["animal","chicken","egg","born","baby","bird"],k:[12,7],o:2},cancer:{a:"Cancer",b:"264B",j:["sign","zodiac","purple-square","astrology"],k:[53,23],o:2},"flag-cy":{a:"Cyprus Flag",b:"1F1E8-1F1FE",k:[1,30],o:2},worried:{a:"Worried Face",b:"1F61F",j:["face","concern","nervous",":("],k:[31,9],o:2},railway_car:{a:"Railway Car",b:"1F683",j:["transportation","vehicle"],k:[34,2],o:2},leo:{a:"Leo",b:"264C",j:["sign","purple-square","zodiac","astrology"],k:[53,24],o:2},curly_haired_woman:{a:"Curly Haired Woman",b:"1F469-200D-1F9B1",k:[19,14],o:11},baby_chick:{a:"Baby Chick",b:"1F424",j:["animal","chicken","bird"],k:[12,8],o:2},musical_keyboard:{a:"Musical Keyboard",b:"1F3B9",j:["piano","instrument","compose"],k:[8,31],o:2},game_die:{a:"Game Die",b:"1F3B2",j:["dice","random","tabletop","play","luck"],k:[8,24],o:2},rice_cracker:{a:"Rice Cracker",b:"1F358",j:["food","japanese"],k:[6,48],o:2},virgo:{a:"Virgo",b:"264D",j:["sign","zodiac","purple-square","astrology"],k:[53,25],o:2},"flag-cz":{a:"Czechia Flag",b:"1F1E8-1F1FF",k:[1,31],o:2},rice_ball:{a:"Rice Ball",b:"1F359",j:["food","japanese"],k:[6,49],o:2},hatched_chick:{a:"Front-Facing Baby Chick",b:"1F425",j:["animal","chicken","baby","bird"],k:[12,9],o:2},jigsaw:{a:"Jigsaw Puzzle Piece",b:"1F9E9",k:[51,28],o:11},trumpet:{a:"Trumpet",b:"1F3BA",j:["music","brass"],k:[8,32],o:2},slightly_frowning_face:{a:"Slightly Frowning Face",b:"1F641",j:["face","frowning","disappointed","sad","upset"],k:[31,43],o:2},bullettrain_side:{a:"High-Speed Train",b:"1F684",j:["transportation","vehicle"],k:[34,3],o:2},libra:{a:"Libra",b:"264E",j:["sign","purple-square","zodiac","astrology"],k:[53,26],o:2},de:{a:"Germany Flag",b:"1F1E9-1F1EA",j:["german","nation","flag","country","banner"],k:[1,32],n:["flag-de"],o:2},rice:{a:"Cooked Rice",b:"1F35A",j:["food","china","asian"],k:[6,50],o:2},violin:{a:"Violin",b:"1F3BB",j:["music","instrument","orchestra","symphony"],k:[8,33],o:2},white_haired_woman:{a:"White Haired Woman",b:"1F469-200D-1F9B3",k:[19,26],o:11},bird:{a:"Bird",b:"1F426",j:["animal","nature","fly","tweet","spring"],k:[12,10],o:2},white_frowning_face:{a:"White Frowning Face",b:"2639-FE0F",c:"2639",k:[53,16],o:2},bullettrain_front:{a:"High-Speed Train with Bullet Nose",b:"1F685",j:["transportation","vehicle","speed","fast","public","travel"],k:[34,4],o:2},teddy_bear:{a:"Teddy Bear",b:"1F9F8",k:[51,43],o:11},spades:{a:"Black Spade Suit",b:"2660-FE0F",c:"2660",j:["poker","cards","suits","magic"],k:[53,33],o:2},banjo:{a:"Banjo",b:"1FA95",k:[52,9],o:12},train2:{a:"Train",b:"1F686",j:["transportation","vehicle"],k:[34,5],o:2},scorpius:{a:"Scorpius",b:"264F",j:["sign","zodiac","purple-square","astrology","scorpio"],k:[53,27],o:2},curry:{a:"Curry and Rice",b:"1F35B",j:["food","spicy","hot","indian"],k:[6,51],o:2},open_mouth:{a:"Face with Open Mouth",b:"1F62E",j:["face","surprise","impressed","wow","whoa",":O"],k:[31,24],l:[":o",":-o",":O",":-O"],o:2},"flag-dg":{a:"Diego Garcia Flag",b:"1F1E9-1F1EC",k:[1,33],o:2},penguin:{a:"Penguin",b:"1F427",j:["animal","nature"],k:[12,11],o:2},hearts:{a:"Black Heart Suit",b:"2665-FE0F",c:"2665",j:["poker","cards","magic","suits"],k:[53,35],o:2},ramen:{a:"Steaming Bowl",b:"1F35C",j:["food","japanese","noodle","chopsticks"],k:[6,52],o:2},sagittarius:{a:"Sagittarius",b:"2650",j:["sign","zodiac","purple-square","astrology"],k:[53,28],o:2},bald_woman:{a:"Bald Woman",b:"1F469-200D-1F9B2",k:[19,20],o:11},dove_of_peace:{a:"Dove of Peace",b:"1F54A-FE0F",c:"1F54A",k:[28,34],o:2},hushed:{a:"Hushed Face",b:"1F62F",j:["face","woo","shh"],k:[31,25],o:2},metro:{a:"Metro",b:"1F687",j:["transportation","blue-square","mrt","underground","tube"],k:[34,6],o:2},"flag-dj":{a:"Djibouti Flag",b:"1F1E9-1F1EF",k:[1,34],o:2},drum_with_drumsticks:{a:"Drum with Drumsticks",b:"1F941",k:[41,17],o:4},spaghetti:{a:"Spaghetti",b:"1F35D",j:["food","italian","noodle"],k:[6,53],o:2},eagle:{a:"Eagle",b:"1F985",j:["animal","nature","bird"],k:[42,23],o:4},astonished:{a:"Astonished Face",b:"1F632",j:["face","xox","surprised","poisoned"],k:[31,28],o:2},capricorn:{a:"Capricorn",b:"2651",j:["sign","zodiac","purple-square","astrology"],k:[53,29],o:2},light_rail:{a:"Light Rail",b:"1F688",j:["transportation","vehicle"],k:[34,7],o:2},"flag-dk":{a:"Denmark Flag",b:"1F1E9-1F1F0",k:[1,35],o:2},iphone:{a:"Mobile Phone",b:"1F4F1",j:["technology","apple","gadgets","dial"],k:[27,14],o:2},diamonds:{a:"Black Diamond Suit",b:"2666-FE0F",c:"2666",j:["poker","cards","magic","suits"],k:[53,36],o:2},clubs:{a:"Black Club Suit",b:"2663-FE0F",c:"2663",j:["poker","cards","magic","suits"],k:[53,34],o:2},aquarius:{a:"Aquarius",b:"2652",j:["sign","purple-square","zodiac","astrology"],k:[53,30],o:2},sweet_potato:{a:"Roasted Sweet Potato",b:"1F360",j:["food","nature"],k:[6,56],o:2},"flag-dm":{a:"Dominica Flag",b:"1F1E9-1F1F2",k:[1,36],o:2},duck:{a:"Duck",b:"1F986",j:["animal","nature","bird","mallard"],k:[42,24],o:4},calling:{a:"Mobile Phone with Rightwards Arrow at Left",b:"1F4F2",j:["iphone","incoming"],k:[27,15],o:2},station:{a:"Station",b:"1F689",j:["transportation","vehicle","public"],k:[34,8],o:2},"blond-haired-woman":{a:"Blond Haired Woman",b:"1F471-200D-2640-FE0F",c:"1F471-200D-2640",k:[22,7],o:4},flushed:{a:"Flushed Face",b:"1F633",j:["face","blush","shy","flattered"],k:[31,29],o:2},pisces:{a:"Pisces",b:"2653",j:["purple-square","sign","zodiac","astrology"],k:[53,31],o:2},chess_pawn:{a:"Chess Pawn",b:"265F-FE0F",c:"265F",k:[53,32],o:11},"blond-haired-man":{obsoletes:"1F471",a:"Blond Haired Man",b:"1F471-200D-2642-FE0F",c:"1F471-200D-2642",k:[22,13],o:4},phone:{a:"Black Telephone",b:"260E-FE0F",c:"260E",j:["technology","communication","dial","telephone"],k:[52,54],n:["telephone"],o:2},oden:{a:"Oden",b:"1F362",j:["food","japanese"],k:[7,1],o:2},"flag-do":{a:"Dominican Republic Flag",b:"1F1E9-1F1F4",k:[1,37],o:2},tram:{a:"Tram",b:"1F68A",j:["transportation","vehicle"],k:[34,9],o:2},swan:{a:"Swan",b:"1F9A2",k:[42,52],o:11},pleading_face:{a:"Face with Pleading Eyes",b:"1F97A",k:[42,12],o:11},"flag-dz":{a:"Algeria Flag",b:"1F1E9-1F1FF",k:[1,38],o:2},monorail:{a:"Monorail",b:"1F69D",j:["transportation","vehicle"],k:[34,28],o:2},owl:{a:"Owl",b:"1F989",j:["animal","nature","bird","hoot"],k:[42,27],o:4},sushi:{a:"Sushi",b:"1F363",j:["food","fish","japanese","rice"],k:[7,2],o:2},telephone_receiver:{a:"Telephone Receiver",b:"1F4DE",j:["technology","communication","dial"],k:[26,52],o:2},black_joker:{a:"Playing Card Black Joker",b:"1F0CF",j:["poker","cards","game","play","magic"],k:[0,15],o:2},ophiuchus:{a:"Ophiuchus",b:"26CE",j:["sign","purple-square","constellation","astrology"],k:[54,4],o:2},frowning:{a:"Frowning Face with Open Mouth",b:"1F626",j:["face","aw","what"],k:[31,16],o:2},older_adult:{a:"Older Adult",b:"1F9D3",k:[48,22],o:5},"flag-ea":{a:"Ceuta & Melilla Flag",b:"1F1EA-1F1E6",k:[1,39],o:2},flamingo:{a:"Flamingo",b:"1F9A9",k:[43,0],o:12},pager:{a:"Pager",b:"1F4DF",j:["bbcall","oldschool","90s"],k:[26,53],o:2},mountain_railway:{a:"Mountain Railway",b:"1F69E",j:["transportation","vehicle"],k:[34,29],o:2},mahjong:{a:"Mahjong Tile Red Dragon",b:"1F004",j:["game","play","chinese","kanji"],k:[0,14],o:2},older_man:{a:"Older Man",b:"1F474",j:["human","male","men","old","elder","senior"],k:[22,49],o:2},twisted_rightwards_arrows:{a:"Twisted Rightwards Arrows",b:"1F500",j:["blue-square","shuffle","music","random"],k:[27,28],o:2},fried_shrimp:{a:"Fried Shrimp",b:"1F364",j:["food","animal","appetizer","summer"],k:[7,3],o:2},anguished:{a:"Anguished Face",b:"1F627",j:["face","stunned","nervous"],k:[31,17],l:["D:"],o:2},repeat:{a:"Clockwise Rightwards and Leftwards Open Circle Arrows",b:"1F501",j:["loop","record"],k:[27,29],o:2},fish_cake:{a:"Fish Cake with Swirl Design",b:"1F365",j:["food","japan","sea","beach","narutomaki","pink","swirl","kamaboko","surimi","ramen"],k:[7,4],o:2},fax:{a:"Fax Machine",b:"1F4E0",j:["communication","technology"],k:[26,54],o:2},older_woman:{a:"Older Woman",b:"1F475",j:["human","female","women","lady","old","elder","senior"],k:[22,55],o:2},"flag-ec":{a:"Ecuador Flag",b:"1F1EA-1F1E8",k:[1,40],o:2},peacock:{a:"Peacock",b:"1F99A",k:[42,44],o:11},fearful:{a:"Fearful Face",b:"1F628",j:["face","scared","terrified","nervous","oops","huh"],k:[31,18],o:2},train:{a:"Tram Car",b:"1F68B",j:["transportation","vehicle","carriage","public","travel"],k:[34,10],o:2},flower_playing_cards:{a:"Flower Playing Cards",b:"1F3B4",j:["game","sunset","red"],k:[8,26],o:2},repeat_one:{a:"Clockwise Rightwards and Leftwards Open Circle Arrows with Circled One Overlay",b:"1F502",j:["blue-square","loop"],k:[27,30],o:2},moon_cake:{a:"Moon Cake",b:"1F96E",k:[42,4],o:11},performing_arts:{a:"Performing Arts",b:"1F3AD",j:["acting","theater","drama"],k:[8,19],o:2},cold_sweat:{a:"Face with Open Mouth and Cold Sweat",b:"1F630",j:["face","nervous","sweat"],k:[31,26],o:2},"flag-ee":{a:"Estonia Flag",b:"1F1EA-1F1EA",k:[1,41],o:2},battery:{a:"Battery",b:"1F50B",j:["power","energy","sustain"],k:[27,39],o:2},parrot:{a:"Parrot",b:"1F99C",k:[42,46],o:11},bus:{a:"Bus",b:"1F68C",j:["car","vehicle","transportation"],k:[34,11],o:2},"flag-eg":{a:"Egypt Flag",b:"1F1EA-1F1EC",k:[1,42],o:2},arrow_forward:{a:"Black Right-Pointing Triangle",b:"25B6-FE0F",c:"25B6",j:["blue-square","right","direction","play"],k:[52,43],o:2},"man-frowning":{a:"Man Frowning",b:"1F64D-200D-2642-FE0F",c:"1F64D-200D-2642",k:[33,20],o:4},disappointed_relieved:{a:"Disappointed but Relieved Face",b:"1F625",j:["face","phew","sweat","nervous"],k:[31,15],o:2},electric_plug:{a:"Electric Plug",b:"1F50C",j:["charger","power"],k:[27,40],o:2},frame_with_picture:{a:"Frame with Picture",b:"1F5BC-FE0F",c:"1F5BC",k:[30,14],o:2},oncoming_bus:{a:"Oncoming Bus",b:"1F68D",j:["vehicle","transportation"],k:[34,12],o:2},dango:{a:"Dango",b:"1F361",j:["food","dessert","sweet","japanese","barbecue","meat"],k:[7,0],o:2},frog:{a:"Frog Face",b:"1F438",j:["animal","nature","croak","toad"],k:[12,28],o:2},computer:{a:"Personal Computer",b:"1F4BB",j:["technology","laptop","screen","display","monitor"],k:[26,17],o:2},art:{a:"Artist Palette",b:"1F3A8",j:["design","paint","draw","colors"],k:[8,14],o:2},"flag-eh":{a:"Western Sahara Flag",b:"1F1EA-1F1ED",k:[1,43],o:2},fast_forward:{a:"Black Right-Pointing Double Triangle",b:"23E9",j:["blue-square","play","speed","continue"],k:[52,26],o:2},cry:{a:"Crying Face",b:"1F622",j:["face","tears","sad","depressed","upset",":'("],k:[31,12],l:[":'("],m:":'(",o:2},"woman-frowning":{obsoletes:"1F64D",a:"Woman Frowning",b:"1F64D-200D-2640-FE0F",c:"1F64D-200D-2640",k:[33,14],o:4},trolleybus:{a:"Trolleybus",b:"1F68E",j:["bart","transportation","vehicle"],k:[34,13],o:2},crocodile:{a:"Crocodile",b:"1F40A",j:["animal","nature","reptile","lizard","alligator"],k:[11,38],o:2},dumpling:{a:"Dumpling",b:"1F95F",k:[41,46],o:5},black_right_pointing_double_triangle_with_vertical_bar:{a:"Black Right Pointing Double Triangle with Vertical Bar",b:"23ED-FE0F",c:"23ED",k:[52,30],o:2},desktop_computer:{a:"Desktop Computer",b:"1F5A5-FE0F",c:"1F5A5",j:["technology","computing","screen"],k:[30,10],o:2},turtle:{a:"Turtle",b:"1F422",j:["animal","slow","nature","tortoise"],k:[12,6],o:2},sob:{a:"Loudly Crying Face",b:"1F62D",j:["face","cry","tears","sad","upset","depressed"],k:[31,23],m:":'(",o:2},"flag-er":{a:"Eritrea Flag",b:"1F1EA-1F1F7",k:[1,44],o:2},thread:{a:"Spool of Thread",b:"1F9F5",k:[51,40],o:11},minibus:{a:"Minibus",b:"1F690",j:["vehicle","car","transportation"],k:[34,15],o:2},fortune_cookie:{a:"Fortune Cookie",b:"1F960",k:[41,47],o:5},yarn:{a:"Ball of Yarn",b:"1F9F6",k:[51,41],o:11},takeout_box:{a:"Takeout Box",b:"1F961",k:[41,48],o:5},"man-pouting":{a:"Man Pouting",b:"1F64E-200D-2642-FE0F",c:"1F64E-200D-2642",k:[33,38],o:4},printer:{a:"Printer",b:"1F5A8-FE0F",c:"1F5A8",j:["paper","ink"],k:[30,11],o:2},scream:{a:"Face Screaming in Fear",b:"1F631",j:["face","munch","scared","omg"],k:[31,27],o:2},es:{a:"Spain Flag",b:"1F1EA-1F1F8",j:["spain","flag","nation","country","banner"],k:[1,45],n:["flag-es"],o:2},ambulance:{a:"Ambulance",b:"1F691",j:["health","911","hospital"],k:[34,16],o:2},black_right_pointing_triangle_with_double_vertical_bar:{a:"Black Right Pointing Triangle with Double Vertical Bar",b:"23EF-FE0F",c:"23EF",k:[52,32],o:2},lizard:{a:"Lizard",b:"1F98E",j:["animal","nature","reptile"],k:[42,32],o:4},"flag-et":{a:"Ethiopia Flag",b:"1F1EA-1F1F9",k:[1,46],o:2},keyboard:{a:"Keyboard",b:"2328-FE0F",c:"2328",j:["technology","computer","type","input","text"],k:[52,24],o:2},crab:{a:"Crab",b:"1F980",j:["animal","crustacean"],k:[42,18],o:2},confounded:{a:"Confounded Face",b:"1F616",j:["face","confused","sick","unwell","oops",":S"],k:[31,0],o:2},snake:{a:"Snake",b:"1F40D",j:["animal","evil","nature","hiss","python"],k:[11,41],o:2},"woman-pouting":{obsoletes:"1F64E",a:"Woman Pouting",b:"1F64E-200D-2640-FE0F",c:"1F64E-200D-2640",k:[33,32],o:4},arrow_backward:{a:"Black Left-Pointing Triangle",b:"25C0-FE0F",c:"25C0",j:["blue-square","left","direction"],k:[52,44],o:2},fire_engine:{a:"Fire Engine",b:"1F692",j:["transportation","cars","vehicle"],k:[34,17],o:2},rewind:{a:"Black Left-Pointing Double Triangle",b:"23EA",j:["play","blue-square"],k:[52,27],o:2},three_button_mouse:{a:"Three Button Mouse",b:"1F5B1-FE0F",c:"1F5B1",k:[30,12],o:2},police_car:{a:"Police Car",b:"1F693",j:["vehicle","cars","transportation","law","legal","enforcement"],k:[34,18],o:2},dragon_face:{a:"Dragon Face",b:"1F432",j:["animal","myth","nature","chinese","green"],k:[12,22],o:2},persevere:{a:"Persevering Face",b:"1F623",j:["face","sick","no","upset","oops"],k:[31,13],o:2},lobster:{a:"Lobster",b:"1F99E",k:[42,48],o:11},"flag-eu":{a:"European Union Flag",b:"1F1EA-1F1FA",k:[1,47],o:2},disappointed:{a:"Disappointed Face",b:"1F61E",j:["face","sad","upset","depressed",":("],k:[31,8],l:["):",":(",":-("],m:":(",o:2},shrimp:{a:"Shrimp",b:"1F990",j:["animal","ocean","nature","seafood"],k:[42,34],o:4},dragon:{a:"Dragon",b:"1F409",j:["animal","myth","nature","chinese","green"],k:[11,37],o:2},"man-gesturing-no":{a:"Man Gesturing No",b:"1F645-200D-2642-FE0F",c:"1F645-200D-2642",k:[31,53],o:4},"flag-fi":{a:"Finland Flag",b:"1F1EB-1F1EE",k:[1,48],o:2},trackball:{a:"Trackball",b:"1F5B2-FE0F",c:"1F5B2",j:["technology","trackpad"],k:[30,13],o:2},black_left_pointing_double_triangle_with_vertical_bar:{a:"Black Left Pointing Double Triangle with Vertical Bar",b:"23EE-FE0F",c:"23EE",k:[52,31],o:2},oncoming_police_car:{a:"Oncoming Police Car",b:"1F694",j:["vehicle","law","legal","enforcement","911"],k:[34,19],o:2},minidisc:{a:"Minidisc",b:"1F4BD",j:["technology","record","data","disk","90s"],k:[26,19],o:2},sweat:{a:"Face with Cold Sweat",b:"1F613",j:["face","hot","sad","tired","exercise"],k:[30,54],o:2},squid:{a:"Squid",b:"1F991",j:["animal","nature","ocean","sea"],k:[42,35],o:4},sauropod:{a:"Sauropod",b:"1F995",k:[42,39],o:5},arrow_up_small:{a:"Up-Pointing Small Red Triangle",b:"1F53C",j:["blue-square","triangle","direction","point","forward","top"],k:[28,31],o:2},"flag-fj":{a:"Fiji Flag",b:"1F1EB-1F1EF",k:[1,49],o:2},"woman-gesturing-no":{obsoletes:"1F645",a:"Woman Gesturing No",b:"1F645-200D-2640-FE0F",c:"1F645-200D-2640",k:[31,47],o:4},taxi:{a:"Taxi",b:"1F695",j:["uber","vehicle","cars","transportation"],k:[34,20],o:2},"flag-fk":{a:"Falkland Islands Flag",b:"1F1EB-1F1F0",k:[1,50],o:2},floppy_disk:{a:"Floppy Disk",b:"1F4BE",j:["oldschool","technology","save","90s","80s"],k:[26,20],o:2},"t-rex":{a:"T-Rex",b:"1F996",k:[42,40],o:5},oyster:{a:"Oyster",b:"1F9AA",k:[43,1],o:12},arrow_double_up:{a:"Black Up-Pointing Double Triangle",b:"23EB",j:["blue-square","direction","top"],k:[52,28],o:2},oncoming_taxi:{a:"Oncoming Taxi",b:"1F696",j:["vehicle","cars","uber"],k:[34,21],o:2},weary:{a:"Weary Face",b:"1F629",j:["face","tired","sleepy","sad","frustrated","upset"],k:[31,19],o:2},"man-gesturing-ok":{a:"Man Gesturing Ok",b:"1F646-200D-2642-FE0F",c:"1F646-200D-2642",k:[32,14],o:4},arrow_down_small:{a:"Down-Pointing Small Red Triangle",b:"1F53D",j:["blue-square","direction","bottom"],k:[28,32],o:2},tired_face:{a:"Tired Face",b:"1F62B",j:["sick","whine","upset","frustrated"],k:[31,21],o:2},car:{a:"Automobile",b:"1F697",k:[34,22],n:["red_car"],o:2},icecream:{a:"Soft Ice Cream",b:"1F366",j:["food","hot","dessert","summer"],k:[7,5],o:2},cd:{a:"Optical Disc",b:"1F4BF",j:["technology","dvd","disk","disc","90s"],k:[26,21],o:2},whale:{a:"Spouting Whale",b:"1F433",j:["animal","nature","sea","ocean"],k:[12,23],o:2},"flag-fm":{a:"Micronesia Flag",b:"1F1EB-1F1F2",k:[1,51],o:2},oncoming_automobile:{a:"Oncoming Automobile",b:"1F698",j:["car","vehicle","transportation"],k:[34,23],o:2},arrow_double_down:{a:"Black Down-Pointing Double Triangle",b:"23EC",j:["blue-square","direction","bottom"],k:[52,29],o:2},"woman-gesturing-ok":{obsoletes:"1F646",a:"Woman Gesturing Ok",b:"1F646-200D-2640-FE0F",c:"1F646-200D-2640",k:[32,8],o:4},yawning_face:{a:"Yawning Face",b:"1F971",k:[42,7],o:12},dvd:{a:"Dvd",b:"1F4C0",j:["cd","disk","disc"],k:[26,22],o:2},whale2:{a:"Whale",b:"1F40B",j:["animal","nature","sea","ocean"],k:[11,39],o:2},"flag-fo":{a:"Faroe Islands Flag",b:"1F1EB-1F1F4",k:[1,52],o:2},shaved_ice:{a:"Shaved Ice",b:"1F367",j:["hot","dessert","summer"],k:[7,6],o:2},double_vertical_bar:{a:"Double Vertical Bar",b:"23F8-FE0F",c:"23F8",k:[52,37],o:2},dolphin:{a:"Dolphin",b:"1F42C",j:["animal","nature","fish","sea","ocean","flipper","fins","beach"],k:[12,16],n:["flipper"],o:2},blue_car:{a:"Recreational Vehicle",b:"1F699",j:["transportation","vehicle"],k:[34,24],o:2},ice_cream:{a:"Ice Cream",b:"1F368",j:["food","hot","dessert"],k:[7,7],o:2},fr:{a:"France Flag",b:"1F1EB-1F1F7",j:["banner","flag","nation","france","french","country"],k:[1,53],n:["flag-fr"],o:2},triumph:{a:"Face with Look of Triumph",b:"1F624",j:["face","gas","phew","proud","pride"],k:[31,14],o:2},abacus:{a:"Abacus",b:"1F9EE",k:[51,33],o:11},"man-tipping-hand":{a:"Man Tipping Hand",b:"1F481-200D-2642-FE0F",c:"1F481-200D-2642",k:[23,53],o:4},doughnut:{a:"Doughnut",b:"1F369",j:["food","dessert","snack","sweet","donut"],k:[7,8],o:2},fish:{a:"Fish",b:"1F41F",j:["animal","food","nature"],k:[12,3],o:2},truck:{a:"Delivery Truck",b:"1F69A",j:["cars","transportation"],k:[34,25],o:2},movie_camera:{a:"Movie Camera",b:"1F3A5",j:["film","record"],k:[8,11],o:2},"flag-ga":{a:"Gabon Flag",b:"1F1EC-1F1E6",k:[1,54],o:2},rage:{a:"Pouting Face",b:"1F621",j:["angry","mad","hate","despise"],k:[31,11],o:2},black_square_for_stop:{a:"Black Square for Stop",b:"23F9-FE0F",c:"23F9",k:[52,38],o:2},articulated_lorry:{a:"Articulated Lorry",b:"1F69B",j:["vehicle","cars","transportation","express"],k:[34,26],o:2},angry:{a:"Angry Face",b:"1F620",j:["mad","face","annoyed","frustrated"],k:[31,10],l:[">:(",">:-("],o:2},cookie:{a:"Cookie",b:"1F36A",j:["food","snack","oreo","chocolate","sweet","dessert"],k:[7,9],o:2},gb:{a:"United Kingdom Flag",b:"1F1EC-1F1E7",k:[1,55],n:["uk","flag-gb"],o:2},tropical_fish:{a:"Tropical Fish",b:"1F420",j:["animal","swim","ocean","beach","nemo"],k:[12,4],o:2},"woman-tipping-hand":{obsoletes:"1F481",a:"Woman Tipping Hand",b:"1F481-200D-2640-FE0F",c:"1F481-200D-2640",k:[23,47],o:4},black_circle_for_record:{a:"Black Circle for Record",b:"23FA-FE0F",c:"23FA",k:[52,39],o:2},film_frames:{a:"Film Frames",b:"1F39E-FE0F",c:"1F39E",k:[8,4],o:2},film_projector:{a:"Film Projector",b:"1F4FD-FE0F",c:"1F4FD",j:["video","tape","record","movie"],k:[27,26],o:2},"flag-gd":{a:"Grenada Flag",b:"1F1EC-1F1E9",k:[1,56],o:2},blowfish:{a:"Blowfish",b:"1F421",j:["animal","nature","food","sea","ocean"],k:[12,5],o:2},face_with_symbols_on_mouth:{a:"Serious Face with Symbols Covering Mouth",b:"1F92C",k:[38,46],n:["serious_face_with_symbols_covering_mouth"],o:5},birthday:{a:"Birthday Cake",b:"1F382",j:["food","dessert","cake"],k:[7,33],o:2},eject:{a:"Eject",b:"23CF-FE0F",c:"23CF",k:[52,25],o:2},tractor:{a:"Tractor",b:"1F69C",j:["vehicle","car","farming","agriculture"],k:[34,27],o:2},"flag-ge":{a:"Georgia Flag",b:"1F1EC-1F1EA",k:[2,0],o:2},smiling_imp:{a:"Smiling Face with Horns",b:"1F608",j:["devil","horns"],k:[30,43],o:2},racing_car:{a:"Racing Car",b:"1F3CE-FE0F",c:"1F3CE",j:["sports","race","fast","formula","f1"],k:[10,33],o:2},cinema:{a:"Cinema",b:"1F3A6",j:["blue-square","record","film","movie","curtain","stage","theater"],k:[8,12],o:2},clapper:{a:"Clapper Board",b:"1F3AC",j:["movie","film","record"],k:[8,18],o:2},shark:{a:"Shark",b:"1F988",j:["animal","nature","fish","sea","ocean","jaws","fins","beach"],k:[42,26],o:4},cake:{a:"Shortcake",b:"1F370",j:["food","dessert"],k:[7,15],o:2},"man-raising-hand":{a:"Man Raising Hand",b:"1F64B-200D-2642-FE0F",c:"1F64B-200D-2642",k:[32,53],o:4},octopus:{a:"Octopus",b:"1F419",j:["animal","creature","ocean","sea","nature","beach"],k:[11,54],o:2},"woman-raising-hand":{obsoletes:"1F64B",a:"Woman Raising Hand",b:"1F64B-200D-2640-FE0F",c:"1F64B-200D-2640",k:[32,47],o:4},"flag-gf":{a:"French Guiana Flag",b:"1F1EC-1F1EB",k:[2,1],o:2},tv:{a:"Television",b:"1F4FA",j:["technology","program","oldschool","show","television"],k:[27,23],o:2},imp:{a:"Imp",b:"1F47F",j:["devil","angry","horns"],k:[23,45],o:2},cupcake:{a:"Cupcake",b:"1F9C1",k:[44,9],o:11},racing_motorcycle:{a:"Racing Motorcycle",b:"1F3CD-FE0F",c:"1F3CD",k:[10,32],o:2},low_brightness:{a:"Low Brightness Symbol",b:"1F505",j:["sun","afternoon","warm","summer"],k:[27,33],o:2},shell:{a:"Spiral Shell",b:"1F41A",j:["nature","sea","beach"],k:[11,55],o:2},"flag-gg":{a:"Guernsey Flag",b:"1F1EC-1F1EC",k:[2,2],o:2},high_brightness:{a:"High Brightness Symbol",b:"1F506",j:["sun","light"],k:[27,34],o:2},deaf_person:{a:"Deaf Person",b:"1F9CF",k:[45,10],o:12},skull:{a:"Skull",b:"1F480",j:["dead","skeleton","creepy","death"],k:[23,46],o:2},motor_scooter:{a:"Motor Scooter",b:"1F6F5",j:["vehicle","vespa","sasha"],k:[36,54],o:4},camera:{a:"Camera",b:"1F4F7",j:["gadgets","photography"],k:[27,20],o:2},pie:{a:"Pie",b:"1F967",k:[41,54],o:5},"flag-gh":{a:"Ghana Flag",b:"1F1EC-1F1ED",k:[2,3],o:2},deaf_man:{a:"Deaf Man",b:"1F9CF-200D-2642-FE0F",c:"1F9CF-200D-2642",k:[45,4],o:12},skull_and_crossbones:{a:"Skull and Crossbones",b:"2620-FE0F",c:"2620",j:["poison","danger","deadly","scary","death","pirate","evil"],k:[53,8],o:2},camera_with_flash:{a:"Camera with Flash",b:"1F4F8",k:[27,21],o:2},signal_strength:{a:"Antenna with Bars",b:"1F4F6",j:["blue-square","reception","phone","internet","connection","wifi","bluetooth","bars"],k:[27,19],o:2},chocolate_bar:{a:"Chocolate Bar",b:"1F36B",j:["food","snack","dessert","sweet"],k:[7,10],o:2},manual_wheelchair:{a:"Manual Wheelchair",b:"1F9BD",k:[44,5],o:12},snail:{a:"Snail",b:"1F40C",j:["slow","animal","shell"],k:[11,40],o:2},motorized_wheelchair:{a:"Motorized Wheelchair",b:"1F9BC",k:[44,4],o:12},"flag-gi":{a:"Gibraltar Flag",b:"1F1EC-1F1EE",k:[2,4],o:2},hankey:{a:"Pile of Poo",b:"1F4A9",k:[25,51],n:["poop","shit"],o:2},vibration_mode:{a:"Vibration Mode",b:"1F4F3",j:["orange-square","phone"],k:[27,16],o:2},deaf_woman:{a:"Deaf Woman",b:"1F9CF-200D-2640-FE0F",c:"1F9CF-200D-2640",k:[44,55],o:12},butterfly:{a:"Butterfly",b:"1F98B",j:["animal","insect","nature","caterpillar"],k:[42,29],o:4},video_camera:{a:"Video Camera",b:"1F4F9",j:["film","record"],k:[27,22],o:2},candy:{a:"Candy",b:"1F36C",j:["snack","dessert","sweet","lolly"],k:[7,11],o:2},auto_rickshaw:{a:"Auto Rickshaw",b:"1F6FA",k:[37,2],o:12},mobile_phone_off:{a:"Mobile Phone off",b:"1F4F4",j:["mute","orange-square","silence","quiet"],k:[27,17],o:2},clown_face:{a:"Clown Face",b:"1F921",j:["face"],k:[38,18],o:4},lollipop:{a:"Lollipop",b:"1F36D",j:["food","snack","candy","sweet"],k:[7,12],o:2},"flag-gl":{a:"Greenland Flag",b:"1F1EC-1F1F1",k:[2,5],o:2},vhs:{a:"Videocassette",b:"1F4FC",j:["record","video","oldschool","90s","80s"],k:[27,25],o:2},bug:{a:"Bug",b:"1F41B",j:["animal","insect","nature","worm"],k:[11,56],o:2},bike:{a:"Bicycle",b:"1F6B2",j:["sports","bicycle","exercise","hipster"],k:[35,9],o:2},"man-bowing":{obsoletes:"1F647",a:"Man Bowing",b:"1F647-200D-2642-FE0F",c:"1F647-200D-2642",k:[32,32],o:4},female_sign:{a:"Female Sign",b:"2640-FE0F",c:"2640",k:[53,18],o:4},japanese_ogre:{a:"Japanese Ogre",b:"1F479",j:["monster","red","mask","halloween","scary","creepy","devil","demon","japanese","ogre"],k:[23,34],o:2},custard:{a:"Custard",b:"1F36E",j:["dessert","food"],k:[7,13],o:2},ant:{a:"Ant",b:"1F41C",j:["animal","insect","nature","bug"],k:[12,0],o:2},mag:{a:"Left-Pointing Magnifying Glass",b:"1F50D",j:["search","zoom","find","detective"],k:[27,41],o:2},"flag-gm":{a:"Gambia Flag",b:"1F1EC-1F1F2",k:[2,6],o:2},honey_pot:{a:"Honey Pot",b:"1F36F",j:["bees","sweet","kitchen"],k:[7,14],o:2},"woman-bowing":{a:"Woman Bowing",b:"1F647-200D-2640-FE0F",c:"1F647-200D-2640",k:[32,26],o:4},male_sign:{a:"Male Sign",b:"2642-FE0F",c:"2642",k:[53,19],o:4},mag_right:{a:"Right-Pointing Magnifying Glass",b:"1F50E",j:["search","zoom","find","detective"],k:[27,42],o:2},japanese_goblin:{a:"Japanese Goblin",b:"1F47A",j:["red","evil","mask","monster","scary","creepy","japanese","goblin"],k:[23,35],o:2},scooter:{a:"Scooter",b:"1F6F4",k:[36,53],o:4},bee:{a:"Honeybee",b:"1F41D",k:[12,1],n:["honeybee"],o:2},"flag-gn":{a:"Guinea Flag",b:"1F1EC-1F1F3",k:[2,7],o:2},candle:{a:"Candle",b:"1F56F-FE0F",c:"1F56F",j:["fire","wax"],k:[29,6],o:2},skateboard:{a:"Skateboard",b:"1F6F9",k:[37,1],o:11},medical_symbol:{a:"Medical Symbol",b:"2695-FE0F",c:"2695",k:[53,44],n:["staff_of_aesculapius"],o:4},ghost:{a:"Ghost",b:"1F47B",j:["halloween","spooky","scary"],k:[23,36],o:2},beetle:{a:"Lady Beetle",b:"1F41E",j:["animal","insect","nature","ladybug"],k:[12,2],o:2},"flag-gp":{a:"Guadeloupe Flag",b:"1F1EC-1F1F5",k:[2,8],o:2},baby_bottle:{a:"Baby Bottle",b:"1F37C",j:["food","container","milk"],k:[7,27],o:2},infinity:{a:"Infinity",b:"267E-FE0F",c:"267E",k:[53,39],o:11},glass_of_milk:{a:"Glass of Milk",b:"1F95B",k:[41,42],o:4},"man-facepalming":{a:"Man Facepalming",b:"1F926-200D-2642-FE0F",c:"1F926-200D-2642",k:[38,29],o:4},cricket:{a:"Cricket",b:"1F997",j:["sports"],k:[42,41],o:5},busstop:{a:"Bus Stop",b:"1F68F",j:["transportation","wait"],k:[34,14],o:2},"flag-gq":{a:"Equatorial Guinea Flag",b:"1F1EC-1F1F6",k:[2,9],o:2},alien:{a:"Extraterrestrial Alien",b:"1F47D",j:["UFO","paul","weird","outer_space"],k:[23,43],o:2},bulb:{a:"Electric Light Bulb",b:"1F4A1",j:["light","electricity","idea"],k:[25,43],o:2},"woman-facepalming":{a:"Woman Facepalming",b:"1F926-200D-2640-FE0F",c:"1F926-200D-2640",k:[38,23],o:4},spider:{a:"Spider",b:"1F577-FE0F",c:"1F577",j:["animal","arachnid"],k:[29,34],o:2},space_invader:{a:"Alien Monster",b:"1F47E",j:["game","arcade","play"],k:[23,44],o:2},motorway:{a:"Motorway",b:"1F6E3-FE0F",c:"1F6E3",j:["road","cupertino","interstate","highway"],k:[36,45],o:2},"flag-gr":{a:"Greece Flag",b:"1F1EC-1F1F7",k:[2,10],o:2},recycle:{a:"Black Universal Recycling Symbol",b:"267B-FE0F",c:"267B",j:["arrow","environment","garbage","trash"],k:[53,38],o:2},coffee:{a:"Hot Beverage",b:"2615",j:["beverage","caffeine","latte","espresso"],k:[53,0],o:2},flashlight:{a:"Electric Torch",b:"1F526",j:["dark","camping","sight","night"],k:[28,9],o:2},spider_web:{a:"Spider Web",b:"1F578-FE0F",c:"1F578",j:["animal","insect","arachnid","silk"],k:[29,35],o:2},izakaya_lantern:{a:"Izakaya Lantern",b:"1F3EE",j:["light","paper","halloween","spooky"],k:[11,8],n:["lantern"],o:2},"flag-gs":{a:"South Georgia & South Sandwich Islands Flag",b:"1F1EC-1F1F8",k:[2,11],o:2},fleur_de_lis:{a:"Fleur De Lis",b:"269C-FE0F",c:"269C",j:["decorative","scout"],k:[53,49],o:2},robot_face:{a:"Robot Face",b:"1F916",k:[37,29],o:2},railway_track:{a:"Railway Track",b:"1F6E4-FE0F",c:"1F6E4",j:["train","transportation"],k:[36,46],o:2},tea:{a:"Teacup Without Handle",b:"1F375",j:["drink","bowl","breakfast","green","british"],k:[7,20],o:2},"flag-gt":{a:"Guatemala Flag",b:"1F1EC-1F1F9",k:[2,12],o:2},oil_drum:{a:"Oil Drum",b:"1F6E2-FE0F",c:"1F6E2",j:["barrell"],k:[36,44],o:2},diya_lamp:{a:"Diya Lamp",b:"1FA94",k:[52,8],o:12},sake:{a:"Sake Bottle and Cup",b:"1F376",j:["wine","drink","drunk","beverage","japanese","alcohol","booze"],k:[7,21],o:2},trident:{a:"Trident Emblem",b:"1F531",j:["weapon","spear"],k:[28,20],o:2},"man-shrugging":{a:"Man Shrugging",b:"1F937-200D-2642-FE0F",c:"1F937-200D-2642",k:[39,41],o:4},smiley_cat:{a:"Smiling Cat Face with Open Mouth",b:"1F63A",j:["animal","cats","happy","smile"],k:[31,36],o:2},scorpion:{a:"Scorpion",b:"1F982",j:["animal","arachnid"],k:[42,20],o:2},"woman-shrugging":{a:"Woman Shrugging",b:"1F937-200D-2640-FE0F",c:"1F937-200D-2640",k:[39,35],o:4},notebook_with_decorative_cover:{a:"Notebook with Decorative Cover",b:"1F4D4",j:["classroom","notes","record","paper","study"],k:[26,42],o:2},fuelpump:{a:"Fuel Pump",b:"26FD",j:["gas station","petroleum"],k:[54,38],o:2},name_badge:{a:"Name Badge",b:"1F4DB",j:["fire","forbid"],k:[26,49],o:2},mosquito:{a:"Mosquito",b:"1F99F",k:[42,49],o:11},"flag-gu":{a:"Guam Flag",b:"1F1EC-1F1FA",k:[2,13],o:2},smile_cat:{a:"Grinning Cat Face with Smiling Eyes",b:"1F638",j:["animal","cats","smile"],k:[31,34],o:2},champagne:{a:"Bottle with Popping Cork",b:"1F37E",j:["drink","wine","bottle","celebration"],k:[7,29],o:2},joy_cat:{a:"Cat Face with Tears of Joy",b:"1F639",j:["animal","cats","haha","happy","tears"],k:[31,35],o:2},closed_book:{a:"Closed Book",b:"1F4D5",j:["read","library","knowledge","textbook","learn"],k:[26,43],o:2},rotating_light:{a:"Police Cars Revolving Light",b:"1F6A8",j:["police","ambulance","911","emergency","alert","error","pinged","law","legal"],k:[34,56],o:2},microbe:{a:"Microbe",b:"1F9A0",k:[42,50],o:11},"flag-gw":{a:"Guinea-Bissau Flag",b:"1F1EC-1F1FC",k:[2,14],o:2},wine_glass:{a:"Wine Glass",b:"1F377",j:["drink","beverage","drunk","alcohol","booze"],k:[7,22],o:2},beginner:{a:"Japanese Symbol for Beginner",b:"1F530",j:["badge","shield"],k:[28,19],o:2},bouquet:{a:"Bouquet",b:"1F490",j:["flowers","nature","spring"],k:[25,26],o:2},heart_eyes_cat:{a:"Smiling Cat Face with Heart-Shaped Eyes",b:"1F63B",j:["animal","love","like","affection","cats","valentines","heart"],k:[31,37],o:2},"male-doctor":{a:"Male Doctor",b:"1F468-200D-2695-FE0F",c:"1F468-200D-2695",k:[17,2],o:4},book:{a:"Open Book",b:"1F4D6",k:[26,44],n:["open_book"],o:2},traffic_light:{a:"Horizontal Traffic Light",b:"1F6A5",j:["transportation","signal"],k:[34,53],o:2},cocktail:{a:"Cocktail Glass",b:"1F378",j:["drink","drunk","alcohol","beverage","booze","mojito"],k:[7,23],o:2},o:{a:"Heavy Large Circle",b:"2B55",j:["circle","round"],k:[55,43],o:2},"flag-gy":{a:"Guyana Flag",b:"1F1EC-1F1FE",k:[2,15],o:2},"female-doctor":{a:"Female Doctor",b:"1F469-200D-2695-FE0F",c:"1F469-200D-2695",k:[19,44],o:4},smirk_cat:{a:"Cat Face with Wry Smile",b:"1F63C",j:["animal","cats","smirk"],k:[31,38],o:2},green_book:{a:"Green Book",b:"1F4D7",j:["read","library","knowledge","study"],k:[26,45],o:2},cherry_blossom:{a:"Cherry Blossom",b:"1F338",j:["nature","plant","spring","flower"],k:[6,16],o:2},"flag-hk":{a:"Hong Kong Sar China Flag",b:"1F1ED-1F1F0",k:[2,16],o:2},vertical_traffic_light:{a:"Vertical Traffic Light",b:"1F6A6",j:["transportation","driving"],k:[34,54],o:2},white_check_mark:{a:"White Heavy Check Mark",b:"2705",j:["green-square","ok","agree","vote","election","answer","tick"],k:[54,40],o:2},tropical_drink:{a:"Tropical Drink",b:"1F379",j:["beverage","cocktail","summer","beach","alcohol","booze","mojito"],k:[7,24],o:2},kissing_cat:{a:"Kissing Cat Face with Closed Eyes",b:"1F63D",j:["animal","cats","kiss"],k:[31,39],o:2},"flag-hm":{a:"Heard & Mcdonald Islands Flag",b:"1F1ED-1F1F2",k:[2,17],o:2},octagonal_sign:{a:"Octagonal Sign",b:"1F6D1",k:[36,39],o:4},white_flower:{a:"White Flower",b:"1F4AE",j:["japanese","spring"],k:[26,4],o:2},ballot_box_with_check:{a:"Ballot Box with Check",b:"2611-FE0F",c:"2611",j:["ok","agree","confirm","black-square","vote","election","yes","tick"],k:[52,55],o:2},blue_book:{a:"Blue Book",b:"1F4D8",j:["read","library","knowledge","learn","study"],k:[26,46],o:2},beer:{a:"Beer Mug",b:"1F37A",j:["relax","beverage","drink","drunk","party","pub","summer","alcohol","booze"],k:[7,25],o:2},construction:{a:"Construction Sign",b:"1F6A7",j:["wip","progress","caution","warning"],k:[34,55],o:2},rosette:{a:"Rosette",b:"1F3F5-FE0F",c:"1F3F5",j:["flower","decoration","military"],k:[11,18],o:2},heavy_check_mark:{a:"Heavy Check Mark",b:"2714-FE0F",c:"2714",j:["ok","nike","answer","yes","tick"],k:[55,12],o:2},scream_cat:{a:"Weary Cat Face",b:"1F640",j:["animal","cats","munch","scared","scream"],k:[31,42],o:2},orange_book:{a:"Orange Book",b:"1F4D9",j:["read","library","knowledge","textbook","study"],k:[26,47],o:2},beers:{a:"Clinking Beer Mugs",b:"1F37B",j:["relax","beverage","drink","drunk","party","pub","summer","alcohol","booze"],k:[7,26],o:2},"male-student":{a:"Male Student",b:"1F468-200D-1F393",k:[14,50],o:4},"flag-hn":{a:"Honduras Flag",b:"1F1ED-1F1F3",k:[2,18],o:2},crying_cat_face:{a:"Crying Cat Face",b:"1F63F",j:["animal","tears","weep","sad","cats","upset","cry"],k:[31,41],o:2},anchor:{a:"Anchor",b:"2693",j:["ship","ferry","sea","boat"],k:[53,42],o:2},"flag-hr":{a:"Croatia Flag",b:"1F1ED-1F1F7",k:[2,19],o:2},heavy_multiplication_x:{a:"Heavy Multiplication X",b:"2716-FE0F",c:"2716",j:["math","calculation"],k:[55,13],o:2},"female-student":{a:"Female Student",b:"1F469-200D-1F393",k:[17,40],o:4},rose:{a:"Rose",b:"1F339",j:["flowers","valentines","love","spring"],k:[6,17],o:2},books:{a:"Books",b:"1F4DA",j:["literature","library","study"],k:[26,48],o:2},clinking_glasses:{a:"Clinking Glasses",b:"1F942",j:["beverage","drink","party","alcohol","celebrate","cheers"],k:[41,18],o:4},x:{a:"Cross Mark",b:"274C",j:["no","delete","remove","cancel"],k:[55,21],o:2},pouting_cat:{a:"Pouting Cat Face",b:"1F63E",j:["animal","cats"],k:[31,40],o:2},wilted_flower:{a:"Wilted Flower",b:"1F940",j:["plant","nature","flower"],k:[41,16],o:4},boat:{a:"Sailboat",b:"26F5",k:[54,16],n:["sailboat"],o:2},"flag-ht":{a:"Haiti Flag",b:"1F1ED-1F1F9",k:[2,20],o:2},tumbler_glass:{a:"Tumbler Glass",b:"1F943",j:["drink","beverage","drunk","alcohol","liquor","booze","bourbon","scotch","whisky","glass","shot"],k:[41,19],o:4},notebook:{a:"Notebook",b:"1F4D3",j:["stationery","record","notes","paper","study"],k:[26,41],o:2},"male-teacher":{a:"Male Teacher",b:"1F468-200D-1F3EB",k:[15,11],o:4},ledger:{a:"Ledger",b:"1F4D2",j:["notes","paper"],k:[26,40],o:2},"flag-hu":{a:"Hungary Flag",b:"1F1ED-1F1FA",k:[2,21],o:2},cup_with_straw:{a:"Cup with Straw",b:"1F964",k:[41,51],o:5},hibiscus:{a:"Hibiscus",b:"1F33A",j:["plant","vegetable","flowers","beach"],k:[6,18],o:2},see_no_evil:{a:"See-No-Evil Monkey",b:"1F648",j:["monkey","animal","nature","haha"],k:[32,44],o:2},canoe:{a:"Canoe",b:"1F6F6",j:["boat","paddle","water","ship"],k:[36,55],o:4},negative_squared_cross_mark:{a:"Negative Squared Cross Mark",b:"274E",j:["x","green-square","no","deny"],k:[55,22],o:2},"flag-ic":{a:"Canary Islands Flag",b:"1F1EE-1F1E8",k:[2,22],o:2},beverage_box:{a:"Beverage Box",b:"1F9C3",k:[44,11],o:12},speedboat:{a:"Speedboat",b:"1F6A4",j:["ship","transportation","vehicle","summer"],k:[34,52],o:2},heavy_plus_sign:{a:"Heavy Plus Sign",b:"2795",j:["math","calculation","addition","more","increase"],k:[55,29],o:2},sunflower:{a:"Sunflower",b:"1F33B",j:["nature","plant","fall"],k:[6,19],o:2},page_with_curl:{a:"Page with Curl",b:"1F4C3",j:["documents","office","paper"],k:[26,25],o:2},"female-teacher":{a:"Female Teacher",b:"1F469-200D-1F3EB",k:[18,1],o:4},hear_no_evil:{a:"Hear-No-Evil Monkey",b:"1F649",j:["animal","monkey","nature"],k:[32,45],o:2},mate_drink:{a:"Mate Drink",b:"1F9C9",k:[44,17],o:12},passenger_ship:{a:"Passenger Ship",b:"1F6F3-FE0F",c:"1F6F3",j:["yacht","cruise","ferry"],k:[36,52],o:2},scroll:{a:"Scroll",b:"1F4DC",j:["documents","ancient","history","paper"],k:[26,50],o:2},blossom:{a:"Blossom",b:"1F33C",j:["nature","flowers","yellow"],k:[6,20],o:2},"flag-id":{a:"Indonesia Flag",b:"1F1EE-1F1E9",k:[2,23],o:2},speak_no_evil:{a:"Speak-No-Evil Monkey",b:"1F64A",j:["monkey","animal","nature","omg"],k:[32,46],o:2},heavy_minus_sign:{a:"Heavy Minus Sign",b:"2796",j:["math","calculation","subtract","less"],k:[55,30],o:2},"flag-ie":{a:"Ireland Flag",b:"1F1EE-1F1EA",k:[2,24],o:2},ice_cube:{a:"Ice Cube",b:"1F9CA",k:[44,18],o:12},page_facing_up:{a:"Page Facing Up",b:"1F4C4",j:["documents","office","paper","information"],k:[26,26],o:2},"male-judge":{a:"Male Judge",b:"1F468-200D-2696-FE0F",c:"1F468-200D-2696",k:[17,8],o:4},tulip:{a:"Tulip",b:"1F337",j:["flowers","plant","nature","summer","spring"],k:[6,15],o:2},ferry:{a:"Ferry",b:"26F4-FE0F",c:"26F4",j:["boat","ship","yacht"],k:[54,15],o:2},kiss:{a:"Kiss Mark",b:"1F48B",j:["face","lips","love","like","affection","valentines"],k:[25,21],o:2},heavy_division_sign:{a:"Heavy Division Sign",b:"2797",j:["divide","math","calculation"],k:[55,31],o:2},newspaper:{a:"Newspaper",b:"1F4F0",j:["press","headline"],k:[27,13],o:2},"female-judge":{a:"Female Judge",b:"1F469-200D-2696-FE0F",c:"1F469-200D-2696",k:[19,50],o:4},seedling:{a:"Seedling",b:"1F331",j:["plant","nature","grass","lawn","spring"],k:[6,9],o:2},love_letter:{a:"Love Letter",b:"1F48C",j:["email","like","affection","envelope","valentines"],k:[25,22],o:2},chopsticks:{a:"Chopsticks",b:"1F962",k:[41,49],o:5},motor_boat:{a:"Motor Boat",b:"1F6E5-FE0F",c:"1F6E5",j:["ship"],k:[36,47],o:2},"flag-il":{a:"Israel Flag",b:"1F1EE-1F1F1",k:[2,25],o:2},curly_loop:{a:"Curly Loop",b:"27B0",j:["scribble","draw","shape","squiggle"],k:[55,33],o:2},"flag-im":{a:"Isle of Man Flag",b:"1F1EE-1F1F2",k:[2,26],o:2},evergreen_tree:{a:"Evergreen Tree",b:"1F332",j:["plant","nature"],k:[6,10],o:2},cupid:{a:"Heart with Arrow",b:"1F498",j:["love","like","heart","affection","valentines"],k:[25,34],o:2},loop:{a:"Double Curly Loop",b:"27BF",j:["tape","cassette"],k:[55,34],o:2},ship:{a:"Ship",b:"1F6A2",j:["transportation","titanic","deploy"],k:[34,33],o:2},rolled_up_newspaper:{a:"Rolled Up Newspaper",b:"1F5DE-FE0F",c:"1F5DE",k:[30,23],o:2},knife_fork_plate:{a:"Knife Fork Plate",b:"1F37D-FE0F",c:"1F37D",k:[7,28],o:2},fork_and_knife:{a:"Fork and Knife",b:"1F374",j:["cutlery","kitchen"],k:[7,19],o:2},"male-farmer":{a:"Male Farmer",b:"1F468-200D-1F33E",k:[14,38],o:4},bookmark_tabs:{a:"Bookmark Tabs",b:"1F4D1",j:["favorite","save","order","tidy"],k:[26,39],o:2},part_alternation_mark:{a:"Part Alternation Mark",b:"303D-FE0F",c:"303D",j:["graph","presentation","stats","business","economics","bad"],k:[55,45],o:2},"flag-in":{a:"India Flag",b:"1F1EE-1F1F3",k:[2,27],o:2},gift_heart:{a:"Heart with Ribbon",b:"1F49D",j:["love","valentines"],k:[25,39],o:2},airplane:{a:"Airplane",b:"2708-FE0F",c:"2708",j:["vehicle","transportation","flight","fly"],k:[54,41],o:2},deciduous_tree:{a:"Deciduous Tree",b:"1F333",j:["plant","nature"],k:[6,11],o:2},spoon:{a:"Spoon",b:"1F944",j:["cutlery","kitchen","tableware"],k:[41,20],o:4},"flag-io":{a:"British Indian Ocean Territory Flag",b:"1F1EE-1F1F4",k:[2,28],o:2},palm_tree:{a:"Palm Tree",b:"1F334",j:["plant","vegetable","nature","summer","beach","mojito","tropical"],k:[6,12],o:2},sparkling_heart:{a:"Sparkling Heart",b:"1F496",j:["love","like","affection","valentines"],k:[25,32],o:2},"female-farmer":{a:"Female Farmer",b:"1F469-200D-1F33E",k:[17,28],o:4},eight_spoked_asterisk:{a:"Eight Spoked Asterisk",b:"2733-FE0F",c:"2733",j:["star","sparkle","green-square"],k:[55,17],o:2},small_airplane:{a:"Small Airplane",b:"1F6E9-FE0F",c:"1F6E9",j:["flight","transportation","fly","vehicle"],k:[36,48],o:2},bookmark:{a:"Bookmark",b:"1F516",j:["favorite","label","save"],k:[27,50],o:2},eight_pointed_black_star:{a:"Eight Pointed Black Star",b:"2734-FE0F",c:"2734",j:["orange-square","shape","polygon"],k:[55,18],o:2},heartpulse:{a:"Growing Heart",b:"1F497",j:["like","love","affection","valentines","pink"],k:[25,33],o:2},label:{a:"Label",b:"1F3F7-FE0F",c:"1F3F7",j:["sale","tag"],k:[11,19],o:2},"flag-iq":{a:"Iraq Flag",b:"1F1EE-1F1F6",k:[2,29],o:2},hocho:{a:"Hocho",b:"1F52A",j:["knife","blade","cutlery","kitchen","weapon"],k:[28,13],n:["knife"],o:2},cactus:{a:"Cactus",b:"1F335",j:["vegetable","plant","nature"],k:[6,13],o:2},airplane_departure:{a:"Airplane Departure",b:"1F6EB",k:[36,49],o:2},airplane_arriving:{a:"Airplane Arriving",b:"1F6EC",k:[36,50],o:2},ear_of_rice:{a:"Ear of Rice",b:"1F33E",j:["nature","plant"],k:[6,22],o:2},"flag-ir":{a:"Iran Flag",b:"1F1EE-1F1F7",k:[2,30],o:2},moneybag:{a:"Money Bag",b:"1F4B0",j:["dollar","payment","coins","sale"],k:[26,6],o:2},"male-cook":{a:"Male Cook",b:"1F468-200D-1F373",k:[14,44],o:4},heartbeat:{a:"Beating Heart",b:"1F493",j:["love","like","affection","valentines","pink","heart"],k:[25,29],o:2},sparkle:{a:"Sparkle",b:"2747-FE0F",c:"2747",j:["stars","green-square","awesome","good","fireworks"],k:[55,20],o:2},amphora:{a:"Amphora",b:"1F3FA",j:["vase","jar"],k:[11,22],o:2},yen:{a:"Banknote with Yen Sign",b:"1F4B4",j:["money","sales","japanese","dollar","currency"],k:[26,10],o:2},revolving_hearts:{a:"Revolving Hearts",b:"1F49E",j:["love","like","affection","valentines"],k:[25,40],o:2},bangbang:{a:"Double Exclamation Mark",b:"203C-FE0F",c:"203C",j:["exclamation","surprise"],k:[52,10],o:2},parachute:{a:"Parachute",b:"1FA82",k:[52,3],o:12},herb:{a:"Herb",b:"1F33F",j:["vegetable","plant","medicine","weed","grass","lawn"],k:[6,23],o:2},"flag-is":{a:"Iceland Flag",b:"1F1EE-1F1F8",k:[2,31],o:2},"female-cook":{a:"Female Cook",b:"1F469-200D-1F373",k:[17,34],o:4},interrobang:{a:"Exclamation Question Mark",b:"2049-FE0F",c:"2049",j:["wat","punctuation","surprise"],k:[52,11],o:2},seat:{a:"Seat",b:"1F4BA",j:["sit","airplane","transport","bus","flight","fly"],k:[26,16],o:2},dollar:{a:"Banknote with Dollar Sign",b:"1F4B5",j:["money","sales","bill","currency"],k:[26,11],o:2},two_hearts:{a:"Two Hearts",b:"1F495",j:["love","like","affection","valentines","heart"],k:[25,31],o:2},it:{a:"Italy Flag",b:"1F1EE-1F1F9",j:["italy","flag","nation","country","banner"],k:[2,32],n:["flag-it"],o:2},shamrock:{a:"Shamrock",b:"2618-FE0F",c:"2618",j:["vegetable","plant","nature","irish","clover"],k:[53,1],o:2},four_leaf_clover:{a:"Four Leaf Clover",b:"1F340",j:["vegetable","plant","nature","lucky","irish"],k:[6,24],o:2},euro:{a:"Banknote with Euro Sign",b:"1F4B6",j:["money","sales","dollar","currency"],k:[26,12],o:2},question:{a:"Black Question Mark Ornament",b:"2753",j:["doubt","confused"],k:[55,23],o:2},helicopter:{a:"Helicopter",b:"1F681",j:["transportation","vehicle","fly"],k:[34,0],o:2},heart_decoration:{a:"Heart Decoration",b:"1F49F",j:["purple-square","love","like"],k:[25,41],o:2},"flag-je":{a:"Jersey Flag",b:"1F1EF-1F1EA",k:[2,33],o:2},"male-mechanic":{a:"Male Mechanic",b:"1F468-200D-1F527",k:[15,50],o:4},suspension_railway:{a:"Suspension Railway",b:"1F69F",j:["vehicle","transportation"],k:[34,30],o:2},heavy_heart_exclamation_mark_ornament:{a:"Heavy Heart Exclamation Mark Ornament",b:"2763-FE0F",c:"2763",k:[55,27],o:2},"female-mechanic":{a:"Female Mechanic",b:"1F469-200D-1F527",k:[18,35],o:4},"flag-jm":{a:"Jamaica Flag",b:"1F1EF-1F1F2",k:[2,34],o:2},grey_question:{a:"White Question Mark Ornament",b:"2754",j:["doubts","gray","huh","confused"],k:[55,24],o:2},maple_leaf:{a:"Maple Leaf",b:"1F341",j:["nature","plant","vegetable","ca","fall"],k:[6,25],o:2},pound:{a:"Banknote with Pound Sign",b:"1F4B7",j:["british","sterling","money","sales","bills","uk","england","currency"],k:[26,13],o:2},money_with_wings:{a:"Money with Wings",b:"1F4B8",j:["dollar","bills","payment","sale"],k:[26,14],o:2},"flag-jo":{a:"Jordan Flag",b:"1F1EF-1F1F4",k:[2,35],o:2},fallen_leaf:{a:"Fallen Leaf",b:"1F342",j:["nature","plant","vegetable","leaves"],k:[6,26],o:2},broken_heart:{a:"Broken Heart",b:"1F494",j:["sad","sorry","break","heart","heartbreak"],k:[25,30],l:["</3"],m:"</3",o:2},grey_exclamation:{a:"White Exclamation Mark Ornament",b:"2755",j:["surprise","punctuation","gray","wow","warning"],k:[55,25],o:2},mountain_cableway:{a:"Mountain Cableway",b:"1F6A0",j:["transportation","vehicle","ski"],k:[34,31],o:2},exclamation:{a:"Heavy Exclamation Mark Symbol",b:"2757",j:["heavy_exclamation_mark","danger","surprise","punctuation","wow","warning"],k:[55,26],n:["heavy_exclamation_mark"],o:2},leaves:{a:"Leaf Fluttering in Wind",b:"1F343",j:["nature","plant","tree","vegetable","grass","lawn","spring"],k:[6,27],o:2},heart:{a:"Heavy Black Heart",b:"2764-FE0F",c:"2764",j:["love","like","valentines"],k:[55,28],l:["<3"],m:"<3",o:2},jp:{a:"Japan Flag",b:"1F1EF-1F1F5",j:["japanese","nation","flag","country","banner"],k:[2,36],n:["flag-jp"],o:2},"male-factory-worker":{a:"Male Factory Worker",b:"1F468-200D-1F3ED",k:[15,17],o:4},credit_card:{a:"Credit Card",b:"1F4B3",j:["money","sales","dollar","bill","payment","shopping"],k:[26,9],o:2},aerial_tramway:{a:"Aerial Tramway",b:"1F6A1",j:["transportation","vehicle","ski"],k:[34,32],o:2},"female-factory-worker":{a:"Female Factory Worker",b:"1F469-200D-1F3ED",k:[18,7],o:4},receipt:{a:"Receipt",b:"1F9FE",k:[51,49],o:11},wavy_dash:{a:"Wavy Dash",b:"3030-FE0F",c:"3030",j:["draw","line","moustache","mustache","squiggle","scribble"],k:[55,44],o:2},"flag-ke":{a:"Kenya Flag",b:"1F1F0-1F1EA",k:[2,37],o:2},satellite:{a:"Satellite",b:"1F6F0-FE0F",c:"1F6F0",j:["communication","future","radio","space"],k:[36,51],o:2},orange_heart:{a:"Orange Heart",b:"1F9E1",k:[51,20],o:5},yellow_heart:{a:"Yellow Heart",b:"1F49B",j:["love","like","affection","valentines"],k:[25,37],m:"<3",o:2},rocket:{a:"Rocket",b:"1F680",j:["launch","ship","staffmode","NASA","outer space","outer_space","fly"],k:[33,56],o:2},chart:{a:"Chart with Upwards Trend and Yen Sign",b:"1F4B9",j:["green-square","graph","presentation","stats"],k:[26,15],o:2},"flag-kg":{a:"Kyrgyzstan Flag",b:"1F1F0-1F1EC",k:[2,38],o:2},currency_exchange:{a:"Currency Exchange",b:"1F4B1",j:["money","sales","dollar","travel"],k:[26,7],o:2},green_heart:{a:"Green Heart",b:"1F49A",j:["love","like","affection","valentines"],k:[25,36],m:"<3",o:2},flying_saucer:{a:"Flying Saucer",b:"1F6F8",k:[37,0],o:5},"flag-kh":{a:"Cambodia Flag",b:"1F1F0-1F1ED",k:[2,39],o:2},"male-office-worker":{a:"Male Office Worker",b:"1F468-200D-1F4BC",k:[15,44],o:4},tm:{a:"Trade Mark Sign",b:"2122-FE0F",c:"2122",j:["trademark","brand","law","legal"],k:[52,12],o:2},bellhop_bell:{a:"Bellhop Bell",b:"1F6CE-FE0F",c:"1F6CE",j:["service"],k:[36,36],o:2},blue_heart:{a:"Blue Heart",b:"1F499",j:["love","like","affection","valentines"],k:[25,35],m:"<3",o:2},"flag-ki":{a:"Kiribati Flag",b:"1F1F0-1F1EE",k:[2,40],o:2},heavy_dollar_sign:{a:"Heavy Dollar Sign",b:"1F4B2",j:["money","sales","payment","currency","buck"],k:[26,8],o:2},"female-office-worker":{a:"Female Office Worker",b:"1F469-200D-1F4BC",k:[18,29],o:4},purple_heart:{a:"Purple Heart",b:"1F49C",j:["love","like","affection","valentines"],k:[25,38],m:"<3",o:2},luggage:{a:"Luggage",b:"1F9F3",k:[51,38],o:11},"flag-km":{a:"Comoros Flag",b:"1F1F0-1F1F2",k:[2,41],o:2},email:{a:"Envelope",b:"2709-FE0F",c:"2709",j:["letter","postal","inbox","communication"],k:[54,42],n:["envelope"],o:2},"e-mail":{a:"E-Mail Symbol",b:"1F4E7",j:["communication","inbox"],k:[27,4],o:2},"flag-kn":{a:"St. Kitts & Nevis Flag",b:"1F1F0-1F1F3",k:[2,42],o:2},hourglass:{a:"Hourglass",b:"231B",j:["time","clock","oldschool","limit","exam","quiz","test"],k:[52,23],o:2},brown_heart:{a:"Brown Heart",b:"1F90E",k:[37,16],o:12},"male-scientist":{a:"Male Scientist",b:"1F468-200D-1F52C",k:[15,56],o:4},hourglass_flowing_sand:{a:"Hourglass with Flowing Sand",b:"23F3",j:["oldschool","time","countdown"],k:[52,36],o:2},black_heart:{a:"Black Heart",b:"1F5A4",j:["evil"],k:[30,9],o:4},incoming_envelope:{a:"Incoming Envelope",b:"1F4E8",j:["email","inbox"],k:[27,5],o:2},"flag-kp":{a:"North Korea Flag",b:"1F1F0-1F1F5",k:[2,43],o:2},"female-scientist":{a:"Female Scientist",b:"1F469-200D-1F52C",k:[18,41],o:4},watch:{a:"Watch",b:"231A",j:["time","accessories"],k:[52,22],o:2},white_heart:{a:"White Heart",b:"1F90D",k:[37,15],o:12},kr:{a:"South Korea Flag",b:"1F1F0-1F1F7",j:["south","korea","nation","flag","country","banner"],k:[2,44],n:["flag-kr"],o:2},envelope_with_arrow:{a:"Envelope with Downwards Arrow Above",b:"1F4E9",j:["email","communication"],k:[27,6],o:2},outbox_tray:{a:"Outbox Tray",b:"1F4E4",j:["inbox","email"],k:[27,1],o:2},"male-technologist":{a:"Male Technologist",b:"1F468-200D-1F4BB",k:[15,38],o:4},alarm_clock:{a:"Alarm Clock",b:"23F0",j:["time","wake"],k:[52,33],o:2},"flag-kw":{a:"Kuwait Flag",b:"1F1F0-1F1FC",k:[2,45],o:2},anger:{a:"Anger Symbol",b:"1F4A2",j:["angry","mad"],k:[25,44],o:2},inbox_tray:{a:"Inbox Tray",b:"1F4E5",j:["email","documents"],k:[27,2],o:2},"flag-ky":{a:"Cayman Islands Flag",b:"1F1F0-1F1FE",k:[2,46],o:2},stopwatch:{a:"Stopwatch",b:"23F1-FE0F",c:"23F1",j:["time","deadline"],k:[52,34],o:2},"female-technologist":{a:"Female Technologist",b:"1F469-200D-1F4BB",k:[18,23],o:4},boom:{a:"Collision Symbol",b:"1F4A5",j:["bomb","explode","explosion","collision","blown"],k:[25,47],n:["collision"],o:2},"flag-kz":{a:"Kazakhstan Flag",b:"1F1F0-1F1FF",k:[2,47],o:2},timer_clock:{a:"Timer Clock",b:"23F2-FE0F",c:"23F2",j:["alarm"],k:[52,35],o:2},"package":{a:"Package",b:"1F4E6",j:["mail","gift","cardboard","box","moving"],k:[27,3],o:2},mailbox:{a:"Closed Mailbox with Raised Flag",b:"1F4EB",j:["email","inbox","communication"],k:[27,8],o:2},"flag-la":{a:"Laos Flag",b:"1F1F1-1F1E6",k:[2,48],o:2},dizzy:{a:"Dizzy Symbol",b:"1F4AB",j:["star","sparkle","shoot","magic"],k:[26,1],o:2},"male-singer":{a:"Male Singer",b:"1F468-200D-1F3A4",k:[14,56],o:4},mantelpiece_clock:{a:"Mantelpiece Clock",b:"1F570-FE0F",c:"1F570",j:["time"],k:[29,7],o:2},"female-singer":{a:"Female Singer",b:"1F469-200D-1F3A4",k:[17,46],o:4},"flag-lb":{a:"Lebanon Flag",b:"1F1F1-1F1E7",k:[2,49],o:2},mailbox_closed:{a:"Closed Mailbox with Lowered Flag",b:"1F4EA",j:["email","communication","inbox"],k:[27,7],o:2},sweat_drops:{a:"Splashing Sweat Symbol",b:"1F4A6",j:["water","drip","oops"],k:[25,48],o:2},clock12:{a:"Clock Face Twelve Oclock",b:"1F55B",j:["time","noon","midnight","midday","late","early","schedule"],k:[28,50],o:2},mailbox_with_mail:{a:"Open Mailbox with Raised Flag",b:"1F4EC",j:["email","inbox","communication"],k:[27,9],o:2},clock1230:{a:"Clock Face Twelve-Thirty",b:"1F567",j:["time","late","early","schedule"],k:[29,5],o:2},dash:{a:"Dash Symbol",b:"1F4A8",j:["wind","air","fast","shoo","fart","smoke","puff"],k:[25,50],o:2},"flag-lc":{a:"St. Lucia Flag",b:"1F1F1-1F1E8",k:[2,50],o:2},hole:{a:"Hole",b:"1F573-FE0F",c:"1F573",j:["embarrassing"],k:[29,8],o:2},"male-artist":{a:"Male Artist",b:"1F468-200D-1F3A8",k:[15,5],o:4},clock1:{a:"Clock Face One Oclock",b:"1F550",j:["time","late","early","schedule"],k:[28,39],o:2},mailbox_with_no_mail:{a:"Open Mailbox with Lowered Flag",b:"1F4ED",j:["email","inbox"],k:[27,10],o:2},"flag-li":{a:"Liechtenstein Flag",b:"1F1F1-1F1EE",k:[2,51],o:2},bomb:{a:"Bomb",b:"1F4A3",j:["boom","explode","explosion","terrorism"],k:[25,45],o:2},postbox:{a:"Postbox",b:"1F4EE",j:["email","letter","envelope"],k:[27,11],o:2},"female-artist":{a:"Female Artist",b:"1F469-200D-1F3A8",k:[17,52],o:4},clock130:{a:"Clock Face One-Thirty",b:"1F55C",j:["time","late","early","schedule"],k:[28,51],o:2},"flag-lk":{a:"Sri Lanka Flag",b:"1F1F1-1F1F0",k:[2,52],o:2},ballot_box_with_ballot:{a:"Ballot Box with Ballot",b:"1F5F3-FE0F",c:"1F5F3",k:[30,28],o:2},keycap_ten:{a:"Keycap Ten",b:"1F51F",j:["numbers","10","blue-square"],k:[28,2],o:2},clock2:{a:"Clock Face Two Oclock",b:"1F551",j:["time","late","early","schedule"],k:[28,40],o:2},"flag-lr":{a:"Liberia Flag",b:"1F1F1-1F1F7",k:[2,53],o:2},speech_balloon:{a:"Speech Balloon",b:"1F4AC",j:["bubble","words","message","talk","chatting"],k:[26,2],o:2},"flag-ls":{a:"Lesotho Flag",b:"1F1F1-1F1F8",k:[2,54],o:2},clock230:{a:"Clock Face Two-Thirty",b:"1F55D",j:["time","late","early","schedule"],k:[28,52],o:2},"male-pilot":{a:"Male Pilot",b:"1F468-200D-2708-FE0F",c:"1F468-200D-2708",k:[17,14],o:4},capital_abcd:{a:"Input Symbol for Latin Capital Letters",b:"1F520",j:["alphabet","words","blue-square"],k:[28,3],o:2},pencil2:{a:"Pencil",b:"270F-FE0F",c:"270F",j:["stationery","write","paper","writing","school","study"],k:[55,10],o:2},"female-pilot":{a:"Female Pilot",b:"1F469-200D-2708-FE0F",c:"1F469-200D-2708",k:[19,56],o:4},black_nib:{a:"Black Nib",b:"2712-FE0F",c:"2712",j:["pen","stationery","writing","write"],k:[55,11],o:2},left_speech_bubble:{a:"Left Speech Bubble",b:"1F5E8-FE0F",c:"1F5E8",j:["words","message","talk","chatting"],k:[30,26],o:2},clock3:{a:"Clock Face Three Oclock",b:"1F552",j:["time","late","early","schedule"],k:[28,41],o:2},abcd:{a:"Input Symbol for Latin Small Letters",b:"1F521",j:["blue-square","alphabet"],k:[28,4],o:2},"flag-lt":{a:"Lithuania Flag",b:"1F1F1-1F1F9",k:[2,55],o:2},clock330:{a:"Clock Face Three-Thirty",b:"1F55E",j:["time","late","early","schedule"],k:[28,53],o:2},"flag-lu":{a:"Luxembourg Flag",b:"1F1F1-1F1FA",k:[2,56],o:2},right_anger_bubble:{a:"Right Anger Bubble",b:"1F5EF-FE0F",c:"1F5EF",j:["caption","speech","thinking","mad"],k:[30,27],o:2},lower_left_fountain_pen:{a:"Lower Left Fountain Pen",b:"1F58B-FE0F",c:"1F58B",k:[29,45],o:2},"male-astronaut":{a:"Male Astronaut",b:"1F468-200D-1F680",k:[16,5],o:4},thought_balloon:{a:"Thought Balloon",b:"1F4AD",j:["bubble","cloud","speech","thinking","dream"],k:[26,3],o:2},symbols:{a:"Input Symbol for Symbols",b:"1F523",j:["blue-square","music","note","ampersand","percent","glyphs","characters"],k:[28,6],o:2},clock4:{a:"Clock Face Four Oclock",b:"1F553",j:["time","late","early","schedule"],k:[28,42],o:2},"flag-lv":{a:"Latvia Flag",b:"1F1F1-1F1FB",k:[3,0],o:2},lower_left_ballpoint_pen:{a:"Lower Left Ballpoint Pen",b:"1F58A-FE0F",c:"1F58A",k:[29,44],o:2},abc:{a:"Input Symbol for Latin Letters",b:"1F524",j:["blue-square","alphabet"],k:[28,7],o:2},zzz:{a:"Sleeping Symbol",b:"1F4A4",j:["sleepy","tired","dream"],k:[25,46],o:2},lower_left_paintbrush:{a:"Lower Left Paintbrush",b:"1F58C-FE0F",c:"1F58C",k:[29,46],o:2},"female-astronaut":{a:"Female Astronaut",b:"1F469-200D-1F680",k:[18,47],o:4},"flag-ly":{a:"Libya Flag",b:"1F1F1-1F1FE",k:[3,1],o:2},clock430:{a:"Clock Face Four-Thirty",b:"1F55F",j:["time","late","early","schedule"],k:[28,54],o:2},"flag-ma":{a:"Morocco Flag",b:"1F1F2-1F1E6",k:[3,2],o:2},a:{a:"Negative Squared Latin Capital Letter a",b:"1F170-FE0F",c:"1F170",j:["red-square","alphabet","letter"],k:[0,16],o:2},clock5:{a:"Clock Face Five Oclock",b:"1F554",j:["time","late","early","schedule"],k:[28,43],o:2},lower_left_crayon:{a:"Lower Left Crayon",b:"1F58D-FE0F",c:"1F58D",k:[29,47],o:2},"male-firefighter":{a:"Male Firefighter",b:"1F468-200D-1F692",k:[16,11],o:4},memo:{a:"Memo",b:"1F4DD",j:["write","documents","stationery","pencil","paper","writing","legal","exam","quiz","test","study","compose"],k:[26,51],n:["pencil"],o:2},ab:{a:"Negative Squared Ab",b:"1F18E",j:["red-square","alphabet"],k:[0,20],o:2},"flag-mc":{a:"Monaco Flag",b:"1F1F2-1F1E8",k:[3,3],o:2},clock530:{a:"Clock Face Five-Thirty",b:"1F560",j:["time","late","early","schedule"],k:[28,55],o:2},briefcase:{a:"Briefcase",b:"1F4BC",j:["business","documents","work","law","legal","job","career"],k:[26,18],o:2},"female-firefighter":{a:"Female Firefighter",b:"1F469-200D-1F692",k:[18,53],o:4},clock6:{a:"Clock Face Six Oclock",b:"1F555",j:["time","late","early","schedule","dawn","dusk"],k:[28,44],o:2},b:{a:"Negative Squared Latin Capital Letter B",b:"1F171-FE0F",c:"1F171",j:["red-square","alphabet","letter"],k:[0,17],o:2},"flag-md":{a:"Moldova Flag",b:"1F1F2-1F1E9",k:[3,4],o:2},clock630:{a:"Clock Face Six-Thirty",b:"1F561",j:["time","late","early","schedule"],k:[28,56],o:2},cl:{a:"Squared Cl",b:"1F191",j:["alphabet","words","red-square"],k:[0,21],o:2},"flag-me":{a:"Montenegro Flag",b:"1F1F2-1F1EA",k:[3,5],o:2},file_folder:{a:"File Folder",b:"1F4C1",j:["documents","business","office"],k:[26,23],o:2},"male-police-officer":{obsoletes:"1F46E",a:"Male Police Officer",b:"1F46E-200D-2642-FE0F",c:"1F46E-200D-2642",k:[21,43],o:4},cool:{a:"Squared Cool",b:"1F192",j:["words","blue-square"],k:[0,22],o:2},clock7:{a:"Clock Face Seven Oclock",b:"1F556",j:["time","late","early","schedule"],k:[28,45],o:2},"flag-mf":{a:"St. Martin Flag",b:"1F1F2-1F1EB",k:[3,6],o:2},open_file_folder:{a:"Open File Folder",b:"1F4C2",j:["documents","load"],k:[26,24],o:2},card_index_dividers:{a:"Card Index Dividers",b:"1F5C2-FE0F",c:"1F5C2",j:["organizing","business","stationery"],k:[30,15],o:2},"flag-mg":{a:"Madagascar Flag",b:"1F1F2-1F1EC",k:[3,7],o:2},free:{a:"Squared Free",b:"1F193",j:["blue-square","words"],k:[0,23],o:2},"female-police-officer":{a:"Female Police Officer",b:"1F46E-200D-2640-FE0F",c:"1F46E-200D-2640",k:[21,37],o:4},clock730:{a:"Clock Face Seven-Thirty",b:"1F562",j:["time","late","early","schedule"],k:[29,0],o:2},date:{a:"Calendar",b:"1F4C5",j:["calendar","schedule"],k:[26,27],o:2},clock8:{a:"Clock Face Eight Oclock",b:"1F557",j:["time","late","early","schedule"],k:[28,46],o:2},information_source:{a:"Information Source",b:"2139-FE0F",c:"2139",j:["blue-square","alphabet","letter"],k:[52,13],o:2},"flag-mh":{a:"Marshall Islands Flag",b:"1F1F2-1F1ED",k:[3,8],o:2},clock830:{a:"Clock Face Eight-Thirty",b:"1F563",j:["time","late","early","schedule"],k:[29,1],o:2},calendar:{a:"Tear-off Calendar",b:"1F4C6",j:["schedule","date","planning"],k:[26,28],o:2},"flag-mk":{a:"North Macedonia Flag",b:"1F1F2-1F1F0",k:[3,9],o:2},id:{a:"Squared Id",b:"1F194",j:["purple-square","words"],k:[0,24],o:2},spiral_note_pad:{a:"Spiral Note Pad",b:"1F5D2-FE0F",c:"1F5D2",k:[30,19],o:2},clock9:{a:"Clock Face Nine Oclock",b:"1F558",j:["time","late","early","schedule"],k:[28,47],o:2},"flag-ml":{a:"Mali Flag",b:"1F1F2-1F1F1",k:[3,10],o:2},m:{a:"Circled Latin Capital Letter M",b:"24C2-FE0F",c:"24C2",j:["alphabet","blue-circle","letter"],k:[52,40],o:2},"flag-mm":{a:"Myanmar (burma) Flag",b:"1F1F2-1F1F2",k:[3,11],o:2},clock930:{a:"Clock Face Nine-Thirty",b:"1F564",j:["time","late","early","schedule"],k:[29,2],o:2},"new":{a:"Squared New",b:"1F195",j:["blue-square","words","start"],k:[0,25],o:2},spiral_calendar_pad:{a:"Spiral Calendar Pad",b:"1F5D3-FE0F",c:"1F5D3",k:[30,20],o:2},ng:{a:"Squared Ng",b:"1F196",j:["blue-square","words","shape","icon"],k:[0,26],o:2},card_index:{a:"Card Index",b:"1F4C7",j:["business","stationery"],k:[26,29],o:2},clock10:{a:"Clock Face Ten Oclock",b:"1F559",j:["time","late","early","schedule"],k:[28,48],o:2},"flag-mn":{a:"Mongolia Flag",b:"1F1F2-1F1F3",k:[3,12],o:2},"male-guard":{obsoletes:"1F482",a:"Male Guard",b:"1F482-200D-2642-FE0F",c:"1F482-200D-2642",k:[24,14],o:4},"flag-mo":{a:"Macao Sar China Flag",b:"1F1F2-1F1F4",k:[3,13],o:2},clock1030:{a:"Clock Face Ten-Thirty",b:"1F565",j:["time","late","early","schedule"],k:[29,3],o:2},chart_with_upwards_trend:{a:"Chart with Upwards Trend",b:"1F4C8",j:["graph","presentation","stats","recovery","business","economics","money","sales","good","success"],k:[26,30],o:2},o2:{a:"Negative Squared Latin Capital Letter O",b:"1F17E-FE0F",c:"1F17E",j:["alphabet","red-square","letter"],k:[0,18],o:2},"female-guard":{a:"Female Guard",b:"1F482-200D-2640-FE0F",c:"1F482-200D-2640",k:[24,8],o:4},chart_with_downwards_trend:{a:"Chart with Downwards Trend",b:"1F4C9",j:["graph","presentation","stats","recession","business","economics","money","sales","bad","failure"],k:[26,31],o:2},"flag-mp":{a:"Northern Mariana Islands Flag",b:"1F1F2-1F1F5",k:[3,14],o:2},ok:{a:"Squared Ok",b:"1F197",j:["good","agree","yes","blue-square"],k:[0,27],o:2},clock11:{a:"Clock Face Eleven Oclock",b:"1F55A",j:["time","late","early","schedule"],k:[28,49],o:2},"male-construction-worker":{obsoletes:"1F477",a:"Male Construction Worker",b:"1F477-200D-2642-FE0F",c:"1F477-200D-2642",k:[23,16],o:4},clock1130:{a:"Clock Face Eleven-Thirty",b:"1F566",j:["time","late","early","schedule"],k:[29,4],o:2},"flag-mq":{a:"Martinique Flag",b:"1F1F2-1F1F6",k:[3,15],o:2},bar_chart:{a:"Bar Chart",b:"1F4CA",j:["graph","presentation","stats"],k:[26,32],o:2},parking:{a:"Negative Squared Latin Capital Letter P",b:"1F17F-FE0F",c:"1F17F",j:["cars","blue-square","alphabet","letter"],k:[0,19],o:2},new_moon:{a:"New Moon Symbol",b:"1F311",j:["nature","twilight","planet","space","night","evening","sleep"],k:[5,36],o:2},"female-construction-worker":{a:"Female Construction Worker",b:"1F477-200D-2640-FE0F",c:"1F477-200D-2640",k:[23,10],o:4},sos:{a:"Squared Sos",b:"1F198",j:["help","red-square","words","emergency","911"],k:[0,28],o:2},clipboard:{a:"Clipboard",b:"1F4CB",j:["stationery","documents"],k:[26,33],o:2},"flag-mr":{a:"Mauritania Flag",b:"1F1F2-1F1F7",k:[3,16],o:2},prince:{a:"Prince",b:"1F934",j:["boy","man","male","crown","royal","king"],k:[39,17],o:4},waxing_crescent_moon:{a:"Waxing Crescent Moon Symbol",b:"1F312",j:["nature","twilight","planet","space","night","evening","sleep"],k:[5,37],o:2},"flag-ms":{a:"Montserrat Flag",b:"1F1F2-1F1F8",k:[3,17],o:2},pushpin:{a:"Pushpin",b:"1F4CC",j:["stationery","mark","here"],k:[26,34],o:2},up:{a:"Squared Up with Exclamation Mark",b:"1F199",j:["blue-square","above","high"],k:[0,29],o:2},"flag-mt":{a:"Malta Flag",b:"1F1F2-1F1F9",k:[3,18],o:2},princess:{a:"Princess",b:"1F478",j:["girl","woman","female","blond","crown","royal","queen"],k:[23,28],o:2},round_pushpin:{a:"Round Pushpin",b:"1F4CD",j:["stationery","location","map","here"],k:[26,35],o:2},first_quarter_moon:{a:"First Quarter Moon Symbol",b:"1F313",j:["nature","twilight","planet","space","night","evening","sleep"],k:[5,38],o:2},vs:{a:"Squared Vs",b:"1F19A",j:["words","orange-square"],k:[0,30],o:2},"flag-mu":{a:"Mauritius Flag",b:"1F1F2-1F1FA",k:[3,19],o:2},koko:{a:"Squared Katakana Koko",b:"1F201",j:["blue-square","here","katakana","japanese","destination"],k:[5,4],o:2},moon:{a:"Waxing Gibbous Moon Symbol",b:"1F314",k:[5,39],n:["waxing_gibbous_moon"],o:2},paperclip:{a:"Paperclip",b:"1F4CE",j:["documents","stationery"],k:[26,36],o:2},linked_paperclips:{a:"Linked Paperclips",b:"1F587-FE0F",c:"1F587",k:[29,43],o:2},"man-wearing-turban":{obsoletes:"1F473",a:"Man Wearing Turban",b:"1F473-200D-2642-FE0F",c:"1F473-200D-2642",k:[22,37],o:4},sa:{a:"Squared Katakana Sa",b:"1F202-FE0F",c:"1F202",j:["japanese","blue-square","katakana"],k:[5,5],o:2},full_moon:{a:"Full Moon Symbol",b:"1F315",j:["nature","yellow","twilight","planet","space","night","evening","sleep"],k:[5,40],o:2},"flag-mv":{a:"Maldives Flag",b:"1F1F2-1F1FB",k:[3,20],o:2},"flag-mw":{a:"Malawi Flag",b:"1F1F2-1F1FC",k:[3,21],o:2},waning_gibbous_moon:{a:"Waning Gibbous Moon Symbol",b:"1F316",j:["nature","twilight","planet","space","night","evening","sleep","waxing_gibbous_moon"],k:[5,41],o:2},"woman-wearing-turban":{a:"Woman Wearing Turban",b:"1F473-200D-2640-FE0F",c:"1F473-200D-2640",k:[22,31],o:4},u6708:{a:"Squared Cjk Unified Ideograph-6708",b:"1F237-FE0F",c:"1F237",j:["chinese","month","moon","japanese","orange-square","kanji"],k:[5,13],o:2},straight_ruler:{a:"Straight Ruler",b:"1F4CF",j:["stationery","calculate","length","math","school","drawing","architect","sketch"],k:[26,37],o:2},u6709:{a:"Squared Cjk Unified Ideograph-6709",b:"1F236",j:["orange-square","chinese","have","kanji"],k:[5,12],o:2},triangular_ruler:{a:"Triangular Ruler",b:"1F4D0",j:["stationery","math","architect","sketch"],k:[26,38],o:2},man_with_gua_pi_mao:{a:"Man with Gua Pi Mao",b:"1F472",j:["male","boy","chinese"],k:[22,25],o:2},"flag-mx":{a:"Mexico Flag",b:"1F1F2-1F1FD",k:[3,22],o:2},last_quarter_moon:{a:"Last Quarter Moon Symbol",b:"1F317",j:["nature","twilight","planet","space","night","evening","sleep"],k:[5,42],o:2},person_with_headscarf:{a:"Person with Headscarf",b:"1F9D5",k:[48,34],o:5},waning_crescent_moon:{a:"Waning Crescent Moon Symbol",b:"1F318",j:["nature","twilight","planet","space","night","evening","sleep"],k:[5,43],o:2},u6307:{a:"Squared Cjk Unified Ideograph-6307",b:"1F22F",j:["chinese","point","green-square","kanji"],k:[5,7],o:2},scissors:{a:"Black Scissors",b:"2702-FE0F",c:"2702",j:["stationery","cut"],k:[54,39],o:2},"flag-my":{a:"Malaysia Flag",b:"1F1F2-1F1FE",k:[3,23],o:2},ideograph_advantage:{a:"Circled Ideograph Advantage",b:"1F250",j:["chinese","kanji","obtain","get","circle"],k:[5,17],o:2},man_in_tuxedo:{a:"Man in Tuxedo",b:"1F935",j:["couple","marriage","wedding","groom"],k:[39,23],o:4},"flag-mz":{a:"Mozambique Flag",b:"1F1F2-1F1FF",k:[3,24],o:2},card_file_box:{a:"Card File Box",b:"1F5C3-FE0F",c:"1F5C3",j:["business","stationery"],k:[30,16],o:2},crescent_moon:{a:"Crescent Moon",b:"1F319",j:["night","sleep","sky","evening","magic"],k:[5,44],o:2},"flag-na":{a:"Namibia Flag",b:"1F1F3-1F1E6",k:[3,25],o:2},bride_with_veil:{a:"Bride with Veil",b:"1F470",j:["couple","marriage","wedding","woman","bride"],k:[22,1],o:2},new_moon_with_face:{a:"New Moon with Face",b:"1F31A",j:["nature","twilight","planet","space","night","evening","sleep"],k:[5,45],o:2},file_cabinet:{a:"File Cabinet",b:"1F5C4-FE0F",c:"1F5C4",j:["filing","organizing"],k:[30,17],o:2},u5272:{a:"Squared Cjk Unified Ideograph-5272",b:"1F239",j:["cut","divide","chinese","kanji","pink-square"],k:[5,15],o:2},wastebasket:{a:"Wastebasket",b:"1F5D1-FE0F",c:"1F5D1",j:["bin","trash","rubbish","garbage","toss"],k:[30,18],o:2},pregnant_woman:{a:"Pregnant Woman",b:"1F930",j:["baby"],k:[38,50],o:4},first_quarter_moon_with_face:{a:"First Quarter Moon with Face",b:"1F31B",j:["nature","twilight","planet","space","night","evening","sleep"],k:[5,46],o:2},"flag-nc":{a:"New Caledonia Flag",b:"1F1F3-1F1E8",k:[3,26],o:2},u7121:{a:"Squared Cjk Unified Ideograph-7121",b:"1F21A",j:["nothing","chinese","kanji","japanese","orange-square"],k:[5,6],o:2},lock:{a:"Lock",b:"1F512",j:["security","password","padlock"],k:[27,46],o:2},"flag-ne":{a:"Niger Flag",b:"1F1F3-1F1EA",k:[3,27],o:2},last_quarter_moon_with_face:{a:"Last Quarter Moon with Face",b:"1F31C",j:["nature","twilight","planet","space","night","evening","sleep"],k:[5,47],o:2},"breast-feeding":{a:"Breast-Feeding",b:"1F931",k:[38,56],o:5},u7981:{a:"Squared Cjk Unified Ideograph-7981",b:"1F232",j:["kanji","japanese","chinese","forbidden","limit","restricted","red-square"],k:[5,8],o:2},accept:{a:"Circled Ideograph Accept",b:"1F251",j:["ok","good","chinese","kanji","agree","yes","orange-circle"],k:[5,18],o:2},angel:{a:"Baby Angel",b:"1F47C",j:["heaven","wings","halo"],k:[23,37],o:2},unlock:{a:"Open Lock",b:"1F513",j:["privacy","security"],k:[27,47],o:2},"flag-nf":{a:"Norfolk Island Flag",b:"1F1F3-1F1EB",k:[3,28],o:2},thermometer:{a:"Thermometer",b:"1F321-FE0F",c:"1F321",j:["weather","temperature","hot","cold"],k:[5,52],o:2},"flag-ng":{a:"Nigeria Flag",b:"1F1F3-1F1EC",k:[3,29],o:2},u7533:{a:"Squared Cjk Unified Ideograph-7533",b:"1F238",j:["chinese","japanese","kanji","orange-square"],k:[5,14],o:2},sunny:{a:"Black Sun with Rays",b:"2600-FE0F",c:"2600",j:["weather","nature","brightness","summer","beach","spring"],k:[52,49],o:2},lock_with_ink_pen:{a:"Lock with Ink Pen",b:"1F50F",j:["security","secret"],k:[27,43],o:2},santa:{a:"Father Christmas",b:"1F385",j:["festival","man","male","xmas","father christmas"],k:[7,36],o:2},closed_lock_with_key:{a:"Closed Lock with Key",b:"1F510",j:["security","privacy"],k:[27,44],o:2},u5408:{a:"Squared Cjk Unified Ideograph-5408",b:"1F234",j:["japanese","chinese","join","kanji","red-square"],k:[5,10],o:2},"flag-ni":{a:"Nicaragua Flag",b:"1F1F3-1F1EE",k:[3,30],o:2},mrs_claus:{a:"Mother Christmas",b:"1F936",j:["woman","female","xmas","mother christmas"],k:[39,29],n:["mother_christmas"],o:4},full_moon_with_face:{a:"Full Moon with Face",b:"1F31D",j:["nature","twilight","planet","space","night","evening","sleep"],k:[5,48],o:2},key:{a:"Key",b:"1F511",j:["lock","door","password"],k:[27,45],o:2},superhero:{a:"Superhero",b:"1F9B8",k:[43,30],o:11},"flag-nl":{a:"Netherlands Flag",b:"1F1F3-1F1F1",k:[3,31],o:2},u7a7a:{a:"Squared Cjk Unified Ideograph-7a7a",b:"1F233",j:["kanji","japanese","chinese","empty","sky","blue-square"],k:[5,9],o:2},sun_with_face:{a:"Sun with Face",b:"1F31E",j:["nature","morning","sky"],k:[5,49],o:2},male_superhero:{a:"Male Superhero",b:"1F9B8-200D-2642-FE0F",c:"1F9B8-200D-2642",k:[43,24],o:11},ringed_planet:{a:"Ringed Planet",b:"1FA90",k:[52,4],o:12},old_key:{a:"Old Key",b:"1F5DD-FE0F",c:"1F5DD",j:["lock","door","password"],k:[30,22],o:2},congratulations:{a:"Circled Ideograph Congratulation",b:"3297-FE0F",c:"3297",j:["chinese","kanji","japanese","red-circle"],k:[55,46],o:2},"flag-no":{a:"Norway Flag",b:"1F1F3-1F1F4",k:[3,32],o:2},star:{a:"White Medium Star",b:"2B50",j:["night","yellow"],k:[55,42],o:2},secret:{a:"Circled Ideograph Secret",b:"3299-FE0F",c:"3299",j:["privacy","chinese","sshh","kanji","red-circle"],k:[55,47],o:2},"flag-np":{a:"Nepal Flag",b:"1F1F3-1F1F5",k:[3,33],o:2},female_superhero:{a:"Female Superhero",b:"1F9B8-200D-2640-FE0F",c:"1F9B8-200D-2640",k:[43,18],o:11},hammer:{a:"Hammer",b:"1F528",j:["tools","build","create"],k:[28,11],o:2},star2:{a:"Glowing Star",b:"1F31F",j:["night","sparkle","awesome","good","magic"],k:[5,50],o:2},"flag-nr":{a:"Nauru Flag",b:"1F1F3-1F1F7",k:[3,34],o:2},axe:{a:"Axe",b:"1FA93",k:[52,7],o:12},u55b6:{a:"Squared Cjk Unified Ideograph-55b6",b:"1F23A",j:["japanese","opening hours","orange-square"],k:[5,16],o:2},supervillain:{a:"Supervillain",b:"1F9B9",k:[43,48],o:11},stars:{a:"Shooting Star",b:"1F320",j:["night","photo"],k:[5,51],o:2},u6e80:{a:"Squared Cjk Unified Ideograph-6e80",b:"1F235",j:["full","chinese","japanese","red-square","kanji"],k:[5,11],o:2},"flag-nu":{a:"Niue Flag",b:"1F1F3-1F1FA",k:[3,35],o:2},pick:{a:"Pick",b:"26CF-FE0F",c:"26CF",j:["tools","dig"],k:[54,5],o:2},male_supervillain:{a:"Male Supervillain",b:"1F9B9-200D-2642-FE0F",c:"1F9B9-200D-2642",k:[43,42],o:11},female_supervillain:{a:"Female Supervillain",b:"1F9B9-200D-2640-FE0F",c:"1F9B9-200D-2640",k:[43,36],o:11},hammer_and_pick:{a:"Hammer and Pick",b:"2692-FE0F",c:"2692",j:["tools","build","create"],k:[53,41],o:2},milky_way:{a:"Milky Way",b:"1F30C",j:["photo","space","stars"],k:[5,31],o:2},red_circle:{a:"Large Red Circle",b:"1F534",j:["shape","error","danger"],k:[28,23],o:2},"flag-nz":{a:"New Zealand Flag",b:"1F1F3-1F1FF",k:[3,36],o:2},large_orange_circle:{a:"Large Orange Circle",b:"1F7E0",k:[37,3],o:12},hammer_and_wrench:{a:"Hammer and Wrench",b:"1F6E0-FE0F",c:"1F6E0",j:["tools","build","create"],k:[36,42],o:2},"flag-om":{a:"Oman Flag",b:"1F1F4-1F1F2",k:[3,37],o:2},cloud:{a:"Cloud",b:"2601-FE0F",c:"2601",j:["weather","sky"],k:[52,50],o:2},mage:{obsoleted_by:"1F9D9-200D-2640-FE0F",a:"Mage",b:"1F9D9",k:[49,49],o:5},dagger_knife:{a:"Dagger Knife",b:"1F5E1-FE0F",c:"1F5E1",k:[30,24],o:2},partly_sunny:{a:"Sun Behind Cloud",b:"26C5",j:["weather","nature","cloudy","morning","fall","spring"],k:[54,2],o:2},large_yellow_circle:{a:"Large Yellow Circle",b:"1F7E1",k:[37,4],o:12},male_mage:{a:"Male Mage",b:"1F9D9-200D-2642-FE0F",c:"1F9D9-200D-2642",k:[49,43],o:5},"flag-pa":{a:"Panama Flag",b:"1F1F5-1F1E6",k:[3,38],o:2},thunder_cloud_and_rain:{a:"Thunder Cloud and Rain",b:"26C8-FE0F",c:"26C8",k:[54,3],o:2},large_green_circle:{a:"Large Green Circle",b:"1F7E2",k:[37,5],o:12},female_mage:{obsoletes:"1F9D9",a:"Female Mage",b:"1F9D9-200D-2640-FE0F",c:"1F9D9-200D-2640",k:[49,37],o:5},crossed_swords:{a:"Crossed Swords",b:"2694-FE0F",c:"2694",j:["weapon"],k:[53,43],o:2},"flag-pe":{a:"Peru Flag",b:"1F1F5-1F1EA",k:[3,39],o:2},gun:{a:"Pistol",b:"1F52B",j:["violence","weapon","pistol","revolver"],k:[28,14],o:2},mostly_sunny:{a:"Mostly Sunny",b:"1F324-FE0F",c:"1F324",k:[5,53],n:["sun_small_cloud"],o:2},fairy:{obsoleted_by:"1F9DA-200D-2640-FE0F",a:"Fairy",b:"1F9DA",k:[50,10],o:5},"flag-pf":{a:"French Polynesia Flag",b:"1F1F5-1F1EB",k:[3,40],o:2},large_blue_circle:{a:"Large Blue Circle",b:"1F535",j:["shape","icon","button"],k:[28,24],o:2},large_purple_circle:{a:"Large Purple Circle",b:"1F7E3",k:[37,6],o:12},bow_and_arrow:{a:"Bow and Arrow",b:"1F3F9",j:["sports"],k:[11,21],o:2},male_fairy:{a:"Male Fairy",b:"1F9DA-200D-2642-FE0F",c:"1F9DA-200D-2642",k:[50,4],o:5},barely_sunny:{a:"Barely Sunny",b:"1F325-FE0F",c:"1F325",k:[5,54],n:["sun_behind_cloud"],o:2},"flag-pg":{a:"Papua New Guinea Flag",b:"1F1F5-1F1EC",k:[3,41],o:2},shield:{a:"Shield",b:"1F6E1-FE0F",c:"1F6E1",j:["protection","security"],k:[36,43],o:2},partly_sunny_rain:{a:"Partly Sunny Rain",b:"1F326-FE0F",c:"1F326",k:[5,55],n:["sun_behind_rain_cloud"],o:2},large_brown_circle:{a:"Large Brown Circle",b:"1F7E4",k:[37,7],o:12},female_fairy:{obsoletes:"1F9DA",a:"Female Fairy",b:"1F9DA-200D-2640-FE0F",c:"1F9DA-200D-2640",k:[49,55],o:5},"flag-ph":{a:"Philippines Flag",b:"1F1F5-1F1ED",k:[3,42],o:2},"flag-pk":{a:"Pakistan Flag",b:"1F1F5-1F1F0",k:[3,43],o:2},black_circle:{a:"Medium Black Circle",b:"26AB",j:["shape","button","round"],k:[53,53],o:2},wrench:{a:"Wrench",b:"1F527",j:["tools","diy","ikea","fix","maintainer"],k:[28,10],o:2},vampire:{obsoleted_by:"1F9DB-200D-2640-FE0F",a:"Vampire",b:"1F9DB",k:[50,28],o:5},rain_cloud:{a:"Rain Cloud",b:"1F327-FE0F",c:"1F327",k:[5,56],o:2},snow_cloud:{a:"Snow Cloud",b:"1F328-FE0F",c:"1F328",k:[6,0],o:2},"flag-pl":{a:"Poland Flag",b:"1F1F5-1F1F1",k:[3,44],o:2},male_vampire:{a:"Male Vampire",b:"1F9DB-200D-2642-FE0F",c:"1F9DB-200D-2642",k:[50,22],o:5},nut_and_bolt:{a:"Nut and Bolt",b:"1F529",j:["handy","tools","fix"],k:[28,12],o:2},white_circle:{a:"Medium White Circle",b:"26AA",j:["shape","round"],k:[53,52],o:2},female_vampire:{obsoletes:"1F9DB",a:"Female Vampire",b:"1F9DB-200D-2640-FE0F",c:"1F9DB-200D-2640",k:[50,16],o:5},"flag-pm":{a:"St. Pierre & Miquelon Flag",b:"1F1F5-1F1F2",k:[3,45],o:2},large_red_square:{a:"Large Red Square",b:"1F7E5",k:[37,8],o:12},lightning:{a:"Lightning",b:"1F329-FE0F",c:"1F329",k:[6,1],n:["lightning_cloud"],o:2},gear:{a:"Gear",b:"2699-FE0F",c:"2699",j:["cog"],k:[53,47],o:2},merperson:{obsoleted_by:"1F9DC-200D-2642-FE0F",a:"Merperson",b:"1F9DC",k:[50,46],o:5},tornado:{a:"Tornado",b:"1F32A-FE0F",c:"1F32A",j:["weather","cyclone","twister"],k:[6,2],n:["tornado_cloud"],o:2},large_orange_square:{a:"Large Orange Square",b:"1F7E7",k:[37,10],o:12},"flag-pn":{a:"Pitcairn Islands Flag",b:"1F1F5-1F1F3",k:[3,46],o:2},compression:{a:"Compression",b:"1F5DC-FE0F",c:"1F5DC",k:[30,21],o:2},merman:{obsoletes:"1F9DC",a:"Merman",b:"1F9DC-200D-2642-FE0F",c:"1F9DC-200D-2642",k:[50,40],o:5},large_yellow_square:{a:"Large Yellow Square",b:"1F7E8",k:[37,11],o:12},fog:{a:"Fog",b:"1F32B-FE0F",c:"1F32B",j:["weather"],k:[6,3],o:2},scales:{a:"Scales",b:"2696-FE0F",c:"2696",k:[53,45],o:2},"flag-pr":{a:"Puerto Rico Flag",b:"1F1F5-1F1F7",k:[3,47],o:2},wind_blowing_face:{a:"Wind Blowing Face",b:"1F32C-FE0F",c:"1F32C",k:[6,4],o:2},"flag-ps":{a:"Palestinian Territories Flag",b:"1F1F5-1F1F8",k:[3,48],o:2},mermaid:{a:"Mermaid",b:"1F9DC-200D-2640-FE0F",c:"1F9DC-200D-2640",k:[50,34],o:5},probing_cane:{a:"Probing Cane",b:"1F9AF",k:[43,3],o:12},large_green_square:{a:"Large Green Square",b:"1F7E9",k:[37,12],o:12},"flag-pt":{a:"Portugal Flag",b:"1F1F5-1F1F9",k:[3,49],o:2},link:{a:"Link Symbol",b:"1F517",j:["rings","url"],k:[27,51],o:2},large_blue_square:{a:"Large Blue Square",b:"1F7E6",k:[37,9],o:12},elf:{obsoleted_by:"1F9DD-200D-2642-FE0F",a:"Elf",b:"1F9DD",k:[51,7],o:5},cyclone:{a:"Cyclone",b:"1F300",j:["weather","swirl","blue","cloud","vortex","spiral","whirlpool","spin","tornado","hurricane","typhoon"],k:[5,19],o:2},rainbow:{a:"Rainbow",b:"1F308",j:["nature","happy","unicorn_face","photo","sky","spring"],k:[5,27],o:2},male_elf:{obsoletes:"1F9DD",a:"Male Elf",b:"1F9DD-200D-2642-FE0F",c:"1F9DD-200D-2642",k:[51,1],o:5},"flag-pw":{a:"Palau Flag",b:"1F1F5-1F1FC",k:[3,50],o:2},chains:{a:"Chains",b:"26D3-FE0F",c:"26D3",j:["lock","arrest"],k:[54,7],o:2},large_purple_square:{a:"Large Purple Square",b:"1F7EA",k:[37,13],o:12},female_elf:{a:"Female Elf",b:"1F9DD-200D-2640-FE0F",c:"1F9DD-200D-2640",k:[50,52],o:5},"flag-py":{a:"Paraguay Flag",b:"1F1F5-1F1FE",k:[3,51],o:2},closed_umbrella:{a:"Closed Umbrella",b:"1F302",j:["weather","rain","drizzle"],k:[5,21],o:2},toolbox:{a:"Toolbox",b:"1F9F0",k:[51,35],o:11},large_brown_square:{a:"Large Brown Square",b:"1F7EB",k:[37,14],o:12},magnet:{a:"Magnet",b:"1F9F2",k:[51,37],o:11},genie:{obsoleted_by:"1F9DE-200D-2642-FE0F",a:"Genie",b:"1F9DE",k:[51,15],o:5},"flag-qa":{a:"Qatar Flag",b:"1F1F6-1F1E6",k:[3,52],o:2},umbrella:{a:"Umbrella",b:"2602-FE0F",c:"2602",j:["rainy","weather","spring"],k:[52,51],o:2},black_large_square:{a:"Black Large Square",b:"2B1B",j:["shape","icon","button"],k:[55,40],o:2},male_genie:{obsoletes:"1F9DE",a:"Male Genie",b:"1F9DE-200D-2642-FE0F",c:"1F9DE-200D-2642",k:[51,14],o:5},umbrella_with_rain_drops:{a:"Umbrella with Rain Drops",b:"2614",k:[52,56],o:2},"flag-re":{a:"Réunion Flag",b:"1F1F7-1F1EA",k:[3,53],o:2},white_large_square:{a:"White Large Square",b:"2B1C",j:["shape","icon","stone","button"],k:[55,41],o:2},alembic:{a:"Alembic",b:"2697-FE0F",c:"2697",j:["distilling","science","experiment","chemistry"],k:[53,46],o:2},black_medium_square:{a:"Black Medium Square",b:"25FC-FE0F",c:"25FC",j:["shape","button","icon"],k:[52,46],o:2},test_tube:{a:"Test Tube",b:"1F9EA",k:[51,29],o:11},"flag-ro":{a:"Romania Flag",b:"1F1F7-1F1F4",k:[3,54],o:2},female_genie:{a:"Female Genie",b:"1F9DE-200D-2640-FE0F",c:"1F9DE-200D-2640",k:[51,13],o:5},umbrella_on_ground:{a:"Umbrella on Ground",b:"26F1-FE0F",c:"26F1",k:[54,12],o:2},zombie:{obsoleted_by:"1F9DF-200D-2642-FE0F",a:"Zombie",b:"1F9DF",k:[51,18],o:5},zap:{a:"High Voltage Sign",b:"26A1",j:["thunder","weather","lightning bolt","fast"],k:[53,51],o:2},white_medium_square:{a:"White Medium Square",b:"25FB-FE0F",c:"25FB",j:["shape","stone","icon"],k:[52,45],o:2},"flag-rs":{a:"Serbia Flag",b:"1F1F7-1F1F8",k:[3,55],o:2},petri_dish:{a:"Petri Dish",b:"1F9EB",k:[51,30],o:11},snowflake:{a:"Snowflake",b:"2744-FE0F",c:"2744",j:["winter","season","cold","weather","christmas","xmas"],k:[55,19],o:2},dna:{a:"Dna Double Helix",b:"1F9EC",k:[51,31],o:11},male_zombie:{obsoletes:"1F9DF",a:"Male Zombie",b:"1F9DF-200D-2642-FE0F",c:"1F9DF-200D-2642",k:[51,17],o:5},black_medium_small_square:{a:"Black Medium Small Square",b:"25FE",j:["icon","shape","button"],k:[52,48],o:2},ru:{a:"Russia Flag",b:"1F1F7-1F1FA",j:["russian","federation","flag","nation","country","banner"],k:[3,56],n:["flag-ru"],o:2},female_zombie:{a:"Female Zombie",b:"1F9DF-200D-2640-FE0F",c:"1F9DF-200D-2640",k:[51,16],o:5},"flag-rw":{a:"Rwanda Flag",b:"1F1F7-1F1FC",k:[4,0],o:2},snowman:{a:"Snowman",b:"2603-FE0F",c:"2603",j:["winter","season","cold","weather","christmas","xmas","frozen","without_snow"],k:[52,52],o:2},white_medium_small_square:{a:"White Medium Small Square",b:"25FD",j:["shape","stone","icon","button"],k:[52,47],o:2},microscope:{a:"Microscope",b:"1F52C",j:["laboratory","experiment","zoomin","science","study"],k:[28,15],o:2},snowman_without_snow:{a:"Snowman Without Snow",b:"26C4",k:[54,1],o:2},telescope:{a:"Telescope",b:"1F52D",j:["stars","space","zoom","science","astronomy"],k:[28,16],o:2},black_small_square:{a:"Black Small Square",b:"25AA-FE0F",c:"25AA",j:["shape","icon"],k:[52,41],o:2},"flag-sa":{a:"Saudi Arabia Flag",b:"1F1F8-1F1E6",k:[4,1],o:2},"man-getting-massage":{a:"Man Getting Massage",b:"1F486-200D-2642-FE0F",c:"1F486-200D-2642",k:[24,45],o:4},comet:{a:"Comet",b:"2604-FE0F",c:"2604",j:["space"],k:[52,53],o:2},white_small_square:{a:"White Small Square",b:"25AB-FE0F",c:"25AB",j:["shape","icon"],k:[52,42],o:2},"flag-sb":{a:"Solomon Islands Flag",b:"1F1F8-1F1E7",k:[4,2],o:2},satellite_antenna:{a:"Satellite Antenna",b:"1F4E1",k:[26,55],o:2},large_orange_diamond:{a:"Large Orange Diamond",b:"1F536",j:["shape","jewel","gem"],k:[28,25],o:2},"woman-getting-massage":{obsoletes:"1F486",a:"Woman Getting Massage",b:"1F486-200D-2640-FE0F",c:"1F486-200D-2640",k:[24,39],o:4},fire:{a:"Fire",b:"1F525",j:["hot","cook","flame"],k:[28,8],o:2},syringe:{a:"Syringe",b:"1F489",j:["health","hospital","drugs","blood","medicine","needle","doctor","nurse"],k:[25,19],o:2},"flag-sc":{a:"Seychelles Flag",b:"1F1F8-1F1E8",k:[4,3],o:2},large_blue_diamond:{a:"Large Blue Diamond",b:"1F537",j:["shape","jewel","gem"],k:[28,26],o:2},"flag-sd":{a:"Sudan Flag",b:"1F1F8-1F1E9",k:[4,4],o:2},droplet:{a:"Droplet",b:"1F4A7",j:["water","drip","faucet","spring"],k:[25,49],o:2},drop_of_blood:{a:"Drop of Blood",b:"1FA78",k:[51,55],o:12},ocean:{a:"Water Wave",b:"1F30A",j:["sea","water","wave","nature","tsunami","disaster"],k:[5,29],o:2},"flag-se":{a:"Sweden Flag",b:"1F1F8-1F1EA",k:[4,5],o:2},"man-getting-haircut":{a:"Man Getting Haircut",b:"1F487-200D-2642-FE0F",c:"1F487-200D-2642",k:[25,6],o:4},small_orange_diamond:{a:"Small Orange Diamond",b:"1F538",j:["shape","jewel","gem"],k:[28,27],o:2},pill:{a:"Pill",b:"1F48A",j:["health","medicine","doctor","pharmacy","drug"],k:[25,20],o:2},"woman-getting-haircut":{obsoletes:"1F487",a:"Woman Getting Haircut",b:"1F487-200D-2640-FE0F",c:"1F487-200D-2640",k:[25,0],o:4},small_blue_diamond:{a:"Small Blue Diamond",b:"1F539",j:["shape","jewel","gem"],k:[28,28],o:2},"flag-sg":{a:"Singapore Flag",b:"1F1F8-1F1EC",k:[4,6],o:2},adhesive_bandage:{a:"Adhesive Bandage",b:"1FA79",k:[51,56],o:12},small_red_triangle:{a:"Up-Pointing Red Triangle",b:"1F53A",j:["shape","direction","up","top"],k:[28,29],o:2},"flag-sh":{a:"St. Helena Flag",b:"1F1F8-1F1ED",k:[4,7],o:2},stethoscope:{a:"Stethoscope",b:"1FA7A",k:[52,0],o:12},"man-walking":{obsoletes:"1F6B6",a:"Man Walking",b:"1F6B6-200D-2642-FE0F",c:"1F6B6-200D-2642",k:[35,53],o:4},"flag-si":{a:"Slovenia Flag",b:"1F1F8-1F1EE",k:[4,8],o:2},door:{a:"Door",b:"1F6AA",j:["house","entry","exit"],k:[35,1],o:2},small_red_triangle_down:{a:"Down-Pointing Red Triangle",b:"1F53B",j:["shape","direction","bottom"],k:[28,30],o:2},"flag-sj":{a:"Svalbard & Jan Mayen Flag",b:"1F1F8-1F1EF",k:[4,9],o:2},diamond_shape_with_a_dot_inside:{a:"Diamond Shape with a Dot Inside",b:"1F4A0",j:["jewel","blue","gem","crystal","fancy"],k:[25,42],o:2},"woman-walking":{a:"Woman Walking",b:"1F6B6-200D-2640-FE0F",c:"1F6B6-200D-2640",k:[35,47],o:4},bed:{a:"Bed",b:"1F6CF-FE0F",c:"1F6CF",j:["sleep","rest"],k:[36,37],o:2},radio_button:{a:"Radio Button",b:"1F518",j:["input","old","music","circle"],k:[27,52],o:2},"flag-sk":{a:"Slovakia Flag",b:"1F1F8-1F1F0",k:[4,10],o:2},standing_person:{a:"Standing Person",b:"1F9CD",k:[44,31],o:12},couch_and_lamp:{a:"Couch and Lamp",b:"1F6CB-FE0F",c:"1F6CB",j:["read","chill"],k:[36,28],o:2},man_standing:{a:"Man Standing",b:"1F9CD-200D-2642-FE0F",c:"1F9CD-200D-2642",k:[44,25],o:12},white_square_button:{a:"White Square Button",b:"1F533",j:["shape","input"],k:[28,22],o:2},"flag-sl":{a:"Sierra Leone Flag",b:"1F1F8-1F1F1",k:[4,11],o:2},chair:{a:"Chair",b:"1FA91",k:[52,5],o:12},toilet:{a:"Toilet",b:"1F6BD",j:["restroom","wc","washroom","bathroom","potty"],k:[36,14],o:2},black_square_button:{a:"Black Square Button",b:"1F532",j:["shape","input","frame"],k:[28,21],o:2},"flag-sm":{a:"San Marino Flag",b:"1F1F8-1F1F2",k:[4,12],o:2},woman_standing:{a:"Woman Standing",b:"1F9CD-200D-2640-FE0F",c:"1F9CD-200D-2640",k:[44,19],o:12},kneeling_person:{a:"Kneeling Person",b:"1F9CE",k:[44,49],o:12},shower:{a:"Shower",b:"1F6BF",j:["clean","water","bathroom"],k:[36,16],o:2},"flag-sn":{a:"Senegal Flag",b:"1F1F8-1F1F3",k:[4,13],o:2},bathtub:{a:"Bathtub",b:"1F6C1",j:["clean","shower","bathroom"],k:[36,23],o:2},"flag-so":{a:"Somalia Flag",b:"1F1F8-1F1F4",k:[4,14],o:2},man_kneeling:{a:"Man Kneeling",b:"1F9CE-200D-2642-FE0F",c:"1F9CE-200D-2642",k:[44,43],o:12},"flag-sr":{a:"Suriname Flag",b:"1F1F8-1F1F7",k:[4,15],o:2},woman_kneeling:{a:"Woman Kneeling",b:"1F9CE-200D-2640-FE0F",c:"1F9CE-200D-2640",k:[44,37],o:12},razor:{a:"Razor",b:"1FA92",k:[52,6],o:12},"flag-ss":{a:"South Sudan Flag",b:"1F1F8-1F1F8",k:[4,16],o:2},lotion_bottle:{a:"Lotion Bottle",b:"1F9F4",k:[51,39],o:11},"flag-st":{a:"São Tomé & Príncipe Flag",b:"1F1F8-1F1F9",k:[4,17],o:2},safety_pin:{a:"Safety Pin",b:"1F9F7",k:[51,42],o:11},man_with_probing_cane:{a:"Man with Probing Cane",b:"1F468-200D-1F9AF",k:[16,17],o:12},broom:{a:"Broom",b:"1F9F9",k:[51,44],o:11},woman_with_probing_cane:{a:"Woman with Probing Cane",b:"1F469-200D-1F9AF",k:[19,2],o:12},"flag-sv":{a:"El Salvador Flag",b:"1F1F8-1F1FB",k:[4,18],o:2},"flag-sx":{a:"Sint Maarten Flag",b:"1F1F8-1F1FD",k:[4,19],o:2},basket:{a:"Basket",b:"1F9FA",k:[51,45],o:11},man_in_motorized_wheelchair:{a:"Man in Motorized Wheelchair",b:"1F468-200D-1F9BC",k:[16,47],o:12},"flag-sy":{a:"Syria Flag",b:"1F1F8-1F1FE",k:[4,20],o:2},roll_of_paper:{a:"Roll of Paper",b:"1F9FB",k:[51,46],o:11},woman_in_motorized_wheelchair:{a:"Woman in Motorized Wheelchair",b:"1F469-200D-1F9BC",k:[19,32],o:12},"flag-sz":{a:"Eswatini Flag",b:"1F1F8-1F1FF",k:[4,21],o:2},soap:{a:"Bar of Soap",b:"1F9FC",k:[51,47],o:11},"flag-ta":{a:"Tristan Da Cunha Flag",b:"1F1F9-1F1E6",k:[4,22],o:2},sponge:{a:"Sponge",b:"1F9FD",k:[51,48],o:11},fire_extinguisher:{a:"Fire Extinguisher",b:"1F9EF",k:[51,34],o:11},man_in_manual_wheelchair:{a:"Man in Manual Wheelchair",b:"1F468-200D-1F9BD",k:[16,53],o:12},"flag-tc":{a:"Turks & Caicos Islands Flag",b:"1F1F9-1F1E8",k:[4,23],o:2},woman_in_manual_wheelchair:{a:"Woman in Manual Wheelchair",b:"1F469-200D-1F9BD",k:[19,38],o:12},"flag-td":{a:"Chad Flag",b:"1F1F9-1F1E9",k:[4,24],o:2},shopping_trolley:{a:"Shopping Trolley",b:"1F6D2",k:[36,40],o:4},"flag-tf":{a:"French Southern Territories Flag",b:"1F1F9-1F1EB",k:[4,25],o:2},smoking:{a:"Smoking Symbol",b:"1F6AC",j:["kills","tobacco","cigarette","joint","smoke"],k:[35,3],o:2},coffin:{a:"Coffin",b:"26B0-FE0F",c:"26B0",j:["vampire","dead","die","death","rip","graveyard","cemetery","casket","funeral","box"],k:[53,54],o:2},"man-running":{obsoletes:"1F3C3",a:"Man Running",b:"1F3C3-200D-2642-FE0F",c:"1F3C3-200D-2642",k:[8,52],o:4},"flag-tg":{a:"Togo Flag",b:"1F1F9-1F1EC",k:[4,26],o:2},"woman-running":{a:"Woman Running",b:"1F3C3-200D-2640-FE0F",c:"1F3C3-200D-2640",k:[8,46],o:4},funeral_urn:{a:"Funeral Urn",b:"26B1-FE0F",c:"26B1",j:["dead","die","death","rip","ashes"],k:[53,55],o:2},"flag-th":{a:"Thailand Flag",b:"1F1F9-1F1ED",k:[4,27],o:2},moyai:{a:"Moyai",b:"1F5FF",j:["rock","easter island","moai"],k:[30,34],o:2},"flag-tj":{a:"Tajikistan Flag",b:"1F1F9-1F1EF",k:[4,28],o:2},dancer:{a:"Dancer",b:"1F483",j:["female","girl","woman","fun"],k:[24,26],o:2},"flag-tk":{a:"Tokelau Flag",b:"1F1F9-1F1F0",k:[4,29],o:2},man_dancing:{a:"Man Dancing",b:"1F57A",j:["male","boy","fun","dancer"],k:[29,37],o:4},"flag-tl":{a:"Timor-Leste Flag",b:"1F1F9-1F1F1",k:[4,30],o:2},man_in_business_suit_levitating:{a:"Man in Business Suit Levitating",b:"1F574-FE0F",c:"1F574",k:[29,9],o:2},"flag-tm":{a:"Turkmenistan Flag",b:"1F1F9-1F1F2",k:[4,31],o:2},dancers:{obsoleted_by:"1F46F-200D-2640-FE0F",a:"Woman with Bunny Ears",b:"1F46F",k:[22,0],o:2},"man-with-bunny-ears-partying":{a:"Man with Bunny Ears Partying",b:"1F46F-200D-2642-FE0F",c:"1F46F-200D-2642",k:[21,56],o:4},"flag-tn":{a:"Tunisia Flag",b:"1F1F9-1F1F3",k:[4,32],o:2},"flag-to":{a:"Tonga Flag",b:"1F1F9-1F1F4",k:[4,33],o:2},"woman-with-bunny-ears-partying":{obsoletes:"1F46F",a:"Woman with Bunny Ears Partying",b:"1F46F-200D-2640-FE0F",c:"1F46F-200D-2640",k:[21,55],o:4},"flag-tr":{a:"Turkey Flag",b:"1F1F9-1F1F7",k:[4,34],o:2},person_in_steamy_room:{obsoleted_by:"1F9D6-200D-2642-FE0F",a:"Person in Steamy Room",b:"1F9D6",k:[48,52],o:5},man_in_steamy_room:{obsoletes:"1F9D6",a:"Man in Steamy Room",b:"1F9D6-200D-2642-FE0F",c:"1F9D6-200D-2642",k:[48,46],o:5},"flag-tt":{a:"Trinidad & Tobago Flag",b:"1F1F9-1F1F9",k:[4,35],o:2},woman_in_steamy_room:{a:"Woman in Steamy Room",b:"1F9D6-200D-2640-FE0F",c:"1F9D6-200D-2640",k:[48,40],o:5},"flag-tv":{a:"Tuvalu Flag",b:"1F1F9-1F1FB",k:[4,36],o:2},"flag-tw":{a:"Taiwan Flag",b:"1F1F9-1F1FC",k:[4,37],o:2},person_climbing:{obsoleted_by:"1F9D7-200D-2640-FE0F",a:"Person Climbing",b:"1F9D7",k:[49,13],o:5},man_climbing:{a:"Man Climbing",b:"1F9D7-200D-2642-FE0F",c:"1F9D7-200D-2642",k:[49,7],o:5},"flag-tz":{a:"Tanzania Flag",b:"1F1F9-1F1FF",k:[4,38],o:2},"flag-ua":{a:"Ukraine Flag",b:"1F1FA-1F1E6",k:[4,39],o:2},woman_climbing:{obsoletes:"1F9D7",a:"Woman Climbing",b:"1F9D7-200D-2640-FE0F",c:"1F9D7-200D-2640",k:[49,1],o:5},"flag-ug":{a:"Uganda Flag",b:"1F1FA-1F1EC",k:[4,40],o:2},fencer:{a:"Fencer",b:"1F93A",k:[40,32],o:4},"flag-um":{a:"U.s. Outlying Islands Flag",b:"1F1FA-1F1F2",k:[4,41],o:2},horse_racing:{a:"Horse Racing",b:"1F3C7",j:["animal","betting","competition","gambling","luck"],k:[9,27],o:2},skier:{a:"Skier",b:"26F7-FE0F",c:"26F7",j:["sports","winter","snow"],k:[54,17],o:2},"flag-un":{a:"United Nations Flag",b:"1F1FA-1F1F3",k:[4,42],o:4},us:{a:"United States Flag",b:"1F1FA-1F1F8",j:["united","states","america","flag","nation","country","banner"],k:[4,43],n:["flag-us"],o:2},snowboarder:{a:"Snowboarder",b:"1F3C2",j:["sports","winter"],k:[8,40],o:2},"flag-uy":{a:"Uruguay Flag",b:"1F1FA-1F1FE",k:[4,44],o:2},"flag-uz":{a:"Uzbekistan Flag",b:"1F1FA-1F1FF",k:[4,45],o:2},"flag-va":{a:"Vatican City Flag",b:"1F1FB-1F1E6",k:[4,46],o:2},"flag-vc":{a:"St. Vincent & Grenadines Flag",b:"1F1FB-1F1E8",k:[4,47],o:2},"man-surfing":{obsoletes:"1F3C4",a:"Man Surfing",b:"1F3C4-200D-2642-FE0F",c:"1F3C4-200D-2642",k:[9,13],o:4},"flag-ve":{a:"Venezuela Flag",b:"1F1FB-1F1EA",k:[4,48],o:2},"flag-vg":{a:"British Virgin Islands Flag",b:"1F1FB-1F1EC",k:[4,49],o:2},"woman-surfing":{a:"Woman Surfing",b:"1F3C4-200D-2640-FE0F",c:"1F3C4-200D-2640",k:[9,7],o:4},"flag-vi":{a:"U.s. Virgin Islands Flag",b:"1F1FB-1F1EE",k:[4,50],o:2},"man-rowing-boat":{obsoletes:"1F6A3",a:"Man Rowing Boat",b:"1F6A3-200D-2642-FE0F",c:"1F6A3-200D-2642",k:[34,40],o:4},"flag-vn":{a:"Vietnam Flag",b:"1F1FB-1F1F3",k:[4,51],o:2},"flag-vu":{a:"Vanuatu Flag",b:"1F1FB-1F1FA",k:[4,52],o:2},"woman-rowing-boat":{a:"Woman Rowing Boat",b:"1F6A3-200D-2640-FE0F",c:"1F6A3-200D-2640",k:[34,34],o:4},"flag-wf":{a:"Wallis & Futuna Flag",b:"1F1FC-1F1EB",k:[4,53],o:2},"man-swimming":{obsoletes:"1F3CA",a:"Man Swimming",b:"1F3CA-200D-2642-FE0F",c:"1F3CA-200D-2642",k:[9,41],o:4},"flag-ws":{a:"Samoa Flag",b:"1F1FC-1F1F8",k:[4,54],o:2},"woman-swimming":{a:"Woman Swimming",b:"1F3CA-200D-2640-FE0F",c:"1F3CA-200D-2640",k:[9,35],o:4},"flag-xk":{a:"Kosovo Flag",b:"1F1FD-1F1F0",k:[4,55],o:2},"flag-ye":{a:"Yemen Flag",b:"1F1FE-1F1EA",k:[4,56],o:2},"flag-yt":{a:"Mayotte Flag",b:"1F1FE-1F1F9",k:[5,0],o:2},"flag-za":{a:"South Africa Flag",b:"1F1FF-1F1E6",k:[5,1],o:2},"flag-zm":{a:"Zambia Flag",b:"1F1FF-1F1F2",k:[5,2],o:2},"flag-zw":{a:"Zimbabwe Flag",b:"1F1FF-1F1FC",k:[5,3],o:2},"flag-england":{a:"England Flag",b:"1F3F4-E0067-E0062-E0065-E006E-E0067-E007F",k:[11,14],o:5},"flag-scotland":{a:"Scotland Flag",b:"1F3F4-E0067-E0062-E0073-E0063-E0074-E007F",k:[11,15],o:5},"flag-wales":{a:"Wales Flag",b:"1F3F4-E0067-E0062-E0077-E006C-E0073-E007F",k:[11,16],o:5},"man-biking":{obsoletes:"1F6B4",a:"Man Biking",b:"1F6B4-200D-2642-FE0F",c:"1F6B4-200D-2642",k:[35,17],o:4},"woman-biking":{a:"Woman Biking",b:"1F6B4-200D-2640-FE0F",c:"1F6B4-200D-2640",k:[35,11],o:4},"man-mountain-biking":{obsoletes:"1F6B5",a:"Man Mountain Biking",b:"1F6B5-200D-2642-FE0F",c:"1F6B5-200D-2642",k:[35,35],o:4},"woman-mountain-biking":{a:"Woman Mountain Biking",b:"1F6B5-200D-2640-FE0F",c:"1F6B5-200D-2640",k:[35,29],o:4},"man-cartwheeling":{a:"Man Cartwheeling",b:"1F938-200D-2642-FE0F",c:"1F938-200D-2642",k:[40,2],o:4},"woman-cartwheeling":{a:"Woman Cartwheeling",b:"1F938-200D-2640-FE0F",c:"1F938-200D-2640",k:[39,53],o:4},wrestlers:{a:"Wrestlers",b:"1F93C",k:[40,35],o:4},"man-wrestling":{a:"Man Wrestling",b:"1F93C-200D-2642-FE0F",c:"1F93C-200D-2642",k:[40,34],o:4},"woman-wrestling":{a:"Woman Wrestling",b:"1F93C-200D-2640-FE0F",c:"1F93C-200D-2640",k:[40,33],o:4},"man-playing-water-polo":{a:"Man Playing Water Polo",b:"1F93D-200D-2642-FE0F",c:"1F93D-200D-2642",k:[40,42],o:4},"woman-playing-water-polo":{a:"Woman Playing Water Polo",b:"1F93D-200D-2640-FE0F",c:"1F93D-200D-2640",k:[40,36],o:4},"man-playing-handball":{a:"Man Playing Handball",b:"1F93E-200D-2642-FE0F",c:"1F93E-200D-2642",k:[41,3],o:4},"woman-playing-handball":{a:"Woman Playing Handball",b:"1F93E-200D-2640-FE0F",c:"1F93E-200D-2640",k:[40,54],o:4},juggling:{a:"Juggling",b:"1F939",k:[40,26],o:4},"man-juggling":{a:"Man Juggling",b:"1F939-200D-2642-FE0F",c:"1F939-200D-2642",k:[40,20],o:4},"woman-juggling":{a:"Woman Juggling",b:"1F939-200D-2640-FE0F",c:"1F939-200D-2640",k:[40,14],o:4},person_in_lotus_position:{obsoleted_by:"1F9D8-200D-2640-FE0F",a:"Person in Lotus Position",b:"1F9D8",k:[49,31],o:5},man_in_lotus_position:{a:"Man in Lotus Position",b:"1F9D8-200D-2642-FE0F",c:"1F9D8-200D-2642",k:[49,25],o:5},woman_in_lotus_position:{obsoletes:"1F9D8",a:"Woman in Lotus Position",b:"1F9D8-200D-2640-FE0F",c:"1F9D8-200D-2640",k:[49,19],o:5},bath:{a:"Bath",b:"1F6C0",j:["clean","shower","bathroom"],k:[36,17],o:2},sleeping_accommodation:{a:"Sleeping Accommodation",b:"1F6CC",k:[36,29],o:2},people_holding_hands:{a:"People Holding Hands",b:"1F9D1-200D-1F91D-200D-1F9D1",k:[46,38],o:12},two_women_holding_hands:{a:"Two Women Holding Hands",b:"1F46D",j:["pair","friendship","couple","love","like","female","people","human"],k:[21,11],n:["women_holding_hands"],o:2},couple:{a:"Man and Woman Holding Hands",b:"1F46B",j:["pair","people","human","love","date","dating","like","affection","valentines","marriage"],k:[20,16],n:["man_and_woman_holding_hands","woman_and_man_holding_hands"],o:2},two_men_holding_hands:{a:"Two Men Holding Hands",b:"1F46C",j:["pair","couple","love","like","bromance","friendship","people","human"],k:[20,42],n:["men_holding_hands"],o:2},couplekiss:{obsoleted_by:"1F469-200D-2764-FE0F-200D-1F48B-200D-1F468",a:"Kiss",b:"1F48F",k:[25,25],o:2},"woman-kiss-man":{obsoletes:"1F48F",a:"Woman Kiss Man",b:"1F469-200D-2764-FE0F-200D-1F48B-200D-1F468",c:"1F469-200D-2764-200D-1F48B-200D-1F468",k:[20,7],o:2},"man-kiss-man":{a:"Man Kiss Man",b:"1F468-200D-2764-FE0F-200D-1F48B-200D-1F468",c:"1F468-200D-2764-200D-1F48B-200D-1F468",k:[17,21],o:2},"woman-kiss-woman":{a:"Woman Kiss Woman",b:"1F469-200D-2764-FE0F-200D-1F48B-200D-1F469",c:"1F469-200D-2764-200D-1F48B-200D-1F469",k:[20,8],o:2},couple_with_heart:{obsoleted_by:"1F469-200D-2764-FE0F-200D-1F468",a:"Couple with Heart",b:"1F491",k:[25,27],o:2},"woman-heart-man":{obsoletes:"1F491",a:"Woman Heart Man",b:"1F469-200D-2764-FE0F-200D-1F468",c:"1F469-200D-2764-200D-1F468",k:[20,5],o:2},"man-heart-man":{a:"Man Heart Man",b:"1F468-200D-2764-FE0F-200D-1F468",c:"1F468-200D-2764-200D-1F468",k:[17,20],o:2},"woman-heart-woman":{a:"Woman Heart Woman",b:"1F469-200D-2764-FE0F-200D-1F469",c:"1F469-200D-2764-200D-1F469",k:[20,6],o:2},family:{obsoleted_by:"1F468-200D-1F469-200D-1F466",a:"Family",b:"1F46A",k:[20,15],n:["man-woman-boy"],o:2},"man-woman-boy":{obsoletes:"1F46A",a:"Man Woman Boy",b:"1F468-200D-1F469-200D-1F466",k:[15,33],n:["family"],o:2},"man-woman-girl":{a:"Man Woman Girl",b:"1F468-200D-1F469-200D-1F467",k:[15,35],o:2},"man-woman-girl-boy":{a:"Man Woman Girl Boy",b:"1F468-200D-1F469-200D-1F467-200D-1F466",k:[15,36],o:2},"man-woman-boy-boy":{a:"Man Woman Boy Boy",b:"1F468-200D-1F469-200D-1F466-200D-1F466",k:[15,34],o:2},"man-woman-girl-girl":{a:"Man Woman Girl Girl",b:"1F468-200D-1F469-200D-1F467-200D-1F467",k:[15,37],o:2},"man-man-boy":{a:"Man Man Boy",b:"1F468-200D-1F468-200D-1F466",k:[15,28],o:2},"man-man-girl":{a:"Man Man Girl",b:"1F468-200D-1F468-200D-1F467",k:[15,30],o:2},"man-man-girl-boy":{a:"Man Man Girl Boy",b:"1F468-200D-1F468-200D-1F467-200D-1F466",k:[15,31],o:2},"man-man-boy-boy":{a:"Man Man Boy Boy",b:"1F468-200D-1F468-200D-1F466-200D-1F466",k:[15,29],o:2},"man-man-girl-girl":{a:"Man Man Girl Girl",b:"1F468-200D-1F468-200D-1F467-200D-1F467",k:[15,32],o:2},"woman-woman-boy":{a:"Woman Woman Boy",b:"1F469-200D-1F469-200D-1F466",k:[18,18],o:2},"woman-woman-girl":{a:"Woman Woman Girl",b:"1F469-200D-1F469-200D-1F467",k:[18,20],o:2},"woman-woman-girl-boy":{a:"Woman Woman Girl Boy",b:"1F469-200D-1F469-200D-1F467-200D-1F466",k:[18,21],o:2},"woman-woman-boy-boy":{a:"Woman Woman Boy Boy",b:"1F469-200D-1F469-200D-1F466-200D-1F466",k:[18,19],o:2},"woman-woman-girl-girl":{a:"Woman Woman Girl Girl",b:"1F469-200D-1F469-200D-1F467-200D-1F467",k:[18,22],o:2},"man-boy":{a:"Man Boy",b:"1F468-200D-1F466",k:[15,24],o:4},"man-boy-boy":{a:"Man Boy Boy",b:"1F468-200D-1F466-200D-1F466",k:[15,23],o:4},"man-girl":{a:"Man Girl",b:"1F468-200D-1F467",k:[15,27],o:4},"man-girl-boy":{a:"Man Girl Boy",b:"1F468-200D-1F467-200D-1F466",k:[15,25],o:4},"man-girl-girl":{a:"Man Girl Girl",b:"1F468-200D-1F467-200D-1F467",k:[15,26],o:4},"woman-boy":{a:"Woman Boy",b:"1F469-200D-1F466",k:[18,14],o:4},"woman-boy-boy":{a:"Woman Boy Boy",b:"1F469-200D-1F466-200D-1F466",k:[18,13],o:4},"woman-girl":{a:"Woman Girl",b:"1F469-200D-1F467",k:[18,17],o:4},"woman-girl-boy":{a:"Woman Girl Boy",b:"1F469-200D-1F467-200D-1F466",k:[18,15],o:4},"woman-girl-girl":{a:"Woman Girl Girl",b:"1F469-200D-1F467-200D-1F467",k:[18,16],o:4},speaking_head_in_silhouette:{a:"Speaking Head in Silhouette",b:"1F5E3-FE0F",c:"1F5E3",k:[30,25],o:2},bust_in_silhouette:{a:"Bust in Silhouette",b:"1F464",j:["user","person","human"],k:[14,24],o:2},busts_in_silhouette:{a:"Busts in Silhouette",b:"1F465",j:["user","person","human","group","team"],k:[14,25],o:2},footprints:{a:"Footprints",b:"1F463",j:["feet","tracking","walking","beach"],k:[14,23],o:2}};var aliases={raised_hand:"hand",satisfied:"laughing",tshirt:"shirt",hand_with_index_and_middle_fingers_crossed:"crossed_fingers",sign_of_the_horns:"the_horns",grinning_face_with_star_eyes:"star-struck",reversed_hand_with_middle_finger_extended:"middle_finger",thumbsup:"+1",thumbsdown:"-1",punch:"facepunch",grinning_face_with_one_large_and_one_small_eye:"zany_face",shoe:"mans_shoe",smiling_face_with_smiling_eyes_and_hand_covering_mouth:"face_with_hand_over_mouth",face_with_finger_covering_closed_lips:"shushing_face",face_with_one_eyebrow_raised:"face_with_raised_eyebrow",face_with_open_mouth_vomiting:"face_vomiting",cooking:"fried_egg","flag-cn":"cn",shocked_face_with_exploding_head:"exploding_head",paw_prints:"feet","flag-de":"de",telephone:"phone","flag-es":"es",red_car:"car",flipper:"dolphin","flag-fr":"fr",uk:"gb","flag-gb":"gb",serious_face_with_symbols_covering_mouth:"face_with_symbols_on_mouth",poop:"hankey",shit:"hankey",honeybee:"bee",staff_of_aesculapius:"medical_symbol",lantern:"izakaya_lantern",open_book:"book",sailboat:"boat",knife:"hocho","flag-it":"it",heavy_exclamation_mark:"exclamation","flag-jp":"jp",envelope:"email","flag-kr":"kr",collision:"boom",pencil:"memo",waxing_gibbous_moon:"moon",mother_christmas:"mrs_claus",sun_small_cloud:"mostly_sunny",sun_behind_cloud:"barely_sunny",sun_behind_rain_cloud:"partly_sunny_rain",lightning_cloud:"lightning",tornado_cloud:"tornado","flag-ru":"ru","flag-us":"us",women_holding_hands:"two_women_holding_hands",man_and_woman_holding_hands:"couple",woman_and_man_holding_hands:"couple",men_holding_hands:"two_men_holding_hands","man-woman-boy":"family",family:"man-woman-boy"};var defaultEmojiData = {compressed:compressed,categories:categories,emojis:emojis,aliases:aliases};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var makeAddNotifications = function (setNotifications, notificationTimeouts) { return function (text, type) {
        if (typeof text !== 'string' || (type !== 'success' && type !== 'error')) {
            return;
        }
        var id = nanoid();
        setNotifications(function (prevNotifications) { return __spreadArray(__spreadArray([], prevNotifications), [{ id: id, text: text, type: type }]); });
        var timeout = setTimeout(function () {
            return setNotifications(function (prevNotifications) {
                return prevNotifications.filter(function (notification) { return notification.id !== id; });
            });
        }, 5000);
        notificationTimeouts.push(timeout);
    }; };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=streamChat.logChatPromiseExecution;window.StreamChat.Channel=Channel$1;window.ICAL=window.ICAL||{};var JUMP_MESSAGE_PAGE_SIZE = 25;
    var UnMemoizedChannel = function (props) {
        var propsChannel = props.channel, _a = props.EmptyPlaceholder, EmptyPlaceholder = _a === void 0 ? null : _a, LoadingErrorIndicator = props.LoadingErrorIndicator, LoadingIndicator = props.LoadingIndicator;
        var _b = useChatContext('Channel'), contextChannel = _b.channel, channelsQueryState = _b.channelsQueryState;
        var channel = propsChannel || contextChannel;
        if (channelsQueryState.queryInProgress === 'reload' && LoadingIndicator) {
            return React__default['default'].createElement(LoadingIndicator, { size: 25 });
        }
        if (channelsQueryState.error && LoadingErrorIndicator) {
            return React__default['default'].createElement(LoadingErrorIndicator, { error: channelsQueryState.error });
        }
        if (!(channel === null || channel === void 0 ? void 0 : channel.cid))
            return EmptyPlaceholder;
        return React__default['default'].createElement(ChannelInner, __assign$2({}, props, { channel: channel, key: channel.cid }));
    };
    var ChannelInner = function (props) {
        var _a;
        var acceptedFiles = props.acceptedFiles, activeUnreadHandler = props.activeUnreadHandler, channel = props.channel, children = props.children, doMarkReadRequest = props.doMarkReadRequest, doSendMessageRequest = props.doSendMessageRequest, doUpdateMessageRequest = props.doUpdateMessageRequest, _b = props.dragAndDropWindow, dragAndDropWindow = _b === void 0 ? false : _b, _c = props.emojiData, emojiData = _c === void 0 ? defaultEmojiData : _c, _d = props.LoadingErrorIndicator, LoadingErrorIndicator$1 = _d === void 0 ? LoadingErrorIndicator : _d, _e = props.LoadingIndicator, LoadingIndicator$1 = _e === void 0 ? LoadingIndicator : _e, maxNumberOfFiles = props.maxNumberOfFiles, _f = props.multipleUploads, multipleUploads = _f === void 0 ? true : _f, onMentionsClick = props.onMentionsClick, onMentionsHover = props.onMentionsHover, _g = props.optionalMessageInputProps, optionalMessageInputProps = _g === void 0 ? {} : _g, skipMessageDataMemoization = props.skipMessageDataMemoization;
        var _h = useChatContext('Channel'), client = _h.client, customClasses = _h.customClasses, latestMessageDatesByChannels = _h.latestMessageDatesByChannels, mutes = _h.mutes, theme = _h.theme, useImageFlagEmojisOnWindows = _h.useImageFlagEmojisOnWindows;
        var t = useTranslationContext('Channel').t;
        var _j = React.useState(channel.getConfig()), channelConfig = _j[0], setChannelConfig = _j[1];
        var _k = React.useState([]), notifications = _k[0], setNotifications = _k[1];
        var _l = React.useState(), quotedMessage = _l[0], setQuotedMessage = _l[1];
        var notificationTimeouts = [];
        var _m = React.useReducer(channelReducer, __assign$2(__assign$2({}, initialState), { loading: !channel.initialized })), state = _m[0], dispatch = _m[1];
        var isMounted = useIsMounted();
        var originalTitle = React.useRef('');
        var lastRead = React.useRef(new Date());
        var online = React.useRef(true);
        var channelCapabilitiesArray = (_a = channel.data) === null || _a === void 0 ? void 0 : _a.own_capabilities;
        var emojiConfig = {
            commonEmoji: commonEmoji,
            defaultMinimalEmojis: defaultMinimalEmojis,
            emojiData: emojiData,
            emojiSetDef: emojiSetDef,
        };
        var throttledCopyStateFromChannel = lodash_throttle(function () { return dispatch({ channel: channel, type: 'copyStateFromChannelOnEvent' }); }, 500, {
            leading: true,
            trailing: true,
        });
        var markRead = function () {
            if (channel.disconnected || !(channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.read_events)) {
                return;
            }
            lastRead.current = new Date();
            if (doMarkReadRequest) {
                doMarkReadRequest(channel);
            }
            else {
                streamChat.logChatPromiseExecution(channel.markRead(), 'mark read');
            }
            if (activeUnreadHandler) {
                activeUnreadHandler(0, originalTitle.current);
            }
            else if (originalTitle.current) {
                document.title = originalTitle.current;
            }
        };
        var markReadThrottled = lodash_throttle(markRead, 500, { leading: true, trailing: true });
        var handleEvent = function (event) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            if (event.message) {
                dispatch({
                    channel: channel,
                    message: event.message,
                    type: 'updateThreadOnEvent',
                });
            }
            if (event.type === 'user.watching.start' || event.type === 'user.watching.stop')
                return;
            if (event.type === 'typing.start' || event.type === 'typing.stop') {
                return dispatch({ channel: channel, type: 'setTyping' });
            }
            if (event.type === 'connection.changed' && typeof event.online === 'boolean') {
                online.current = event.online;
            }
            if (event.type === 'message.new') {
                var mainChannelUpdated = true;
                if (((_a = event.message) === null || _a === void 0 ? void 0 : _a.parent_id) && !((_b = event.message) === null || _b === void 0 ? void 0 : _b.show_in_channel)) {
                    mainChannelUpdated = false;
                }
                if (mainChannelUpdated && ((_d = (_c = event.message) === null || _c === void 0 ? void 0 : _c.user) === null || _d === void 0 ? void 0 : _d.id) !== client.userID) {
                    if (!document.hidden) {
                        markReadThrottled();
                    }
                    else if ((channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.read_events) && !channel.muteStatus().muted) {
                        var unread = channel.countUnread(lastRead.current);
                        if (activeUnreadHandler) {
                            activeUnreadHandler(unread, originalTitle.current);
                        }
                        else {
                            document.title = "(" + unread + ") " + originalTitle.current;
                        }
                    }
                }
                if (((_f = (_e = event.message) === null || _e === void 0 ? void 0 : _e.user) === null || _f === void 0 ? void 0 : _f.id) === client.userID &&
                    ((_g = event === null || event === void 0 ? void 0 : event.message) === null || _g === void 0 ? void 0 : _g.created_at) &&
                    ((_h = event === null || event === void 0 ? void 0 : event.message) === null || _h === void 0 ? void 0 : _h.cid)) {
                    var messageDate = new Date(event.message.created_at);
                    var cid = event.message.cid;
                    if (!latestMessageDatesByChannels[cid] ||
                        latestMessageDatesByChannels[cid].getTime() < messageDate.getTime()) {
                        latestMessageDatesByChannels[cid] = messageDate;
                    }
                }
            }
            throttledCopyStateFromChannel();
        };
        // useLayoutEffect here to prevent spinner. Use Suspense when it is available in stable release
        React.useLayoutEffect(function () {
            var errored = false;
            var done = false;
            var onVisibilityChange = function () {
                if (!document.hidden)
                    markRead();
            };
            (function () { return __awaiter$1(void 0, void 0, void 0, function () {
                var config, e_1;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!channel.initialized) return [3 /*break*/, 4];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, channel.watch()];
                        case 2:
                            _a.sent();
                            config = channel.getConfig();
                            setChannelConfig(config);
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            dispatch({ error: e_1, type: 'setError' });
                            errored = true;
                            return [3 /*break*/, 4];
                        case 4:
                            done = true;
                            originalTitle.current = document.title;
                            if (!errored) {
                                dispatch({ channel: channel, type: 'initStateFromChannel' });
                                if (channel.countUnread() > 0)
                                    markRead();
                                // The more complex sync logic is done in Chat
                                document.addEventListener('visibilitychange', onVisibilityChange);
                                client.on('connection.changed', handleEvent);
                                client.on('connection.recovered', handleEvent);
                                client.on('user.updated', handleEvent);
                                client.on('user.deleted', handleEvent);
                                channel.on(handleEvent);
                            }
                            return [2 /*return*/];
                    }
                });
            }); })();
            return function () {
                if (errored || !done)
                    return;
                document.removeEventListener('visibilitychange', onVisibilityChange);
                channel === null || channel === void 0 ? void 0 : channel.off(handleEvent);
                client.off('connection.changed', handleEvent);
                client.off('connection.recovered', handleEvent);
                client.off('user.updated', handleEvent);
                client.off('user.deleted', handleEvent);
                notificationTimeouts.forEach(clearTimeout);
            };
        }, [channel.cid, doMarkReadRequest]);
        React.useEffect(function () {
            var _a;
            if (!state.thread)
                return;
            var message = (_a = state.messages) === null || _a === void 0 ? void 0 : _a.find(function (m) { var _a; return m.id === ((_a = state.thread) === null || _a === void 0 ? void 0 : _a.id); });
            if (message)
                dispatch({ message: message, type: 'setThread' });
        }, [state.messages, state.thread]);
        /** MESSAGE */
        // Adds a temporary notification to message list, will be removed after 5 seconds
        var addNotification = makeAddNotifications(setNotifications, notificationTimeouts);
        var loadMoreFinished = lodash_debounce(function (hasMore, messages) {
            if (!isMounted.current)
                return;
            dispatch({ hasMore: hasMore, messages: messages, type: 'loadMoreFinished' });
        }, 2000, {
            leading: true,
            trailing: true,
        });
        var loadMore = function (limit) {
            if (limit === void 0) { limit = 100; }
            return __awaiter$1(void 0, void 0, void 0, function () {
                var oldestMessage, oldestID, perPage, queryResponse, e_2, hasMoreMessages;
                var _a;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!online.current || !window.navigator.onLine)
                                return [2 /*return*/, 0];
                            oldestMessage = (_a = state === null || state === void 0 ? void 0 : state.messages) === null || _a === void 0 ? void 0 : _a[0];
                            if (state.loadingMore || state.loadingMoreNewer || (oldestMessage === null || oldestMessage === void 0 ? void 0 : oldestMessage.status) !== 'received') {
                                return [2 /*return*/, 0];
                            }
                            // initial state loads with up to 25 messages, so if less than 25 no need for additional query
                            if (channel.state.messages.length < 25) {
                                loadMoreFinished(false, channel.state.messages);
                                return [2 /*return*/, channel.state.messages.length];
                            }
                            dispatch({ loadingMore: true, type: 'setLoadingMore' });
                            oldestID = oldestMessage === null || oldestMessage === void 0 ? void 0 : oldestMessage.id;
                            perPage = limit;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, channel.query({
                                    messages: { id_lt: oldestID, limit: perPage },
                                    watchers: { limit: perPage },
                                })];
                        case 2:
                            queryResponse = _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_2 = _b.sent();
                            console.warn('message pagination request failed with error', e_2);
                            dispatch({ loadingMore: false, type: 'setLoadingMore' });
                            return [2 /*return*/, 0];
                        case 4:
                            hasMoreMessages = queryResponse.messages.length === perPage;
                            loadMoreFinished(hasMoreMessages, channel.state.messages);
                            return [2 /*return*/, queryResponse.messages.length];
                    }
                });
            });
        };
        var loadMoreNewer = function (limit) {
            if (limit === void 0) { limit = 100; }
            return __awaiter$1(void 0, void 0, void 0, function () {
                var newestMessage, newestId, perPage, queryResponse, e_3, hasMoreNewer;
                var _a, _b;
                return __generator$1(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!online.current || !window.navigator.onLine)
                                return [2 /*return*/, 0];
                            newestMessage = (_a = state === null || state === void 0 ? void 0 : state.messages) === null || _a === void 0 ? void 0 : _a[((_b = state === null || state === void 0 ? void 0 : state.messages) === null || _b === void 0 ? void 0 : _b.length) - 1];
                            if (state.loadingMore || state.loadingMoreNewer)
                                return [2 /*return*/, 0];
                            dispatch({ loadingMoreNewer: true, type: 'setLoadingMoreNewer' });
                            newestId = newestMessage === null || newestMessage === void 0 ? void 0 : newestMessage.id;
                            perPage = limit;
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, channel.query({
                                    messages: { id_gt: newestId, limit: perPage },
                                    watchers: { limit: perPage },
                                })];
                        case 2:
                            queryResponse = _c.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_3 = _c.sent();
                            console.warn('message pagination request failed with error', e_3);
                            dispatch({ loadingMoreNewer: false, type: 'setLoadingMoreNewer' });
                            return [2 /*return*/, 0];
                        case 4:
                            hasMoreNewer = channel.state.messages !== channel.state.latestMessages;
                            dispatch({ hasMoreNewer: hasMoreNewer, messages: channel.state.messages, type: 'loadMoreNewerFinished' });
                            return [2 /*return*/, queryResponse.messages.length];
                    }
                });
            });
        };
        var jumpToMessage = function (messageId) { return __awaiter$1(void 0, void 0, void 0, function () {
            var indexOfMessage, hasMoreMessages;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dispatch({ loadingMore: true, type: 'setLoadingMore' });
                        return [4 /*yield*/, channel.state.loadMessageIntoState(messageId)];
                    case 1:
                        _a.sent();
                        indexOfMessage = channel.state.messages.findIndex(function (message) { return message.id === messageId; });
                        hasMoreMessages = indexOfMessage >= Math.floor(JUMP_MESSAGE_PAGE_SIZE / 2);
                        loadMoreFinished(hasMoreMessages, channel.state.messages);
                        dispatch({
                            hasMoreNewer: channel.state.messages !== channel.state.latestMessages,
                            highlightedMessageId: messageId,
                            type: 'jumpToMessageFinished',
                        });
                        setTimeout(function () {
                            dispatch({ type: 'clearHighlightedMessage' });
                        }, 500);
                        return [2 /*return*/];
                }
            });
        }); };
        var jumpToLatestMessage = function () { return __awaiter$1(void 0, void 0, void 0, function () {
            var hasMoreOlder;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, channel.state.loadMessageIntoState('latest')];
                    case 1:
                        _a.sent();
                        hasMoreOlder = channel.state.messages.length >= 25;
                        loadMoreFinished(hasMoreOlder, channel.state.messages);
                        dispatch({
                            type: 'jumpToLatestMessage',
                        });
                        return [2 /*return*/];
                }
            });
        }); };
        var updateMessage = function (updatedMessage) {
            // add the message to the local channel state
            channel.state.addMessageSorted(updatedMessage, true);
            dispatch({
                channel: channel,
                parentId: state.thread && updatedMessage.parent_id,
                type: 'copyMessagesFromChannel',
            });
        };
        var isUserResponseArray = function (output) { var _a; return ((_a = output[0]) === null || _a === void 0 ? void 0 : _a.id) != null; };
        var doSendMessage = function (message, customMessageData) { return __awaiter$1(void 0, void 0, void 0, function () {
            var attachments, id, _a, mentioned_users, parent_id, text, mentions, messageData, messageResponse, error_1, stringError, parsedError;
            return __generator$1(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        attachments = message.attachments, id = message.id, _a = message.mentioned_users, mentioned_users = _a === void 0 ? [] : _a, parent_id = message.parent_id, text = message.text;
                        mentions = isUserResponseArray(mentioned_users)
                            ? mentioned_users.map(function (_a) {
                                var id = _a.id;
                                return id;
                            })
                            : mentioned_users;
                        messageData = __assign$2({ attachments: attachments, id: id, mentioned_users: mentions, parent_id: parent_id, quoted_message_id: parent_id === (quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.parent_id) ? quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.id : undefined, text: text }, customMessageData);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, , 7]);
                        messageResponse = void 0;
                        if (!doSendMessageRequest) return [3 /*break*/, 3];
                        return [4 /*yield*/, doSendMessageRequest(channel.cid, messageData)];
                    case 2:
                        messageResponse = _b.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, channel.sendMessage(messageData)];
                    case 4:
                        messageResponse = _b.sent();
                        _b.label = 5;
                    case 5:
                        // replace it after send is completed
                        if (messageResponse === null || messageResponse === void 0 ? void 0 : messageResponse.message) {
                            updateMessage(__assign$2(__assign$2({}, messageResponse.message), { status: 'received' }));
                        }
                        if (quotedMessage && parent_id === (quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.parent_id))
                            setQuotedMessage(undefined);
                        return [3 /*break*/, 7];
                    case 6:
                        error_1 = _b.sent();
                        stringError = JSON.stringify(error_1);
                        parsedError = stringError ? JSON.parse(stringError) : {};
                        updateMessage(__assign$2(__assign$2({}, message), { error: parsedError, errorStatusCode: parsedError.status || undefined, status: 'failed' }));
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        }); };
        var createMessagePreview = function (text, attachments, parent, mentioned_users) {
            var clientSideID = client.userID + "-" + nanoid();
            return __assign$2({ __html: text, attachments: attachments, created_at: new Date(), html: text, id: clientSideID, mentioned_users: mentioned_users, reactions: [], status: 'sending', text: text, type: 'regular', user: client.user }, ((parent === null || parent === void 0 ? void 0 : parent.id) ? { parent_id: parent.id } : null));
        };
        var sendMessage = function (_a, customMessageData) {
            var _b = _a.attachments, attachments = _b === void 0 ? [] : _b, _c = _a.mentioned_users, mentioned_users = _c === void 0 ? [] : _c, _d = _a.parent, parent = _d === void 0 ? undefined : _d, _e = _a.text, text = _e === void 0 ? '' : _e;
            return __awaiter$1(void 0, void 0, void 0, function () {
                var messagePreview;
                return __generator$1(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            channel.state.filterErrorMessages();
                            messagePreview = createMessagePreview(text, attachments, parent, mentioned_users);
                            updateMessage(messagePreview);
                            return [4 /*yield*/, doSendMessage(messagePreview, customMessageData)];
                        case 1:
                            _f.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        var retrySendMessage = function (message) { return __awaiter$1(void 0, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        updateMessage(__assign$2(__assign$2({}, message), { errorStatusCode: undefined, status: 'sending' }));
                        return [4 /*yield*/, doSendMessage(message)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        var removeMessage = function (message) {
            channel.state.removeMessage(message);
            dispatch({
                channel: channel,
                parentId: state.thread && message.parent_id,
                type: 'copyMessagesFromChannel',
            });
        };
        /** THREAD */
        var openThread = function (message, event) {
            event.preventDefault();
            setQuotedMessage(function (current) {
                if ((current === null || current === void 0 ? void 0 : current.parent_id) !== (message === null || message === void 0 ? void 0 : message.parent_id)) {
                    return undefined;
                }
                else {
                    return current;
                }
            });
            dispatch({ channel: channel, message: message, type: 'openThread' });
        };
        var closeThread = function (event) {
            event.preventDefault();
            dispatch({ type: 'closeThread' });
        };
        var loadMoreThreadFinished = lodash_debounce(function (threadHasMore, threadMessages) {
            dispatch({
                threadHasMore: threadHasMore,
                threadMessages: threadMessages,
                type: 'loadMoreThreadFinished',
            });
        }, 2000, { leading: true, trailing: true });
        var loadMoreThread = function () { return __awaiter$1(void 0, void 0, void 0, function () {
            var parentID, oldMessages, oldestMessageID, limit, queryResponse, threadHasMoreMessages, newThreadMessages;
            var _a;
            return __generator$1(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (state.threadLoadingMore || !state.thread)
                            return [2 /*return*/];
                        dispatch({ type: 'startLoadingThread' });
                        parentID = state.thread.id;
                        if (!parentID) {
                            return [2 /*return*/, dispatch({ type: 'closeThread' })];
                        }
                        oldMessages = channel.state.threads[parentID] || [];
                        oldestMessageID = (_a = oldMessages[0]) === null || _a === void 0 ? void 0 : _a.id;
                        limit = 50;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, channel.getReplies(parentID, {
                                id_lt: oldestMessageID,
                                limit: limit,
                            })];
                    case 2:
                        queryResponse = _b.sent();
                        threadHasMoreMessages = queryResponse.messages.length === limit;
                        newThreadMessages = channel.state.threads[parentID] || [];
                        // next set loadingMore to false so we can start asking for more data
                        loadMoreThreadFinished(threadHasMoreMessages, newThreadMessages);
                        return [3 /*break*/, 4];
                    case 3:
                        _b.sent();
                        loadMoreThreadFinished(false, oldMessages);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        var onMentionsHoverOrClick = useMentionsHandlers(onMentionsHover, onMentionsClick);
        var editMessage = useEditMessageHandler(doUpdateMessageRequest);
        var typing = state.typing, restState = __rest(state, ["typing"]);
        var channelStateContextValue = useCreateChannelStateContext(__assign$2(__assign$2({}, restState), { acceptedFiles: acceptedFiles, channel: channel, channelCapabilitiesArray: channelCapabilitiesArray, channelConfig: channelConfig, dragAndDropWindow: dragAndDropWindow, giphyVersion: props.giphyVersion || 'fixed_height', maxNumberOfFiles: maxNumberOfFiles, multipleUploads: multipleUploads, mutes: mutes, notifications: notifications, quotedMessage: quotedMessage, watcher_count: state.watcherCount }));
        var channelActionContextValue = React.useMemo(function () { return ({
            addNotification: addNotification,
            closeThread: closeThread,
            dispatch: dispatch,
            editMessage: editMessage,
            jumpToLatestMessage: jumpToLatestMessage,
            jumpToMessage: jumpToMessage,
            loadMore: loadMore,
            loadMoreNewer: loadMoreNewer,
            loadMoreThread: loadMoreThread,
            onMentionsClick: onMentionsHoverOrClick,
            onMentionsHover: onMentionsHoverOrClick,
            openThread: openThread,
            removeMessage: removeMessage,
            retrySendMessage: retrySendMessage,
            sendMessage: sendMessage,
            setQuotedMessage: setQuotedMessage,
            skipMessageDataMemoization: skipMessageDataMemoization,
            updateMessage: updateMessage,
        }); }, [channel.cid, loadMore, loadMoreNewer, quotedMessage, jumpToMessage, jumpToLatestMessage]);
        var componentContextValue = React.useMemo(function () { return ({
            Attachment: props.Attachment || Attachment,
            AutocompleteSuggestionHeader: props.AutocompleteSuggestionHeader,
            AutocompleteSuggestionItem: props.AutocompleteSuggestionItem,
            AutocompleteSuggestionList: props.AutocompleteSuggestionList,
            Avatar: props.Avatar,
            CooldownTimer: props.CooldownTimer,
            DateSeparator: props.DateSeparator,
            EditMessageInput: props.EditMessageInput,
            EmojiIcon: props.EmojiIcon,
            EmptyStateIndicator: props.EmptyStateIndicator,
            FileUploadIcon: props.FileUploadIcon,
            GiphyPreviewMessage: props.GiphyPreviewMessage,
            HeaderComponent: props.HeaderComponent,
            Input: props.Input,
            LoadingIndicator: props.LoadingIndicator,
            Message: props.Message || MessageSimple,
            MessageDeleted: props.MessageDeleted,
            MessageListNotifications: props.MessageListNotifications,
            MessageNotification: props.MessageNotification,
            MessageOptions: props.MessageOptions,
            MessageRepliesCountButton: props.MessageRepliesCountButton,
            MessageStatus: props.MessageStatus,
            MessageSystem: props.MessageSystem,
            MessageTimestamp: props.MessageTimestamp,
            PinIndicator: props.PinIndicator,
            QuotedMessage: props.QuotedMessage,
            QuotedMessagePreview: props.QuotedMessagePreview,
            ReactionSelector: props.ReactionSelector,
            ReactionsList: props.ReactionsList,
            SendButton: props.SendButton,
            ThreadHeader: props.ThreadHeader,
            ThreadStart: props.ThreadStart,
            TriggerProvider: props.TriggerProvider,
            TypingIndicator: props.TypingIndicator,
            VirtualMessage: props.VirtualMessage,
        }); }, []);
        var emojiContextValue = React.useMemo(function () { return ({
            Emoji: props.Emoji,
            emojiConfig: emojiConfig,
            EmojiIndex: props.EmojiIndex,
            EmojiPicker: props.EmojiPicker,
        }); }, []);
        var typingContextValue = useCreateTypingContext({
            typing: typing,
        });
        var chatClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.chat) || 'str-chat';
        var chatContainerClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.chatContainer) || 'str-chat__container';
        var channelClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.channel) || 'str-chat-channel';
        var windowsEmojiClass = useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/)
            ? 'str-chat--windows-flags'
            : '';
        var OptionalMessageInputProvider = React.useMemo(function () { return (dragAndDropWindow ? DropzoneProvider : React__default['default'].Fragment); }, [dragAndDropWindow]);
        if (state.error) {
            return (React__default['default'].createElement("div", { className: chatClass + " " + channelClass + " " + theme },
                React__default['default'].createElement(LoadingErrorIndicator$1, { error: state.error })));
        }
        if (state.loading) {
            return (React__default['default'].createElement("div", { className: chatClass + " " + channelClass + " " + theme },
                React__default['default'].createElement(LoadingIndicator$1, { size: 25 })));
        }
        if (!channel.watch) {
            return (React__default['default'].createElement("div", { className: chatClass + " " + channelClass + " " + theme },
                React__default['default'].createElement("div", null, t('Channel Missing'))));
        }
        return (React__default['default'].createElement("div", { className: chatClass + " " + channelClass + " " + theme + " " + windowsEmojiClass },
            React__default['default'].createElement(ChannelStateProvider, { value: channelStateContextValue },
                React__default['default'].createElement(ChannelActionProvider, { value: channelActionContextValue },
                    React__default['default'].createElement(ComponentProvider, { value: componentContextValue },
                        React__default['default'].createElement(EmojiProvider, { value: emojiContextValue },
                            React__default['default'].createElement(TypingProvider, { value: typingContextValue },
                                React__default['default'].createElement("div", { className: "" + chatContainerClass },
                                    React__default['default'].createElement(OptionalMessageInputProvider, __assign$2({}, optionalMessageInputProps), children)))))))));
    };
    /**
     * A wrapper component that provides channel data and renders children.
     * The Channel component provides the following contexts:
     * - [ChannelStateContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_state_context/)
     * - [ChannelActionContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_action_context/)
     * - [ComponentContext](https://getstream.io/chat/docs/sdk/react/contexts/component_context/)
     * - [EmojiContext](https://getstream.io/chat/docs/sdk/react/contexts/emoji_context/)
     * - [TypingContext](https://getstream.io/chat/docs/sdk/react/contexts/typing_context/)
     */
    var Channel$1 = React__default['default'].memo(UnMemoizedChannel);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MenuIcon = function (_a) {
        var title = _a.title;
        var t = useTranslationContext('MenuIcon').t;
        return (React__default['default'].createElement("svg", { "data-testid": 'menu-icon', viewBox: '0 0 448 512', xmlns: 'http://www.w3.org/2000/svg' },
            React__default['default'].createElement("title", null, title !== null && title !== void 0 ? title : t('Menu')),
            React__default['default'].createElement("path", { d: 'M0 88C0 74.75 10.75 64 24 64H424C437.3 64 448 74.75 448 88C448 101.3 437.3 112 424 112H24C10.75 112 0 101.3 0 88zM0 248C0 234.7 10.75 224 24 224H424C437.3 224 448 234.7 448 248C448 261.3 437.3 272 424 272H24C10.75 272 0 261.3 0 248zM424 432H24C10.75 432 0 421.3 0 408C0 394.7 10.75 384 24 384H424C437.3 384 448 394.7 448 408C448 421.3 437.3 432 424 432z', fill: 'currentColor' })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedChannelHeader = function (props) {
        var _a = props.Avatar, Avatar$1 = _a === void 0 ? Avatar : _a, _b = props.MenuIcon, MenuIcon$1 = _b === void 0 ? MenuIcon : _b, propImage = props.image, live = props.live, title = props.title;
        var _c = useChannelStateContext('ChannelHeader'), channel = _c.channel, watcher_count = _c.watcher_count;
        var openMobileNav = useChatContext('ChannelHeader').openMobileNav;
        var t = useTranslationContext('ChannelHeader').t;
        var _d = (channel === null || channel === void 0 ? void 0 : channel.data) || {}, channelImage = _d.image, member_count = _d.member_count, name = _d.name, subtitle = _d.subtitle;
        var image = propImage || channelImage;
        return (React__default['default'].createElement("div", { className: 'str-chat__header-livestream' },
            React__default['default'].createElement("button", { "aria-label": 'Menu', className: 'str-chat__header-hamburger', onClick: openMobileNav },
                React__default['default'].createElement(MenuIcon$1, null)),
            image && (React__default['default'].createElement(Avatar$1, { image: image, shape: 'rounded', size: (channel === null || channel === void 0 ? void 0 : channel.type) === 'commerce' ? 60 : 40 })),
            React__default['default'].createElement("div", { className: 'str-chat__header-livestream-left' },
                React__default['default'].createElement("p", { className: 'str-chat__header-livestream-left--title' },
                    title || name,
                    ' ',
                    live && (React__default['default'].createElement("span", { className: 'str-chat__header-livestream-left--livelabel' }, t('live')))),
                subtitle && React__default['default'].createElement("p", { className: 'str-chat__header-livestream-left--subtitle' }, subtitle),
                React__default['default'].createElement("p", { className: 'str-chat__header-livestream-left--members' },
                    !live && !!member_count && member_count > 0 && (React__default['default'].createElement(React__default['default'].Fragment, null,
                        t('{{ memberCount }} members', {
                            memberCount: member_count,
                        }),
                        ",",
                        ' ')),
                    t('{{ watcherCount }} online', { watcherCount: watcher_count })))));
    };
    /**
     * The ChannelHeader component renders some basic information about a Channel.
     */
    var ChannelHeader = React__default['default'].memo(UnMemoizedChannelHeader);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ConnectionErrorIcon = function () { return (React__default['default'].createElement("svg", { height: '78px', version: '1.1', viewBox: '0 0 78 78', width: '78px', xmlns: 'http://www.w3.org/2000/svg' },
        React__default['default'].createElement("title", null, "Connection Error"),
        React__default['default'].createElement("g", { fill: 'none', fillRule: 'evenodd', id: 'Interactions', stroke: 'none', strokeWidth: '1' },
            React__default['default'].createElement("g", { fill: '#CF1F25', id: 'Connection-Error-_-Connectivity', transform: 'translate(-270.000000, -30.000000)' },
                React__default['default'].createElement("g", { id: '109-network-connection', transform: 'translate(270.000000, 30.000000)' },
                    React__default['default'].createElement("path", { d: 'M66.4609744,11.414231 C81.6225232,26.5757798 81.6225232,51.157545 66.4609744,66.3188467 C51.2994256,81.4803954 26.7176604,81.4803954 11.5563587,66.3188467 C-3.60519004,51.1572979 -3.60519004,26.5755327 11.5563587,11.414231 C26.7179075,-3.74731776 51.2996727,-3.74731776 66.4609744,11.414231 Z M54.7853215,45.8823776 L54.7853215,40.5882574 C54.7853215,39.613638 53.9952341,38.8235506 53.0206147,38.8235506 L44.9576695,38.8235506 L41.428256,42.3529641 L51.255555,42.3529641 L51.255555,45.8823776 L54.7853215,45.8823776 Z M40.6659027,43.1153174 L37.8988425,45.8823776 L40.6659027,45.8823776 L40.6659027,43.1153174 Z M51.1764962,56.4702653 L58.2353232,56.4702653 C59.2099355,56.4702653 60.00003,55.6801708 60.00003,54.7055585 L60.00003,51.176145 C60.00003,50.2015327 59.2099355,49.4114382 58.2353232,49.4114382 L51.1764962,49.4114382 C50.2018839,49.4114382 49.4117894,50.2015327 49.4117894,51.176145 L49.4117894,54.7055585 C49.4117894,55.6801708 50.2018839,56.4702653 51.1764962,56.4702653 Z M35.2941353,56.4702653 L42.3529624,56.4702653 C43.3275746,56.4702653 44.1176691,55.6801708 44.1176691,54.7055585 L44.1176691,51.176145 C44.1176691,50.2015327 43.3275746,49.4114382 42.3529624,49.4114382 L35.2941353,49.4114382 C34.319523,49.4114382 33.5294285,50.2015327 33.5294285,51.176145 L33.5294285,54.7055585 C33.5294285,55.6801708 34.319523,56.4702653 35.2941353,56.4702653 Z M56.6964989,19.0874231 C56.007381,18.3985134 54.8903216,18.3985134 54.2012036,19.087423 L45.882376,27.4062507 L45.882376,19.4117761 C45.882376,18.4371568 45.0922885,17.6470693 44.1176692,17.6470693 L33.5294286,17.6470693 C32.5548092,17.6470694 31.7647218,18.4371568 31.7647218,19.4117761 L31.7647218,30.0000167 C31.7647219,30.9746363 32.5548092,31.7647237 33.5294285,31.7647237 L41.5239031,31.7647237 L34.4650761,38.8235508 L24.7058947,38.8235508 C23.7312753,38.8235508 22.9411879,39.6136382 22.9411879,40.5882575 L22.9411879,45.8823778 L26.4706014,45.8823778 L26.4706014,42.3529643 L30.9356624,42.3529643 L23.8768354,49.4117914 L19.4117743,49.4117914 C18.4371549,49.4117914 17.6470675,50.2018788 17.6470675,51.1764981 L17.6470675,54.7059117 C17.6504049,54.9674302 17.7129076,55.2248042 17.8298886,55.4587302 L16.4456526,56.8429662 C15.7446193,57.5200453 15.7252005,58.6372282 16.4022825,59.3382615 C17.0793616,60.0392948 18.1965445,60.0587136 18.8975778,59.3816316 C18.9122847,59.3674273 18.9267436,59.3529684 18.940948,59.3382615 L56.6964963,21.5830662 C57.3856425,20.8939094 57.3856425,19.7765747 56.6964963,19.0874179 Z', id: 'Combined-Shape' })))))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedChatDown = function (_a) {
        var _b = _a.image, image = _b === void 0 ? React__default['default'].createElement(ConnectionErrorIcon, null) : _b, text = _a.text, _c = _a.type, type = _c === void 0 ? 'Error' : _c;
        var t = useTranslationContext('ChatDown').t;
        return (React__default['default'].createElement("div", { className: 'str-chat__down' },
            React__default['default'].createElement("div", { className: 'str-chat__down-main' },
                typeof image === 'string' ? (React__default['default'].createElement("img", { alt: 'Connection error', "data-testid": 'chatdown-img', src: image })) : (image),
                React__default['default'].createElement("h1", null, type),
                React__default['default'].createElement("h3", { "aria-live": 'assertive' }, text || t('Error connecting to chat, refresh the page to try again.')))));
    };
    /**
     * A simple indicator that chat functionality isn't available, triggered when the Chat API is unavailable or your network isn't working.
     */
    var ChatDown = React__default['default'].memo(UnMemoizedChatDown);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * A preview list of channels, allowing you to select the channel you want to open
     */
    var ChannelListMessenger = function (props) {
        var children = props.children, _a = props.error, error = _a === void 0 ? null : _a, loading = props.loading, _b = props.LoadingErrorIndicator, LoadingErrorIndicator = _b === void 0 ? ChatDown : _b, _c = props.LoadingIndicator, LoadingIndicator = _c === void 0 ? LoadingChannels : _c;
        if (error) {
            return React__default['default'].createElement(LoadingErrorIndicator, { type: 'Connection Error' });
        }
        if (loading) {
            return React__default['default'].createElement(LoadingIndicator, null);
        }
        return (React__default['default'].createElement("div", { className: 'str-chat__channel-list-messenger' },
            React__default['default'].createElement("div", { "aria-label": 'Channel list', className: 'str-chat__channel-list-messenger__main', role: 'listbox' }, children)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChannelDeletedListener = function (setChannels, customHandler) {
        var client = useChatContext('useChannelDeletedListener').client;
        React.useEffect(function () {
            var handleEvent = function (event) {
                if (customHandler && typeof customHandler === 'function') {
                    customHandler(setChannels, event);
                }
                else {
                    setChannels(function (channels) {
                        var channelIndex = channels.findIndex(function (channel) { return channel.cid === event.cid; });
                        if (channelIndex < 0)
                            return __spreadArray([], channels);
                        // Remove the deleted channel from the list.s
                        channels.splice(channelIndex, 1);
                        return __spreadArray([], channels);
                    });
                }
            };
            client.on('channel.deleted', handleEvent);
            return function () {
                client.off('channel.deleted', handleEvent);
            };
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChannelHiddenListener = function (setChannels, customHandler) {
        var client = useChatContext('useChannelHiddenListener').client;
        React.useEffect(function () {
            var handleEvent = function (event) {
                if (customHandler && typeof customHandler === 'function') {
                    customHandler(setChannels, event);
                }
                else {
                    setChannels(function (channels) {
                        var channelIndex = channels.findIndex(function (channel) { return channel.cid === event.cid; });
                        if (channelIndex < 0)
                            return __spreadArray([], channels);
                        // Remove the hidden channel from the list.s
                        channels.splice(channelIndex, 1);
                        return __spreadArray([], channels);
                    });
                }
            };
            client.on('channel.hidden', handleEvent);
            return function () {
                client.off('channel.hidden', handleEvent);
            };
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChannelTruncatedListener = function (setChannels, customHandler, forceUpdate) {
        var client = useChatContext('useChannelTruncatedListener').client;
        React.useEffect(function () {
            var handleEvent = function (event) {
                setChannels(function (channels) { return __spreadArray([], channels); });
                if (customHandler && typeof customHandler === 'function') {
                    customHandler(setChannels, event);
                }
                if (forceUpdate) {
                    forceUpdate();
                }
            };
            client.on('channel.truncated', handleEvent);
            return function () {
                client.off('channel.truncated', handleEvent);
            };
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChannelUpdatedListener = function (setChannels, customHandler, forceUpdate) {
        var client = useChatContext('useChannelUpdatedListener').client;
        React.useEffect(function () {
            var handleEvent = function (event) {
                setChannels(function (channels) {
                    var _a, _b, _c, _d, _e, _f;
                    var channelIndex = channels.findIndex(function (channel) { var _a; return channel.cid === ((_a = event.channel) === null || _a === void 0 ? void 0 : _a.cid); });
                    if (channelIndex > -1 && event.channel) {
                        var newChannels = channels;
                        newChannels[channelIndex].data = __assign$2(__assign$2({}, event.channel), { hidden: (_b = (_a = event.channel) === null || _a === void 0 ? void 0 : _a.hidden) !== null && _b !== void 0 ? _b : (_c = newChannels[channelIndex].data) === null || _c === void 0 ? void 0 : _c.hidden, own_capabilities: (_e = (_d = event.channel) === null || _d === void 0 ? void 0 : _d.own_capabilities) !== null && _e !== void 0 ? _e : (_f = newChannels[channelIndex].data) === null || _f === void 0 ? void 0 : _f.own_capabilities });
                        return __spreadArray([], newChannels);
                    }
                    return channels;
                });
                if (forceUpdate) {
                    forceUpdate();
                }
                if (customHandler && typeof customHandler === 'function') {
                    customHandler(setChannels, event);
                }
            };
            client.on('channel.updated', handleEvent);
            return function () {
                client.off('channel.updated', handleEvent);
            };
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var getChannel = function (client, type, id) { return __awaiter$1(void 0, void 0, void 0, function () {
        var channel;
        return __generator$1(this, function (_a) {
            switch (_a.label) {
                case 0:
                    channel = client.channel(type, id);
                    return [4 /*yield*/, channel.watch()];
                case 1:
                    _a.sent();
                    return [2 /*return*/, channel];
            }
        });
    }); };
    var MAX_QUERY_CHANNELS_LIMIT = 30;
    var moveChannelUp = function (_a) {
        var activeChannel = _a.activeChannel, channels = _a.channels, cid = _a.cid;
        // get index of channel to move up
        var channelIndex = channels.findIndex(function (channel) { return channel.cid === cid; });
        if (!activeChannel && channelIndex <= 0)
            return channels;
        // get channel to move up
        var channel = activeChannel || channels[channelIndex];
        return lodash_uniqby(__spreadArray([channel], channels), 'cid');
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChannelVisibleListener = function (setChannels, customHandler) {
        var client = useChatContext('useChannelVisibleListener').client;
        React.useEffect(function () {
            var handleEvent = function (event) { return __awaiter$1(void 0, void 0, void 0, function () {
                var channel_1;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(customHandler && typeof customHandler === 'function')) return [3 /*break*/, 1];
                            customHandler(setChannels, event);
                            return [3 /*break*/, 3];
                        case 1:
                            if (!(event.type && event.channel_type && event.channel_id)) return [3 /*break*/, 3];
                            return [4 /*yield*/, getChannel(client, event.channel_type, event.channel_id)];
                        case 2:
                            channel_1 = _a.sent();
                            setChannels(function (channels) { return lodash_uniqby(__spreadArray([channel_1], channels), 'cid'); });
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); };
            client.on('channel.visible', handleEvent);
            return function () {
                client.off('channel.visible', handleEvent);
            };
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useConnectionRecoveredListener = function (forceUpdate) {
        var client = useChatContext('useConnectionRecoveredListener').client;
        React.useEffect(function () {
            var handleEvent = function () {
                if (forceUpdate) {
                    forceUpdate();
                }
            };
            client.on('connection.recovered', handleEvent);
            return function () {
                client.off('connection.recovered', handleEvent);
            };
        }, []);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useMessageNewListener = function (setChannels, lockChannelOrder, allowNewMessagesFromUnfilteredChannels) {
        if (lockChannelOrder === void 0) { lockChannelOrder = false; }
        if (allowNewMessagesFromUnfilteredChannels === void 0) { allowNewMessagesFromUnfilteredChannels = true; }
        var client = useChatContext('useMessageNewListener').client;
        React.useEffect(function () {
            var handleEvent = function (event) {
                setChannels(function (channels) {
                    var channelInList = channels.filter(function (channel) { return channel.cid === event.cid; }).length > 0;
                    if (!channelInList && allowNewMessagesFromUnfilteredChannels && event.channel_type) {
                        var channel = client.channel(event.channel_type, event.channel_id);
                        return lodash_uniqby(__spreadArray([channel], channels), 'cid');
                    }
                    if (!lockChannelOrder)
                        return moveChannelUp({ channels: channels, cid: event.cid || '' });
                    return channels;
                });
            };
            client.on('message.new', handleEvent);
            return function () {
                client.off('message.new', handleEvent);
            };
        }, [lockChannelOrder]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useMobileNavigation = function (channelListRef, navOpen, closeMobileNav) {
        React.useEffect(function () {
            var handleClickOutside = function (event) {
                if (closeMobileNav &&
                    channelListRef.current &&
                    !channelListRef.current.contains(event.target) &&
                    navOpen) {
                    closeMobileNav();
                }
            };
            document.addEventListener('click', handleClickOutside);
            return function () {
                document.removeEventListener('click', handleClickOutside);
            };
        }, [channelListRef, closeMobileNav, navOpen]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useNotificationAddedToChannelListener = function (setChannels, customHandler, allowNewMessagesFromUnfilteredChannels) {
        if (allowNewMessagesFromUnfilteredChannels === void 0) { allowNewMessagesFromUnfilteredChannels = true; }
        var client = useChatContext('useNotificationAddedToChannelListener').client;
        React.useEffect(function () {
            var handleEvent = function (event) { return __awaiter$1(void 0, void 0, void 0, function () {
                var channel_1;
                var _a;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(customHandler && typeof customHandler === 'function')) return [3 /*break*/, 1];
                            customHandler(setChannels, event);
                            return [3 /*break*/, 3];
                        case 1:
                            if (!(allowNewMessagesFromUnfilteredChannels && ((_a = event.channel) === null || _a === void 0 ? void 0 : _a.type))) return [3 /*break*/, 3];
                            return [4 /*yield*/, getChannel(client, event.channel.type, event.channel.id)];
                        case 2:
                            channel_1 = _b.sent();
                            setChannels(function (channels) { return lodash_uniqby(__spreadArray([channel_1], channels), 'cid'); });
                            _b.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); };
            client.on('notification.added_to_channel', handleEvent);
            return function () {
                client.off('notification.added_to_channel', handleEvent);
            };
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useNotificationMessageNewListener = function (setChannels, customHandler, allowNewMessagesFromUnfilteredChannels) {
        if (allowNewMessagesFromUnfilteredChannels === void 0) { allowNewMessagesFromUnfilteredChannels = true; }
        var client = useChatContext('useNotificationMessageNewListener').client;
        React.useEffect(function () {
            var handleEvent = function (event) { return __awaiter$1(void 0, void 0, void 0, function () {
                var channel_1;
                var _a;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(customHandler && typeof customHandler === 'function')) return [3 /*break*/, 1];
                            customHandler(setChannels, event);
                            return [3 /*break*/, 3];
                        case 1:
                            if (!(allowNewMessagesFromUnfilteredChannels && ((_a = event.channel) === null || _a === void 0 ? void 0 : _a.type))) return [3 /*break*/, 3];
                            return [4 /*yield*/, getChannel(client, event.channel.type, event.channel.id)];
                        case 2:
                            channel_1 = _b.sent();
                            setChannels(function (channels) { return lodash_uniqby(__spreadArray([channel_1], channels), 'cid'); });
                            _b.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); };
            client.on('notification.message_new', handleEvent);
            return function () {
                client.off('notification.message_new', handleEvent);
            };
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useNotificationRemovedFromChannelListener = function (setChannels, customHandler) {
        var client = useChatContext('useNotificationRemovedFromChannelListener').client;
        React.useEffect(function () {
            var handleEvent = function (event) {
                if (customHandler && typeof customHandler === 'function') {
                    customHandler(setChannels, event);
                }
                else {
                    setChannels(function (channels) { return channels.filter(function (channel) { var _a; return channel.cid !== ((_a = event.channel) === null || _a === void 0 ? void 0 : _a.cid); }); });
                }
            };
            client.on('notification.removed_from_channel', handleEvent);
            return function () {
                client.off('notification.removed_from_channel', handleEvent);
            };
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var usePaginatedChannels = function (client, filters, sort, options, activeChannelHandler) {
        var _a = useChatContext('usePaginatedChannels').channelsQueryState, setError = _a.setError, setQueryInProgress = _a.setQueryInProgress;
        var _b = React.useState([]), channels = _b[0], setChannels = _b[1];
        var _c = React.useState(true), hasNextPage = _c[0], setHasNextPage = _c[1];
        var filterString = React.useMemo(function () { return JSON.stringify(filters); }, [filters]);
        var sortString = React.useMemo(function () { return JSON.stringify(sort); }, [sort]);
        var queryChannels = function (queryType) { return __awaiter$1(void 0, void 0, void 0, function () {
            var offset, newOptions, channelQueryResponse, newChannels, err_1;
            var _a;
            return __generator$1(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        setError(null);
                        if (queryType === 'reload') {
                            setChannels([]);
                            setQueryInProgress('reload');
                        }
                        else {
                            setQueryInProgress('load-more');
                        }
                        offset = queryType === 'reload' ? 0 : channels.length;
                        newOptions = __assign$2({ limit: (_a = options === null || options === void 0 ? void 0 : options.limit) !== null && _a !== void 0 ? _a : MAX_QUERY_CHANNELS_LIMIT, offset: offset }, options);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.queryChannels(filters, sort || {}, newOptions)];
                    case 2:
                        channelQueryResponse = _b.sent();
                        newChannels = queryType === 'reload' ? channelQueryResponse : __spreadArray(__spreadArray([], channels), channelQueryResponse);
                        setChannels(newChannels);
                        setHasNextPage(channelQueryResponse.length >= newOptions.limit);
                        // Set active channel only on load of first page
                        if (!offset && activeChannelHandler) {
                            activeChannelHandler(newChannels, setChannels);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _b.sent();
                        console.warn(err_1);
                        setError(err_1);
                        return [3 /*break*/, 4];
                    case 4:
                        setQueryInProgress(null);
                        return [2 /*return*/];
                }
            });
        }); };
        var loadNextPage = function () {
            queryChannels();
        };
        React.useEffect(function () {
            queryChannels('reload');
        }, [filterString, sortString]);
        return {
            channels: channels,
            hasNextPage: hasNextPage,
            loadNextPage: loadNextPage,
            setChannels: setChannels,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useUserPresenceChangedListener = function (setChannels) {
        var client = useChatContext('useUserPresenceChangedListener').client;
        React.useEffect(function () {
            var handleEvent = function (event) {
                setChannels(function (channels) {
                    var newChannels = channels.map(function (channel) {
                        var _a;
                        if (!((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) || !channel.state.members[event.user.id]) {
                            return channel;
                        }
                        var newChannel = channel; // dumb workaround for linter
                        newChannel.state.members[event.user.id].user = event.user;
                        return newChannel;
                    });
                    return __spreadArray([], newChannels);
                });
            };
            client.on('user.presence.changed', handleEvent);
            return function () {
                client.off('user.presence.changed', handleEvent);
            };
        }, []);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedChannelPreviewMessenger = function (props) {
        var _a, _b;
        var active = props.active, _c = props.Avatar, Avatar$1 = _c === void 0 ? Avatar : _c, channel = props.channel, displayImage = props.displayImage, displayTitle = props.displayTitle, latestMessage = props.latestMessage, setActiveChannel = props.setActiveChannel, unread = props.unread, watchers = props.watchers;
        var channelPreviewButton = React.useRef(null);
        var activeClass = active ? 'str-chat__channel-preview-messenger--active' : '';
        var unreadClass = unread && unread >= 1 ? 'str-chat__channel-preview-messenger--unread' : '';
        var avatarName = displayTitle || ((_b = (_a = channel.state.messages[channel.state.messages.length - 1]) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.id);
        var onSelectChannel = function () {
            if (setActiveChannel) {
                setActiveChannel(channel, watchers);
            }
            if (channelPreviewButton === null || channelPreviewButton === void 0 ? void 0 : channelPreviewButton.current) {
                channelPreviewButton.current.blur();
            }
        };
        return (React__default['default'].createElement("button", { "aria-label": "Select Channel: " + (displayTitle || ''), "aria-selected": active, className: "str-chat__channel-preview-messenger " + unreadClass + " " + activeClass, "data-testid": 'channel-preview-button', onClick: onSelectChannel, ref: channelPreviewButton, role: 'option' },
            React__default['default'].createElement("div", { className: 'str-chat__channel-preview-messenger--left' },
                React__default['default'].createElement(Avatar$1, { image: displayImage, name: avatarName, size: 40 })),
            React__default['default'].createElement("div", { className: 'str-chat__channel-preview-messenger--right' },
                React__default['default'].createElement("div", { className: 'str-chat__channel-preview-messenger--name' },
                    React__default['default'].createElement("span", null, displayTitle)),
                React__default['default'].createElement("div", { className: 'str-chat__channel-preview-messenger--last-message' }, latestMessage))));
    };
    /**
     * Used as preview component for channel item in [ChannelList](#channellist) component.
     * Its best suited for messenger type chat.
     */
    var ChannelPreviewMessenger = React__default['default'].memo(UnMemoizedChannelPreviewMessenger);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useIsChannelMuted = function (channel) {
        var client = useChatContext('useIsChannelMuted').client;
        var _a = React.useState(channel.muteStatus()), muted = _a[0], setMuted = _a[1];
        React.useEffect(function () {
            var handleEvent = function () { return setMuted(channel.muteStatus()); };
            client.on('notification.channel_mutes_updated', handleEvent);
            return function () { return client.off('notification.channel_mutes_updated', handleEvent); };
        }, [muted]);
        return muted;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var renderPreviewText = function (text) { return React__default['default'].createElement(withHtml, { source: text }); };
    var getLatestMessagePreview = function (channel, t, userLanguage) {
        var _a, _b;
        if (userLanguage === void 0) { userLanguage = 'en'; }
        var latestMessage = channel.state.messages[channel.state.messages.length - 1];
        var previewTextToRender = ((_a = latestMessage === null || latestMessage === void 0 ? void 0 : latestMessage.i18n) === null || _a === void 0 ? void 0 : _a[userLanguage + "_text"]) ||
            (latestMessage === null || latestMessage === void 0 ? void 0 : latestMessage.text);
        if (!latestMessage) {
            return t('Nothing yet...');
        }
        if (latestMessage.deleted_at) {
            return t('Message deleted');
        }
        if (previewTextToRender) {
            var renderedText = renderPreviewText(previewTextToRender);
            return renderedText;
        }
        if (latestMessage.command) {
            return "/" + latestMessage.command;
        }
        if ((_b = latestMessage.attachments) === null || _b === void 0 ? void 0 : _b.length) {
            return t('🏙 Attachment...');
        }
        return t('Empty message...');
    };
    var getDisplayTitle = function (channel, currentUser) {
        var _a, _b;
        var title = (_a = channel.data) === null || _a === void 0 ? void 0 : _a.name;
        var members = Object.values(channel.state.members);
        if (!title && members.length === 2) {
            var otherMember = members.find(function (member) { var _a; return ((_a = member.user) === null || _a === void 0 ? void 0 : _a.id) !== (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id); });
            if ((_b = otherMember === null || otherMember === void 0 ? void 0 : otherMember.user) === null || _b === void 0 ? void 0 : _b.name) {
                title = otherMember.user.name;
            }
        }
        return title;
    };
    var getDisplayImage = function (channel, currentUser) {
        var _a, _b;
        var image = (_a = channel.data) === null || _a === void 0 ? void 0 : _a.image;
        var members = Object.values(channel.state.members);
        if (!image && members.length === 2) {
            var otherMember = members.find(function (member) { var _a; return ((_a = member.user) === null || _a === void 0 ? void 0 : _a.id) !== (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id); });
            if ((_b = otherMember === null || otherMember === void 0 ? void 0 : otherMember.user) === null || _b === void 0 ? void 0 : _b.image) {
                image = otherMember.user.image;
            }
        }
        return image;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ChannelPreview = function (props) {
        var channel = props.channel, _a = props.Preview, Preview = _a === void 0 ? ChannelPreviewMessenger : _a, channelUpdateCount = props.channelUpdateCount;
        var _b = useChatContext('ChannelPreview'), activeChannel = _b.channel, client = _b.client, setActiveChannel = _b.setActiveChannel;
        var _c = useTranslationContext('ChannelPreview'), t = _c.t, userLanguage = _c.userLanguage;
        var _d = React.useState(getDisplayTitle(channel, client.user)), displayTitle = _d[0], setDisplayTitle = _d[1];
        var _e = React.useState(getDisplayImage(channel, client.user)), displayImage = _e[0], setDisplayImage = _e[1];
        var _f = React.useState(channel.state.messages[channel.state.messages.length - 1]), lastMessage = _f[0], setLastMessage = _f[1];
        var _g = React.useState(0), unread = _g[0], setUnread = _g[1];
        var isActive = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid) === channel.cid;
        var muted = useIsChannelMuted(channel).muted;
        React.useEffect(function () {
            var handleEvent = function (event) {
                if (!event.cid)
                    return setUnread(0);
                if (channel.cid === event.cid)
                    setUnread(0);
            };
            client.on('notification.mark_read', handleEvent);
            return function () { return client.off('notification.mark_read', handleEvent); };
        }, []);
        var refreshUnreadCount = React.useCallback(function () {
            if (isActive || muted) {
                setUnread(0);
            }
            else {
                setUnread(channel.countUnread());
            }
        }, [channel, isActive, muted]);
        React.useEffect(function () {
            refreshUnreadCount();
            var handleEvent = function (event) {
                if (event.message)
                    setLastMessage(event.message);
                refreshUnreadCount();
            };
            channel.on('message.new', handleEvent);
            channel.on('message.updated', handleEvent);
            channel.on('message.deleted', handleEvent);
            return function () {
                channel.off('message.new', handleEvent);
                channel.off('message.updated', handleEvent);
                channel.off('message.deleted', handleEvent);
            };
        }, [refreshUnreadCount, channelUpdateCount]);
        React.useEffect(function () {
            var handleEvent = function () {
                setDisplayTitle(function (displayTitle) {
                    var newDisplayTitle = getDisplayTitle(channel, client.user);
                    return displayTitle !== newDisplayTitle ? newDisplayTitle : displayTitle;
                });
                setDisplayImage(function (displayImage) {
                    var newDisplayImage = getDisplayImage(channel, client.user);
                    return displayImage !== newDisplayImage ? newDisplayImage : displayImage;
                });
            };
            client.on('user.updated', handleEvent);
            return function () {
                client.off('user.updated', handleEvent);
            };
        }, []);
        if (!Preview)
            return null;
        var latestMessage = getLatestMessagePreview(channel, t, userLanguage);
        return (React__default['default'].createElement(Preview, __assign$2({}, props, { active: isActive, displayImage: displayImage, displayTitle: displayTitle, lastMessage: lastMessage, latestMessage: latestMessage, setActiveChannel: setActiveChannel, unread: unread })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var SearchInput = function (props) {
        var channelSearchParams = props.channelSearchParams, inputRef = props.inputRef, onSearch = props.onSearch, placeholder = props.placeholder, query = props.query, searchFunction = props.searchFunction;
        var t = useTranslationContext('SearchInput').t;
        return (React__default['default'].createElement("input", { className: 'str-chat__channel-search-input', onChange: function (event) {
                return searchFunction ? searchFunction(channelSearchParams, event) : onSearch(event);
            }, placeholder: placeholder !== null && placeholder !== void 0 ? placeholder : t('Search'), ref: inputRef, type: 'text', value: query }));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var isChannel = function (output) { return output.cid != null; };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DefaultDropdownContainer = function (props) {
        var focusedUser = props.focusedUser, results = props.results, _a = props.SearchResultItem, SearchResultItem = _a === void 0 ? DefaultSearchResultItem : _a, selectResult = props.selectResult;
        return (React__default['default'].createElement(React__default['default'].Fragment, null, results.map(function (result, index) { return (React__default['default'].createElement(SearchResultItem, { focusedUser: focusedUser, index: index, key: index, result: result, selectResult: selectResult })); })));
    };
    var DefaultSearchResultItem = function (props) {
        var _a, _b;
        var focusedUser = props.focusedUser, index = props.index, result = props.result, selectResult = props.selectResult;
        var focused = focusedUser === index;
        if (isChannel(result)) {
            var channel_1 = result;
            return (React__default['default'].createElement("button", { "aria-label": "Select Channel: " + (((_a = channel_1.data) === null || _a === void 0 ? void 0 : _a.name) || ''), className: "str-chat__channel-search-result " + (focused ? 'focused' : ''), onClick: function () { return selectResult(channel_1); } },
                React__default['default'].createElement("div", { className: 'result-hashtag' }, "#"),
                React__default['default'].createElement("p", { className: 'channel-search__result-text' }, (_b = channel_1.data) === null || _b === void 0 ? void 0 : _b.name)));
        }
        else {
            return (React__default['default'].createElement("button", { "aria-label": "Select User Channel: " + (result.name || ''), className: "str-chat__channel-search-result " + (focused ? 'focused' : ''), onClick: function () { return selectResult(result); } },
                React__default['default'].createElement(Avatar, { image: result.image, user: result }),
                result.name || result.id));
        }
    };
    var SearchResults = function (props) {
        var _a = props.DropdownContainer, DropdownContainer = _a === void 0 ? DefaultDropdownContainer : _a, popupResults = props.popupResults, results = props.results, searching = props.searching, SearchEmpty = props.SearchEmpty, SearchResultsHeader = props.SearchResultsHeader, SearchLoading = props.SearchLoading, _b = props.SearchResultItem, SearchResultItem = _b === void 0 ? DefaultSearchResultItem : _b, selectResult = props.selectResult;
        var t = useTranslationContext('SearchResults').t;
        var _c = React.useState(), focusedUser = _c[0], setFocusedUser = _c[1];
        var device = useBreakpoint().device;
        var containerStyle = popupResults && device === 'full' ? 'popup' : 'inline';
        var ResultsContainer = function (_a) {
            var children = _a.children;
            return (React__default['default'].createElement("div", { className: "str-chat__channel-search-container " + containerStyle }, children));
        };
        var handleKeyDown = React.useCallback(function (event) {
            if (event.key === 'ArrowUp') {
                setFocusedUser(function (prevFocused) {
                    if (prevFocused === undefined)
                        return 0;
                    return prevFocused === 0 ? results.length - 1 : prevFocused - 1;
                });
            }
            if (event.key === 'ArrowDown') {
                setFocusedUser(function (prevFocused) {
                    if (prevFocused === undefined)
                        return 0;
                    return prevFocused === results.length - 1 ? 0 : prevFocused + 1;
                });
            }
            if (event.key === 'Enter') {
                event.preventDefault();
                if (focusedUser !== undefined) {
                    selectResult(results[focusedUser]);
                    return setFocusedUser(undefined);
                }
            }
        }, [focusedUser]);
        React.useEffect(function () {
            document.addEventListener('keydown', handleKeyDown, false);
            return function () { return document.removeEventListener('keydown', handleKeyDown); };
        }, [handleKeyDown]);
        if (searching) {
            return (React__default['default'].createElement(ResultsContainer, null, SearchLoading ? (React__default['default'].createElement(SearchLoading, null)) : (React__default['default'].createElement("div", { className: 'str-chat__channel-search-container-searching' }, t('Searching...')))));
        }
        if (!results.length) {
            return (React__default['default'].createElement(ResultsContainer, null, SearchEmpty ? (React__default['default'].createElement(SearchEmpty, null)) : (React__default['default'].createElement("div", { "aria-live": 'polite', className: 'str-chat__channel-search-container-empty' }, t('No results found')))));
        }
        return (React__default['default'].createElement(ResultsContainer, null,
            SearchResultsHeader && React__default['default'].createElement(SearchResultsHeader, null),
            React__default['default'].createElement(DropdownContainer, { focusedUser: focusedUser, results: results, SearchResultItem: SearchResultItem, selectResult: selectResult })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedChannelSearch = function (props) {
        var _a = props.channelType, channelType = _a === void 0 ? 'messaging' : _a, DropdownContainer = props.DropdownContainer, onSelectResult = props.onSelectResult, placeholder = props.placeholder, _b = props.popupResults, popupResults = _b === void 0 ? false : _b, SearchEmpty = props.SearchEmpty, _c = props.searchForChannels, searchForChannels = _c === void 0 ? false : _c, searchFunction = props.searchFunction, _d = props.SearchInput, SearchInput$1 = _d === void 0 ? SearchInput : _d, SearchLoading = props.SearchLoading, searchQueryParams = props.searchQueryParams, SearchResultItem = props.SearchResultItem, SearchResultsHeader = props.SearchResultsHeader;
        var _e = useChatContext('ChannelSearch'), client = _e.client, setActiveChannel = _e.setActiveChannel;
        var _f = React.useState(''), query = _f[0], setQuery = _f[1];
        var _g = React.useState([]), results = _g[0], setResults = _g[1];
        var _h = React.useState(false), resultsOpen = _h[0], setResultsOpen = _h[1];
        var _j = React.useState(false), searching = _j[0], setSearching = _j[1];
        var inputRef = React.useRef(null);
        var clearState = function () {
            setQuery('');
            setResults([]);
            setResultsOpen(false);
            setSearching(false);
        };
        React.useEffect(function () {
            var clickListener = function (event) {
                var _a;
                if (resultsOpen && event.target instanceof HTMLElement) {
                    var isInputClick = (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target);
                    if (!isInputClick) {
                        clearState();
                    }
                }
            };
            document.addEventListener('click', clickListener);
            return function () { return document.removeEventListener('click', clickListener); };
        }, [resultsOpen]);
        var selectResult = function (result) { return __awaiter$1(void 0, void 0, void 0, function () {
            var newChannel;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!client.userID)
                            return [2 /*return*/];
                        if (!isChannel(result)) return [3 /*break*/, 1];
                        setActiveChannel(result);
                        return [3 /*break*/, 3];
                    case 1:
                        newChannel = client.channel(channelType, { members: [client.userID, result.id] });
                        return [4 /*yield*/, newChannel.watch()];
                    case 2:
                        _a.sent();
                        setActiveChannel(newChannel);
                        _a.label = 3;
                    case 3:
                        clearState();
                        return [2 /*return*/];
                }
            });
        }); };
        var getChannels = function (text) { return __awaiter$1(void 0, void 0, void 0, function () {
            var userResponse, channelResponse, _a, channels, users_1, users, error_1;
            var _b, _c, _d, _e, _f, _g;
            return __generator$1(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        if (!text || searching)
                            return [2 /*return*/];
                        setSearching(true);
                        _h.label = 1;
                    case 1:
                        _h.trys.push([1, 6, , 7]);
                        return [4 /*yield*/, client.queryUsers(__assign$2({ $or: [{ id: { $autocomplete: text } }, { name: { $autocomplete: text } }], id: { $ne: client.userID } }, (_b = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.userFilters) === null || _b === void 0 ? void 0 : _b.filters), __assign$2({ id: 1 }, (_c = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.userFilters) === null || _c === void 0 ? void 0 : _c.sort), __assign$2({ limit: 8 }, (_d = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.userFilters) === null || _d === void 0 ? void 0 : _d.options))];
                    case 2:
                        userResponse = _h.sent();
                        if (!searchForChannels) return [3 /*break*/, 4];
                        channelResponse = client.queryChannels(__assign$2({ name: { $autocomplete: text } }, (_e = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.channelFilters) === null || _e === void 0 ? void 0 : _e.filters), ((_f = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.channelFilters) === null || _f === void 0 ? void 0 : _f.sort) || {}, __assign$2({ limit: 5 }, (_g = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.channelFilters) === null || _g === void 0 ? void 0 : _g.options));
                        return [4 /*yield*/, Promise.all([channelResponse, userResponse])];
                    case 3:
                        _a = _h.sent(), channels = _a[0], users_1 = _a[1].users;
                        setResults(__spreadArray(__spreadArray([], channels), users_1));
                        setResultsOpen(true);
                        setSearching(false);
                        return [2 /*return*/];
                    case 4: return [4 /*yield*/, Promise.resolve(userResponse)];
                    case 5:
                        users = (_h.sent()).users;
                        setResults(users);
                        setResultsOpen(true);
                        return [3 /*break*/, 7];
                    case 6:
                        error_1 = _h.sent();
                        clearState();
                        console.error(error_1);
                        return [3 /*break*/, 7];
                    case 7:
                        setSearching(false);
                        return [2 /*return*/];
                }
            });
        }); };
        var getChannelsThrottled = lodash_throttle(getChannels, 200);
        var onSearch = function (event) {
            event.preventDefault();
            setQuery(event.target.value);
            getChannelsThrottled(event.target.value);
        };
        var channelSearchParams = {
            setQuery: setQuery,
            setResults: setResults,
            setResultsOpen: setResultsOpen,
            setSearching: setSearching,
        };
        return (React__default['default'].createElement("div", { className: 'str-chat__channel-search', "data-testid": 'channel-search' },
            React__default['default'].createElement(SearchInput$1, { channelSearchParams: channelSearchParams, inputRef: inputRef, onSearch: onSearch, placeholder: placeholder, query: query, searchFunction: searchFunction }),
            query && (React__default['default'].createElement(SearchResults, { DropdownContainer: DropdownContainer, popupResults: popupResults, results: results, SearchEmpty: SearchEmpty, searching: searching, SearchLoading: SearchLoading, SearchResultItem: SearchResultItem, SearchResultsHeader: SearchResultsHeader, selectResult: onSelectResult || selectResult }))));
    };
    /**
     * The ChannelSearch component makes a query users call and displays the results in a list.
     * Clicking on a list item will navigate you into a channel with the selected user. It can be used
     * on its own or added to the ChannelList component by setting the `showChannelSearch` prop to true.
     */
    var ChannelSearch = React__default['default'].memo(UnMemoizedChannelSearch);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedEmptyStateIndicator = function (props) {
        var listType = props.listType;
        var t = useTranslationContext('EmptyStateIndicator').t;
        if (listType === 'channel')
            return React__default['default'].createElement("p", { role: 'listitem' }, t('You have no channels currently'));
        if (listType === 'message')
            return null;
        return React__default['default'].createElement("p", null, "No items exist");
    };
    var EmptyStateIndicator = React__default['default'].memo(UnMemoizedEmptyStateIndicator);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedLoadMoreButton = function (props) {
        var _a = props.children, children = _a === void 0 ? 'Load more' : _a, onClick = props.onClick, refreshing = props.refreshing;
        return (React__default['default'].createElement("div", { className: 'str-chat__load-more-button' },
            React__default['default'].createElement("button", { "aria-label": 'Load More Channels', className: 'str-chat__load-more-button__button', "data-testid": 'load-more-button', disabled: refreshing, onClick: onClick }, refreshing ? React__default['default'].createElement(LoadingIndicator$1, null) : children)));
    };
    var LoadMoreButton = React__default['default'].memo(UnMemoizedLoadMoreButton);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedLoadMorePaginator = function (props) {
        var children = props.children, hasNextPage = props.hasNextPage, _a = props.LoadMoreButton, LoadMoreButton$1 = _a === void 0 ? LoadMoreButton : _a, loadNextPage = props.loadNextPage, refreshing = props.refreshing, reverse = props.reverse;
        return (React__default['default'].createElement(React__default['default'].Fragment, null,
            !reverse && children,
            hasNextPage && React__default['default'].createElement(LoadMoreButton$1, { onClick: loadNextPage, refreshing: refreshing }),
            reverse && children));
    };
    var LoadMorePaginator = React__default['default'].memo(UnMemoizedLoadMorePaginator);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DEFAULT_FILTERS = {};
    var DEFAULT_OPTIONS = {};
    var DEFAULT_SORT = {};
    var UnMemoizedChannelList = function (props) {
        var additionalChannelSearchProps = props.additionalChannelSearchProps, _a = props.Avatar, Avatar$1 = _a === void 0 ? Avatar : _a, allowNewMessagesFromUnfilteredChannels = props.allowNewMessagesFromUnfilteredChannels, channelRenderFilterFn = props.channelRenderFilterFn, _b = props.ChannelSearch, ChannelSearch$1 = _b === void 0 ? ChannelSearch : _b, customActiveChannel = props.customActiveChannel, _c = props.EmptyStateIndicator, EmptyStateIndicator$1 = _c === void 0 ? EmptyStateIndicator : _c, filters = props.filters, _d = props.LoadingErrorIndicator, LoadingErrorIndicator = _d === void 0 ? ChatDown : _d, _e = props.LoadingIndicator, LoadingIndicator = _e === void 0 ? LoadingChannels : _e, _f = props.List, List = _f === void 0 ? ChannelListMessenger : _f, lockChannelOrder = props.lockChannelOrder, onAddedToChannel = props.onAddedToChannel, onChannelDeleted = props.onChannelDeleted, onChannelHidden = props.onChannelHidden, onChannelTruncated = props.onChannelTruncated, onChannelUpdated = props.onChannelUpdated, onChannelVisible = props.onChannelVisible, onMessageNew = props.onMessageNew, onRemovedFromChannel = props.onRemovedFromChannel, options = props.options, _g = props.Paginator, Paginator = _g === void 0 ? LoadMorePaginator : _g, Preview = props.Preview, renderChannels = props.renderChannels, _h = props.sendChannelsToList, sendChannelsToList = _h === void 0 ? false : _h, _j = props.setActiveChannelOnMount, setActiveChannelOnMount = _j === void 0 ? true : _j, _k = props.showChannelSearch, showChannelSearch = _k === void 0 ? false : _k, _l = props.sort, sort = _l === void 0 ? DEFAULT_SORT : _l, _m = props.watchers, watchers = _m === void 0 ? {} : _m;
        var _o = useChatContext('ChannelList'), channel = _o.channel, channelsQueryState = _o.channelsQueryState, client = _o.client, closeMobileNav = _o.closeMobileNav, customClasses = _o.customClasses, _p = _o.navOpen, navOpen = _p === void 0 ? false : _p, setActiveChannel = _o.setActiveChannel, theme = _o.theme, useImageFlagEmojisOnWindows = _o.useImageFlagEmojisOnWindows;
        var channelListRef = React.useRef(null);
        var _q = React.useState(0), channelUpdateCount = _q[0], setChannelUpdateCount = _q[1];
        /**
         * Set a channel with id {customActiveChannel} as active and move it to the top of the list.
         * If customActiveChannel prop is absent, then set the first channel in list as active channel.
         */
        var activeChannelHandler = function (channels, setChannels) { return __awaiter$1(void 0, void 0, void 0, function () {
            var customActiveChannelObject, newChannels;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!channels.length || channels.length > ((options === null || options === void 0 ? void 0 : options.limit) || MAX_QUERY_CHANNELS_LIMIT)) {
                            return [2 /*return*/];
                        }
                        if (!customActiveChannel) return [3 /*break*/, 3];
                        customActiveChannelObject = channels.find(function (chan) { return chan.id === customActiveChannel; });
                        if (!!customActiveChannelObject) return [3 /*break*/, 2];
                        return [4 /*yield*/, client.queryChannels({ id: customActiveChannel })];
                    case 1:
                        //@ts-expect-error
                        customActiveChannelObject = (_a.sent())[0];
                        _a.label = 2;
                    case 2:
                        if (customActiveChannelObject) {
                            setActiveChannel(customActiveChannelObject, watchers);
                            newChannels = moveChannelUp({
                                activeChannel: customActiveChannelObject,
                                channels: channels,
                                cid: customActiveChannelObject.cid,
                            });
                            setChannels(newChannels);
                        }
                        return [2 /*return*/];
                    case 3:
                        if (setActiveChannelOnMount) {
                            setActiveChannel(channels[0], watchers);
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        /**
         * For some events, inner properties on the channel will update but the shallow comparison will not
         * force a re-render. Incrementing this dummy variable ensures the channel previews update.
         */
        var forceUpdate = function () { return setChannelUpdateCount(function (count) { return count + 1; }); };
        var _r = usePaginatedChannels(client, filters || DEFAULT_FILTERS, sort || DEFAULT_SORT, options || DEFAULT_OPTIONS, activeChannelHandler), channels = _r.channels, hasNextPage = _r.hasNextPage, loadNextPage = _r.loadNextPage, setChannels = _r.setChannels;
        var loadedChannels = channelRenderFilterFn ? channelRenderFilterFn(channels) : channels;
        useMobileNavigation(channelListRef, navOpen, closeMobileNav);
        useMessageNewListener(setChannels, lockChannelOrder, allowNewMessagesFromUnfilteredChannels);
        useNotificationMessageNewListener(setChannels, onMessageNew, allowNewMessagesFromUnfilteredChannels);
        useNotificationAddedToChannelListener(setChannels, onAddedToChannel, allowNewMessagesFromUnfilteredChannels);
        useNotificationRemovedFromChannelListener(setChannels, onRemovedFromChannel);
        useChannelDeletedListener(setChannels, onChannelDeleted);
        useChannelHiddenListener(setChannels, onChannelHidden);
        useChannelVisibleListener(setChannels, onChannelVisible);
        useChannelTruncatedListener(setChannels, onChannelTruncated, forceUpdate);
        useChannelUpdatedListener(setChannels, onChannelUpdated, forceUpdate);
        useConnectionRecoveredListener(forceUpdate);
        useUserPresenceChangedListener(setChannels);
        React.useEffect(function () {
            var handleEvent = function (event) {
                if (event.cid === (channel === null || channel === void 0 ? void 0 : channel.cid)) {
                    setActiveChannel();
                }
            };
            client.on('channel.deleted', handleEvent);
            client.on('channel.hidden', handleEvent);
            return function () {
                client.off('channel.deleted', handleEvent);
                client.off('channel.hidden', handleEvent);
            };
        }, [channel === null || channel === void 0 ? void 0 : channel.cid]);
        var renderChannel = function (item) {
            var previewProps = {
                activeChannel: channel,
                Avatar: Avatar$1,
                channel: item,
                // forces the update of preview component on channel update
                channelUpdateCount: channelUpdateCount,
                key: item.id,
                Preview: Preview,
                setActiveChannel: setActiveChannel,
                watchers: watchers,
            };
            return React__default['default'].createElement(ChannelPreview, __assign$2({}, previewProps));
        };
        var chatClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.chat) || 'str-chat';
        var channelListClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.channelList) || 'str-chat-channel-list';
        var navigationClass = navOpen ? 'str-chat-channel-list--open' : '';
        var windowsEmojiClass = useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/)
            ? 'str-chat--windows-flags'
            : '';
        return (React__default['default'].createElement(React__default['default'].Fragment, null,
            React__default['default'].createElement("div", { className: chatClass + " " + channelListClass + " " + theme + " " + navigationClass + " " + windowsEmojiClass, ref: channelListRef },
                showChannelSearch && React__default['default'].createElement(ChannelSearch$1, __assign$2({}, additionalChannelSearchProps)),
                React__default['default'].createElement(List, { error: channelsQueryState.error, loadedChannels: sendChannelsToList ? loadedChannels : undefined, loading: channelsQueryState.queryInProgress === 'reload', LoadingErrorIndicator: LoadingErrorIndicator, LoadingIndicator: LoadingIndicator, setChannels: setChannels }, !(loadedChannels === null || loadedChannels === void 0 ? void 0 : loadedChannels.length) ? (React__default['default'].createElement(EmptyStateIndicator$1, { listType: 'channel' })) : (React__default['default'].createElement(Paginator, { hasNextPage: hasNextPage, loadNextPage: loadNextPage, refreshing: channelsQueryState.queryInProgress === 'load-more' }, renderChannels
                    ? renderChannels(loadedChannels, renderChannel)
                    : loadedChannels.map(renderChannel)))))));
    };
    /**
     * Renders a preview list of Channels, allowing you to select the Channel you want to open
     */
    var ChannelList = React__default['default'].memo(UnMemoizedChannelList);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var version = '9.1.3';

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChat = function (_a) {
        var _b, _c;
        var client = _a.client, _d = _a.defaultLanguage, defaultLanguage = _d === void 0 ? 'en' : _d, i18nInstance = _a.i18nInstance, initialNavOpen = _a.initialNavOpen;
        var _e = React.useState({
            t: function (key) { return key; },
            tDateTimeParser: defaultDateTimeParser,
            userLanguage: 'en',
        }), translators = _e[0], setTranslators = _e[1];
        var _f = React.useState(), channel = _f[0], setChannel = _f[1];
        var _g = React.useState([]), mutes = _g[0], setMutes = _g[1];
        var _h = React.useState(initialNavOpen), navOpen = _h[0], setNavOpen = _h[1];
        var _j = React.useState({}), latestMessageDatesByChannels = _j[0], setLatestMessageDatesByChannels = _j[1];
        var clientMutes = ((_b = client.user) === null || _b === void 0 ? void 0 : _b.mutes) || [];
        var closeMobileNav = function () { return setNavOpen(false); };
        var openMobileNav = function () { return setTimeout(function () { return setNavOpen(true); }, 100); };
        var appSettings = React.useRef(null);
        var getAppSettings = function () {
            if (appSettings.current) {
                return appSettings.current;
            }
            appSettings.current = client.getAppSettings();
            return appSettings.current;
        };
        React.useEffect(function () {
            if (client) {
                var userAgent = client.getUserAgent();
                if (!userAgent.includes('stream-chat-react')) {
                    // result looks like: 'stream-chat-react-2.3.2-stream-chat-javascript-client-browser-2.2.2'
                    client.setUserAgent("stream-chat-react-" + version + "-" + userAgent);
                }
            }
        }, [client]);
        React.useEffect(function () {
            setMutes(clientMutes);
            var handleEvent = function (event) {
                var _a;
                setMutes(((_a = event.me) === null || _a === void 0 ? void 0 : _a.mutes) || []);
            };
            client.on('notification.mutes_updated', handleEvent);
            return function () { return client.off('notification.mutes_updated', handleEvent); };
        }, [clientMutes === null || clientMutes === void 0 ? void 0 : clientMutes.length]);
        React.useEffect(function () {
            var _a;
            var userLanguage = (_a = client.user) === null || _a === void 0 ? void 0 : _a.language;
            if (!userLanguage) {
                var browserLanguage = window.navigator.language.slice(0, 2); // just get language code, not country-specific version
                userLanguage = isLanguageSupported(browserLanguage) ? browserLanguage : defaultLanguage;
            }
            var streami18n = i18nInstance || new Streami18n({ language: userLanguage });
            streami18n.registerSetLanguageCallback(function (t) {
                return setTranslators(function (prevTranslator) { return (__assign$2(__assign$2({}, prevTranslator), { t: t })); });
            });
            streami18n.getTranslators().then(function (translator) {
                setTranslators(__assign$2(__assign$2({}, translator), { userLanguage: userLanguage || defaultLanguage }));
            });
        }, [i18nInstance]);
        var setActiveChannel = React.useCallback(function (activeChannel, watchers, event) {
            if (watchers === void 0) { watchers = {}; }
            return __awaiter$1(void 0, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (event && event.preventDefault)
                                event.preventDefault();
                            if (!(activeChannel && Object.keys(watchers).length)) return [3 /*break*/, 2];
                            return [4 /*yield*/, activeChannel.query({ watch: true, watchers: watchers })];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            setChannel(activeChannel);
                            closeMobileNav();
                            return [2 /*return*/];
                    }
                });
            });
        }, []);
        React.useEffect(function () {
            setLatestMessageDatesByChannels({});
        }, [(_c = client.user) === null || _c === void 0 ? void 0 : _c.id]);
        return {
            channel: channel,
            closeMobileNav: closeMobileNav,
            getAppSettings: getAppSettings,
            latestMessageDatesByChannels: latestMessageDatesByChannels,
            mutes: mutes,
            navOpen: navOpen,
            openMobileNav: openMobileNav,
            setActiveChannel: setActiveChannel,
            translators: translators,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useCreateChatContext = function (value) {
        var _a;
        var channel = value.channel, channelsQueryState = value.channelsQueryState, client = value.client, closeMobileNav = value.closeMobileNav, customClasses = value.customClasses, getAppSettings = value.getAppSettings, latestMessageDatesByChannels = value.latestMessageDatesByChannels, mutes = value.mutes, navOpen = value.navOpen, openMobileNav = value.openMobileNav, setActiveChannel = value.setActiveChannel, theme = value.theme, useImageFlagEmojisOnWindows = value.useImageFlagEmojisOnWindows;
        var channelCid = channel === null || channel === void 0 ? void 0 : channel.cid;
        var channelsQueryError = channelsQueryState.error;
        var channelsQueryInProgress = channelsQueryState.queryInProgress;
        var clientValues = "" + client.clientID + Object.keys(client.activeChannels).length + Object.keys(client.listeners).length + client.mutedChannels.length + "\n  " + ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);
        var mutedUsersLength = mutes.length;
        var chatContext = React.useMemo(function () { return ({
            channel: channel,
            channelsQueryState: channelsQueryState,
            client: client,
            closeMobileNav: closeMobileNav,
            customClasses: customClasses,
            getAppSettings: getAppSettings,
            latestMessageDatesByChannels: latestMessageDatesByChannels,
            mutes: mutes,
            navOpen: navOpen,
            openMobileNav: openMobileNav,
            setActiveChannel: setActiveChannel,
            theme: theme,
            useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows,
        }); }, [
            channelCid,
            channelsQueryError,
            channelsQueryInProgress,
            clientValues,
            getAppSettings,
            mutedUsersLength,
            navOpen,
        ]);
        return chatContext;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChannelsQueryState = function () {
        var _a = React.useState(null), error = _a[0], setError = _a[1];
        var _b = React.useState(null), queryInProgress = _b[0], setQueryInProgress = _b[1];
        return {
            error: error,
            queryInProgress: queryInProgress,
            setError: setError,
            setQueryInProgress: setQueryInProgress,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var darkModeTheme = {
        '--bg-gradient-end': '#101214',
        '--bg-gradient-start': '#070a0d',
        '--black': '#ffffff',
        '--blue-alice': '#00193d',
        '--border': '#141924',
        '--button-background': '#ffffff',
        '--button-text': '#005fff',
        '--grey': '#7a7a7a',
        '--grey-gainsboro': '#2d2f2f',
        '--grey-whisper': '#1c1e22',
        '--modal-shadow': '#000000',
        '--overlay': '#00000066',
        '--overlay-dark': '#ffffffcc',
        '--shadow-icon': '#00000080',
        '--targetedMessageBackground': '#302d22',
        '--transparent': 'transparent',
        '--white': '#101418',
        '--white-smoke': '#13151b',
        '--white-snow': '#070a0d',
    };
    var useCustomStyles = function (customStyles) {
        if (!customStyles)
            return;
        for (var _i = 0, _a = Object.entries(customStyles); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            document.documentElement.style.setProperty(key, value);
        }
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Wrapper component for a StreamChat application. Chat needs to be placed around any other chat components
     * as it provides the ChatContext.
     */
    var Chat = function (props) {
        var children = props.children, client = props.client, customClasses = props.customClasses, customStyles = props.customStyles, _a = props.darkMode, darkMode = _a === void 0 ? false : _a, defaultLanguage = props.defaultLanguage, i18nInstance = props.i18nInstance, _b = props.initialNavOpen, initialNavOpen = _b === void 0 ? true : _b, _c = props.theme, theme = _c === void 0 ? 'messaging light' : _c, _d = props.useImageFlagEmojisOnWindows, useImageFlagEmojisOnWindows = _d === void 0 ? false : _d;
        var _e = useChat({ client: client, defaultLanguage: defaultLanguage, i18nInstance: i18nInstance, initialNavOpen: initialNavOpen }), channel = _e.channel, closeMobileNav = _e.closeMobileNav, getAppSettings = _e.getAppSettings, latestMessageDatesByChannels = _e.latestMessageDatesByChannels, mutes = _e.mutes, navOpen = _e.navOpen, openMobileNav = _e.openMobileNav, setActiveChannel = _e.setActiveChannel, translators = _e.translators;
        var channelsQueryState = useChannelsQueryState();
        useCustomStyles(darkMode ? darkModeTheme : customStyles);
        var chatContextValue = useCreateChatContext({
            channel: channel,
            channelsQueryState: channelsQueryState,
            client: client,
            closeMobileNav: closeMobileNav,
            customClasses: customClasses,
            getAppSettings: getAppSettings,
            latestMessageDatesByChannels: latestMessageDatesByChannels,
            mutes: mutes,
            navOpen: navOpen,
            openMobileNav: openMobileNav,
            setActiveChannel: setActiveChannel,
            theme: theme,
            useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows,
        });
        if (!translators.t)
            return null;
        return (React__default['default'].createElement(ChatProvider, { value: chatContextValue },
            React__default['default'].createElement(TranslationProvider, { value: translators }, children)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedDateSeparator = function (props) {
        var messageCreatedAt = props.date, formatDate = props.formatDate, _a = props.position, position = _a === void 0 ? 'right' : _a, unread = props.unread;
        var _b = useTranslationContext('DateSeparator'), t = _b.t, tDateTimeParser = _b.tDateTimeParser;
        var formattedDate = getDateString({
            calendar: true,
            formatDate: formatDate,
            messageCreatedAt: messageCreatedAt,
            tDateTimeParser: tDateTimeParser,
        });
        return (React__default['default'].createElement("div", { className: 'str-chat__date-separator' },
            (position === 'right' || position === 'center') && (React__default['default'].createElement("hr", { className: 'str-chat__date-separator-line' })),
            React__default['default'].createElement("div", { className: 'str-chat__date-separator-date' }, unread ? t('New') + " - " + formattedDate : formattedDate),
            (position === 'left' || position === 'center') && (React__default['default'].createElement("hr", { className: 'str-chat__date-separator-line' }))));
    };
    /**
     * A simple date separator between messages.
     */
    var DateSeparator = React__default['default'].memo(UnMemoizedDateSeparator);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Component to display system and channel event messages
     */
    var UnMemoizedEventComponent = function (props) {
        var _a, _b, _c;
        var _d = props.Avatar, Avatar$1 = _d === void 0 ? Avatar : _d, message = props.message;
        var tDateTimeParser = useTranslationContext('EventComponent').tDateTimeParser;
        var _e = message.created_at, created_at = _e === void 0 ? '' : _e, event = message.event, text = message.text, type = message.type;
        var getDateOptions = { messageCreatedAt: created_at.toString(), tDateTimeParser: tDateTimeParser };
        if (type === 'system')
            return (React__default['default'].createElement("div", { className: 'str-chat__message--system' },
                React__default['default'].createElement("div", { className: 'str-chat__message--system__text' },
                    React__default['default'].createElement("div", { className: 'str-chat__message--system__line' }),
                    React__default['default'].createElement("p", null, text),
                    React__default['default'].createElement("div", { className: 'str-chat__message--system__line' })),
                React__default['default'].createElement("div", { className: 'str-chat__message--system__date' },
                    React__default['default'].createElement("strong", null,
                        getDateString(__assign$2(__assign$2({}, getDateOptions), { format: 'dddd' })),
                        " "),
                    "at ",
                    getDateString(__assign$2(__assign$2({}, getDateOptions), { format: 'hh:mm A' })))));
        if ((event === null || event === void 0 ? void 0 : event.type) === 'member.removed' || (event === null || event === void 0 ? void 0 : event.type) === 'member.added') {
            var name_1 = ((_a = event.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = event.user) === null || _b === void 0 ? void 0 : _b.id);
            var sentence = name_1 + " " + (event.type === 'member.added' ? 'has joined the chat' : 'was removed from the chat');
            return (React__default['default'].createElement("div", { className: 'str-chat__event-component__channel-event' },
                React__default['default'].createElement(Avatar$1, { image: (_c = event.user) === null || _c === void 0 ? void 0 : _c.image, name: name_1, user: event.user }),
                React__default['default'].createElement("div", { className: 'str-chat__event-component__channel-event__content' },
                    React__default['default'].createElement("em", { className: 'str-chat__event-component__channel-event__sentence' }, sentence),
                    React__default['default'].createElement("div", { className: 'str-chat__event-component__channel-event__date' }, getDateString(__assign$2(__assign$2({}, getDateOptions), { format: 'LT' }))))));
        }
        return null;
    };
    var EventComponent = React__default['default'].memo(UnMemoizedEventComponent);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Prevents Chrome hangups
     * See: https://stackoverflow.com/questions/47524205/random-high-content-download-time-in-chrome/47684257#47684257
     */
    var mousewheelListener = function (event) {
        if (event instanceof WheelEvent && event.deltaY === 1) {
            event.preventDefault();
        }
    };
    var InfiniteScroll = function (props) {
        var children = props.children, _a = props.element, element = _a === void 0 ? 'div' : _a, _b = props.hasMore, hasMore = _b === void 0 ? false : _b, _c = props.hasMoreNewer, hasMoreNewer = _c === void 0 ? false : _c, _d = props.initialLoad, initialLoad = _d === void 0 ? true : _d, _e = props.isLoading, isLoading = _e === void 0 ? false : _e, listenToScroll = props.listenToScroll, loader = props.loader, loadMore = props.loadMore, loadMoreNewer = props.loadMoreNewer, _f = props.threshold, threshold = _f === void 0 ? 250 : _f, _g = props.useCapture, useCapture = _g === void 0 ? false : _g, elementProps = __rest(props, ["children", "element", "hasMore", "hasMoreNewer", "initialLoad", "isLoading", "listenToScroll", "loader", "loadMore", "loadMoreNewer", "threshold", "useCapture"]);
        var scrollComponent = React.useRef();
        var scrollListener = React.useCallback(function () {
            var element = scrollComponent.current;
            if (!element || element.offsetParent === null) {
                return;
            }
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            var parentElement = element.parentElement;
            var offset = element.scrollHeight - parentElement.scrollTop - parentElement.clientHeight;
            var reverseOffset = parentElement.scrollTop;
            if (listenToScroll) {
                listenToScroll(offset, reverseOffset, threshold);
            }
            if (reverseOffset < Number(threshold) && typeof loadMore === 'function' && hasMore) {
                loadMore();
            }
            if (offset < Number(threshold) && typeof loadMoreNewer === 'function' && hasMoreNewer) {
                loadMoreNewer();
            }
        }, [hasMore, hasMoreNewer, threshold, listenToScroll, loadMore, loadMoreNewer]);
        React.useEffect(function () {
            var _a;
            var scrollElement = (_a = scrollComponent.current) === null || _a === void 0 ? void 0 : _a.parentNode;
            if (isLoading || !scrollElement) {
                return function () { return undefined; };
            }
            scrollElement.addEventListener('scroll', scrollListener, useCapture);
            scrollElement.addEventListener('resize', scrollListener, useCapture);
            return function () {
                scrollElement.removeEventListener('scroll', scrollListener, useCapture);
                scrollElement.removeEventListener('resize', scrollListener, useCapture);
            };
        }, [initialLoad, isLoading, scrollListener, useCapture]);
        React.useEffect(function () {
            var _a;
            var scrollElement = (_a = scrollComponent.current) === null || _a === void 0 ? void 0 : _a.parentNode;
            if (scrollElement) {
                scrollElement.addEventListener('wheel', mousewheelListener, { passive: false });
            }
            return function () {
                if (scrollElement) {
                    scrollElement.removeEventListener('wheel', mousewheelListener, useCapture);
                }
            };
        }, [useCapture]);
        var attributes = __assign$2(__assign$2({}, elementProps), { ref: function (element) {
                scrollComponent.current = element;
            } });
        var childrenArray = [loader, children];
        return React__default['default'].createElement(element, attributes, childrenArray);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var selectColor = function (number, dark) {
        var hue = number * 137.508; // use golden angle approximation
        return "hsl(" + hue + "," + (dark ? '50%' : '85%') + ", " + (dark ? '75%' : '55%') + ")";
    };
    var hashUserId = function (userId) {
        var hash = userId.split('').reduce(function (acc, c) {
            acc = (acc << 5) - acc + c.charCodeAt(0); // eslint-disable-line
            return acc & acc; // eslint-disable-line no-bitwise
        }, 0);
        return Math.abs(hash) / Math.pow(10, Math.ceil(Math.log10(Math.abs(hash) + 1)));
    };
    var getUserColor = function (theme, userId) {
        return selectColor(hashUserId(userId), theme.includes('dark'));
    };
    var UnMemoizedFixedHeightMessage = function (props) {
        var _a, _b, _c, _d;
        var propGroupedByUser = props.groupedByUser, propMessage = props.message;
        var theme = useChatContext('FixedHeightMessage').theme;
        var _e = useMessageContext('FixedHeightMessage'), contextGroupedByUser = _e.groupedByUser, contextMessage = _e.message;
        var _f = useComponentContext('FixedHeightMessage').MessageDeleted, MessageDeleted$1 = _f === void 0 ? MessageDeleted : _f;
        var userLanguage = useTranslationContext('FixedHeightMessage').userLanguage;
        var groupedByUser = propGroupedByUser !== undefined ? propGroupedByUser : contextGroupedByUser;
        var message = propMessage || contextMessage;
        var handleAction = useActionHandler(message);
        var handleDelete = useDeleteHandler(message);
        var role = useUserRole(message);
        var messageTextToRender = ((_a = message === null || message === void 0 ? void 0 : message.i18n) === null || _a === void 0 ? void 0 : _a[userLanguage + "_text"]) || (message === null || message === void 0 ? void 0 : message.text);
        var renderedText = React.useMemo(function () { return renderText(messageTextToRender, message.mentioned_users); }, [
            message.mentioned_users,
            messageTextToRender,
        ]);
        var userId = ((_b = message.user) === null || _b === void 0 ? void 0 : _b.id) || '';
        var userColor = React.useMemo(function () { return getUserColor(theme, userId); }, [userId, theme]);
        var messageActionsHandler = React.useCallback(function () { return getMessageActions(['delete'], { canDelete: role.canDelete }); }, [role]);
        var images = (_c = message === null || message === void 0 ? void 0 : message.attachments) === null || _c === void 0 ? void 0 : _c.filter(function (_a) {
            var type = _a.type;
            return type === 'image';
        });
        return (React__default['default'].createElement("div", { className: "str-chat__virtual-message__wrapper " + (role.isMyMessage ? 'str-chat__virtual-message__wrapper--me' : '') + " " + (groupedByUser ? 'str-chat__virtual-message__wrapper--group' : ''), key: message.id },
            message.user && (React__default['default'].createElement(Avatar, { image: message.user.image, name: message.user.name || message.user.id, shape: 'rounded', size: 38, user: message.user })),
            React__default['default'].createElement("div", { className: 'str-chat__virtual-message__content' },
                React__default['default'].createElement("div", { className: 'str-chat__virtual-message__meta' },
                    React__default['default'].createElement("div", { className: 'str-chat__virtual-message__author', style: { color: userColor } },
                        React__default['default'].createElement("strong", null, ((_d = message.user) === null || _d === void 0 ? void 0 : _d.name) || 'unknown'))),
                message.deleted_at || message.type === 'deleted' ? (React__default['default'].createElement(MessageDeleted$1, { message: message })) : (React__default['default'].createElement(React__default['default'].Fragment, null,
                    images && React__default['default'].createElement(Gallery, { images: images }),
                    React__default['default'].createElement("div", { className: 'str-chat__virtual-message__text', "data-testid": 'msg-text' },
                        renderedText,
                        message.mml && (React__default['default'].createElement(MML$1, { actionHandler: handleAction, align: 'left', source: message.mml })),
                        React__default['default'].createElement("div", { className: 'str-chat__virtual-message__data' },
                            React__default['default'].createElement(MessageActions, { customWrapperClass: 'str-chat__virtual-message__actions', getMessageActions: messageActionsHandler, handleDelete: handleDelete, message: message, mine: function () { return role.isMyMessage; } }),
                            React__default['default'].createElement("span", { className: 'str-chat__virtual-message__date' },
                                React__default['default'].createElement(MessageTimestamp, { customClass: 'str-chat__message-simple-timestamp', message: message })))))))));
    };
    /**
     * @deprecated - This UI component will be removed in the next major release.
     *
     * FixedHeightMessage - This component renders a single message.
     * It uses fixed height elements to make sure it works well in VirtualizedMessageList
     */
    var FixedHeightMessage = React__default['default'].memo(UnMemoizedFixedHeightMessage);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageWithContext = function (props) {
        var canPin = props.canPin, groupedByUser = props.groupedByUser, propMessage = props.Message, message = props.message, _a = props.messageActions, messageActions = _a === void 0 ? Object.keys(MESSAGE_ACTIONS) : _a, propOnUserClick = props.onUserClick, propOnUserHover = props.onUserHover, userRoles = props.userRoles;
        var contextMessage = useComponentContext('Message').Message;
        var actionsEnabled = message.type === 'regular' && message.status === 'received';
        var MessageUIComponent = propMessage || contextMessage;
        var _b = useEditHandler(), clearEdit = _b.clearEdit, editing = _b.editing, setEdit = _b.setEdit;
        var _c = useUserHandler(message, {
            onUserClickHandler: propOnUserClick,
            onUserHoverHandler: propOnUserHover,
        }), onUserClick = _c.onUserClick, onUserHover = _c.onUserHover;
        var canDelete = userRoles.canDelete, canEdit = userRoles.canEdit, canFlag = userRoles.canFlag, canMute = userRoles.canMute, canQuote = userRoles.canQuote, canReact = userRoles.canReact, canReply = userRoles.canReply, isMyMessage = userRoles.isMyMessage;
        var messageActionsHandler = React.useCallback(function () {
            return getMessageActions(messageActions, {
                canDelete: canDelete,
                canEdit: canEdit,
                canFlag: canFlag,
                canMute: canMute,
                canPin: canPin,
                canQuote: canQuote,
                canReact: canReact,
                canReply: canReply,
            });
        }, [canDelete, canEdit, canFlag, canMute, canPin, canQuote, canReact, canReply]);
        props.canPin; // eslint-disable-line @typescript-eslint/no-unused-vars
        props.messageActions; // eslint-disable-line @typescript-eslint/no-unused-vars
        props.onlySenderCanEdit; // eslint-disable-line @typescript-eslint/no-unused-vars
        props.onUserClick; // eslint-disable-line @typescript-eslint/no-unused-vars
        props.onUserHover; // eslint-disable-line @typescript-eslint/no-unused-vars
        props.userRoles; // eslint-disable-line @typescript-eslint/no-unused-vars
        var rest = __rest(props, ["canPin", "messageActions", "onlySenderCanEdit", "onUserClick", "onUserHover", "userRoles"]);
        var messageContextValue = __assign$2(__assign$2({}, rest), { actionsEnabled: actionsEnabled, clearEditingState: clearEdit, editing: editing, getMessageActions: messageActionsHandler, handleEdit: setEdit, isMyMessage: function () { return isMyMessage; }, onUserClick: onUserClick, onUserHover: onUserHover, setEditingState: setEdit });
        return (React__default['default'].createElement(MessageProvider, { value: messageContextValue },
            React__default['default'].createElement(MessageUIComponent, { groupedByUser: groupedByUser })));
    };
    var MemoizedMessage = React__default['default'].memo(MessageWithContext, areMessagePropsEqual);
    /**
     * The Message component is a context provider which implements all the logic required for rendering
     * an individual message. The actual UI of the message is delegated via the Message prop on Channel.
     */
    var Message = function (props) {
        var closeReactionSelectorOnClick = props.closeReactionSelectorOnClick, disableQuotedMessages = props.disableQuotedMessages, getDeleteMessageErrorNotification = props.getDeleteMessageErrorNotification, getFlagMessageErrorNotification = props.getFlagMessageErrorNotification, getFlagMessageSuccessNotification = props.getFlagMessageSuccessNotification, getMuteUserErrorNotification = props.getMuteUserErrorNotification, getMuteUserSuccessNotification = props.getMuteUserSuccessNotification, getPinMessageErrorNotification = props.getPinMessageErrorNotification, message = props.message, _a = props.onlySenderCanEdit, onlySenderCanEdit = _a === void 0 ? false : _a, propOnMentionsClick = props.onMentionsClick, propOnMentionsHover = props.onMentionsHover, propOpenThread = props.openThread, pinPermissions = props.pinPermissions, propRetrySendMessage = props.retrySendMessage;
        var addNotification = useChannelActionContext('Message').addNotification;
        var _b = useChannelStateContext('Message'), highlightedMessageId = _b.highlightedMessageId, mutes = _b.mutes;
        var reactionSelectorRef = React.useRef(null);
        var handleAction = useActionHandler(message);
        var handleOpenThread = useOpenThreadHandler(message, propOpenThread);
        var handleReaction = useReactionHandler(message);
        var handleRetry = useRetryHandler(propRetrySendMessage);
        var userRoles = useUserRole(message, onlySenderCanEdit, disableQuotedMessages);
        var handleDelete = useDeleteHandler(message, {
            getErrorNotification: getDeleteMessageErrorNotification,
            notify: addNotification,
        });
        var handleFlag = useFlagHandler(message, {
            getErrorNotification: getFlagMessageErrorNotification,
            getSuccessNotification: getFlagMessageSuccessNotification,
            notify: addNotification,
        });
        var handleMute = useMuteHandler(message, {
            getErrorNotification: getMuteUserErrorNotification,
            getSuccessNotification: getMuteUserSuccessNotification,
            notify: addNotification,
        });
        var _c = useMentionsHandler(message, {
            onMentionsClick: propOnMentionsClick,
            onMentionsHover: propOnMentionsHover,
        }), onMentionsClick = _c.onMentionsClick, onMentionsHover = _c.onMentionsHover;
        var _d = usePinHandler(message, pinPermissions, {
            getErrorNotification: getPinMessageErrorNotification,
            notify: addNotification,
        }), canPin = _d.canPin, handlePin = _d.handlePin;
        var _e = useReactionClick(message, reactionSelectorRef, undefined, closeReactionSelectorOnClick), isReactionEnabled = _e.isReactionEnabled, onReactionListClick = _e.onReactionListClick, showDetailedReactions = _e.showDetailedReactions;
        var highlighted = highlightedMessageId === message.id;
        return (React__default['default'].createElement(MemoizedMessage, { additionalMessageInputProps: props.additionalMessageInputProps, canPin: canPin, customMessageActions: props.customMessageActions, disableQuotedMessages: props.disableQuotedMessages, endOfGroup: props.endOfGroup, firstOfGroup: props.firstOfGroup, formatDate: props.formatDate, groupedByUser: props.groupedByUser, groupStyles: props.groupStyles, handleAction: handleAction, handleDelete: handleDelete, handleFlag: handleFlag, handleMute: handleMute, handleOpenThread: handleOpenThread, handlePin: handlePin, handleReaction: handleReaction, handleRetry: handleRetry, highlighted: highlighted, initialMessage: props.initialMessage, isReactionEnabled: isReactionEnabled, lastReceivedId: props.lastReceivedId, message: message, Message: props.Message, messageActions: props.messageActions, messageListRect: props.messageListRect, mutes: mutes, onMentionsClickMessage: onMentionsClick, onMentionsHoverMessage: onMentionsHover, onReactionListClick: onReactionListClick, onUserClick: props.onUserClick, onUserHover: props.onUserHover, pinPermissions: props.pinPermissions, reactionSelectorRef: reactionSelectorRef, readBy: props.readBy, renderText: props.renderText, showDetailedReactions: showDetailedReactions, threadList: props.threadList, unsafeHTML: props.unsafeHTML, userRoles: userRoles }));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageCommerceWithContext = function (props) {
        var _a, _b, _c, _d, _e, _f;
        var groupStyles = props.groupStyles, handleAction = props.handleAction, handleOpenThread = props.handleOpenThread, isMyMessage = props.isMyMessage, isReactionEnabled = props.isReactionEnabled, message = props.message, onUserClick = props.onUserClick, onUserHover = props.onUserHover, reactionSelectorRef = props.reactionSelectorRef, showDetailedReactions = props.showDetailedReactions, threadList = props.threadList;
        var _g = useComponentContext('MessageCommerce'), Attachment = _g.Attachment, _h = _g.Avatar, Avatar$1 = _h === void 0 ? Avatar : _h, _j = _g.MessageDeleted, MessageDeleted$1 = _j === void 0 ? MessageDeleted : _j, _k = _g.MessageRepliesCountButton, MessageRepliesCountButton$1 = _k === void 0 ? MessageRepliesCountButton : _k, _l = _g.MessageOptions, MessageOptions$1 = _l === void 0 ? MessageOptions : _l, _m = _g.MessageTimestamp, MessageTimestamp$1 = _m === void 0 ? MessageTimestamp : _m, _o = _g.ReactionSelector, ReactionSelector$1 = _o === void 0 ? ReactionSelector : _o, _p = _g.ReactionsList, ReactionsList$1 = _p === void 0 ? ReactionsList : _p;
        var hasAttachment = messageHasAttachments(message);
        var hasReactions = messageHasReactions(message);
        var firstGroupStyle = groupStyles ? groupStyles[0] : 'single';
        var messageClasses = "str-chat__message-commerce str-chat__message-commerce--" + (isMyMessage() ? 'right' : 'left');
        if (message.deleted_at) {
            return React__default['default'].createElement(MessageDeleted$1, { message: message });
        }
        if (message.customType === CUSTOM_MESSAGE_TYPE.date) {
            return null;
        }
        return (React__default['default'].createElement("div", { className: ("\n\t\t\t\t\t\t" + messageClasses + "\n\t\t\t\t\t\tstr-chat__message-commerce--" + message.type + "\n\t\t\t\t\t\t" + (message.text ? 'str-chat__message-commerce--has-text' : 'str-chat__message-commerce--has-no-text') + "\n\t\t\t\t\t\t" + (hasAttachment ? 'str-chat__message-commerce--has-attachment' : '') + "\n            " + (hasReactions && isReactionEnabled ? 'str-chat__message-commerce--with-reactions' : '') + "\n            " + ("str-chat__message-commerce--" + firstGroupStyle) + "\n            " + (message.pinned ? 'pinned-message' : '') + "\n\t\t\t\t\t").trim(), "data-testid": 'message-commerce-wrapper', key: message.id },
            (firstGroupStyle === 'bottom' || firstGroupStyle === 'single') && (React__default['default'].createElement(Avatar$1, { image: (_a = message.user) === null || _a === void 0 ? void 0 : _a.image, name: ((_b = message.user) === null || _b === void 0 ? void 0 : _b.name) || ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id), onClick: onUserClick, onMouseOver: onUserHover })),
            React__default['default'].createElement("div", { className: 'str-chat__message-commerce-inner' },
                React__default['default'].createElement(React__default['default'].Fragment, null,
                    React__default['default'].createElement(MessageOptions$1, { displayLeft: false, displayReplies: false, theme: 'commerce' }),
                    hasReactions && !showDetailedReactions && isReactionEnabled && React__default['default'].createElement(ReactionsList$1, null),
                    showDetailedReactions && isReactionEnabled && (React__default['default'].createElement(ReactionSelector$1, { ref: reactionSelectorRef }))),
                ((_d = message.attachments) === null || _d === void 0 ? void 0 : _d.length) ? (React__default['default'].createElement(Attachment, { actionHandler: handleAction, attachments: message.attachments })) : null,
                message.mml && (React__default['default'].createElement(MML$1, { actionHandler: handleAction, align: isMyMessage() ? 'right' : 'left', source: message.mml })),
                message.text && (React__default['default'].createElement(MessageText, { customInnerClass: 'str-chat__message-commerce-text-inner', customWrapperClass: 'str-chat__message-commerce-text', theme: 'commerce' })),
                !threadList && (React__default['default'].createElement("div", { className: 'str-chat__message-commerce-reply-button' },
                    React__default['default'].createElement(MessageRepliesCountButton$1, { onClick: handleOpenThread, reply_count: message.reply_count }))),
                React__default['default'].createElement("div", { className: 'str-chat__message-commerce-data' },
                    !isMyMessage() ? (React__default['default'].createElement("span", { className: 'str-chat__message-commerce-name' }, ((_e = message.user) === null || _e === void 0 ? void 0 : _e.name) || ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id))) : null,
                    React__default['default'].createElement(MessageTimestamp$1, { customClass: 'str-chat__message-commerce-timestamp', format: 'LT' })))));
    };
    var MemoizedMessageCommerce = React__default['default'].memo(MessageCommerceWithContext, areMessageUIPropsEqual);
    /**
     * @deprecated - This UI component will be removed in the next major release.
     *
     * UI component that renders a message and receives functionality from the Message/MessageList components
     */
    var MessageCommerce = function (props) {
        var messageContext = useMessageContext('MessageCommerce');
        return React__default['default'].createElement(MemoizedMessageCommerce, __assign$2({}, messageContext, props));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageLivestreamWithContext = function (props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var clearEditingState = props.clearEditingState, editing = props.editing, groupStyles = props.groupStyles, handleAction = props.handleAction, handleOpenThread = props.handleOpenThread, handleRetry = props.handleRetry, initialMessage = props.initialMessage, isReactionEnabled = props.isReactionEnabled, message = props.message, messageWrapperRef = props.messageWrapperRef, onMentionsClickMessage = props.onMentionsClickMessage, onMentionsHoverMessage = props.onMentionsHoverMessage, onReactionListClick = props.onReactionListClick, onUserClick = props.onUserClick, onUserHover = props.onUserHover, reactionSelectorRef = props.reactionSelectorRef, _l = props.renderText, renderText$1 = _l === void 0 ? renderText : _l, showDetailedReactions = props.showDetailedReactions, unsafeHTML = props.unsafeHTML;
        var _m = useComponentContext('MessageLivestream'), Attachment = _m.Attachment, _o = _m.Avatar, Avatar$1 = _o === void 0 ? Avatar : _o, _p = _m.EditMessageInput, EditMessageInput = _p === void 0 ? EditMessageForm : _p, _q = _m.MessageDeleted, MessageDeleted$1 = _q === void 0 ? MessageDeleted : _q, _r = _m.MessageRepliesCountButton, MessageRepliesCountButton$1 = _r === void 0 ? MessageRepliesCountButton : _r, _s = _m.PinIndicator, PinIndicator$1 = _s === void 0 ? PinIndicator : _s, _t = _m.QuotedMessage, QuotedMessage$1 = _t === void 0 ? QuotedMessage : _t, _u = _m.ReactionsList, ReactionsList = _u === void 0 ? SimpleReactionsList : _u, _v = _m.ReactionSelector, ReactionSelector$1 = _v === void 0 ? ReactionSelector : _v;
        var _w = useTranslationContext('MessageLivestream'), t = _w.t, userLanguage = _w.userLanguage;
        var messageTextToRender = ((_a = message.i18n) === null || _a === void 0 ? void 0 : _a[userLanguage + "_text"]) || message.text;
        var messageText = React.useMemo(function () { return renderText$1(messageTextToRender, message.mentioned_users); }, [
            message.mentioned_users,
            messageTextToRender,
        ]);
        var firstGroupStyle = groupStyles ? groupStyles[0] : 'single';
        if (message.customType === CUSTOM_MESSAGE_TYPE.date) {
            return null;
        }
        if (message.deleted_at) {
            return React__default['default'].createElement(MessageDeleted$1, { message: message });
        }
        if (editing) {
            return (React__default['default'].createElement("div", { className: "str-chat__message-team str-chat__message-team--" + firstGroupStyle + " str-chat__message-team--editing", "data-testid": 'message-livestream-edit' },
                (firstGroupStyle === 'top' || firstGroupStyle === 'single') && (React__default['default'].createElement("div", { className: 'str-chat__message-team-meta' },
                    React__default['default'].createElement(Avatar$1, { image: (_b = message.user) === null || _b === void 0 ? void 0 : _b.image, name: ((_c = message.user) === null || _c === void 0 ? void 0 : _c.name) || ((_d = message.user) === null || _d === void 0 ? void 0 : _d.id), onClick: onUserClick, onMouseOver: onUserHover, size: 40 }))),
                React__default['default'].createElement(MessageInput, { clearEditingState: clearEditingState, Input: EditMessageInput, message: message })));
        }
        return (React__default['default'].createElement(React__default['default'].Fragment, null,
            message.pinned && (React__default['default'].createElement("div", { className: 'str-chat__message-livestream-pin-indicator' },
                React__default['default'].createElement(PinIndicator$1, { message: message, t: t }))),
            React__default['default'].createElement("div", { className: "str-chat__message-livestream str-chat__message-livestream--" + firstGroupStyle + " str-chat__message-livestream--" + message.type + " str-chat__message-livestream--" + message.status + " " + (initialMessage ? 'str-chat__message-livestream--initial-message' : '') + " " + (message.pinned ? 'pinned-message' : ''), "data-testid": 'message-livestream', ref: messageWrapperRef },
                showDetailedReactions && isReactionEnabled && (React__default['default'].createElement(ReactionSelector$1, { ref: reactionSelectorRef })),
                React__default['default'].createElement(MessageLivestreamActions, { messageWrapperRef: messageWrapperRef, onReactionListClick: onReactionListClick }),
                React__default['default'].createElement("div", { className: 'str-chat__message-livestream-left' },
                    React__default['default'].createElement(Avatar$1, { image: (_e = message.user) === null || _e === void 0 ? void 0 : _e.image, name: ((_f = message.user) === null || _f === void 0 ? void 0 : _f.name) || ((_g = message.user) === null || _g === void 0 ? void 0 : _g.id), onClick: onUserClick, onMouseOver: onUserHover, size: 30 })),
                React__default['default'].createElement("div", { className: 'str-chat__message-livestream-right' },
                    React__default['default'].createElement("div", { className: 'str-chat__message-livestream-content' },
                        React__default['default'].createElement("div", { className: 'str-chat__message-livestream-author' },
                            React__default['default'].createElement("strong", null, ((_h = message.user) === null || _h === void 0 ? void 0 : _h.name) || ((_j = message.user) === null || _j === void 0 ? void 0 : _j.id)),
                            message.type === 'error' && (React__default['default'].createElement("div", { className: 'str-chat__message-team-error-header' }, t('Only visible to you')))),
                        React__default['default'].createElement("div", { className: isOnlyEmojis(message.text) ? 'str-chat__message-livestream-text--is-emoji' : '', "data-testid": 'message-livestream-text', onClick: onMentionsClickMessage, onMouseOver: onMentionsHoverMessage },
                            message.quoted_message && (React__default['default'].createElement("div", { className: 'livestream-quoted-message' },
                                React__default['default'].createElement(QuotedMessage$1, null))),
                            message.type !== 'error' &&
                                message.status !== 'failed' &&
                                !unsafeHTML &&
                                messageText,
                            message.type !== 'error' &&
                                message.status !== 'failed' &&
                                unsafeHTML &&
                                !!message.html && React__default['default'].createElement("div", { dangerouslySetInnerHTML: { __html: message.html } }),
                            message.type === 'error' && !message.command && (React__default['default'].createElement("p", { "data-testid": 'message-livestream-error' },
                                React__default['default'].createElement(ErrorIcon, null),
                                message.text)),
                            message.type === 'error' && message.command && (React__default['default'].createElement("p", { "data-testid": 'message-livestream-command-error' },
                                React__default['default'].createElement(ErrorIcon, null),
                                React__default['default'].createElement("strong", null,
                                    "/",
                                    message.command),
                                " is not a valid command")),
                            message.status === 'failed' && (React__default['default'].createElement("p", { onClick: message.errorStatusCode !== 403 ? function () { return handleRetry(message); } : undefined },
                                React__default['default'].createElement(ErrorIcon, null),
                                message.errorStatusCode !== 403
                                    ? t('Message Failed · Click to try again')
                                    : t('Message Failed · Unauthorized')))),
                        ((_k = message.attachments) === null || _k === void 0 ? void 0 : _k.length) ? (React__default['default'].createElement(Attachment, { actionHandler: handleAction, attachments: message.attachments })) : null,
                        isReactionEnabled && React__default['default'].createElement(ReactionsList, null),
                        !initialMessage && (React__default['default'].createElement(MessageRepliesCountButton$1, { onClick: handleOpenThread, reply_count: message.reply_count })))))));
    };
    var MessageLivestreamActions = function (props) {
        var messageWrapperRef = props.messageWrapperRef, onReactionListClick = props.onReactionListClick;
        var _a = useComponentContext('MessageLivestream').MessageTimestamp, MessageTimestamp$1 = _a === void 0 ? MessageTimestamp : _a;
        var _b = useMessageContext('MessageLivestream'), getMessageActions = _b.getMessageActions, handleOpenThread = _b.handleOpenThread, initialMessage = _b.initialMessage, message = _b.message, threadList = _b.threadList;
        var _c = React.useState(false), actionsBoxOpen = _c[0], setActionsBoxOpen = _c[1];
        var hideOptions = React.useCallback(function () { return setActionsBoxOpen(false); }, []);
        var messageDeletedAt = !!message.deleted_at;
        var messageWrapper = messageWrapperRef === null || messageWrapperRef === void 0 ? void 0 : messageWrapperRef.current;
        var messageActions = getMessageActions();
        var showActionsBox = showMessageActionsBox(messageActions);
        var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;
        var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && !threadList;
        React.useEffect(function () {
            if (messageWrapper) {
                messageWrapper.addEventListener('mouseleave', hideOptions);
            }
            return function () {
                if (messageWrapper) {
                    messageWrapper.removeEventListener('mouseleave', hideOptions);
                }
            };
        }, [messageWrapper, hideOptions]);
        React.useEffect(function () {
            if (messageDeletedAt) {
                document.removeEventListener('click', hideOptions);
            }
        }, [messageDeletedAt, hideOptions]);
        React.useEffect(function () {
            if (actionsBoxOpen) {
                document.addEventListener('click', hideOptions);
            }
            else {
                document.removeEventListener('click', hideOptions);
            }
            return function () {
                document.removeEventListener('click', hideOptions);
            };
        }, [actionsBoxOpen, hideOptions]);
        if (initialMessage ||
            !message ||
            message.type === 'error' ||
            message.type === 'system' ||
            message.type === 'ephemeral' ||
            message.status === 'failed' ||
            message.status === 'sending') {
            return null;
        }
        return (React__default['default'].createElement("div", { className: "str-chat__message-livestream-actions", "data-testid": 'message-livestream-actions' },
            React__default['default'].createElement(MessageTimestamp$1, { customClass: 'str-chat__message-livestream-time' }),
            shouldShowReactions && (React__default['default'].createElement("span", { "data-testid": 'message-livestream-reactions-action', onClick: onReactionListClick },
                React__default['default'].createElement("span", null,
                    React__default['default'].createElement(ReactionIcon, null)))),
            shouldShowReplies && (React__default['default'].createElement("span", { "data-testid": 'message-livestream-thread-action', onClick: handleOpenThread },
                React__default['default'].createElement(ThreadIcon, null))),
            showActionsBox && React__default['default'].createElement(MessageActions, { inline: true })));
    };
    var MemoizedMessageLivestream = React__default['default'].memo(MessageLivestreamWithContext, areMessageUIPropsEqual);
    /**
     * @deprecated - This UI component will be removed in the next major release.
     *
     * Handles the rendering of a message and depends on the Message component for all the logic.
     * Implements the look and feel for a livestream use case.
     */
    var MessageLivestream = function (props) {
        var messageContext = useMessageContext('MessageLivestream');
        var messageWrapperRef = React.useRef(null);
        var reactionSelectorRef = React.useRef(null);
        var message = props.message || messageContext.message;
        var _a = useReactionClick(message, reactionSelectorRef, messageWrapperRef), isReactionEnabled = _a.isReactionEnabled, onReactionListClick = _a.onReactionListClick, showDetailedReactions = _a.showDetailedReactions;
        return (React__default['default'].createElement(MemoizedMessageLivestream, __assign$2({}, messageContext, { isReactionEnabled: isReactionEnabled, messageWrapperRef: messageWrapperRef, onReactionListClick: onReactionListClick, reactionSelectorRef: reactionSelectorRef, showDetailedReactions: showDetailedReactions }, props)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageTeamWithContext = function (props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        var clearEditingState = props.clearEditingState, editing = props.editing, getMessageActions = props.getMessageActions, groupStyles = props.groupStyles, handleAction = props.handleAction, handleOpenThread = props.handleOpenThread, handleRetry = props.handleRetry, initialMessage = props.initialMessage, isReactionEnabled = props.isReactionEnabled, message = props.message, messageWrapperRef = props.messageWrapperRef, onMentionsClickMessage = props.onMentionsClickMessage, onMentionsHoverMessage = props.onMentionsHoverMessage, onReactionListClick = props.onReactionListClick, onUserClick = props.onUserClick, onUserHover = props.onUserHover, reactionSelectorRef = props.reactionSelectorRef, _o = props.renderText, renderText$1 = _o === void 0 ? renderText : _o, showDetailedReactions = props.showDetailedReactions, threadList = props.threadList, unsafeHTML = props.unsafeHTML;
        var _p = useComponentContext('MessageTeam'), Attachment = _p.Attachment, _q = _p.Avatar, Avatar$1 = _q === void 0 ? Avatar : _q, _r = _p.EditMessageInput, EditMessageInput = _r === void 0 ? EditMessageForm : _r, _s = _p.MessageDeleted, MessageDeleted$1 = _s === void 0 ? MessageDeleted : _s, _t = _p.MessageRepliesCountButton, MessageRepliesCountButton$1 = _t === void 0 ? MessageRepliesCountButton : _t, _u = _p.MessageTimestamp, MessageTimestamp$1 = _u === void 0 ? MessageTimestamp : _u, _v = _p.PinIndicator, PinIndicator$1 = _v === void 0 ? PinIndicator : _v, _w = _p.QuotedMessage, QuotedMessage$1 = _w === void 0 ? QuotedMessage : _w, _x = _p.ReactionsList, ReactionsList = _x === void 0 ? SimpleReactionsList : _x, _y = _p.ReactionSelector, ReactionSelector$1 = _y === void 0 ? ReactionSelector : _y;
        var _z = useTranslationContext('MessageTeam'), t = _z.t, userLanguage = _z.userLanguage;
        var messageActions = getMessageActions();
        var showActionsBox = showMessageActionsBox(messageActions);
        var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && !threadList;
        var messageTextToRender = ((_a = message.i18n) === null || _a === void 0 ? void 0 : _a[userLanguage + "_text"]) || message.text;
        var messageMentionedUsersItem = message.mentioned_users;
        var messageText = React.useMemo(function () { return renderText$1(messageTextToRender, messageMentionedUsersItem); }, [
            messageMentionedUsersItem,
            messageTextToRender,
        ]);
        var firstGroupStyle = groupStyles ? groupStyles[0] : 'single';
        if (message.deleted_at) {
            return React__default['default'].createElement(MessageDeleted$1, { message: message });
        }
        if (editing) {
            return (React__default['default'].createElement("div", { className: "str-chat__message-team str-chat__message-team--" + firstGroupStyle + " str-chat__message-team--editing", "data-testid": 'message-team-edit' },
                (firstGroupStyle === 'top' || firstGroupStyle === 'single') && (React__default['default'].createElement("div", { className: 'str-chat__message-team-meta' },
                    React__default['default'].createElement(Avatar$1, { image: (_b = message.user) === null || _b === void 0 ? void 0 : _b.image, name: ((_c = message.user) === null || _c === void 0 ? void 0 : _c.name) || ((_d = message.user) === null || _d === void 0 ? void 0 : _d.id), onClick: onUserClick, onMouseOver: onUserHover, size: 40 }))),
                React__default['default'].createElement(MessageInput, { clearEditingState: clearEditingState, Input: EditMessageInput, message: message })));
        }
        return (React__default['default'].createElement(React__default['default'].Fragment, null,
            message.pinned && (React__default['default'].createElement("div", { className: 'str-chat__message-team-pin-indicator' },
                React__default['default'].createElement(PinIndicator$1, { message: message, t: t }))),
            React__default['default'].createElement("div", { className: "str-chat__message-team str-chat__message-team--" + firstGroupStyle + " str-chat__message-team--" + message.type + " " + (threadList ? 'thread-list' : '') + " str-chat__message-team--" + message.status + " " + (message.pinned ? 'pinned-message' : ''), "data-testid": 'message-team', ref: messageWrapperRef },
                React__default['default'].createElement("div", { className: 'str-chat__message-team-meta' },
                    firstGroupStyle === 'top' || firstGroupStyle === 'single' || initialMessage ? (React__default['default'].createElement(Avatar$1, { image: (_e = message.user) === null || _e === void 0 ? void 0 : _e.image, name: ((_f = message.user) === null || _f === void 0 ? void 0 : _f.name) || ((_g = message.user) === null || _g === void 0 ? void 0 : _g.id), onClick: onUserClick, onMouseOver: onUserHover, size: 40 })) : (React__default['default'].createElement("div", { "data-testid": 'team-meta-spacer', style: { marginRight: 0, width: 40 } })),
                    React__default['default'].createElement(MessageTimestamp$1, null)),
                React__default['default'].createElement("div", { className: 'str-chat__message-team-group' },
                    (firstGroupStyle === 'top' || firstGroupStyle === 'single' || initialMessage) && (React__default['default'].createElement("div", { className: 'str-chat__message-team-author', "data-testid": 'message-team-author', onClick: onUserClick },
                        React__default['default'].createElement("strong", null, ((_h = message.user) === null || _h === void 0 ? void 0 : _h.name) || ((_j = message.user) === null || _j === void 0 ? void 0 : _j.id)),
                        message.type === 'error' && (React__default['default'].createElement("div", { className: 'str-chat__message-team-error-header' }, t('Only visible to you'))))),
                    React__default['default'].createElement("div", { className: "str-chat__message-team-content str-chat__message-team-content--" + firstGroupStyle + " str-chat__message-team-content--" + (message.text === '' ? 'image' : 'text'), "data-testid": 'message-team-content' },
                        message.quoted_message && React__default['default'].createElement(QuotedMessage$1, null),
                        !initialMessage &&
                            message.status !== 'sending' &&
                            message.status !== 'failed' &&
                            message.type !== 'system' &&
                            message.type !== 'ephemeral' &&
                            message.type !== 'error' && (React__default['default'].createElement("div", { className: "str-chat__message-team-actions", "data-testid": 'message-team-actions' },
                            showDetailedReactions && React__default['default'].createElement(ReactionSelector$1, { ref: reactionSelectorRef }),
                            isReactionEnabled && (React__default['default'].createElement("span", { "data-testid": 'message-team-reaction-icon', onClick: onReactionListClick, title: 'Reactions' },
                                React__default['default'].createElement(ReactionIcon, null))),
                            shouldShowReplies && (React__default['default'].createElement("span", { "data-testid": 'message-team-thread-icon', onClick: handleOpenThread, title: 'Start a thread' },
                                React__default['default'].createElement(ThreadIcon, null))),
                            showActionsBox && (React__default['default'].createElement(MessageActions, { inline: true, messageWrapperRef: messageWrapperRef })))),
                        React__default['default'].createElement("span", { className: isOnlyEmojis(message.text) ? 'str-chat__message-team-text--is-emoji' : '', "data-testid": 'message-team-message', onClick: onMentionsClickMessage, onMouseOver: onMentionsHoverMessage }, unsafeHTML && message.html ? (React__default['default'].createElement("div", { dangerouslySetInnerHTML: { __html: message.html } })) : (messageText)),
                        message.mml && React__default['default'].createElement(MML$1, { actionHandler: handleAction, align: 'left', source: message.mml }),
                        !message.text && ((_k = message.attachments) === null || _k === void 0 ? void 0 : _k.length) ? (React__default['default'].createElement(Attachment, { actionHandler: handleAction, attachments: message.attachments })) : null,
                        ((_l = message.latest_reactions) === null || _l === void 0 ? void 0 : _l.length) !== 0 && message.text !== '' && isReactionEnabled && (React__default['default'].createElement(ReactionsList, null)),
                        message.status === 'failed' && (React__default['default'].createElement("button", { className: 'str-chat__message-team-failed', "data-testid": 'message-team-failed', onClick: message.errorStatusCode !== 403 ? function () { return handleRetry(message); } : undefined },
                            React__default['default'].createElement(ErrorIcon, null),
                            message.errorStatusCode !== 403
                                ? t('Message Failed · Click to try again')
                                : t('Message Failed · Unauthorized')))),
                    React__default['default'].createElement(MessageStatus, { messageType: 'team' }),
                    message.text && ((_m = message.attachments) === null || _m === void 0 ? void 0 : _m.length) ? (React__default['default'].createElement(Attachment, { actionHandler: handleAction, attachments: message.attachments })) : null,
                    message.latest_reactions &&
                        message.latest_reactions.length !== 0 &&
                        message.text === '' &&
                        isReactionEnabled && React__default['default'].createElement(ReactionsList, null),
                    !threadList && (React__default['default'].createElement(MessageRepliesCountButton$1, { onClick: handleOpenThread, reply_count: message.reply_count }))))));
    };
    var MemoizedMessageTeam = React__default['default'].memo(MessageTeamWithContext, areMessageUIPropsEqual);
    /**
     * @deprecated - This UI component will be removed in the next major release.
     *
     * Handles the rendering of a Message and depends on the Message component for all the logic.
     * Implements the look and feel for a team style collaboration environment.
     */
    var MessageTeam = function (props) {
        var messageContext = useMessageContext('MessageTeam');
        var reactionSelectorRef = React.useRef(null);
        var messageWrapperRef = React.useRef(null);
        var message = props.message || messageContext.message;
        var _a = useReactionClick(message, reactionSelectorRef, messageWrapperRef), isReactionEnabled = _a.isReactionEnabled, onReactionListClick = _a.onReactionListClick, showDetailedReactions = _a.showDetailedReactions;
        return (React__default['default'].createElement(MemoizedMessageTeam, __assign$2({}, messageContext, { isReactionEnabled: isReactionEnabled, messageWrapperRef: messageWrapperRef, onReactionListClick: onReactionListClick, reactionSelectorRef: reactionSelectorRef, showDetailedReactions: showDetailedReactions }, props)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedCustomNotification = function (props) {
        var active = props.active, children = props.children, type = props.type;
        if (!active)
            return null;
        return (React__default['default'].createElement("div", { "aria-live": 'polite', className: "str-chat__custom-notification notification-" + type, "data-testid": 'custom-notification' }, children));
    };
    var CustomNotification = React__default['default'].memo(UnMemoizedCustomNotification);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedConnectionStatus = function () {
        var client = useChatContext('ConnectionStatus').client;
        var t = useTranslationContext('ConnectionStatus').t;
        var _a = React.useState(true), online = _a[0], setOnline = _a[1];
        React.useEffect(function () {
            var connectionChanged = function (_a) {
                var _b = _a.online, onlineStatus = _b === void 0 ? false : _b;
                if (online !== onlineStatus) {
                    setOnline(onlineStatus);
                }
            };
            client.on('connection.changed', connectionChanged);
            return function () { return client.off('connection.changed', connectionChanged); };
        }, [client, online]);
        return (React__default['default'].createElement(CustomNotification, { active: !online, type: 'error' }, t('Connection failure, reconnecting now...')));
    };
    var ConnectionStatus = React__default['default'].memo(UnMemoizedConnectionStatus);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var GiphyPreviewMessage = function (props) {
        var message = props.message;
        return (React__default['default'].createElement("div", { className: 'giphy-preview-message' },
            React__default['default'].createElement(Message, { message: message })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/* eslint-disable no-continue */
    /**
     * processMessages - Transform the input message list according to config parameters
     *
     * Inserts date separators btw. messages created on different dates or before unread incoming messages. By default:
     * - enabled in main message list
     * - disabled in virtualized message list
     * - disabled in thread
     *
     * Allows to filter out deleted messages, contolled by hideDeletedMessages param. This is disabled by default.
     *
     * Sets Giphy preview message for VirtualizedMessageList
     *
     * The only required params are messages and userId, the rest are config params:
     *
     * @return {StreamMessage<StreamChatGenerics>[]} Transformed list of messages
     */
    var processMessages = function (params) {
        var _a, _b;
        var enableDateSeparator = params.enableDateSeparator, hideDeletedMessages = params.hideDeletedMessages, hideNewMessageSeparator = params.hideNewMessageSeparator, lastRead = params.lastRead, messages = params.messages, setGiphyPreviewMessage = params.setGiphyPreviewMessage, userId = params.userId;
        var unread = false;
        var ephemeralMessagePresent = false;
        var lastDateSeparator;
        var newMessages = [];
        for (var i = 0; i < messages.length; i += 1) {
            var message = messages[i];
            if (hideDeletedMessages && message.type === 'deleted') {
                continue;
            }
            if (setGiphyPreviewMessage && message.type === 'ephemeral' && message.command === 'giphy') {
                ephemeralMessagePresent = true;
                setGiphyPreviewMessage(message);
                continue;
            }
            var messageDate = (message.created_at && isDate(message.created_at) && message.created_at.toDateString()) || '';
            var previousMessage = messages[i - 1];
            var prevMessageDate = messageDate;
            if (enableDateSeparator && (previousMessage === null || previousMessage === void 0 ? void 0 : previousMessage.created_at) && isDate(previousMessage.created_at)) {
                prevMessageDate = previousMessage.created_at.toDateString();
            }
            if (!unread && !hideNewMessageSeparator) {
                unread = (lastRead && message.created_at && new Date(lastRead) < message.created_at) || false;
                // do not show date separator for current user's messages
                if (enableDateSeparator && unread && ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) !== userId) {
                    newMessages.push({
                        customType: CUSTOM_MESSAGE_TYPE.date,
                        date: message.created_at,
                        id: makeDateMessageId(message.created_at),
                        unread: unread,
                    });
                }
            }
            if (enableDateSeparator &&
                (i === 0 || // always put date separator before the first message
                    messageDate !== prevMessageDate || // add date separator btw. 2 messages created on different date
                    // if hiding deleted messages replace the previous deleted message(s) with A separator if the last rendered message was created on different date
                    (hideDeletedMessages &&
                        (previousMessage === null || previousMessage === void 0 ? void 0 : previousMessage.type) === 'deleted' &&
                        lastDateSeparator !== messageDate)) &&
                ((_b = newMessages === null || newMessages === void 0 ? void 0 : newMessages[newMessages.length - 1]) === null || _b === void 0 ? void 0 : _b.customType) !== CUSTOM_MESSAGE_TYPE.date // do not show two date separators in a row)
            ) {
                lastDateSeparator = messageDate;
                newMessages.push({
                    customType: CUSTOM_MESSAGE_TYPE.date,
                    date: message.created_at,
                    id: makeDateMessageId(message.created_at),
                }, message);
            }
            else {
                newMessages.push(message);
            }
        }
        // clean up the giphy preview component state after a Cancel action
        if (setGiphyPreviewMessage && !ephemeralMessagePresent) {
            setGiphyPreviewMessage(undefined);
        }
        return newMessages;
    };
    var makeDateMessageId = function (date) {
        var idSuffix;
        try {
            idSuffix = !date ? nanoid() : date instanceof Date ? date.toISOString() : date;
        }
        catch (e) {
            idSuffix = nanoid();
        }
        return CUSTOM_MESSAGE_TYPE.date + "-" + idSuffix;
    };
    // fast since it usually iterates just the last few messages
    var getLastReceived = function (messages) {
        for (var i = messages.length - 1; i > 0; i -= 1) {
            if (messages[i].status === 'received') {
                return messages[i].id;
            }
        }
        return null;
    };
    var getReadStates = function (messages, read, returnAllReadData) {
        if (read === void 0) { read = {}; }
        // create object with empty array for each message id
        var readData = {};
        Object.values(read).forEach(function (readState) {
            if (!readState.last_read)
                return;
            var userLastReadMsgId;
            // loop messages sent by current user and add read data for other users in channel
            messages.forEach(function (msg) {
                if (msg.updated_at && msg.updated_at < readState.last_read) {
                    userLastReadMsgId = msg.id;
                    // if true, save other user's read data for all messages they've read
                    if (returnAllReadData) {
                        if (!readData[userLastReadMsgId]) {
                            readData[userLastReadMsgId] = [];
                        }
                        readData[userLastReadMsgId].push(readState.user);
                    }
                }
            });
            // if true, only save read data for other user's last read message
            if (userLastReadMsgId && !returnAllReadData) {
                if (!readData[userLastReadMsgId]) {
                    readData[userLastReadMsgId] = [];
                }
                readData[userLastReadMsgId].push(readState.user);
            }
        });
        return readData;
    };
    var insertIntro = function (messages, headerPosition) {
        var newMessages = messages;
        var intro = {
            customType: CUSTOM_MESSAGE_TYPE.intro,
        };
        // if no headerPosition is set, HeaderComponent will go at the top
        if (!headerPosition) {
            newMessages.unshift(intro);
            return newMessages;
        }
        // if no messages, intro gets inserted
        if (!newMessages.length) {
            newMessages.unshift(intro);
            return newMessages;
        }
        // else loop over the messages
        for (var i = 0; i < messages.length; i += 1) {
            var message = messages[i];
            var messageTime = message.created_at && isDate(message.created_at) ? message.created_at.getTime() : null;
            var nextMessage = messages[i + 1];
            var nextMessageTime = nextMessage.created_at && isDate(nextMessage.created_at)
                ? nextMessage.created_at.getTime()
                : null;
            // header position is smaller than message time so comes after;
            if (messageTime && messageTime < headerPosition) {
                // if header position is also smaller than message time continue;
                if (nextMessageTime && nextMessageTime < headerPosition) {
                    if (messages[i + 1] && messages[i + 1].customType === CUSTOM_MESSAGE_TYPE.date)
                        continue;
                    if (!nextMessageTime) {
                        newMessages.push(intro);
                        return newMessages;
                    }
                }
                else {
                    newMessages.splice(i + 1, 0, intro);
                    return newMessages;
                }
            }
        }
        return newMessages;
    };
    var getGroupStyles = function (message, previousMessage, nextMessage, noGroupByUser) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (message.customType === CUSTOM_MESSAGE_TYPE.date)
            return '';
        if (message.customType === CUSTOM_MESSAGE_TYPE.intro)
            return '';
        if (noGroupByUser || ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) !== 0)
            return 'single';
        var isTopMessage = !previousMessage ||
            previousMessage.customType === CUSTOM_MESSAGE_TYPE.intro ||
            previousMessage.customType === CUSTOM_MESSAGE_TYPE.date ||
            previousMessage.type === 'system' ||
            ((_b = previousMessage.attachments) === null || _b === void 0 ? void 0 : _b.length) !== 0 ||
            ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id) !== ((_d = previousMessage.user) === null || _d === void 0 ? void 0 : _d.id) ||
            previousMessage.type === 'error' ||
            previousMessage.deleted_at;
        var isBottomMessage = !nextMessage ||
            nextMessage.customType === CUSTOM_MESSAGE_TYPE.date ||
            nextMessage.type === 'system' ||
            nextMessage.customType === CUSTOM_MESSAGE_TYPE.intro ||
            ((_e = nextMessage.attachments) === null || _e === void 0 ? void 0 : _e.length) !== 0 ||
            ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id) !== ((_g = nextMessage.user) === null || _g === void 0 ? void 0 : _g.id) ||
            nextMessage.type === 'error' ||
            nextMessage.deleted_at;
        if (!isTopMessage && !isBottomMessage) {
            if (message.deleted_at || message.type === 'error')
                return 'single';
            return 'middle';
        }
        if (isBottomMessage) {
            if (isTopMessage || message.deleted_at || message.type === 'error')
                return 'single';
            return 'bottom';
        }
        if (isTopMessage)
            return 'top';
        return '';
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useEnrichedMessages = function (args) {
        var channel = args.channel, disableDateSeparator = args.disableDateSeparator, groupStyles = args.groupStyles, headerPosition = args.headerPosition, hideDeletedMessages = args.hideDeletedMessages, hideNewMessageSeparator = args.hideNewMessageSeparator, messages = args.messages, noGroupByUser = args.noGroupByUser;
        var client = useChatContext('useEnrichedMessages').client;
        var HeaderComponent = useComponentContext('useEnrichedMessages').HeaderComponent;
        var lastRead = React.useMemo(function () { var _a; return (_a = channel.lastRead) === null || _a === void 0 ? void 0 : _a.call(channel); }, [channel]);
        var enableDateSeparator = !disableDateSeparator;
        var messagesWithDates = !enableDateSeparator && !hideDeletedMessages && hideNewMessageSeparator
            ? messages
            : processMessages({
                enableDateSeparator: enableDateSeparator,
                hideDeletedMessages: hideDeletedMessages,
                hideNewMessageSeparator: hideNewMessageSeparator,
                lastRead: lastRead,
                messages: messages,
                userId: client.userID || '',
            });
        if (HeaderComponent) {
            messagesWithDates = insertIntro(messagesWithDates, headerPosition);
        }
        var groupStylesFn = groupStyles || getGroupStyles;
        var messageGroupStyles = React.useMemo(function () {
            return messagesWithDates.reduce(function (acc, message, i) {
                var style = groupStylesFn(message, messagesWithDates[i - 1], messagesWithDates[i + 1], noGroupByUser);
                if (style)
                    acc[message.id] = style;
                return acc;
            }, {});
        }, [messagesWithDates, noGroupByUser]);
        return { messageGroupStyles: messageGroupStyles, messages: messagesWithDates };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useLastReadData = function (props) {
        var messages = props.messages, read = props.read, returnAllReadData = props.returnAllReadData, userID = props.userID;
        return React.useMemo(function () {
            return getReadStates(messages.filter(function (_a) {
                var user = _a.user;
                return (user === null || user === void 0 ? void 0 : user.id) === userID;
            }), read, returnAllReadData);
        }, [messages, read, returnAllReadData, userID]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useMessageListElements = function (props) {
        var enrichedMessages = props.enrichedMessages, internalMessageProps = props.internalMessageProps, messageGroupStyles = props.messageGroupStyles, onMessageLoadCaptured = props.onMessageLoadCaptured, read = props.read, returnAllReadData = props.returnAllReadData, threadList = props.threadList;
        var _a = useChatContext('useMessageListElements'), client = _a.client, customClasses = _a.customClasses;
        var _b = useComponentContext('useMessageListElements'), _c = _b.DateSeparator, DateSeparator$1 = _c === void 0 ? DateSeparator : _c, HeaderComponent = _b.HeaderComponent, _d = _b.MessageSystem, MessageSystem = _d === void 0 ? EventComponent : _d;
        // get the readData, but only for messages submitted by the user themselves
        var readData = useLastReadData({
            messages: enrichedMessages,
            read: read,
            returnAllReadData: returnAllReadData,
            userID: client.userID,
        });
        var lastReceivedId = React.useMemo(function () { return getLastReceived(enrichedMessages); }, [enrichedMessages]);
        return React.useMemo(function () {
            return enrichedMessages.map(function (message) {
                var _a;
                if (message.customType === CUSTOM_MESSAGE_TYPE.date &&
                    message.date &&
                    isDate(message.date)) {
                    return (React__default['default'].createElement("li", { key: message.date.toISOString() + "-i" },
                        React__default['default'].createElement(DateSeparator$1, { date: message.date, formatDate: internalMessageProps.formatDate, unread: message.unread })));
                }
                if (message.customType === CUSTOM_MESSAGE_TYPE.intro && HeaderComponent) {
                    return (React__default['default'].createElement("li", { key: 'intro' },
                        React__default['default'].createElement(HeaderComponent, null)));
                }
                if (message.type === 'system') {
                    return (React__default['default'].createElement("li", { key: ((_a = message.event) === null || _a === void 0 ? void 0 : _a.created_at) ||
                            message.created_at ||
                            '' },
                        React__default['default'].createElement(MessageSystem, { message: message })));
                }
                var groupStyles = messageGroupStyles[message.id] || '';
                var messageClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.message) || "str-chat__li str-chat__li--" + groupStyles;
                return (React__default['default'].createElement("li", { className: messageClass, "data-message-id": message.id, "data-testid": messageClass, key: message.id || message.created_at, onLoadCapture: onMessageLoadCaptured },
                    React__default['default'].createElement(Message, __assign$2({ groupStyles: [groupStyles], lastReceivedId: lastReceivedId, message: message, readBy: readData[message.id] || [], threadList: threadList }, internalMessageProps))));
            });
        }, [
            enrichedMessages,
            internalMessageProps,
            lastReceivedId,
            messageGroupStyles,
            onMessageLoadCaptured,
            readData,
            threadList,
        ]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var resizeObservers = [];

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var hasActiveObservations = function () {
        return resizeObservers.some(function (ro) { return ro.activeTargets.length > 0; });
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var hasSkippedObservations = function () {
        return resizeObservers.some(function (ro) { return ro.skippedTargets.length > 0; });
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var msg = 'ResizeObserver loop completed with undelivered notifications.';
    var deliverResizeLoopError = function () {
        var event;
        if (typeof ErrorEvent === 'function') {
            event = new ErrorEvent('error', {
                message: msg
            });
        }
        else {
            event = document.createEvent('Event');
            event.initEvent('error', false, false);
            event.message = msg;
        }
        window.dispatchEvent(event);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ResizeObserverBoxOptions;
    (function (ResizeObserverBoxOptions) {
        ResizeObserverBoxOptions["BORDER_BOX"] = "border-box";
        ResizeObserverBoxOptions["CONTENT_BOX"] = "content-box";
        ResizeObserverBoxOptions["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
    })(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var freeze = function (obj) { return Object.freeze(obj); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ResizeObserverSize = (function () {
        function ResizeObserverSize(inlineSize, blockSize) {
            this.inlineSize = inlineSize;
            this.blockSize = blockSize;
            freeze(this);
        }
        return ResizeObserverSize;
    }());

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DOMRectReadOnly$1 = (function () {
        function DOMRectReadOnly(x, y, width, height) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.top = this.y;
            this.left = this.x;
            this.bottom = this.top + this.height;
            this.right = this.left + this.width;
            return freeze(this);
        }
        DOMRectReadOnly.prototype.toJSON = function () {
            var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;
            return { x: x, y: y, top: top, right: right, bottom: bottom, left: left, width: width, height: height };
        };
        DOMRectReadOnly.fromRect = function (rectangle) {
            return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
        };
        return DOMRectReadOnly;
    }());

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var isSVG = function (target) { return target instanceof SVGElement && 'getBBox' in target; };
    var isHidden = function (target) {
        if (isSVG(target)) {
            var _a = target.getBBox(), width = _a.width, height = _a.height;
            return !width && !height;
        }
        var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;
        return !(offsetWidth || offsetHeight || target.getClientRects().length);
    };
    var isElement = function (obj) {
        var _a, _b;
        if (obj instanceof Element) {
            return true;
        }
        var scope = (_b = (_a = obj) === null || _a === void 0 ? void 0 : _a.ownerDocument) === null || _b === void 0 ? void 0 : _b.defaultView;
        return !!(scope && obj instanceof scope.Element);
    };
    var isReplacedElement = function (target) {
        switch (target.tagName) {
            case 'INPUT':
                if (target.type !== 'image') {
                    break;
                }
            case 'VIDEO':
            case 'AUDIO':
            case 'EMBED':
            case 'OBJECT':
            case 'CANVAS':
            case 'IFRAME':
            case 'IMG':
                return true;
        }
        return false;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var global$1 = typeof window !== 'undefined' ? window : {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var cache = new WeakMap();
    var scrollRegexp = /auto|scroll/;
    var verticalRegexp = /^tb|vertical/;
    var IE = (/msie|trident/i).test(global$1.navigator && global$1.navigator.userAgent);
    var parseDimension = function (pixel) { return parseFloat(pixel || '0'); };
    var size = function (inlineSize, blockSize, switchSizes) {
        if (inlineSize === void 0) { inlineSize = 0; }
        if (blockSize === void 0) { blockSize = 0; }
        if (switchSizes === void 0) { switchSizes = false; }
        return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
    };
    var zeroBoxes = freeze({
        devicePixelContentBoxSize: size(),
        borderBoxSize: size(),
        contentBoxSize: size(),
        contentRect: new DOMRectReadOnly$1(0, 0, 0, 0)
    });
    var calculateBoxSizes = function (target, forceRecalculation) {
        if (forceRecalculation === void 0) { forceRecalculation = false; }
        if (cache.has(target) && !forceRecalculation) {
            return cache.get(target);
        }
        if (isHidden(target)) {
            cache.set(target, zeroBoxes);
            return zeroBoxes;
        }
        var cs = getComputedStyle(target);
        var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();
        var removePadding = !IE && cs.boxSizing === 'border-box';
        var switchSizes = verticalRegexp.test(cs.writingMode || '');
        var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');
        var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');
        var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);
        var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);
        var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);
        var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);
        var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);
        var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);
        var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);
        var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);
        var horizontalPadding = paddingLeft + paddingRight;
        var verticalPadding = paddingTop + paddingBottom;
        var horizontalBorderArea = borderLeft + borderRight;
        var verticalBorderArea = borderTop + borderBottom;
        var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;
        var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;
        var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
        var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
        var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
        var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
        var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
        var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
        var boxes = freeze({
            devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
            borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),
            contentBoxSize: size(contentWidth, contentHeight, switchSizes),
            contentRect: new DOMRectReadOnly$1(paddingLeft, paddingTop, contentWidth, contentHeight)
        });
        cache.set(target, boxes);
        return boxes;
    };
    var calculateBoxSize = function (target, observedBox, forceRecalculation) {
        var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;
        switch (observedBox) {
            case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
                return devicePixelContentBoxSize;
            case ResizeObserverBoxOptions.BORDER_BOX:
                return borderBoxSize;
            default:
                return contentBoxSize;
        }
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ResizeObserverEntry = (function () {
        function ResizeObserverEntry(target) {
            var boxes = calculateBoxSizes(target);
            this.target = target;
            this.contentRect = boxes.contentRect;
            this.borderBoxSize = freeze([boxes.borderBoxSize]);
            this.contentBoxSize = freeze([boxes.contentBoxSize]);
            this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);
        }
        return ResizeObserverEntry;
    }());

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var calculateDepthForNode = function (node) {
        if (isHidden(node)) {
            return Infinity;
        }
        var depth = 0;
        var parent = node.parentNode;
        while (parent) {
            depth += 1;
            parent = parent.parentNode;
        }
        return depth;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var broadcastActiveObservations = function () {
        var shallowestDepth = Infinity;
        var callbacks = [];
        resizeObservers.forEach(function processObserver(ro) {
            if (ro.activeTargets.length === 0) {
                return;
            }
            var entries = [];
            ro.activeTargets.forEach(function processTarget(ot) {
                var entry = new ResizeObserverEntry(ot.target);
                var targetDepth = calculateDepthForNode(ot.target);
                entries.push(entry);
                ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);
                if (targetDepth < shallowestDepth) {
                    shallowestDepth = targetDepth;
                }
            });
            callbacks.push(function resizeObserverCallback() {
                ro.callback.call(ro.observer, entries, ro.observer);
            });
            ro.activeTargets.splice(0, ro.activeTargets.length);
        });
        for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {
            var callback = callbacks_1[_i];
            callback();
        }
        return shallowestDepth;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var gatherActiveObservationsAtDepth = function (depth) {
        resizeObservers.forEach(function processObserver(ro) {
            ro.activeTargets.splice(0, ro.activeTargets.length);
            ro.skippedTargets.splice(0, ro.skippedTargets.length);
            ro.observationTargets.forEach(function processTarget(ot) {
                if (ot.isActive()) {
                    if (calculateDepthForNode(ot.target) > depth) {
                        ro.activeTargets.push(ot);
                    }
                    else {
                        ro.skippedTargets.push(ot);
                    }
                }
            });
        });
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var process = function () {
        var depth = 0;
        gatherActiveObservationsAtDepth(depth);
        while (hasActiveObservations()) {
            depth = broadcastActiveObservations();
            gatherActiveObservationsAtDepth(depth);
        }
        if (hasSkippedObservations()) {
            deliverResizeLoopError();
        }
        return depth > 0;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var trigger;
    var callbacks = [];
    var notify = function () { return callbacks.splice(0).forEach(function (cb) { return cb(); }); };
    var queueMicroTask = function (callback) {
        if (!trigger) {
            var toggle_1 = 0;
            var el_1 = document.createTextNode('');
            var config = { characterData: true };
            new MutationObserver(function () { return notify(); }).observe(el_1, config);
            trigger = function () { el_1.textContent = "" + (toggle_1 ? toggle_1-- : toggle_1++); };
        }
        callbacks.push(callback);
        trigger();
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var queueResizeObserver = function (cb) {
        queueMicroTask(function ResizeObserver() {
            requestAnimationFrame(cb);
        });
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var watching = 0;
    var isWatching = function () { return !!watching; };
    var CATCH_PERIOD = 250;
    var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
    var events = [
        'resize',
        'load',
        'transitionend',
        'animationend',
        'animationstart',
        'animationiteration',
        'keyup',
        'keydown',
        'mouseup',
        'mousedown',
        'mouseover',
        'mouseout',
        'blur',
        'focus'
    ];
    var time = function (timeout) {
        if (timeout === void 0) { timeout = 0; }
        return Date.now() + timeout;
    };
    var scheduled = false;
    var Scheduler$1 = (function () {
        function Scheduler() {
            var _this = this;
            this.stopped = true;
            this.listener = function () { return _this.schedule(); };
        }
        Scheduler.prototype.run = function (timeout) {
            var _this = this;
            if (timeout === void 0) { timeout = CATCH_PERIOD; }
            if (scheduled) {
                return;
            }
            scheduled = true;
            var until = time(timeout);
            queueResizeObserver(function () {
                var elementsHaveResized = false;
                try {
                    elementsHaveResized = process();
                }
                finally {
                    scheduled = false;
                    timeout = until - time();
                    if (!isWatching()) {
                        return;
                    }
                    if (elementsHaveResized) {
                        _this.run(1000);
                    }
                    else if (timeout > 0) {
                        _this.run(timeout);
                    }
                    else {
                        _this.start();
                    }
                }
            });
        };
        Scheduler.prototype.schedule = function () {
            this.stop();
            this.run();
        };
        Scheduler.prototype.observe = function () {
            var _this = this;
            var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };
            document.body ? cb() : global$1.addEventListener('DOMContentLoaded', cb);
        };
        Scheduler.prototype.start = function () {
            var _this = this;
            if (this.stopped) {
                this.stopped = false;
                this.observer = new MutationObserver(this.listener);
                this.observe();
                events.forEach(function (name) { return global$1.addEventListener(name, _this.listener, true); });
            }
        };
        Scheduler.prototype.stop = function () {
            var _this = this;
            if (!this.stopped) {
                this.observer && this.observer.disconnect();
                events.forEach(function (name) { return global$1.removeEventListener(name, _this.listener, true); });
                this.stopped = true;
            }
        };
        return Scheduler;
    }());
    var scheduler = new Scheduler$1();
    var updateCount = function (n) {
        !watching && n > 0 && scheduler.start();
        watching += n;
        !watching && scheduler.stop();
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var skipNotifyOnElement = function (target) {
        return !isSVG(target)
            && !isReplacedElement(target)
            && getComputedStyle(target).display === 'inline';
    };
    var ResizeObservation = (function () {
        function ResizeObservation(target, observedBox) {
            this.target = target;
            this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;
            this.lastReportedSize = {
                inlineSize: 0,
                blockSize: 0
            };
        }
        ResizeObservation.prototype.isActive = function () {
            var size = calculateBoxSize(this.target, this.observedBox, true);
            if (skipNotifyOnElement(this.target)) {
                this.lastReportedSize = size;
            }
            if (this.lastReportedSize.inlineSize !== size.inlineSize
                || this.lastReportedSize.blockSize !== size.blockSize) {
                return true;
            }
            return false;
        };
        return ResizeObservation;
    }());

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ResizeObserverDetail = (function () {
        function ResizeObserverDetail(resizeObserver, callback) {
            this.activeTargets = [];
            this.skippedTargets = [];
            this.observationTargets = [];
            this.observer = resizeObserver;
            this.callback = callback;
        }
        return ResizeObserverDetail;
    }());

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var observerMap = new WeakMap();
    var getObservationIndex = function (observationTargets, target) {
        for (var i = 0; i < observationTargets.length; i += 1) {
            if (observationTargets[i].target === target) {
                return i;
            }
        }
        return -1;
    };
    var ResizeObserverController = (function () {
        function ResizeObserverController() {
        }
        ResizeObserverController.connect = function (resizeObserver, callback) {
            var detail = new ResizeObserverDetail(resizeObserver, callback);
            observerMap.set(resizeObserver, detail);
        };
        ResizeObserverController.observe = function (resizeObserver, target, options) {
            var detail = observerMap.get(resizeObserver);
            var firstObservation = detail.observationTargets.length === 0;
            if (getObservationIndex(detail.observationTargets, target) < 0) {
                firstObservation && resizeObservers.push(detail);
                detail.observationTargets.push(new ResizeObservation(target, options && options.box));
                updateCount(1);
                scheduler.schedule();
            }
        };
        ResizeObserverController.unobserve = function (resizeObserver, target) {
            var detail = observerMap.get(resizeObserver);
            var index = getObservationIndex(detail.observationTargets, target);
            var lastObservation = detail.observationTargets.length === 1;
            if (index >= 0) {
                lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);
                detail.observationTargets.splice(index, 1);
                updateCount(-1);
            }
        };
        ResizeObserverController.disconnect = function (resizeObserver) {
            var _this = this;
            var detail = observerMap.get(resizeObserver);
            detail.observationTargets.slice().forEach(function (ot) { return _this.unobserve(resizeObserver, ot.target); });
            detail.activeTargets.splice(0, detail.activeTargets.length);
        };
        return ResizeObserverController;
    }());

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ResizeObserver$2 = (function () {
        function ResizeObserver(callback) {
            if (arguments.length === 0) {
                throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
            }
            if (typeof callback !== 'function') {
                throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
            }
            ResizeObserverController.connect(this, callback);
        }
        ResizeObserver.prototype.observe = function (target, options) {
            if (arguments.length === 0) {
                throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
            }
            if (!isElement(target)) {
                throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
            }
            ResizeObserverController.observe(this, target, options);
        };
        ResizeObserver.prototype.unobserve = function (target) {
            if (arguments.length === 0) {
                throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
            }
            if (!isElement(target)) {
                throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
            }
            ResizeObserverController.unobserve(this, target);
        };
        ResizeObserver.prototype.disconnect = function () {
            ResizeObserverController.disconnect(this);
        };
        ResizeObserver.toString = function () {
            return 'function ResizeObserver () { [polyfill code] }';
        };
        return ResizeObserver;
    }());

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function useMessageListScrollManager(params) {
        var onScrollBy = params.onScrollBy, scrollContainerMeasures = params.scrollContainerMeasures, scrolledUpThreshold = params.scrolledUpThreshold, scrollToBottom = params.scrollToBottom, showNewMessages = params.showNewMessages;
        var client = useChatContext('useMessageListScrollManager').client;
        var measures = React.useRef({
            offsetHeight: 0,
            scrollHeight: 0,
        });
        var messages = React.useRef();
        var scrollTop = React.useRef(0);
        React.useEffect(function () {
            var _a, _b, _c;
            var prevMeasures = measures.current;
            var prevMessages = messages.current;
            var newMessages = params.messages;
            var lastNewMessage = newMessages[newMessages.length - 1] || {};
            var lastPrevMessage = prevMessages === null || prevMessages === void 0 ? void 0 : prevMessages[prevMessages.length - 1];
            var newMeasures = scrollContainerMeasures();
            var wasAtBottom = prevMeasures.scrollHeight - prevMeasures.offsetHeight - scrollTop.current <
                scrolledUpThreshold;
            if (typeof prevMessages !== 'undefined') {
                if (prevMessages.length < newMessages.length) {
                    // messages added to the top
                    if ((lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.id) === lastNewMessage.id) {
                        var listHeightDelta = newMeasures.scrollHeight - prevMeasures.scrollHeight;
                        onScrollBy(listHeightDelta);
                    }
                    // messages added to the bottom
                    else {
                        var lastMessageIsFromCurrentUser = ((_a = lastNewMessage.user) === null || _a === void 0 ? void 0 : _a.id) === client.userID;
                        if (lastMessageIsFromCurrentUser || wasAtBottom) {
                            scrollToBottom();
                        }
                        else {
                            showNewMessages();
                        }
                    }
                }
                // message list length didn't change, but check if last message had reaction/reply update
                else {
                    var hasNewReactions = ((_b = lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.latest_reactions) === null || _b === void 0 ? void 0 : _b.length) !== ((_c = lastNewMessage.latest_reactions) === null || _c === void 0 ? void 0 : _c.length);
                    var hasNewReplies = (lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.reply_count) !== lastNewMessage.reply_count;
                    if ((hasNewReactions || hasNewReplies) && wasAtBottom) {
                        scrollToBottom();
                    }
                }
            }
            messages.current = newMessages;
            measures.current = newMeasures;
        }, [measures, messages, params.messages]);
        return function (scrollTopValue) {
            scrollTop.current = scrollTopValue;
        };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var isBrowser = typeof window !== 'undefined';
    var ResizeObserver$1 = (isBrowser && window.ResizeObserver) || ResizeObserver$2;
    var useScrollLocationLogic = function (params) {
        var _a = params.messages, messages = _a === void 0 ? [] : _a, _b = params.scrolledUpThreshold, scrolledUpThreshold = _b === void 0 ? 200 : _b, hasMoreNewer = params.hasMoreNewer, suppressAutoscroll = params.suppressAutoscroll, listElement = params.listElement, ulElement = params.ulElement;
        var _c = React.useState(false), hasNewMessages = _c[0], setHasNewMessages = _c[1];
        var _d = React.useState(), wrapperRect = _d[0], setWrapperRect = _d[1];
        var closeToBottom = React.useRef(false);
        var closeToTop = React.useRef(false);
        var scrollCounter = React.useRef({ autoScroll: 0, scroll: 0 });
        var scrollToBottom = React.useCallback(function () {
            if (!(listElement === null || listElement === void 0 ? void 0 : listElement.scrollTo) || hasMoreNewer || suppressAutoscroll) {
                return;
            }
            scrollCounter.current.autoScroll += 1;
            listElement.scrollTo({
                top: listElement.scrollHeight,
            });
            setHasNewMessages(false);
        }, [listElement, hasMoreNewer, suppressAutoscroll]);
        React.useEffect(function () {
            if (!listElement)
                return;
            var observer = new ResizeObserver$1(scrollToBottom);
            var cancelObserverOnUserScroll = function () {
                scrollCounter.current.scroll += 1;
                var userScrolled = scrollCounter.current.autoScroll < scrollCounter.current.scroll;
                if (ulElement && userScrolled) {
                    observer.unobserve(ulElement);
                    listElement === null || listElement === void 0 ? void 0 : listElement.removeEventListener('scroll', cancelObserverOnUserScroll);
                }
            };
            if (ulElement) {
                observer.observe(ulElement);
            }
            listElement.addEventListener('scroll', cancelObserverOnUserScroll);
            return function () {
                observer.disconnect();
                if (listElement) {
                    listElement.removeEventListener('scroll', cancelObserverOnUserScroll);
                }
            };
        }, [ulElement, scrollToBottom]);
        React.useLayoutEffect(function () {
            if (listElement) {
                setWrapperRect(listElement.getBoundingClientRect());
                scrollToBottom();
            }
        }, [listElement, hasMoreNewer]);
        var updateScrollTop = useMessageListScrollManager({
            messages: messages,
            onScrollBy: function (scrollBy) {
                listElement === null || listElement === void 0 ? void 0 : listElement.scrollBy({ top: scrollBy });
            },
            scrollContainerMeasures: function () { return ({
                offsetHeight: (listElement === null || listElement === void 0 ? void 0 : listElement.offsetHeight) || 0,
                scrollHeight: (listElement === null || listElement === void 0 ? void 0 : listElement.scrollHeight) || 0,
            }); },
            scrolledUpThreshold: scrolledUpThreshold,
            scrollToBottom: scrollToBottom,
            showNewMessages: function () { return setHasNewMessages(true); },
        });
        var onScroll = React.useCallback(function (event) {
            var element = event.target;
            var scrollTop = element.scrollTop;
            updateScrollTop(scrollTop);
            var offsetHeight = element.offsetHeight;
            var scrollHeight = element.scrollHeight;
            closeToBottom.current = scrollHeight - (scrollTop + offsetHeight) < scrolledUpThreshold;
            closeToTop.current = scrollTop < scrolledUpThreshold;
            if (closeToBottom.current) {
                setHasNewMessages(false);
            }
        }, [updateScrollTop, closeToTop, closeToBottom, scrolledUpThreshold]);
        var onMessageLoadCaptured = React.useCallback(function () {
            /**
             * A load event (emitted by e.g. an <img>) was captured on a message.
             * In some cases, the loaded asset is larger than the placeholder, which means we have to scroll down.
             */
            if (closeToBottom.current && !closeToTop.current) {
                scrollToBottom();
            }
        }, [closeToTop, closeToBottom, scrollToBottom]);
        return {
            hasNewMessages: hasNewMessages,
            listElement: listElement,
            onMessageLoadCaptured: onMessageLoadCaptured,
            onScroll: onScroll,
            scrollToBottom: scrollToBottom,
            wrapperRect: wrapperRect,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedMessageNotification = function (props) {
        var children = props.children, onClick = props.onClick, _a = props.showNotification, showNotification = _a === void 0 ? true : _a;
        if (!showNotification)
            return null;
        return (React__default['default'].createElement("button", { "aria-live": 'polite', className: 'str-chat__message-notification', "data-testid": 'message-notification', onClick: onClick }, children));
    };
    var MessageNotification = React__default['default'].memo(UnMemoizedMessageNotification);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageListNotifications = function (props) {
        var hasNewMessages = props.hasNewMessages, isNotAtLatestMessageSet = props.isNotAtLatestMessageSet, MessageNotification = props.MessageNotification, notifications = props.notifications, scrollToBottom = props.scrollToBottom;
        var t = useTranslationContext('MessageListNotifications').t;
        return (React__default['default'].createElement("div", { className: 'str-chat__list-notifications' },
            notifications.map(function (notification) { return (React__default['default'].createElement(CustomNotification, { active: true, key: notification.id, type: notification.type }, notification.text)); }),
            React__default['default'].createElement(ConnectionStatus, null),
            React__default['default'].createElement(MessageNotification, { onClick: scrollToBottom, showNotification: hasNewMessages || isNotAtLatestMessageSet }, isNotAtLatestMessageSet ? t('Latest Messages') : t('New Messages!'))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * TypingIndicator lists users currently typing, it needs to be a child of Channel component
     */
    var UnMemoizedTypingIndicator = function (props) {
        var PropAvatar = props.Avatar, _a = props.avatarSize, avatarSize = _a === void 0 ? 32 : _a, threadList = props.threadList;
        var _b = useChannelStateContext('TypingIndicator'), channelConfig = _b.channelConfig, thread = _b.thread;
        var client = useChatContext('TypingIndicator').client;
        var ContextAvatar = useComponentContext('TypingIndicator').Avatar;
        var _c = useTypingContext('TypingIndicator').typing, typing = _c === void 0 ? {} : _c;
        var Avatar$1 = PropAvatar || ContextAvatar || Avatar;
        if ((channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.typing_events) === false) {
            return null;
        }
        var typingInChannel = !threadList
            ? Object.values(typing).filter(function (_a) {
                var _b;
                var parent_id = _a.parent_id, user = _a.user;
                return (user === null || user === void 0 ? void 0 : user.id) !== ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id) && !parent_id;
            })
            : [];
        var typingInThread = threadList
            ? Object.values(typing).filter(function (_a) {
                var _b;
                var parent_id = _a.parent_id, user = _a.user;
                return (user === null || user === void 0 ? void 0 : user.id) !== ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id) && parent_id === (thread === null || thread === void 0 ? void 0 : thread.id);
            })
            : [];
        return (React__default['default'].createElement("div", { className: "str-chat__typing-indicator " + ((threadList && typingInThread.length) || (!threadList && typingInChannel.length)
                ? 'str-chat__typing-indicator--typing'
                : '') },
            React__default['default'].createElement("div", { className: 'str-chat__typing-indicator__avatars' }, (threadList ? typingInThread : typingInChannel).map(function (_a, i) {
                var user = _a.user;
                return (React__default['default'].createElement(Avatar$1, { image: user === null || user === void 0 ? void 0 : user.image, key: (user === null || user === void 0 ? void 0 : user.id) + "-" + i, name: (user === null || user === void 0 ? void 0 : user.name) || (user === null || user === void 0 ? void 0 : user.id), size: avatarSize, user: user }));
            })),
            React__default['default'].createElement("div", { className: 'str-chat__typing-indicator__dots' },
                React__default['default'].createElement("span", { className: 'str-chat__typing-indicator__dot' }),
                React__default['default'].createElement("span", { className: 'str-chat__typing-indicator__dot' }),
                React__default['default'].createElement("span", { className: 'str-chat__typing-indicator__dot' }))));
    };
    var TypingIndicator = React__default['default'].memo(UnMemoizedTypingIndicator);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageListWithContext = function (props) {
        var channel = props.channel, _a = props.disableDateSeparator, disableDateSeparator = _a === void 0 ? false : _a, groupStyles = props.groupStyles, _b = props.hideDeletedMessages, hideDeletedMessages = _b === void 0 ? false : _b, _c = props.hideNewMessageSeparator, hideNewMessageSeparator = _c === void 0 ? false : _c, _d = props.messageActions, messageActions = _d === void 0 ? Object.keys(MESSAGE_ACTIONS) : _d, _e = props.messages, messages = _e === void 0 ? [] : _e, notifications = props.notifications, _f = props.noGroupByUser, noGroupByUser = _f === void 0 ? false : _f, _g = props.pinPermissions, pinPermissions = _g === void 0 ? defaultPinPermissions : _g, // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release
        _h = props.returnAllReadData, // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release
        returnAllReadData = _h === void 0 ? false : _h, _j = props.threadList, threadList = _j === void 0 ? false : _j, _k = props.unsafeHTML, unsafeHTML = _k === void 0 ? false : _k, headerPosition = props.headerPosition, read = props.read, _l = props.messageLimit, messageLimit = _l === void 0 ? 100 : _l, loadMoreCallback = props.loadMore, loadMoreNewerCallback = props.loadMoreNewer, _m = props.hasMoreNewer, hasMoreNewer = _m === void 0 ? false : _m, suppressAutoscroll = props.suppressAutoscroll, highlightedMessageId = props.highlightedMessageId, _o = props.jumpToLatestMessage, jumpToLatestMessage = _o === void 0 ? function () { return Promise.resolve(); } : _o;
        var _p = React__default['default'].useState(null), listElement = _p[0], setListElement = _p[1];
        var _q = React__default['default'].useState(null), ulElement = _q[0], setUlElement = _q[1];
        var customClasses = useChatContext('MessageList').customClasses;
        var _r = useComponentContext('MessageList'), _s = _r.EmptyStateIndicator, EmptyStateIndicator$1 = _s === void 0 ? EmptyStateIndicator : _s, _t = _r.MessageListNotifications, MessageListNotifications$1 = _t === void 0 ? MessageListNotifications : _t, _u = _r.MessageNotification, MessageNotification$1 = _u === void 0 ? MessageNotification : _u, _v = _r.TypingIndicator, TypingIndicator$1 = _v === void 0 ? TypingIndicator : _v;
        var _w = useScrollLocationLogic({
            hasMoreNewer: hasMoreNewer,
            listElement: listElement,
            messages: messages,
            scrolledUpThreshold: props.scrolledUpThreshold,
            suppressAutoscroll: suppressAutoscroll,
            ulElement: ulElement,
        }), hasNewMessages = _w.hasNewMessages, onMessageLoadCaptured = _w.onMessageLoadCaptured, onScroll = _w.onScroll, scrollToBottom = _w.scrollToBottom, wrapperRect = _w.wrapperRect;
        var _x = useEnrichedMessages({
            channel: channel,
            disableDateSeparator: disableDateSeparator,
            groupStyles: groupStyles,
            headerPosition: headerPosition,
            hideDeletedMessages: hideDeletedMessages,
            hideNewMessageSeparator: hideNewMessageSeparator,
            messages: messages,
            noGroupByUser: noGroupByUser,
        }), messageGroupStyles = _x.messageGroupStyles, enrichedMessages = _x.messages;
        var elements = useMessageListElements({
            enrichedMessages: enrichedMessages,
            internalMessageProps: {
                additionalMessageInputProps: props.additionalMessageInputProps,
                closeReactionSelectorOnClick: props.closeReactionSelectorOnClick,
                customMessageActions: props.customMessageActions,
                disableQuotedMessages: props.disableQuotedMessages,
                formatDate: props.formatDate,
                getDeleteMessageErrorNotification: props.getDeleteMessageErrorNotification,
                getFlagMessageErrorNotification: props.getFlagMessageErrorNotification,
                getFlagMessageSuccessNotification: props.getFlagMessageSuccessNotification,
                getMuteUserErrorNotification: props.getMuteUserErrorNotification,
                getMuteUserSuccessNotification: props.getMuteUserSuccessNotification,
                getPinMessageErrorNotification: props.getPinMessageErrorNotification,
                Message: props.Message,
                messageActions: messageActions,
                messageListRect: wrapperRect,
                onlySenderCanEdit: props.onlySenderCanEdit,
                onMentionsClick: props.onMentionsClick,
                onMentionsHover: props.onMentionsHover,
                onUserClick: props.onUserClick,
                onUserHover: props.onUserHover,
                openThread: props.openThread,
                pinPermissions: pinPermissions,
                renderText: props.renderText,
                retrySendMessage: props.retrySendMessage,
                unsafeHTML: unsafeHTML,
            },
            messageGroupStyles: messageGroupStyles,
            onMessageLoadCaptured: onMessageLoadCaptured,
            read: read,
            returnAllReadData: returnAllReadData,
            threadList: threadList,
        });
        var _y = useComponentContext('useInternalInfiniteScrollProps').LoadingIndicator, LoadingIndicator$1 = _y === void 0 ? LoadingIndicator : _y;
        var messageListClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.messageList) || 'str-chat__list';
        var threadListClass = threadList ? (customClasses === null || customClasses === void 0 ? void 0 : customClasses.threadList) || 'str-chat__list--thread' : '';
        var loadMore = React__default['default'].useCallback(function () {
            if (loadMoreCallback) {
                loadMoreCallback(messageLimit);
            }
        }, [loadMoreCallback, messageLimit]);
        var loadMoreNewer = React__default['default'].useCallback(function () {
            if (loadMoreNewerCallback) {
                loadMoreNewerCallback(messageLimit);
            }
        }, [loadMoreNewerCallback, messageLimit]);
        var scrollToBottomFromNotification = React__default['default'].useCallback(function () { return __awaiter$1(void 0, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!hasMoreNewer) return [3 /*break*/, 2];
                        return [4 /*yield*/, jumpToLatestMessage()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        scrollToBottom();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        }); }, [scrollToBottom, hasMoreNewer]);
        React__default['default'].useLayoutEffect(function () {
            if (highlightedMessageId) {
                var element = ulElement === null || ulElement === void 0 ? void 0 : ulElement.querySelector("[data-message-id='" + highlightedMessageId + "']");
                element === null || element === void 0 ? void 0 : element.scrollIntoView({ block: 'center' });
            }
        }, [highlightedMessageId]);
        return (React__default['default'].createElement(React__default['default'].Fragment, null,
            React__default['default'].createElement("div", { className: messageListClass + " " + threadListClass, onScroll: onScroll, ref: setListElement, tabIndex: 0 }, !elements.length ? (React__default['default'].createElement(EmptyStateIndicator$1, { listType: 'message' })) : (React__default['default'].createElement(InfiniteScroll, __assign$2({ className: 'str-chat__reverse-infinite-scroll', "data-testid": 'reverse-infinite-scroll', hasMore: props.hasMore, hasMoreNewer: props.hasMoreNewer, isLoading: props.loadingMore, loader: React__default['default'].createElement("div", { className: 'str-chat__list__loading', key: 'loadingindicator' }, props.loadingMore && React__default['default'].createElement(LoadingIndicator$1, { size: 20 })), loadMore: loadMore, loadMoreNewer: loadMoreNewer }, props.internalInfiniteScrollProps),
                React__default['default'].createElement("ul", { className: 'str-chat__ul', ref: setUlElement }, elements),
                React__default['default'].createElement(TypingIndicator$1, { threadList: threadList }),
                React__default['default'].createElement("div", { key: 'bottom' })))),
            React__default['default'].createElement(MessageListNotifications$1, { hasNewMessages: hasNewMessages, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification$1, notifications: notifications, scrollToBottom: scrollToBottomFromNotification })));
    };
    /**
     * The MessageList component renders a list of Messages.
     * It is a consumer of the following contexts:
     * - [ChannelStateContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_state_context/)
     * - [ChannelActionContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_action_context/)
     * - [ComponentContext](https://getstream.io/chat/docs/sdk/react/contexts/component_context/)
     * - [TypingContext](https://getstream.io/chat/docs/sdk/react/contexts/typing_context/)
     */
    var MessageList = function (props) {
        var _a = useChannelActionContext('MessageList'), jumpToLatestMessage = _a.jumpToLatestMessage, loadMore = _a.loadMore, loadMoreNewer = _a.loadMoreNewer;
        var _b = useChannelStateContext('MessageList'); _b.members; // eslint-disable-line @typescript-eslint/no-unused-vars
        _b.mutes; // eslint-disable-line @typescript-eslint/no-unused-vars
        _b.watchers; // eslint-disable-line @typescript-eslint/no-unused-vars
        var restChannelStateContext = __rest(_b, ["members", "mutes", "watchers"]);
        return (React__default['default'].createElement(MessageListWithContext, __assign$2({ jumpToLatestMessage: jumpToLatestMessage, loadMore: loadMore, loadMoreNewer: loadMoreNewer }, restChannelStateContext, props)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var PUBLISH = 0;
    var SUBSCRIBE = 1;
    var RESET = 2;
    var VALUE = 4;

    /**
     * Utils includes
     * - a handful of functional utilities inspired by or taken from the [Ramda library](https://ramdajs.com/);
     * - TypeScript crutches - the [[tup]] function.
     *
     * Use these for your convenience - they are here so that urx is zero-dependency package.
     *
     * @packageDocumentation
     */

    /**
     * Performs left to right composition of two functions.
     */
    function compose(a, b) {
      return function (arg) {
        return a(b(arg));
      };
    }
    /**
     * Takes a value and applies a function to it.
     */

    function thrush(arg, proc) {
      return proc(arg);
    }
    /**
     * Takes a 2 argument function and partially applies the first argument.
     */

    function curry2to1(proc, arg1) {
      return function (arg2) {
        return proc(arg1, arg2);
      };
    }
    /**
     * Takes a 1 argument function and returns a function which when called, executes it with the provided argument.
     */

    function curry1to0(proc, arg) {
      return function () {
        return proc(arg);
      };
    }
    /**
     * Returns a function which extracts the property from from the passed object.
     */

    function prop(property) {
      return function (object) {
        return object[property];
      };
    }
    /**
     * Calls callback with the first argument, and returns it.
     */

    function tap(arg, proc) {
      proc(arg);
      return arg;
    }
    /**
     *  Utility function to help typescript figure out that what we pass is a tuple and not a generic array.
     *  Taken from (this StackOverflow tread)[https://stackoverflow.com/questions/49729550/implicitly-create-a-tuple-in-typescript/52445008#52445008]
     */

    function tup() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return args;
    }
    /**
     * Calls the passed function.
     */

    function call(proc) {
      proc();
    }
    /**
     * returns a function which when called always returns the passed value
     */

    function always(value) {
      return function () {
        return value;
      };
    }
    /**
     * returns a function which calls all passed functions in the passed order.
     * joinProc does not pass arguments or collect return values.
     */

    function joinProc() {
      for (var _len2 = arguments.length, procs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        procs[_key2] = arguments[_key2];
      }

      return function () {
        procs.map(call);
      };
    }
    function noop() {}

    /**
     * urx Actions operate on streams - `publish` publishes data in a stream, and `subscribe` attaches a subscription to a stream.
     * @packageDocumentation
     */
    /**
     * Subscribes the specified [[Subscription]] to the updates from the Emitter.
     * The emitter calls the subscription with the new data each time new data is published into it.
     *
     * ```ts
     * const foo = stream<number>();
     * subscribe(foo, (value) => console.log(value));
     * ```
     *
     * @returns an [[Unsubscribe]] handle  - calling it will unbind the subscription from the emitter.
     *```ts
     * const foo = stream<number>();
     * const unsub = subscribe(foo, (value) => console.log(value));
     * unsub();
     *```
     */

    function subscribe(emitter, subscription) {
      return emitter(SUBSCRIBE, subscription);
    }
    /**
     * Publishes the value into the passed [[Publisher]].
     *
     * ```ts
     * const foo = stream<number>();
     * publish(foo, 42);
     * ```
     */

    function publish(publisher, value) {
      publisher(PUBLISH, value);
    }
    /**
     * Clears all subscriptions from the [[Emitter]].
     * ```ts
     * const foo = stream<number>();
     * subscribe(foo, (value) => console.log(value));
     * reset(foo);
     * publish(foo, 42);
     * ```
     */

    function reset(emitter) {
      emitter(RESET);
    }
    /**
     * Extracts the current value from a stateful stream. Use it only as an escape hatch, as it violates the concept of reactive programming.
     * ```ts
     * const foo = statefulStream(42);
     * console.log(getValue(foo));
     * ```
     */

    function getValue(depot) {
      return depot(VALUE);
    }
    /**
     * Connects two streams - any value emitted from the emitter will be published in the publisher.
     * ```ts
     * const foo = stream<number>();
     * const bar = stream<number>();
     * subscribe(bar, (value) => console.log(`Bar emitted ${value}`));
     *
     * connect(foo, bar);
     * publish(foo);
     * ```
     * @returns an [[Unsubscribe]] handle which will disconnect the two streams.
     */

    function connect(emitter, publisher) {
      return subscribe(emitter, curry2to1(publisher, PUBLISH));
    }
    /**
     * Executes the passed subscription at most once, for the next emit from the emitter.
     * ```ts
     * const foo = stream<number>()
     * handleNext(foo, value => console.log(value)) // called once, with 42
     * publish(foo, 42)
     * publish(foo, 43)
     * ```
     * @returns an [[Unsubscribe]] handle to unbind the subscription if necessary.
     */

    function handleNext(emitter, subscription) {
      var unsub = emitter(SUBSCRIBE, function (value) {
        unsub();
        subscription(value);
      });
      return unsub;
    }

    /**
     * Streams are the basic building blocks of a reactive system. Think of them as the system permanent "data tubes".
     *
     * A stream acts as both an [[Emitter]] and [[Publisher]]. Each stream can have multiple {@link Subscription | Subscriptions}.
     *
     * urx streams are either **stateless** or **stateful**.
     * Stateless streams emit data to existing subscriptions when published, without keeping track of it.
     * Stateful streams remember the last published value and immediately publish it to new subscriptions.
     *
     * ```ts
     * import { stream, statefulStream, publish, subscribe } from "@virtuoso.dev/urx";
     *
     * // foo is a stateless stream
     * const foo = stream<number>();
     *
     * publish(foo, 42);
     * // this subsription will not be called...
     * subscribe(foo, (value) => console.log(value));
     * // it will only catch published values after it
     * publish(foo, 43);
     *
     * // stateful streams always start with an initial value
     * const bar = statefulStream(42);
     *
     * // subscribing to a stateful stream
     * // immediately calls the subscription with the current value
     * subscribe(bar, (value) => console.log(value));
     *
     * // subsequent publishing works just like stateless streams
     * publish(bar, 43);
     * ```
     * @packageDocumentation
     */
    /**
     * Constructs a new stateless stream.
     * ```ts
     * const foo = stream<number>();
     * ```
     * @typeParam T the type of values to publish in the stream.
     * @returns a [[Stream]]
     */

    function stream() {
      var subscriptions = [];
      return function (action, arg) {
        switch (action) {
          case RESET:
            subscriptions.splice(0, subscriptions.length);
            return;

          case SUBSCRIBE:
            subscriptions.push(arg);
            return function () {
              var indexOf = subscriptions.indexOf(arg);

              if (indexOf > -1) {
                subscriptions.splice(indexOf, 1);
              }
            };

          case PUBLISH:
            subscriptions.slice().forEach(function (subscription) {
              subscription(arg);
            });
            return;

          default:
            throw new Error("unrecognized action " + action);
        }
      };
    }
    /**
     * Constructs a new stateful stream.
     * ```ts
     * const foo = statefulStream(42);
     * ```
     * @param initial the initial value in the stream.
     * @typeParam T the type of values to publish in the stream. If omitted, the function infers it from the initial value.
     * @returns a [[StatefulStream]]
     */

    function statefulStream(initial) {
      var value = initial;
      var innerSubject = stream();
      return function (action, arg) {
        switch (action) {
          case SUBSCRIBE:
            var subscription = arg;
            subscription(value);
            break;

          case PUBLISH:
            value = arg;
            break;

          case VALUE:
            return value;
        }

        return innerSubject(action, arg);
      };
    }
    /**
     * Event handlers are special emitters which can have **at most one active subscription**.
     * Subscribing to an event handler unsubscribes the previous subscription, if present.
     * ```ts
     * const foo = stream<number>();
     * const fooEvent = eventHandler(foo);
     *
     * // will be called once with 42
     * subscribe(fooEvent, (value) => console.log(`Sub 1 ${value}`));
     * publish(foo, 42);
     *
     * // unsubscribes sub 1
     * subscribe(fooEvent, (value) => console.log(`Sub 2 ${value}`));
     * publish(foo, 43);
     * ```
     * @param emitter the source emitter.
     * @returns the single-subscription emitter.
     */

    function eventHandler(emitter) {
      var unsub;
      var currentSubscription;

      var cleanup = function cleanup() {
        return unsub && unsub();
      };

      return function (action, subscription) {
        switch (action) {
          case SUBSCRIBE:
            if (subscription) {
              if (currentSubscription === subscription) {
                return;
              }

              cleanup();
              currentSubscription = subscription;
              unsub = subscribe(emitter, subscription);
              return unsub;
            } else {
              cleanup();
              return noop;
            }

          case RESET:
            cleanup();
            currentSubscription = null;
            return;

          default:
            throw new Error("unrecognized action " + action);
        }
      };
    }
    /**
     * Creates and connects a "junction" stream to the specified emitter. Often used with [[pipe]], to avoid the multiple evaluation of operator sets.
     *
     * ```ts
     * const foo = stream<number>();
     *
     * const fooX2 = pipe(
     *   foo,
     *   map((value) => {
     *     console.log(`multiplying ${value}`);
     *     return value * 2;
     *   })
     * );
     *
     * subscribe(fooX2, (value) => console.log(value));
     * subscribe(fooX2, (value) => console.log(value));
     *
     * publish(foo, 42); // executes the map operator twice for each subscription.
     *
     * const sharedFooX2 = streamFromEmitter(pipe(
     *   foo,
     *   map((value) => {
     *     console.log(`shared multiplying ${value}`);
     *     return value * 2;
     *   })
     * ));
     *
     * subscribe(sharedFooX2, (value) => console.log(value));
     * subscribe(sharedFooX2, (value) => console.log(value));
     *
     * publish(foo, 42);
     *```
     * @returns the resulting stream.
     */

    function streamFromEmitter(emitter) {
      return tap(stream(), function (stream) {
        return connect(emitter, stream);
      });
    }
    /**
     * Creates and connects a "junction" stateful stream to the specified emitter. Often used with [[pipe]], to avoid the multiple evaluation of operator sets.
     *
     * ```ts
     * const foo = stream<number>();
     *
     * const fooX2 = pipe(
     *   foo,
     *   map((value) => {
     *     console.log(`multiplying ${value}`);
     *     return value * 2;
     *   })
     * );
     *
     * subscribe(fooX2, (value) => console.log(value));
     * subscribe(fooX2, (value) => console.log(value));
     *
     * publish(foo, 42); // executes the map operator twice for each subscription.
     *
     * const sharedFooX2 = statefulStreamFromEmitter(pipe(
     *   foo,
     *   map((value) => {
     *     console.log(`shared multiplying ${value}`);
     *     return value * 2;
     *   })
     * ), 42);
     *
     * subscribe(sharedFooX2, (value) => console.log(value));
     * subscribe(sharedFooX2, (value) => console.log(value));
     *
     * publish(foo, 42);
     *```
     * @param initial the initial value in the stream.
     * @returns the resulting stateful stream.
     */

    function statefulStreamFromEmitter(emitter, initial) {
      return tap(statefulStream(initial), function (stream) {
        return connect(emitter, stream);
      });
    }

    /**
     *
     * Stream values can be transformed and controlled by {@link pipe | **piping**} through **operators**.
     * urx includes several operators like [[map]], [[filter]], [[scan]], and [[throttleTime]].
     * The [[withLatestFrom]] operator allows the combination of values from other streams.
     *
     * ```ts
     * const foo = stream<number>()
     *
     * // create an emitter that first adds 2 to the passed value, then multiplies it by * 2
     * const bar = pipe(foo, map(value => value + 2), map(value => value * 2))
     * subscribe(bar, value => console.log(value))
     * publish(foo, 2) // outputs 8
     * ```
     *
     * ### Implementing Custom Operators
     * To implement your own operators, implement the [[Operator]] interface.
     * @packageDocumentation
     */
    /** @internal */

    function combineOperators() {
      for (var _len = arguments.length, operators = new Array(_len), _key = 0; _key < _len; _key++) {
        operators[_key] = arguments[_key];
      }

      return function (subscriber) {
        return operators.reduceRight(thrush, subscriber);
      };
    }

    function pipe(source) {
      for (var _len2 = arguments.length, operators = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        operators[_key2 - 1] = arguments[_key2];
      }

      // prettier-ignore
      var project = combineOperators.apply(void 0, operators);
      return function (action, subscription) {
        switch (action) {
          case SUBSCRIBE:
            return subscribe(source, project(subscription));

          case RESET:
            reset(source);
            return;

          default:
            throw new Error("unrecognized action " + action);
        }
      };
    }
    /**
     * The default [[Comparator]] for [[distinctUntilChanged]] and [[duc]].
     */

    function defaultComparator(previous, next) {
      return previous === next;
    }
    /**
     * Filters out identical values. Pass an optional [[Comparator]] if you need to filter non-primitive values.
     * ```ts
     * const foo = stream<number>()
     *
     * subscribe(
     *  pipe(foo, distinctUntilChanged()),
     *  console.log
     * ) // will be called only once
     *
     * publish(foo, 42)
     * publish(foo, 42)
     * ```
     */

    function distinctUntilChanged(comparator) {
      if (comparator === void 0) {
        comparator = defaultComparator;
      }

      var current;
      return function (done) {
        return function (next) {
          if (!comparator(current, next)) {
            current = next;
            done(next);
          }
        };
      };
    }
    /**
     * Filters out values for which the predicator does not return `true`-ish.
     * ```ts
     * const foo = stream<number>()
     *
     * subscribe(
     *  pipe(foo, filter(value => value % 2 === 0)),
     *  console.log
     * ) // will be called only with even values
     *
     * publish(foo, 2)
     * publish(foo, 3)
     * publish(foo, 4)
     * publish(foo, 5)
     * ```
     */

    function filter(predicate) {
      return function (done) {
        return function (value) {
          predicate(value) && done(value);
        };
      };
    }
    /**
     * Maps values using the provided project function.
     * ```ts
     * const foo = stream<number>()
     *
     * subscribe(
     *  pipe(foo, map(value => value * 2)),
     *  console.log
     * ) // 4, 6
     *
     * publish(foo, 2)
     * publish(foo, 3)
     * ```
     */

    function map(project) {
      return function (done) {
        return compose(done, project);
      };
    }
    /**
     * Maps values to the hard-coded value.
     * ```ts
     * const foo = stream<number>()
     *
     * subscribe(
     *  pipe(foo, mapTo(3)),
     *  console.log
     * ) // 3, 3
     *
     * publish(foo, 1)
     * publish(foo, 2)
     * ```
     */

    function mapTo(value) {
      return function (done) {
        return function () {
          return done(value);
        };
      };
    }
    /**
     * Works like Array#reduce.
     * Applies an accumulator function on the emitter, and outputs intermediate result. Starts with the initial value.
     * ```ts
     * const foo = stream<number>()
     *
     * subscribe(
     *  pipe(foo, scan((acc, value) => acc + value, 2),
     *  console.log
     * ) // 3, 5
     *
     * publish(foo, 1)
     * publish(foo, 2)
     * ```
     */

    function scan(scanner, initial) {
      return function (done) {
        return function (value) {
          return done(initial = scanner(initial, value));
        };
      };
    }
    /**
     * Skips the specified amount of values from the emitter.
     * ```ts
     * const foo = stream<number>()
     *
     * subscribe(
     *  pipe(foo, skip(2)),
     *  console.log
     * ) // 3, 4
     *
     * publish(foo, 1) // skipped
     * publish(foo, 2) // skipped
     * publish(foo, 3)
     * publish(foo, 4)
     * ```
     */

    function skip(times) {
      return function (done) {
        return function (value) {
          times > 0 ? times-- : done(value);
        };
      };
    }
    /**
     * Throttles flowing values at the provided interval in milliseconds.
     * [Throttle VS Debounce in SO](https://stackoverflow.com/questions/25991367/difference-between-throttling-and-debouncing-a-function).
     *
     * ```ts
     *  const foo = stream<number>()
     *  publish(foo, 1)
     *
     *  setTimeout(() => publish(foo, 2), 20)
     *  setTimeout(() => publish(foo, 3), 20)
     *
     *  subscribe(pipe(foo, throttleTime(50)), val => {
     *    console.log(value); // 3
     *  })
     * ```
     */

    function throttleTime(interval) {
      var currentValue;
      var timeout;
      return function (done) {
        return function (value) {
          currentValue = value;

          if (timeout) {
            return;
          }

          timeout = setTimeout(function () {
            timeout = undefined;
            done(currentValue);
          }, interval);
        };
      };
    }
    /**
     * Debounces flowing values at the provided interval in milliseconds.
     * [Throttle VS Debounce in SO](https://stackoverflow.com/questions/25991367/difference-between-throttling-and-debouncing-a-function).
     *
     * ```ts
     *  const foo = stream<number>()
     *  publish(foo, 1)
     *
     *  setTimeout(() => publish(foo, 2), 20)
     *  setTimeout(() => publish(foo, 3), 20)
     *
     *  subscribe(pipe(foo, debounceTime(50)), val => {
     *    console.log(value); // 3
     *  })
     * ```
     */

    function debounceTime(interval) {
      var currentValue;
      var timeout;
      return function (done) {
        return function (value) {
          currentValue = value;

          if (timeout) {
            clearTimeout(timeout);
          }

          timeout = setTimeout(function () {
            done(currentValue);
          }, interval);
        };
      };
    }
    function withLatestFrom() {
      for (var _len3 = arguments.length, sources = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        sources[_key3] = arguments[_key3];
      }

      var values = new Array(sources.length);
      var called = 0;
      var pendingCall = null;
      var allCalled = Math.pow(2, sources.length) - 1;
      sources.forEach(function (source, index) {
        var bit = Math.pow(2, index);
        subscribe(source, function (value) {
          var prevCalled = called;
          called = called | bit;
          values[index] = value;

          if (prevCalled !== allCalled && called === allCalled && pendingCall) {
            pendingCall();
            pendingCall = null;
          }
        });
      });
      return function (done) {
        return function (value) {
          var call = function call() {
            return done([value].concat(values));
          };

          if (called === allCalled) {
            call();
          } else {
            pendingCall = call;
          }
        };
      };
    }

    /**
     * Transformers change and combine streams, similar to operators.
     * urx comes with two combinators - [[combineLatest]] and [[merge]], and one convenience filter - [[duc]].
     *
     * @packageDocumentation
     */
    /**
     * Merges one or more emitters from the same type into a new Emitter which emits values from any of the source emitters.
     * ```ts
     * const foo = stream<number>()
     * const bar = stream<number>()
     *
     * subscribe(merge(foo, bar), (value) => console.log(value)) // 42, 43
     *
     * publish(foo, 42)
     * publish(bar, 43)
     * ```
     */

    function merge() {
      for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
        sources[_key] = arguments[_key];
      }

      return function (action, subscription) {
        switch (action) {
          case SUBSCRIBE:
            return joinProc.apply(void 0, sources.map(function (source) {
              return subscribe(source, subscription);
            }));

          case RESET:
            // do nothing, we are stateless
            return;

          default:
            throw new Error("unrecognized action " + action);
        }
      };
    }
    /**
     * A convenience wrapper that emits only the distinct values from the passed Emitter. Wraps [[pipe]] and [[distinctUntilChanged]].
     *
     * ```ts
     * const foo = stream<number>()
     *
     * // this line...
     * const a = duc(foo)
     *
     * // is equivalent to this
     * const b = pipe(distinctUntilChanged(foo))
     * ```
     *
     * @param source The source emitter.
     * @param comparator optional custom comparison function for the two values.
     *
     * @typeParam T the type of the value emitted by the source.
     *
     * @returns the resulting emitter.
     */

    function duc(source, comparator) {
      if (comparator === void 0) {
        comparator = defaultComparator;
      }

      return pipe(source, distinctUntilChanged(comparator));
    }
    function combineLatest() {
      var innerSubject = stream();

      for (var _len2 = arguments.length, emitters = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        emitters[_key2] = arguments[_key2];
      }

      var values = new Array(emitters.length);
      var called = 0;
      var allCalled = Math.pow(2, emitters.length) - 1;
      emitters.forEach(function (source, index) {
        var bit = Math.pow(2, index);
        subscribe(source, function (value) {
          values[index] = value;
          called = called | bit;

          if (called === allCalled) {
            publish(innerSubject, values);
          }
        });
      });
      return function (action, subscription) {
        switch (action) {
          case SUBSCRIBE:
            if (called === allCalled) {
              subscription(values);
            }

            return subscribe(innerSubject, subscription);

          case RESET:
            return reset(innerSubject);

          default:
            throw new Error("unrecognized action " + action);
        }
      };
    }

    /**
     * `system` defines a specification of a system - its constructor, dependencies and if it should act as a singleton in a system dependency tree.
     * When called, system returns a [[SystemSpec]], which is then initialized along with its dependencies by passing it to [[init]].
     *
     * ```ts
     * @import { subscribe, publish, system, init, tup, connect, map, pipe } from 'urx'
     *
     * // a simple system with two streams
     * const sys1 = system(() => {
     *  const a = stream<number>()
     *  const b = stream<number>()
     *
     *  connect(pipe(a, map(value => value * 2)), b)
     *  return { a, b }
     * })
     *
     * // a second system which depends on the streams from the first one
     * const sys2 = system(([ {a, b} ]) => {
     *  const c = stream<number>()
     *  connect(pipe(b, map(value => value * 2)), c)
     *  // re-export the `a` stream, keep `b` internal
     *  return { a, c }
     * }, tup(sys1))
     *
     * // init will recursively initialize sys2 dependencies, in this case sys1
     * const { a, c } = init(sys2)
     * subscribe(c, c => console.log(`Value multiplied by 4`, c))
     * publish(a, 2)
     * ```
     *
     * #### Singletons in Dependency Tree
     *
     * By default, systems will be initialized only once if encountered multiple times in the dependency tree.
     * In the below dependency system tree, systems `b` and `c` will receive the same stream instances from system `a` when system `d` is initialized.
     * ```txt
     *   a
     *  / \
     * b   c
     *  \ /
     *   d
     * ```
     * If `a` gets `{singleton: false}` as a last argument, `init` creates two separate instances - one for `b` and one for `c`.
     *
     * @param constructor the system constructor function. Initialize and connect the streams in its body.
     *
     * @param dependencies the system dependencies, which the constructor will receive as arguments.
     * Use the [[tup]] utility **For TypeScript type inference to work correctly**.
     * ```ts
     * const sys3 = system(() => { ... }, tup(sys2, sys1))
     * ```
     * @param __namedParameters Options
     * @param singleton determines if the system will act as a singleton in a system dependency tree. `true` by default.
     */
    function system(constructor, dependencies, _temp) {
      if (dependencies === void 0) {
        dependencies = [];
      }

      var _ref = _temp === void 0 ? {
        singleton: true
      } : _temp,
          singleton = _ref.singleton;

      return {
        id: id(),
        constructor: constructor,
        dependencies: dependencies,
        singleton: singleton
      };
    }
    /** @internal */

    var id = function id() {
      return Symbol();
    };
    /**
     * Initializes a [[SystemSpec]] by recursively initializing its dependencies.
     *
     * ```ts
     * // a simple system with two streams
     * const sys1 = system(() => {
     *  const a = stream<number>()
     *  const b = stream<number>()
     *
     *  connect(pipe(a, map(value => value * 2)), b)
     *  return { a, b }
     * })
     *
     * const { a, b } = init(sys1)
     * subscribe(b, b => console.log(b))
     * publish(a, 2)
     * ```
     *
     * @returns the [[System]] constructed by the spec constructor.
     * @param systemSpec the system spec to initialize.
     */


    function init(systemSpec) {
      var singletons = new Map();

      var _init = function _init(_ref2) {
        var id = _ref2.id,
            constructor = _ref2.constructor,
            dependencies = _ref2.dependencies,
            singleton = _ref2.singleton;

        if (singleton && singletons.has(id)) {
          return singletons.get(id);
        }

        var system = constructor(dependencies.map(function (e) {
          return _init(e);
        }));

        if (singleton) {
          singletons.set(id, system);
        }

        return system;
      };

      return _init(systemSpec);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;

      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }

      return target;
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

      return arr2;
    }

    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);

      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;
        return function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var _excluded = ["children"];
    /** @internal */

    function omit(keys, obj) {
      var result = {};
      var index = {};
      var idx = 0;
      var len = keys.length;

      while (idx < len) {
        index[keys[idx]] = 1;
        idx += 1;
      }

      for (var prop in obj) {
        if (!index.hasOwnProperty(prop)) {
          result[prop] = obj[prop];
        }
      }

      return result;
    }

    var useIsomorphicLayoutEffect = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect;
    /**
     * Converts a system spec to React component by mapping the system streams to component properties, events and methods. Returns hooks for querying and modifying
     * the system streams from the component's child components.
     * @param systemSpec The return value from a [[system]] call.
     * @param map The streams to props / events / methods mapping Check [[SystemPropsMap]] for more details.
     * @param Root The optional React component to render. By default, the resulting component renders nothing, acting as a logical wrapper for its children.
     * @returns an object containing the following:
     *  - `Component`: the React component.
     *  - `useEmitterValue`: a hook that lets child components use values emitted from the specified output stream.
     *  - `useEmitter`: a hook that calls the provided callback whenever the specified stream emits a value.
     *  - `usePublisher`: a hook which lets child components publish values to the specified stream.
     *  <hr />
     */

    function systemToComponent(systemSpec, map, Root) {
      var requiredPropNames = Object.keys(map.required || {});
      var optionalPropNames = Object.keys(map.optional || {});
      var methodNames = Object.keys(map.methods || {});
      var eventNames = Object.keys(map.events || {});
      var Context = React.createContext({});

      function applyPropsToSystem(system, props) {
        if (system['propsReady']) {
          publish(system['propsReady'], false);
        }

        for (var _iterator = _createForOfIteratorHelperLoose(requiredPropNames), _step; !(_step = _iterator()).done;) {
          var requiredPropName = _step.value;
          var stream = system[map.required[requiredPropName]];
          publish(stream, props[requiredPropName]);
        }

        for (var _iterator2 = _createForOfIteratorHelperLoose(optionalPropNames), _step2; !(_step2 = _iterator2()).done;) {
          var optionalPropName = _step2.value;

          if (optionalPropName in props) {
            var _stream = system[map.optional[optionalPropName]];
            publish(_stream, props[optionalPropName]);
          }
        }

        if (system['propsReady']) {
          publish(system['propsReady'], true);
        }
      }

      function buildMethods(system) {
        return methodNames.reduce(function (acc, methodName) {

          acc[methodName] = function (value) {
            var stream = system[map.methods[methodName]];
            publish(stream, value);
          };

          return acc;
        }, {});
      }

      function buildEventHandlers(system) {
        return eventNames.reduce(function (handlers, eventName) {
          handlers[eventName] = eventHandler(system[map.events[eventName]]);
          return handlers;
        }, {});
      }
      /**
       * A React component generated from an urx system
       */


      var Component = React.forwardRef(function (propsWithChildren, ref) {
        var children = propsWithChildren.children,
            props = _objectWithoutPropertiesLoose(propsWithChildren, _excluded);

        var _useState = React.useState(function () {
          return tap(init(systemSpec), function (system) {
            return applyPropsToSystem(system, props);
          });
        }),
            system = _useState[0];

        var _useState2 = React.useState(curry1to0(buildEventHandlers, system)),
            handlers = _useState2[0];

        useIsomorphicLayoutEffect(function () {
          for (var _iterator3 = _createForOfIteratorHelperLoose(eventNames), _step3; !(_step3 = _iterator3()).done;) {
            var eventName = _step3.value;

            if (eventName in props) {
              subscribe(handlers[eventName], props[eventName]);
            }
          }

          return function () {
            Object.values(handlers).map(reset);
          };
        }, [props, handlers, system]);
        useIsomorphicLayoutEffect(function () {
          applyPropsToSystem(system, props);
        });
        React.useImperativeHandle(ref, always(buildMethods(system)));
        return React.createElement(Context.Provider, {
          value: system
        }, Root ? React.createElement(Root, omit([].concat(requiredPropNames, optionalPropNames, eventNames), props), children) : children);
      });

      var usePublisher = function usePublisher(key) {
        return React.useCallback(curry2to1(publish, React.useContext(Context)[key]), [key]);
      };
      /**
       * Returns the value emitted from the stream.
       */


      var useEmitterValue = function useEmitterValue(key) {
        var context = React.useContext(Context);
        var source = context[key];

        var _useState3 = React.useState(curry1to0(getValue, source)),
            value = _useState3[0],
            setValue = _useState3[1];

        useIsomorphicLayoutEffect(function () {
          return subscribe(source, function (next) {
            if (next !== value) {
              setValue(always(next));
            }
          });
        }, [source, value]);
        return value;
      };

      var useEmitter = function useEmitter(key, callback) {
        var context = React.useContext(Context);
        var source = context[key];
        useIsomorphicLayoutEffect(function () {
          return subscribe(source, callback);
        }, [callback, source]);
      };

      return {
        Component: Component,
        usePublisher: usePublisher,
        useEmitterValue: useEmitterValue,
        useEmitter: useEmitter
      };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function H(){return H=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);}return t},H.apply(this,arguments)}function R(t,e){if(null==t)return {};var n,o,r={},i=Object.keys(t);for(o=0;o<i.length;o++)e.indexOf(n=i[o])>=0||(r[n]=t[n]);return r}function L(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}function k(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(n)return (n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return L(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?L(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var o=0;return function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var z,B,F="undefined"!=typeof document?React.useLayoutEffect:React.useEffect;!function(t){t[t.DEBUG=0]="DEBUG",t[t.INFO=1]="INFO",t[t.WARN=2]="WARN",t[t.ERROR=3]="ERROR";}(B||(B={}));var P=((z={})[B.DEBUG]="debug",z[B.INFO]="log",z[B.WARN]="warn",z[B.ERROR]="error",z),O=system(function(){var t=statefulStream(B.ERROR);return {log:statefulStream(function(n,o,r){var i;void 0===r&&(r=B.INFO),r>=(null!=(i=("undefined"==typeof globalThis?window:globalThis).VIRTUOSO_LOG_LEVEL)?i:getValue(t))&&console[P[r]]("%creact-virtuoso: %c%s %o","color: #0253b3; font-weight: bold","color: initial",n,o);}),logLevel:t}},[],{singleton:!0});function M(t,e){void 0===e&&(e=!0);var n=React.useRef(null),o=function(t){};if("undefined"!=typeof ResizeObserver){var r=new ResizeObserver(function(e){var n=e[0].target;null!==n.offsetParent&&t(n);});o=function(t){t&&e?(r.observe(t),n.current=t):(n.current&&r.unobserve(n.current),n.current=null);};}return {ref:n,callbackRef:o}}function V(t,e){return void 0===e&&(e=!0),M(t,e).callbackRef}function U(t,e,n,o,r,i){return M(function(n){for(var a=function(t,e,n,o){var r=t.length;if(0===r)return null;for(var i=[],a=0;a<r;a++){var l=t.item(a);if(l&&void 0!==l.dataset.index){var s=parseInt(l.dataset.index),u=parseFloat(l.dataset.knownSize),c=e(l,"offsetHeight");if(0===c&&o("Zero-sized element, this should not happen",{child:l},B.ERROR),c!==u){var m=i[i.length-1];0===i.length||m.size!==c||m.endIndex!==s-1?i.push({startIndex:s,endIndex:s,size:c}):i[i.length-1].endIndex++;}}}return i}(n.children,e,0,r),l=n.parentElement;!l.dataset.virtuosoScroller;)l=l.parentElement;var s=i?i.scrollTop:"window"===l.firstElementChild.dataset.viewportType?window.pageYOffset||document.documentElement.scrollTop:l.scrollTop;o({scrollTop:Math.max(s,0),scrollHeight:(null!=i?i:l).scrollHeight,viewportHeight:(null!=i?i:l).offsetHeight}),null!==a&&t(a);},n)}function A(t,e){return Math.round(t.getBoundingClientRect()[e])}function W(t,n,o,r,i){void 0===r&&(r=noop);var a=React.useRef(null),l=React.useRef(null),s=React.useRef(null),u=React.useCallback(function(e){var o=e.target,r=o===window||o===document?window.pageYOffset||document.documentElement.scrollTop:o.scrollTop,i=o===window?document.documentElement.scrollHeight:o.scrollHeight,a=o===window?window.innerHeight:o.offsetHeight;t({scrollTop:Math.max(r,0),scrollHeight:i,viewportHeight:a}),null!==l.current&&(r===l.current||r<=0||r===o.scrollHeight-A(o,"height"))&&(l.current=null,n(!0),s.current&&(clearTimeout(s.current),s.current=null));},[t,n]);return React.useEffect(function(){var t=i||a.current;return r(i||a.current),u({target:t}),t.addEventListener("scroll",u,{passive:!0}),function(){r(null),t.removeEventListener("scroll",u);}},[a,u,o,r,i]),{scrollerRef:a,scrollByCallback:function(t){a.current.scrollBy(t);},scrollToCallback:function(e){var o=a.current;if(o&&(!("offsetHeight"in o)||0!==o.offsetHeight)){var r,i,u,c="smooth"===e.behavior;if(o===window?(i=Math.max(A(document.documentElement,"height"),document.documentElement.scrollHeight),r=window.innerHeight,u=document.documentElement.scrollTop):(i=o.scrollHeight,r=A(o,"height"),u=o.scrollTop),e.top=Math.ceil(Math.max(Math.min(i-r,e.top),0)),Math.abs(r-i)<1.01||e.top===u)return t({scrollTop:u,scrollHeight:i,viewportHeight:r}),void(c&&n(!0));c?(l.current=e.top,s.current&&clearTimeout(s.current),s.current=setTimeout(function(){s.current=null,l.current=null,n(!0);},1e3)):l.current=null,o.scrollTo(e);}}}}var N=system(function(){var t=stream(),n=stream(),o=statefulStream(0),r=stream(),i=statefulStream(0),a=stream(),l=stream(),s=statefulStream(0),u=statefulStream(0),c=stream(),m=stream(),d=statefulStream(!1),f=statefulStream(!1);return connect(pipe(t,map(function(t){return t.scrollTop})),n),connect(pipe(t,map(function(t){return t.scrollHeight})),l),connect(n,i),{scrollContainerState:t,scrollTop:n,viewportHeight:a,headerHeight:s,footerHeight:u,scrollHeight:l,smoothScrollTargetReached:r,react18ConcurrentRendering:f,scrollTo:c,scrollBy:m,statefulScrollTop:i,deviation:o,scrollingInProgress:d}},[],{singleton:!0}),D={lvl:0};function G(t,e,n,o,r){return void 0===o&&(o=D),void 0===r&&(r=D),{k:t,v:e,lvl:n,l:o,r:r}}function _(t){return t===D}function j(){return D}function K(t,e){if(_(t))return D;var n=t.k,o=t.l,r=t.r;if(e===n){if(_(o))return r;if(_(r))return o;var i=$(o);return et(X(t,{k:i[0],v:i[1],l:Q(o)}))}return et(X(t,e<n?{l:K(o,e)}:{r:K(r,e)}))}function Y(t,e,n){if(void 0===n&&(n="k"),_(t))return [-Infinity,void 0];if(t[n]===e)return [t.k,t.v];if(t[n]<e){var o=Y(t.r,e,n);return -Infinity===o[0]?[t.k,t.v]:o}return Y(t.l,e,n)}function Z(t,e,n){return _(t)?G(e,n,1):e===t.k?X(t,{k:e,v:n}):function(t){return rt(it(t))}(X(t,e<t.k?{l:Z(t.l,e,n)}:{r:Z(t.r,e,n)}))}function q(t,e,n){if(_(t))return [];var o=t.k,r=t.v,i=t.r,a=[];return o>e&&(a=a.concat(q(t.l,e,n))),o>=e&&o<=n&&a.push({k:o,v:r}),o<=n&&(a=a.concat(q(i,e,n))),a}function J(t){return _(t)?[]:[].concat(J(t.l),[{k:t.k,v:t.v}],J(t.r))}function $(t){return _(t.r)?[t.k,t.v]:$(t.r)}function Q(t){return _(t.r)?t.l:et(X(t,{r:Q(t.r)}))}function X(t,e){return G(void 0!==e.k?e.k:t.k,void 0!==e.v?e.v:t.v,void 0!==e.lvl?e.lvl:t.lvl,void 0!==e.l?e.l:t.l,void 0!==e.r?e.r:t.r)}function tt(t){return _(t)||t.lvl>t.r.lvl}function et(t){var e=t.l,n=t.r,o=t.lvl;if(n.lvl>=o-1&&e.lvl>=o-1)return t;if(o>n.lvl+1){if(tt(e))return it(X(t,{lvl:o-1}));if(_(e)||_(e.r))throw new Error("Unexpected empty nodes");return X(e.r,{l:X(e,{r:e.r.l}),r:X(t,{l:e.r.r,lvl:o-1}),lvl:o})}if(tt(t))return rt(X(t,{lvl:o-1}));if(_(n)||_(n.l))throw new Error("Unexpected empty nodes");var r=n.l,i=tt(r)?n.lvl-1:n.lvl;return X(r,{l:X(t,{r:r.l,lvl:o-1}),r:rt(X(n,{l:r.r,lvl:i})),lvl:r.lvl+1})}function nt(t,e,n){return _(t)?[]:ot(q(t,Y(t,e)[0],n),function(t){return {index:t.k,value:t.v}})}function ot(t,e){var n=t.length;if(0===n)return [];for(var o=e(t[0]),r=o.index,i=o.value,a=[],l=1;l<n;l++){var s=e(t[l]),u=s.index,c=s.value;a.push({start:r,end:u-1,value:i}),r=u,i=c;}return a.push({start:r,end:Infinity,value:i}),a}function rt(t){var e=t.r,n=t.lvl;return _(e)||_(e.r)||e.lvl!==n||e.r.lvl!==n?t:X(e,{l:X(t,{r:e.l}),lvl:n+1})}function it(t){var e=t.l;return _(e)||e.lvl!==t.lvl?t:X(e,{r:X(t,{l:e.r})})}function at(t,e,n,o){void 0===o&&(o=0);for(var r=t.length-1;o<=r;){var i=Math.floor((o+r)/2),a=n(t[i],e);if(0===a)return i;if(-1===a){if(r-o<2)return i-1;r=i-1;}else {if(r===o)return i;o=i+1;}}throw new Error("Failed binary finding record in array - "+t.join(",")+", searched for "+e)}function lt(t,e,n){return t[at(t,e,n)]}function st(t){var e=t.size,n=t.startIndex,o=t.endIndex;return function(t){return t.start===n&&(t.end===o||Infinity===t.end)&&t.value===e}}function ut(t,e){var n=t.index;return e===n?0:e<n?-1:1}function ct(t,e){var n=t.offset;return e===n?0:e<n?-1:1}function mt(t){return {index:t.index,value:t}}function dt(t,e,n){var o=t,r=0,i=0,a=0,l=0;if(0!==e){a=o[l=at(o,e-1,ut)].offset;var s=Y(n,e-1);r=s[0],i=s[1],o.length&&o[l].size===Y(n,e)[1]&&(l-=1),o=o.slice(0,l+1);}else o=[];for(var u,c=k(nt(n,e,Infinity));!(u=c()).done;){var m=u.value,d=m.start,f=m.value,p=(d-r)*i+a;o.push({offset:p,size:f,index:d}),r=d,a=p,i=f;}return {offsetTree:o,lastIndex:r,lastOffset:a,lastSize:i}}function ft(t,e){var n=e[0],o=e[1];n.length>0&&(0, e[2])("received item sizes",n,B.DEBUG);var r=t.sizeTree,i=r,a=0;if(o.length>0&&_(r)&&2===n.length){var l=n[0].size,s=n[1].size;i=o.reduce(function(t,e){return Z(Z(t,e,l),e+1,s)},i);}else {var u=function(t,e){for(var n,o=_(t)?0:Infinity,r=k(e);!(n=r()).done;){var i=n.value,a=i.size,l=i.startIndex,s=i.endIndex;if(o=Math.min(o,l),_(t))t=Z(t,0,a);else {var u=nt(t,l-1,s+1);if(!u.some(st(i))){for(var c,m=!1,d=!1,f=k(u);!(c=f()).done;){var p=c.value,h=p.start,g=p.end,v=p.value;m?(s>=h||a===v)&&(t=K(t,h)):(d=v!==a,m=!0),g>s&&s>=h&&v!==a&&(t=Z(t,s+1,v));}d&&(t=Z(t,l,a));}}}return [t,o]}(i,n);i=u[0],a=u[1];}if(i===r)return t;var c=dt(t.offsetTree,a,i),m=c.offsetTree;return {sizeTree:i,offsetTree:m,lastIndex:c.lastIndex,lastOffset:c.lastOffset,lastSize:c.lastSize,groupOffsetTree:o.reduce(function(t,e){return Z(t,e,pt(e,m))},j()),groupIndices:o}}function pt(t,e){if(0===e.length)return 0;var n=lt(e,t,ut);return n.size*(t-n.index)+n.offset}function ht(t,e){if(!gt(e))return t;for(var n=0;e.groupIndices[n]<=t+n;)n++;return t+n}function gt(t){return !_(t.groupOffsetTree)}var vt={offsetHeight:"height",offsetWidth:"width"},St=system(function(t){var n=t[0].log,o=stream(),r=stream(),i=statefulStreamFromEmitter(r,0),a=stream(),l=stream(),s=statefulStream(0),u=statefulStream([]),c=statefulStream(void 0),m=statefulStream(void 0),d=statefulStream(function(t,e){return A(t,vt[e])}),f=statefulStream(void 0),p={offsetTree:[],sizeTree:j(),groupOffsetTree:j(),lastIndex:0,lastOffset:0,lastSize:0,groupIndices:[]},h=statefulStreamFromEmitter(pipe(o,withLatestFrom(u,n),scan(ft,p),distinctUntilChanged()),p);connect(pipe(u,filter(function(t){return t.length>0}),withLatestFrom(h),map(function(t){var e=t[0],n=t[1],o=e.reduce(function(t,e,o){return Z(t,e,pt(e,n.offsetTree)||o)},j());return H({},n,{groupIndices:e,groupOffsetTree:o})})),h),connect(pipe(r,withLatestFrom(h),filter(function(t){return t[0]<t[1].lastIndex}),map(function(t){var e=t[1];return [{startIndex:t[0],endIndex:e.lastIndex,size:e.lastSize}]})),o),connect(c,m);var g=statefulStreamFromEmitter(pipe(c,map(function(t){return void 0===t})),!0);connect(pipe(m,filter(function(t){return void 0!==t&&_(getValue(h).sizeTree)}),map(function(t){return [{startIndex:0,endIndex:0,size:t}]})),o);var v=streamFromEmitter(pipe(o,withLatestFrom(h),scan(function(t,e){var n=e[1];return {changed:n!==t.sizes,sizes:n}},{changed:!1,sizes:p}),map(function(t){return t.changed})));subscribe(pipe(s,scan(function(t,e){return {diff:t.prev-e,prev:e}},{diff:0,prev:0}),map(function(t){return t.diff})),function(t){t>0?publish(a,t):t<0&&publish(l,t);}),subscribe(pipe(s,withLatestFrom(n)),function(t){t[0]<0&&(0, t[1])("`firstItemIndex` prop should not be set to less than zero. If you don't know the total count, just use a very high value",{firstItemIndex:s},B.ERROR);});var S=streamFromEmitter(a);connect(pipe(a,withLatestFrom(h),map(function(t){var e=t[0],n=t[1];if(n.groupIndices.length>0)throw new Error("Virtuoso: prepending items does not work with groups");return J(n.sizeTree).reduce(function(t,n){var o=n.k,r=n.v;return {ranges:[].concat(t.ranges,[{startIndex:t.prevIndex,endIndex:o+e-1,size:t.prevSize}]),prevIndex:o+e,prevSize:r}},{ranges:[],prevIndex:0,prevSize:n.lastSize}).ranges})),o);var I=streamFromEmitter(pipe(l,withLatestFrom(h),map(function(t){return pt(-t[0],t[1].offsetTree)})));return connect(pipe(l,withLatestFrom(h),map(function(t){var e=t[0],n=t[1];if(n.groupIndices.length>0)throw new Error("Virtuoso: shifting items does not work with groups");var o=J(n.sizeTree).reduce(function(t,n){var o=n.v;return Z(t,Math.max(0,n.k+e),o)},j());return H({},n,{sizeTree:o},dt(n.offsetTree,0,o))})),h),{data:f,totalCount:r,sizeRanges:o,groupIndices:u,defaultItemSize:m,fixedItemSize:c,unshiftWith:a,shiftWith:l,shiftWithOffset:I,beforeUnshiftWith:S,firstItemIndex:s,sizes:h,listRefresh:v,statefulTotalCount:i,trackItemSizes:g,itemSize:d}},tup(O),{singleton:!0}),It="undefined"!=typeof document&&"scrollBehavior"in document.documentElement.style;function Ct(t){var e="number"==typeof t?{index:t}:t;return e.align||(e.align="start"),e.behavior&&It||(e.behavior="auto"),e.offset||(e.offset=0),e}var Tt=system(function(t){var n=t[0],o=n.sizes,r=n.totalCount,i=n.listRefresh,a=t[1],l=a.scrollingInProgress,s=a.viewportHeight,u=a.scrollTo,c=a.smoothScrollTargetReached,m=a.headerHeight,d=a.footerHeight,f=t[2].log,p=stream(),h=statefulStream(0),g=null,v=null,S=null;function I(){g&&(g(),g=null),S&&(S(),S=null),v&&(clearTimeout(v),v=null),publish(l,!1);}return connect(pipe(p,withLatestFrom(o,s,r,h,m,d,f),map(function(t){var n=t[0],o=t[1],r=t[2],a=t[3],s=t[4],u=t[5],m=t[6],d=t[7],f=Ct(n),h=f.align,C=f.behavior,T=f.offset,w=a-1,x=f.index;"LAST"===x&&(x=w),x=ht(x,o);var y=pt(x=Math.max(0,x,Math.min(w,x)),o.offsetTree)+u;"end"===h?(y=y-r+Y(o.sizeTree,x)[1],x===w&&(y+=m)):"center"===h?y=y-r/2+Y(o.sizeTree,x)[1]/2:y-=s,T&&(y+=T);var b=function(t){I(),t?(d("retrying to scroll to",{location:n},B.DEBUG),publish(p,n)):d("list did not change, scroll successful",{},B.DEBUG);};if(I(),"smooth"===C){var E=!1;S=subscribe(i,function(t){E=E||t;}),g=handleNext(c,function(){b(E);});}else g=handleNext(pipe(i,function(t){var e=setTimeout(function(){t(!1);},50);return function(n){n&&(t(!0),clearTimeout(e));}}),b);return v=setTimeout(function(){I();},1200),publish(l,!0),d("scrolling from index to",{index:x,top:y,behavior:C},B.DEBUG),{top:y,behavior:C}})),u),{scrollToIndex:p,topListHeight:h}},tup(St,N,O),{singleton:!0}),wt="up",xt={atBottom:!1,notAtBottomBecause:"NOT_SHOWING_LAST_ITEM",state:{offsetBottom:0,scrollTop:0,viewportHeight:0,scrollHeight:0}},yt=system(function(t){var n=t[0],o=n.scrollContainerState,r=n.scrollTop,i=n.viewportHeight,a=n.headerHeight,l=n.footerHeight,s=n.scrollBy,u=statefulStream(!1),c=statefulStream(!0),m=stream(),d=stream(),f=statefulStream(4),p=streamFromEmitter(pipe(merge(pipe(duc(r),skip(1),mapTo(!0)),pipe(duc(r),skip(1),mapTo(!1),debounceTime(100))),distinctUntilChanged())),h=statefulStreamFromEmitter(pipe(merge(pipe(s,mapTo(!0)),pipe(s,mapTo(!1),debounceTime(200))),distinctUntilChanged()),!1);connect(pipe(duc(r),map(function(t){return 0===t}),distinctUntilChanged()),c),connect(c,d);var g=streamFromEmitter(pipe(combineLatest(o,duc(i),duc(a),duc(l),duc(f)),scan(function(t,e){var n,o,r=e[0],i=r.scrollTop,a=r.scrollHeight,l=e[1],s={viewportHeight:l,scrollTop:i,scrollHeight:a};return i+l-a>-e[4]?(i>t.state.scrollTop?(n="SCROLLED_DOWN",o=t.state.scrollTop-i):(n="SIZE_DECREASED",o=t.state.scrollTop-i||t.scrollTopDelta),{atBottom:!0,state:s,atBottomBecause:n,scrollTopDelta:o}):{atBottom:!1,notAtBottomBecause:s.scrollHeight>t.state.scrollHeight?"SIZE_INCREASED":l<t.state.viewportHeight?"VIEWPORT_HEIGHT_DECREASING":i<t.state.scrollTop?"SCROLLING_UPWARDS":"NOT_FULLY_SCROLLED_TO_LAST_ITEM_BOTTOM",state:s}},xt),distinctUntilChanged(function(t,e){return t&&t.atBottom===e.atBottom}))),v=statefulStreamFromEmitter(pipe(o,scan(function(t,e){var n=e.scrollTop,o=e.scrollHeight;return t.scrollHeight!==o?t.scrollTop!==n&&n===o-e.viewportHeight?{scrollHeight:o,scrollTop:n,jump:t.scrollTop-n,changed:!0}:{scrollHeight:o,scrollTop:n,jump:0,changed:!0}:{scrollTop:n,scrollHeight:o,jump:0,changed:!1}},{scrollHeight:0,jump:0,scrollTop:0,changed:!1}),filter(function(t){return t.changed}),map(function(t){return t.jump})),0);connect(pipe(g,map(function(t){return t.atBottom})),u),connect(pipe(u,throttleTime(50)),m);var S=statefulStream("down");connect(pipe(o,map(function(t){return t.scrollTop}),distinctUntilChanged(),scan(function(t,n){return getValue(h)?{direction:t.direction,prevScrollTop:n}:{direction:n<t.prevScrollTop?wt:"down",prevScrollTop:n}},{direction:"down",prevScrollTop:0}),map(function(t){return t.direction})),S),connect(pipe(o,throttleTime(50),mapTo("none")),S);var I=statefulStream(0);return connect(pipe(p,filter(function(t){return !t}),mapTo(0)),I),connect(pipe(r,throttleTime(100),withLatestFrom(p),filter(function(t){return !!t[1]}),scan(function(t,e){return [t[1],e[0]]},[0,0]),map(function(t){return t[1]-t[0]})),I),{isScrolling:p,isAtTop:c,isAtBottom:u,atBottomState:g,atTopStateChange:d,atBottomStateChange:m,scrollDirection:S,atBottomThreshold:f,scrollVelocity:I,lastJumpDueToItemResize:v}},tup(N)),bt=system(function(t){var o=t[0].log,r=statefulStream(!1),i=streamFromEmitter(pipe(r,filter(function(t){return t}),distinctUntilChanged()));return subscribe(r,function(t){t&&getValue(o)("props updated",{},B.DEBUG);}),{propsReady:r,didMount:i}},tup(O),{singleton:!0}),Et=system(function(t){var n=t[0],o=n.sizes,r=n.listRefresh,i=n.defaultItemSize,a=t[1].scrollTop,l=t[2].scrollToIndex,s=t[3].didMount,u=statefulStream(!0),c=statefulStream(0);return connect(pipe(s,withLatestFrom(c),filter(function(t){return !!t[1]}),mapTo(!1)),u),subscribe(pipe(combineLatest(r,s),withLatestFrom(u,o,i),filter(function(t){var e=t[1],n=t[3];return t[0][1]&&(!_(t[2].sizeTree)||void 0!==n)&&!e}),withLatestFrom(c)),function(t){var n=t[1];setTimeout(function(){handleNext(a,function(){publish(u,!0);}),publish(l,n);});}),{scrolledToInitialItem:u,initialTopMostItemIndex:c}},tup(St,N,Tt,bt),{singleton:!0});function Ht(t){return !!t&&("smooth"===t?"smooth":"auto")}var Rt=system(function(t){var n=t[0],o=n.totalCount,r=n.listRefresh,i=t[1],a=i.isAtBottom,l=i.atBottomState,s=t[2].scrollToIndex,u=t[3].scrolledToInitialItem,c=t[4],m=c.propsReady,d=c.didMount,f=t[5].log,p=t[6].scrollingInProgress,h=statefulStream(!1),g=null;function v(t){publish(s,{index:"LAST",align:"end",behavior:t});}return subscribe(pipe(combineLatest(pipe(duc(o),skip(1)),d),withLatestFrom(duc(h),a,u,p),map(function(t){var e=t[0],n=e[0],o=e[1]&&t[3],r="auto";return o&&(r=function(t,e){return "function"==typeof t?Ht(t(e)):e&&Ht(t)}(t[1],t[2]||t[4]),o=o&&!!r),{totalCount:n,shouldFollow:o,followOutputBehavior:r}}),filter(function(t){return t.shouldFollow})),function(t){var n=t.totalCount,o=t.followOutputBehavior;g&&(g(),g=null),g=handleNext(r,function(){getValue(f)("following output to ",{totalCount:n},B.DEBUG),v(o),g=null;});}),subscribe(pipe(combineLatest(duc(h),o,m),filter(function(t){return t[0]&&t[2]}),scan(function(t,e){var n=e[1];return {refreshed:t.value===n,value:n}},{refreshed:!1,value:0}),filter(function(t){return t.refreshed}),withLatestFrom(h,o)),function(t){var n=t[1],o=handleNext(l,function(t){!n||t.atBottom||"SIZE_INCREASED"!==t.notAtBottomBecause||g||(getValue(f)("scrolling to bottom due to increased size",{},B.DEBUG),v("auto"));});setTimeout(o,100);}),subscribe(combineLatest(duc(h),l),function(t){var e=t[1];t[0]&&!e.atBottom&&"VIEWPORT_HEIGHT_DECREASING"===e.notAtBottomBecause&&v("auto");}),{followOutput:h}},tup(St,yt,Tt,Et,bt,O,N));function Lt(t){return t.reduce(function(t,e){return t.groupIndices.push(t.totalCount),t.totalCount+=e+1,t},{totalCount:0,groupIndices:[]})}var kt=system(function(t){var e=t[0],n=e.totalCount,o=e.groupIndices,r=e.sizes,p=t[1],h=p.scrollTop,g=p.headerHeight,v=stream(),S=stream(),I=streamFromEmitter(pipe(v,map(Lt)));return connect(pipe(I,map(prop("totalCount"))),n),connect(pipe(I,map(prop("groupIndices"))),o),connect(pipe(combineLatest(h,r,g),filter(function(t){return gt(t[1])}),map(function(t){return Y(t[1].groupOffsetTree,Math.max(t[0]-t[2],0),"v")[0]}),distinctUntilChanged(),map(function(t){return [t]})),S),{groupCounts:v,topItemsIndexes:S}},tup(St,N));function zt(t,e){return !(!t||t[0]!==e[0]||t[1]!==e[1])}function Bt(t,e){return !(!t||t.startIndex!==e.startIndex||t.endIndex!==e.endIndex)}function Ft(t,e,n){return "number"==typeof t?n===wt&&"top"===e||"down"===n&&"bottom"===e?t:0:n===wt?"top"===e?t.main:t.reverse:"bottom"===e?t.main:t.reverse}function Pt(t,e){return "number"==typeof t?t:t[e]||0}var Ot=system(function(t){var n=t[0],o=n.scrollTop,r=n.viewportHeight,i=n.deviation,a=n.headerHeight,l=stream(),s=statefulStream(0),u=statefulStream(0),c=statefulStream(0),m=statefulStream(0),d=statefulStreamFromEmitter(pipe(combineLatest(duc(o),duc(r),duc(a),duc(l,zt),duc(m),duc(s),duc(u),duc(i),duc(c)),map(function(t){var e=t[0],n=t[1],o=t[2],r=t[3],i=r[0],a=r[1],l=t[4],s=t[6],u=t[7],c=t[8],m=e-u,d=t[5]+s,f=Math.max(o-m,0),p="none",h=Pt(c,"top"),g=Pt(c,"bottom");return i-=u,a+=o+s,(i+=o+s)>e+d-h&&(p=wt),(a-=u)<e-f+n+g&&(p="down"),"none"!==p?[Math.max(m-o-Ft(l,"top",p)-h,0),m-f-s+n+Ft(l,"bottom",p)+g]:null}),filter(function(t){return null!=t}),distinctUntilChanged(zt)),[0,0]);return {listBoundary:l,overscan:m,topListHeight:s,fixedHeaderHeight:u,increaseViewportBy:c,visibleRange:d}},tup(N),{singleton:!0}),Mt={items:[],topItems:[],offsetTop:0,offsetBottom:0,top:0,bottom:0,topListHeight:0,totalCount:0};function Vt(t,e,n){if(0===t.length)return [];if(!gt(e))return t.map(function(t){return H({},t,{index:t.index+n,originalIndex:t.index})});for(var o,r=[],i=nt(e.groupOffsetTree,t[0].index,t[t.length-1].index),a=void 0,l=0,s=k(t);!(o=s()).done;){var u=o.value;(!a||a.end<u.index)&&(a=i.shift(),l=e.groupIndices.indexOf(a.start)),r.push(H({},u.index===a.start?{type:"group",index:l}:{index:u.index-(l+1)+n,groupIndex:l},{size:u.size,offset:u.offset,originalIndex:u.index,data:u.data}));}return r}function Ut(t,e,n,o,r){var i=0,a=0;if(t.length>0){i=t[0].offset;var l=t[t.length-1];a=l.offset+l.size;}var s=i,u=o.lastOffset+(n-o.lastIndex)*o.lastSize-a;return {items:Vt(t,o,r),topItems:Vt(e,o,r),topListHeight:e.reduce(function(t,e){return e.size+t},0),offsetTop:i,offsetBottom:u,top:s,bottom:a,totalCount:n}}var At,Wt,Nt,Dt=system(function(t){var n=t[0],o=n.sizes,r=n.totalCount,i=n.data,a=n.firstItemIndex,l=t[1],s=t[2],u=s.visibleRange,c=s.listBoundary,m=s.topListHeight,d=t[3],f=d.scrolledToInitialItem,p=d.initialTopMostItemIndex,h=t[4].topListHeight,g=t[5],v=t[6].didMount,S=statefulStream([]),I=stream();connect(l.topItemsIndexes,S);var C=statefulStreamFromEmitter(pipe(combineLatest(v,duc(u),duc(r),duc(o),duc(p),f,duc(S),duc(a),i),filter(function(t){return t[0]}),map(function(t){var n=t[1],o=n[0],r=n[1],i=t[2],a=t[4],l=t[5],s=t[6],u=t[7],c=t[8],m=t[3],d=m.sizeTree,f=m.offsetTree;if(0===i||0===o&&0===r)return Mt;if(_(d))return Ut(function(t,e,n){if(gt(e)){var o=ht(t,e);return [{index:Y(e.groupOffsetTree,o)[0],size:0,offset:0},{index:o,size:0,offset:0,data:n&&n[0]}]}return [{index:t,size:0,offset:0,data:n&&n[0]}]}(function(t,e){return "number"==typeof t?t:"LAST"===t.index?e-1:t.index}(a,i),m,c),[],i,m,u);var p=[];if(s.length>0)for(var h,g=s[0],v=s[s.length-1],S=0,I=k(nt(d,g,v));!(h=I()).done;)for(var C=h.value,T=C.value,w=Math.max(C.start,g),x=Math.min(C.end,v),y=w;y<=x;y++)p.push({index:y,size:T,offset:S,data:c&&c[y]}),S+=T;if(!l)return Ut([],p,i,m,u);var b=s.length>0?s[s.length-1]+1:0,E=function(t,e,n,o){return void 0===o&&(o=0),o>0&&(e=Math.max(e,lt(t,o,ut).offset)),ot((i=n,l=at(r=t,e,a=ct),s=at(r,i,a,l),r.slice(l,s+1)),mt);var r,i,a,l,s;}(f,o,r,b);if(0===E.length)return null;var H=i-1;return Ut(tap([],function(t){for(var e,n=k(E);!(e=n()).done;){var i=e.value,a=i.value,l=a.offset,s=i.start,u=a.size;a.offset<o&&(l+=((s+=Math.floor((o-a.offset)/u))-i.start)*u),s<b&&(l+=(b-s)*u,s=b);for(var m=Math.min(i.end,H),d=s;d<=m&&!(l>=r);d++)t.push({index:d,size:u,offset:l,data:c&&c[d]}),l+=u;}}),p,i,m,u)}),filter(function(t){return null!==t}),distinctUntilChanged()),Mt);return connect(pipe(i,filter(function(t){return void 0!==t}),map(function(t){return t.length})),r),connect(pipe(C,map(prop("topListHeight"))),h),connect(h,m),connect(pipe(C,map(function(t){return [t.top,t.bottom]})),c),connect(pipe(C,map(function(t){return t.items})),I),H({listState:C,topItemsIndexes:S,endReached:streamFromEmitter(pipe(C,filter(function(t){return t.items.length>0}),withLatestFrom(r,i),filter(function(t){var e=t[0].items;return e[e.length-1].originalIndex===t[1]-1}),map(function(t){return [t[1]-1,t[2]]}),distinctUntilChanged(zt),map(function(t){return t[0]}))),startReached:streamFromEmitter(pipe(C,throttleTime(200),filter(function(t){var e=t.items;return e.length>0&&e[0].originalIndex===t.topItems.length}),map(function(t){return t.items[0].index}),distinctUntilChanged())),rangeChanged:streamFromEmitter(pipe(C,filter(function(t){return t.items.length>0}),map(function(t){var e=t.items;return {startIndex:e[0].index,endIndex:e[e.length-1].index}}),distinctUntilChanged(Bt))),itemsRendered:I},g)},tup(St,kt,Ot,Et,Tt,yt,bt),{singleton:!0}),Gt=system(function(t){var n=t[0],o=n.sizes,r=n.firstItemIndex,i=n.data,a=t[1].listState,l=t[2].didMount,s=statefulStream(0);return connect(pipe(l,withLatestFrom(s),filter(function(t){return 0!==t[1]}),withLatestFrom(o,r,i),map(function(t){var e=t[0][1],n=t[1],o=t[2],r=t[3],i=void 0===r?[]:r,a=0;if(n.groupIndices.length>0)for(var l,s=k(n.groupIndices);!((l=s()).done||l.value-a>=e);)a++;var u=e+a;return Ut(Array.from({length:u}).map(function(t,e){return {index:e,size:0,offset:0,data:i[e]}}),[],u,n,o)})),a),{initialItemCount:s}},tup(St,Dt,bt),{singleton:!0}),_t=system(function(t){var n=t[0].scrollVelocity,o=statefulStream(!1),r=stream(),i=statefulStream(!1);return connect(pipe(n,withLatestFrom(i,o,r),filter(function(t){return !!t[1]}),map(function(t){var e=t[0],n=t[1],o=t[2],r=t[3],i=n.enter;if(o){if((0, n.exit)(e,r))return !1}else if(i(e,r))return !0;return o}),distinctUntilChanged()),o),subscribe(pipe(combineLatest(o,n,r),withLatestFrom(i)),function(t){var e=t[0],n=t[1];return e[0]&&n&&n.change&&n.change(e[1],e[2])}),{isSeeking:o,scrollSeekConfiguration:i,scrollVelocity:n,scrollSeekRangeChanged:r}},tup(yt),{singleton:!0}),jt=system(function(t){var e=t[0].topItemsIndexes,n=statefulStream(0);return connect(pipe(n,filter(function(t){return t>0}),map(function(t){return Array.from({length:t}).map(function(t,e){return e})})),e),{topItemCount:n}},tup(Dt)),Kt=system(function(t){var n=t[0],o=n.footerHeight,r=n.headerHeight,i=t[1].listState,a=stream(),l=statefulStreamFromEmitter(pipe(combineLatest(o,r,i),map(function(t){var e=t[2];return t[0]+t[1]+e.offsetBottom+e.bottom})),0);return connect(duc(l),a),{totalListHeight:l,totalListHeightChanged:a}},tup(N,Dt),{singleton:!0}),Yt=system(function(t){var n=t[0],o=n.scrollBy,r=n.scrollTop,i=n.deviation,a=n.scrollingInProgress,l=t[1],s=l.isScrolling,u=l.isAtBottom,c=l.atBottomState,m=l.scrollDirection,d=t[3],f=d.beforeUnshiftWith,p=d.shiftWithOffset,h=d.sizes,g=t[4].log,v=streamFromEmitter(pipe(t[2].listState,withLatestFrom(l.lastJumpDueToItemResize),scan(function(t,e){var n=t[1],o=e[0],r=o.items,i=o.totalCount,a=o.bottom+o.offsetBottom,l=0;return t[2]===i&&n.length>0&&r.length>0&&(0===r[0].originalIndex&&0===n[0].originalIndex||0!=(l=a-t[3])&&(l+=e[1])),[l,r,i,a]},[0,[],0,0]),filter(function(t){return 0!==t[0]}),withLatestFrom(r,m,a,g,u,c),filter(function(t){return !t[3]&&0!==t[1]&&t[2]===wt}),map(function(t){var e=t[0][0];return (0, t[4])("Upward scrolling compensation",{amount:e},B.DEBUG),e})));return connect(pipe(v,withLatestFrom(i),map(function(t){return t[1]-t[0]})),i),subscribe(pipe(combineLatest(statefulStreamFromEmitter(s,!1),i),filter(function(t){return !t[0]&&0!==t[1]}),map(function(t){return t[1]}),throttleTime(1)),function(t){t>0?(publish(o,{top:-t,behavior:"auto"}),publish(i,0)):(publish(i,0),publish(o,{top:-t,behavior:"auto"}));}),connect(pipe(p,map(function(t){return {top:-t}})),o),connect(pipe(f,withLatestFrom(h),map(function(t){return t[0]*t[1].lastSize})),v),{deviation:i}},tup(N,yt,Dt,St,O)),Zt=system(function(t){var n=t[0].totalListHeight,o=t[1].didMount,r=t[2].scrollTo,i=statefulStream(0);return subscribe(pipe(o,withLatestFrom(i),filter(function(t){return 0!==t[1]}),map(function(t){return {top:t[1]}})),function(t){handleNext(pipe(n,filter(function(t){return 0!==t})),function(){setTimeout(function(){publish(r,t);});});}),{initialScrollTop:i}},tup(Kt,bt,N),{singleton:!0}),qt=system(function(t){var n=t[0].viewportHeight,o=t[1].totalListHeight,r=statefulStream(!1);return {alignToBottom:r,paddingTopAddition:statefulStreamFromEmitter(pipe(combineLatest(r,n,o),filter(function(t){return t[0]}),map(function(t){return Math.max(0,t[1]-t[2])}),distinctUntilChanged()),0)}},tup(N,Kt),{singleton:!0}),Jt=system(function(t){var n=t[0],o=n.scrollTo,r=n.scrollContainerState,i=stream(),a=stream(),l=stream(),s=statefulStream(!1),u=statefulStream(void 0);return connect(pipe(combineLatest(i,a),map(function(t){var e=t[0],n=e.viewportHeight,o=e.scrollHeight;return {scrollTop:Math.max(0,e.scrollTop-t[1].offsetTop),scrollHeight:o,viewportHeight:n}})),r),connect(pipe(o,withLatestFrom(a),map(function(t){var e=t[0];return H({},e,{top:e.top+t[1].offsetTop})})),l),{useWindowScroll:s,customScrollParent:u,windowScrollContainerState:i,windowViewportRect:a,windowScrollTo:l}},tup(N)),$t=system(function(t){var n=t[0],o=n.sizes,r=n.totalCount,i=t[1],a=i.scrollTop,l=i.viewportHeight,s=i.headerHeight,u=i.scrollingInProgress,c=t[2].scrollToIndex,m=stream();return connect(pipe(m,withLatestFrom(o,l,r,s,a),map(function(t){var n=t[0],o=n.index,r=n.behavior,i=void 0===r?"auto":r,a=n.done,l=t[1],s=t[2],c=t[4],m=t[5],d=t[3]-1,f=null;o=ht(o,l);var p=pt(o=Math.max(0,o,Math.min(d,o)),l.offsetTree)+c;return p<m?f={index:o,behavior:i,align:"start"}:p+Y(l.sizeTree,o)[1]>m+s&&(f={index:o,behavior:i,align:"end"}),f?a&&handleNext(pipe(u,skip(1),filter(function(t){return !1===t})),a):a&&a(),f}),filter(function(t){return null!==t})),c),{scrollIntoView:m}},tup(St,N,Tt,Dt,O),{singleton:!0}),Qt=["listState","topItemsIndexes"],Xt=system(function(t){return H({},t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},tup(Ot,Gt,bt,_t,Kt,Zt,qt,Jt,$t)),te=system(function(t){var n=t[0],o=n.totalCount,r=n.sizeRanges,i=n.fixedItemSize,a=n.defaultItemSize,l=n.trackItemSizes,s=n.itemSize,u=n.data,c=n.firstItemIndex,m=n.groupIndices,d=n.statefulTotalCount,f=t[1],p=f.initialTopMostItemIndex,h=f.scrolledToInitialItem,g=t[2],v=t[3],S=t[4],I=S.listState,C=S.topItemsIndexes,T=R(S,Qt),w=t[5].scrollToIndex,x=t[7].topItemCount,y=t[8].groupCounts,b=t[9],E=t[10];return connect(T.rangeChanged,b.scrollSeekRangeChanged),connect(pipe(b.windowViewportRect,map(prop("visibleHeight"))),g.viewportHeight),H({totalCount:o,data:u,firstItemIndex:c,sizeRanges:r,initialTopMostItemIndex:p,scrolledToInitialItem:h,topItemsIndexes:C,topItemCount:x,groupCounts:y,fixedItemHeight:i,defaultItemHeight:a},v,{statefulTotalCount:d,listState:I,scrollToIndex:w,trackItemSizes:l,itemSize:s,groupIndices:m},T,b,g,E)},tup(St,Et,N,Rt,Dt,Tt,Yt,jt,kt,Xt,O)),ee=(At=function(){if("undefined"==typeof document)return "sticky";var t=document.createElement("div");return t.style.position="-webkit-sticky","-webkit-sticky"===t.style.position?"-webkit-sticky":"sticky"},Nt=!1,function(){return Nt||(Nt=!0,Wt=At()),Wt});function ne(t,e){var n=React.useRef(null),o=React.useCallback(function(o){if(null!==o){var r,i,a=o.getBoundingClientRect(),l=a.width;if(e){var s=e.getBoundingClientRect(),u=a.top-s.top;r=s.height-Math.max(0,u),i=u+e.scrollTop;}else r=window.innerHeight-Math.max(0,a.top),i=a.top+window.pageYOffset;n.current={offsetTop:i,visibleHeight:r,visibleWidth:l},t(n.current);}},[t,e]),r=M(o),i=r.callbackRef,a=r.ref,l=React.useCallback(function(){o(a.current);},[o,a]);return React.useEffect(function(){if(e){e.addEventListener("scroll",l);var t=new ResizeObserver(l);return t.observe(e),function(){e.removeEventListener("scroll",l),t.unobserve(e);}}return window.addEventListener("scroll",l),window.addEventListener("resize",l),function(){window.removeEventListener("scroll",l),window.removeEventListener("resize",l);}},[l,e]),i}var oe=["placeholder"],re=["style","children"],ie=["style","children"];function ae(t){return t}var le=system(function(){var t=statefulStream(function(t){return "Item "+t}),e=statefulStream(null),n=statefulStream(function(t){return "Group "+t}),o=statefulStream({}),r=statefulStream(ae),i=statefulStream("div"),a=statefulStream(noop),u=function(t,e){return void 0===e&&(e=null),statefulStreamFromEmitter(pipe(o,map(function(e){return e[t]}),distinctUntilChanged()),e)};return {context:e,itemContent:t,groupContent:n,components:o,computeItemKey:r,headerFooterTag:i,scrollerRef:a,FooterComponent:u("Footer"),HeaderComponent:u("Header"),TopItemListComponent:u("TopItemList"),ListComponent:u("List","div"),ItemComponent:u("Item","div"),GroupComponent:u("Group","div"),ScrollerComponent:u("Scroller","div"),EmptyPlaceholder:u("EmptyPlaceholder"),ScrollSeekPlaceholder:u("ScrollSeekPlaceholder")}});function se(t,e){var n=stream();return subscribe(n,function(){return console.warn("react-virtuoso: You are using a deprecated property. "+e,"color: red;","color: inherit;","color: blue;")}),connect(n,t),n}var ue=system(function(t){var e=t[0],o=t[1],r={item:se(o.itemContent,"Rename the %citem%c prop to %citemContent."),group:se(o.groupContent,"Rename the %cgroup%c prop to %cgroupContent."),topItems:se(e.topItemCount,"Rename the %ctopItems%c prop to %ctopItemCount."),itemHeight:se(e.fixedItemHeight,"Rename the %citemHeight%c prop to %cfixedItemHeight."),scrollingStateChange:se(e.isScrolling,"Rename the %cscrollingStateChange%c prop to %cisScrolling."),adjustForPrependedItems:stream(),maxHeightCacheSize:stream(),footer:stream(),header:stream(),HeaderContainer:stream(),FooterContainer:stream(),ItemContainer:stream(),ScrollContainer:stream(),GroupContainer:stream(),ListContainer:stream(),emptyComponent:stream(),scrollSeek:stream()};function a(t,e,n){connect(pipe(t,withLatestFrom(o.components),map(function(t){var o,r=t[0],i=t[1];return console.warn("react-virtuoso: "+n+" property is deprecated. Pass components."+e+" instead."),H({},i,((o={})[e]=r,o))})),o.components);}return subscribe(r.adjustForPrependedItems,function(){console.warn("react-virtuoso: adjustForPrependedItems is no longer supported. Use the firstItemIndex property instead - https://virtuoso.dev/prepend-items.","color: red;","color: inherit;","color: blue;");}),subscribe(r.maxHeightCacheSize,function(){console.warn("react-virtuoso: maxHeightCacheSize is no longer necessary. Setting it has no effect - remove it from your code.");}),subscribe(r.HeaderContainer,function(){console.warn("react-virtuoso: HeaderContainer is deprecated. Use headerFooterTag if you want to change the wrapper of the header component and pass components.Header to change its contents.");}),subscribe(r.FooterContainer,function(){console.warn("react-virtuoso: FooterContainer is deprecated. Use headerFooterTag if you want to change the wrapper of the footer component and pass components.Footer to change its contents.");}),subscribe(r.scrollSeek,function(t){var r=t.placeholder,i=R(t,oe);console.warn("react-virtuoso: scrollSeek property is deprecated. Pass scrollSeekConfiguration and specify the placeholder in components.ScrollSeekPlaceholder instead."),publish(o.components,H({},getValue(o.components),{ScrollSeekPlaceholder:r})),publish(e.scrollSeekConfiguration,i);}),a(r.footer,"Footer","footer"),a(r.header,"Header","header"),a(r.ItemContainer,"Item","ItemContainer"),a(r.ListContainer,"List","ListContainer"),a(r.ScrollContainer,"Scroller","ScrollContainer"),a(r.emptyComponent,"EmptyPlaceholder","emptyComponent"),a(r.GroupContainer,"Group","GroupContainer"),H({},e,o,r)},tup(te,le)),ce=function(t){return React__namespace.createElement("div",{style:{height:t.height}})},me={position:ee(),zIndex:1,overflowAnchor:"none"},de={overflowAnchor:"none"},fe=React__namespace.memo(function(t){var e=t.showTopList,n=void 0!==e&&e,o=Re("listState"),r=He("sizeRanges"),i=Re("useWindowScroll"),a=Re("customScrollParent"),l=He("windowScrollContainerState"),s=He("scrollContainerState"),u=a||i?l:s,c=Re("itemContent"),m=Re("context"),d=Re("groupContent"),f=Re("trackItemSizes"),p=Re("itemSize"),g=Re("log"),v=U(r,p,f,n?noop:u,g,a),S=v.callbackRef,I=v.ref,C=React__namespace.useState(0),w=C[0],x=C[1];Le("deviation",function(t){w!==t&&(I.current.style.marginTop=t+"px",x(t));});var y=Re("EmptyPlaceholder"),b=Re("ScrollSeekPlaceholder")||ce,R=Re("ListComponent"),L=Re("ItemComponent"),k=Re("GroupComponent"),z=Re("computeItemKey"),B=Re("isSeeking"),F=Re("groupIndices").length>0,P=Re("paddingTopAddition"),O=Re("firstItemIndex"),M=Re("statefulTotalCount"),V=n?{}:{boxSizing:"border-box",paddingTop:o.offsetTop+P,paddingBottom:o.offsetBottom,marginTop:w};return !n&&0===M&&y?React.createElement(y,ve(y,m)):React.createElement(R,H({},ve(R,m),{ref:S,style:V,"data-test-id":n?"virtuoso-top-item-list":"virtuoso-item-list"}),(n?o.topItems:o.items).map(function(t){var e=t.originalIndex,n=z(e+O,t.data,m);return B?React.createElement(b,H({},ve(b,m),{key:n,index:t.index,height:t.size,type:t.type||"item"},"group"===t.type?{}:{groupIndex:t.groupIndex})):"group"===t.type?React.createElement(k,H({},ve(k,m),{key:n,"data-index":e,"data-known-size":t.size,"data-item-index":t.index,style:me}),d(t.index)):React.createElement(L,H({},ve(L,m),{key:n,"data-index":e,"data-known-size":t.size,"data-item-index":t.index,"data-item-group-index":t.groupIndex,style:de}),F?c(t.index,t.groupIndex,t.data,m):c(t.index,t.data,m))}))}),pe={height:"100%",outline:"none",overflowY:"auto",position:"relative",WebkitOverflowScrolling:"touch"},he={width:"100%",height:"100%",position:"absolute",top:0},ge={width:"100%",position:ee(),top:0};function ve(t,e){if("string"!=typeof t)return {context:e}}var Se=React__namespace.memo(function(){var t=Re("HeaderComponent"),e=He("headerHeight"),n=Re("headerFooterTag"),o=V(function(t){return e(A(t,"height"))}),r=Re("context");return t?React.createElement(n,{ref:o},React.createElement(t,ve(t,r))):null}),Ie=React__namespace.memo(function(){var t=Re("FooterComponent"),e=He("footerHeight"),n=Re("headerFooterTag"),o=V(function(t){return e(A(t,"height"))}),r=Re("context");return t?React.createElement(n,{ref:o},React.createElement(t,ve(t,r))):null});function Ce(t){var e=t.usePublisher,n=t.useEmitter,o=t.useEmitterValue;return React__namespace.memo(function(t){var r=t.style,i=t.children,a=R(t,re),l=e("scrollContainerState"),s=o("ScrollerComponent"),u=e("smoothScrollTargetReached"),c=o("scrollerRef"),m=o("context"),d=W(l,u,s,c),f=d.scrollerRef,p=d.scrollByCallback;return n("scrollTo",d.scrollToCallback),n("scrollBy",p),React.createElement(s,H({ref:f,style:H({},pe,r),"data-test-id":"virtuoso-scroller","data-virtuoso-scroller":!0,tabIndex:0},a,ve(s,m)),i)})}function Te(t){var e=t.usePublisher,n=t.useEmitter,o=t.useEmitterValue;return React__namespace.memo(function(t){var r=t.style,i=t.children,a=R(t,ie),l=e("windowScrollContainerState"),s=o("ScrollerComponent"),u=e("smoothScrollTargetReached"),c=o("totalListHeight"),m=o("deviation"),d=o("customScrollParent"),f=o("context"),p=W(l,u,s,noop,d),g=p.scrollerRef,v=p.scrollByCallback,S=p.scrollToCallback;return F(function(){return g.current=d||window,function(){g.current=null;}},[g,d]),n("windowScrollTo",S),n("scrollBy",v),React.createElement(s,H({style:H({position:"relative"},r,0!==c?{height:c+m}:{}),"data-virtuoso-scroller":!0},a,ve(s,f)),i)})}var we=function(t){var e=t.children,n=He("viewportHeight"),o=V(compose(n,function(t){return A(t,"height")}));return React__namespace.createElement("div",{style:he,ref:o,"data-viewport-type":"element"},e)},xe=function(t){var e=t.children,n=ne(He("windowViewportRect"),Re("customScrollParent"));return React__namespace.createElement("div",{ref:n,style:he,"data-viewport-type":"window"},e)},ye=function(t){var e=t.children,n=Re("TopItemListComponent"),o=Re("headerHeight"),r=H({},ge,{marginTop:o+"px"}),i=Re("context");return React.createElement(n||"div",{style:r,context:i},e)},be=systemToComponent(ue,{required:{},optional:{context:"context",followOutput:"followOutput",firstItemIndex:"firstItemIndex",itemContent:"itemContent",groupContent:"groupContent",overscan:"overscan",increaseViewportBy:"increaseViewportBy",totalCount:"totalCount",topItemCount:"topItemCount",initialTopMostItemIndex:"initialTopMostItemIndex",components:"components",groupCounts:"groupCounts",atBottomThreshold:"atBottomThreshold",computeItemKey:"computeItemKey",defaultItemHeight:"defaultItemHeight",fixedItemHeight:"fixedItemHeight",itemSize:"itemSize",scrollSeekConfiguration:"scrollSeekConfiguration",headerFooterTag:"headerFooterTag",data:"data",initialItemCount:"initialItemCount",initialScrollTop:"initialScrollTop",alignToBottom:"alignToBottom",useWindowScroll:"useWindowScroll",customScrollParent:"customScrollParent",scrollerRef:"scrollerRef",logLevel:"logLevel",react18ConcurrentRendering:"react18ConcurrentRendering",item:"item",group:"group",topItems:"topItems",itemHeight:"itemHeight",scrollingStateChange:"scrollingStateChange",maxHeightCacheSize:"maxHeightCacheSize",footer:"footer",header:"header",ItemContainer:"ItemContainer",ScrollContainer:"ScrollContainer",ListContainer:"ListContainer",GroupContainer:"GroupContainer",emptyComponent:"emptyComponent",HeaderContainer:"HeaderContainer",FooterContainer:"FooterContainer",scrollSeek:"scrollSeek"},methods:{scrollToIndex:"scrollToIndex",scrollIntoView:"scrollIntoView",scrollTo:"scrollTo",scrollBy:"scrollBy",adjustForPrependedItems:"adjustForPrependedItems"},events:{isScrolling:"isScrolling",endReached:"endReached",startReached:"startReached",rangeChanged:"rangeChanged",atBottomStateChange:"atBottomStateChange",atTopStateChange:"atTopStateChange",totalListHeightChanged:"totalListHeightChanged",itemsRendered:"itemsRendered",groupIndices:"groupIndices"}},React__namespace.memo(function(t){var e=Re("useWindowScroll"),n=Re("topItemsIndexes").length>0,o=Re("customScrollParent"),r=o||e?xe:we;return React__namespace.createElement(o||e?ze:ke,H({},t),React__namespace.createElement(r,null,React__namespace.createElement(Se,null),React__namespace.createElement(fe,null),React__namespace.createElement(Ie,null)),n&&React__namespace.createElement(ye,null,React__namespace.createElement(fe,{showTopList:!0})))})),Ee=be.Component,He=be.usePublisher,Re=be.useEmitterValue,Le=be.useEmitter,ke=Ce({usePublisher:He,useEmitterValue:Re,useEmitter:Le}),ze=Te({usePublisher:He,useEmitterValue:Re,useEmitter:Le}),Be={items:[],offsetBottom:0,offsetTop:0,top:0,bottom:0,itemHeight:0,itemWidth:0},Fe={items:[{index:0}],offsetBottom:0,offsetTop:0,top:0,bottom:0,itemHeight:0,itemWidth:0},Pe=Math.round,Oe=Math.ceil,Me=Math.floor,Ve=Math.min,Ue=Math.max;function Ae(t,e){return Array.from({length:e-t+1}).map(function(e,n){return {index:n+t}})}var We=system(function(t){var n=t[0],o=n.overscan,r=n.visibleRange,i=n.listBoundary,a=t[1],l=a.scrollTop,s=a.viewportHeight,u=a.scrollBy,c=a.scrollTo,m=a.smoothScrollTargetReached,d=a.scrollContainerState,f=t[2],p=t[3],h=t[4],g=h.propsReady,v=h.didMount,S=t[5],I=S.windowViewportRect,C=S.windowScrollTo,T=S.useWindowScroll,w=S.customScrollParent,x=S.windowScrollContainerState,y=statefulStream(0),b=statefulStream(0),E=statefulStream(Be),R=statefulStream({height:0,width:0}),L=statefulStream({height:0,width:0}),k=stream(),z=stream(),B=statefulStream(0);connect(pipe(v,withLatestFrom(b),filter(function(t){return 0!==t[1]}),map(function(t){return {items:Ae(0,t[1]-1),top:0,bottom:0,offsetBottom:0,offsetTop:0,itemHeight:0,itemWidth:0}})),E),connect(pipe(combineLatest(duc(y),r,duc(L,function(t,e){return t&&t.width===e.width&&t.height===e.height})),withLatestFrom(R),map(function(t){var e=t[0],n=e[0],o=e[1],r=o[0],i=o[1],a=e[2],l=t[1],s=a.height,u=a.width,c=l.width;if(0===n||0===c)return Be;if(0===u)return Fe;var m=Ge(c,u),d=m*Me(r/s),f=m*Oe(i/s)-1;f=Ve(n-1,f);var p=Ae(d=Ve(f,Ue(0,d)),f),h=Ne(l,a,p),g=h.top,v=h.bottom;return {items:p,offsetTop:g,offsetBottom:Oe(n/m)*s-v,top:g,bottom:v,itemHeight:s,itemWidth:u}})),E),connect(pipe(R,map(function(t){return t.height})),s),connect(pipe(combineLatest(R,L,E),map(function(t){var e=Ne(t[0],t[1],t[2].items);return [e.top,e.bottom]}),distinctUntilChanged(zt)),i);var F=streamFromEmitter(pipe(duc(E),filter(function(t){return t.items.length>0}),withLatestFrom(y),filter(function(t){var e=t[0].items;return e[e.length-1].index===t[1]-1}),map(function(t){return t[1]-1}),distinctUntilChanged())),P=streamFromEmitter(pipe(duc(E),filter(function(t){var e=t.items;return e.length>0&&0===e[0].index}),mapTo(0),distinctUntilChanged())),O=streamFromEmitter(pipe(duc(E),filter(function(t){return t.items.length>0}),map(function(t){var e=t.items;return {startIndex:e[0].index,endIndex:e[e.length-1].index}}),distinctUntilChanged(Bt)));connect(O,p.scrollSeekRangeChanged),connect(pipe(k,withLatestFrom(R,L,y),map(function(t){var e=t[1],n=t[2],o=t[3],r=Ct(t[0]),i=r.align,a=r.behavior,l=r.offset,s=r.index;"LAST"===s&&(s=o-1);var u=De(e,n,s=Ue(0,s,Ve(o-1,s)));return "end"===i?u=Pe(u-e.height+n.height):"center"===i&&(u=Pe(u-e.height/2+n.height/2)),l&&(u+=l),{top:u,behavior:a}})),c);var M=statefulStreamFromEmitter(pipe(E,map(function(t){return t.offsetBottom+t.bottom})),0);return connect(pipe(I,map(function(t){return {width:t.visibleWidth,height:t.visibleHeight}})),R),H({totalCount:y,viewportDimensions:R,itemDimensions:L,scrollTop:l,scrollHeight:z,overscan:o,scrollBy:u,scrollTo:c,scrollToIndex:k,smoothScrollTargetReached:m,windowViewportRect:I,windowScrollTo:C,useWindowScroll:T,customScrollParent:w,windowScrollContainerState:x,deviation:B,scrollContainerState:d,initialItemCount:b},p,{gridState:E,totalListHeight:M},f,{startReached:P,endReached:F,rangeChanged:O,propsReady:g})},tup(Ot,N,yt,_t,bt,Jt));function Ne(t,e,n){var o=e.height;return void 0===o||0===n.length?{top:0,bottom:0}:{top:De(t,e,n[0].index),bottom:De(t,e,n[n.length-1].index)+o}}function De(t,e,n){var o=Ge(t.width,e.width);return Me(n/o)*e.height}function Ge(t,e){return Ue(1,Me(t/e))}var _e=["placeholder"],je=system(function(){var t=statefulStream(function(t){return "Item "+t}),n=statefulStream({}),o=statefulStream(null),r=statefulStream("virtuoso-grid-item"),i=statefulStream("virtuoso-grid-list"),a=statefulStream(ae),l=statefulStream(noop),s=function(t,o){return void 0===o&&(o=null),statefulStreamFromEmitter(pipe(n,map(function(e){return e[t]}),distinctUntilChanged()),o)};return {context:o,itemContent:t,components:n,computeItemKey:a,itemClassName:r,listClassName:i,scrollerRef:l,ListComponent:s("List","div"),ItemComponent:s("Item","div"),ScrollerComponent:s("Scroller","div"),ScrollSeekPlaceholder:s("ScrollSeekPlaceholder","div")}}),Ke=system(function(t){var n=t[0],o=t[1],r={item:se(o.itemContent,"Rename the %citem%c prop to %citemContent."),ItemContainer:stream(),ScrollContainer:stream(),ListContainer:stream(),emptyComponent:stream(),scrollSeek:stream()};function i(t,n,r){connect(pipe(t,withLatestFrom(o.components),map(function(t){var e,o=t[0],i=t[1];return console.warn("react-virtuoso: "+r+" property is deprecated. Pass components."+n+" instead."),H({},i,((e={})[n]=o,e))})),o.components);}return subscribe(r.scrollSeek,function(t){var r=t.placeholder,i=R(t,_e);console.warn("react-virtuoso: scrollSeek property is deprecated. Pass scrollSeekConfiguration and specify the placeholder in components.ScrollSeekPlaceholder instead."),publish(o.components,H({},getValue(o.components),{ScrollSeekPlaceholder:r})),publish(n.scrollSeekConfiguration,i);}),i(r.ItemContainer,"Item","ItemContainer"),i(r.ListContainer,"List","ListContainer"),i(r.ScrollContainer,"Scroller","ScrollContainer"),H({},n,o,r)},tup(We,je)),Ye=React__namespace.memo(function(){var t=Xe("gridState"),e=Xe("listClassName"),n=Xe("itemClassName"),o=Xe("itemContent"),r=Xe("computeItemKey"),i=Xe("isSeeking"),a=Qe("scrollHeight"),l=Xe("ItemComponent"),s=Xe("ListComponent"),u=Xe("ScrollSeekPlaceholder"),c=Xe("context"),m=Qe("itemDimensions"),d=V(function(t){a(t.parentElement.parentElement.scrollHeight);var e=t.firstChild;e&&m(e.getBoundingClientRect());});return React.createElement(s,H({ref:d,className:e},ve(s,c),{style:{paddingTop:t.offsetTop,paddingBottom:t.offsetBottom}}),t.items.map(function(e){var a=r(e.index);return i?React.createElement(u,H({key:a},ve(u,c),{index:e.index,height:t.itemHeight,width:t.itemWidth})):React.createElement(l,H({},ve(l,c),{className:n,"data-index":e.index,key:a}),o(e.index,c))}))}),Ze=function(t){var e=t.children,n=Qe("viewportDimensions"),o=V(function(t){n(t.getBoundingClientRect());});return React__namespace.createElement("div",{style:he,ref:o},e)},qe=function(t){var e=t.children,n=ne(Qe("windowViewportRect"),Xe("customScrollParent"));return React__namespace.createElement("div",{ref:n,style:he},e)},Je=systemToComponent(Ke,{optional:{totalCount:"totalCount",overscan:"overscan",itemContent:"itemContent",components:"components",computeItemKey:"computeItemKey",initialItemCount:"initialItemCount",scrollSeekConfiguration:"scrollSeekConfiguration",listClassName:"listClassName",itemClassName:"itemClassName",useWindowScroll:"useWindowScroll",customScrollParent:"customScrollParent",scrollerRef:"scrollerRef",item:"item",ItemContainer:"ItemContainer",ScrollContainer:"ScrollContainer",ListContainer:"ListContainer",scrollSeek:"scrollSeek"},methods:{scrollTo:"scrollTo",scrollBy:"scrollBy",scrollToIndex:"scrollToIndex"},events:{isScrolling:"isScrolling",endReached:"endReached",startReached:"startReached",rangeChanged:"rangeChanged",atBottomStateChange:"atBottomStateChange",atTopStateChange:"atTopStateChange"}},React__namespace.memo(function(t){var e=H({},t),n=Xe("useWindowScroll"),o=Xe("customScrollParent"),r=o||n?qe:Ze;return React__namespace.createElement(o||n?nn:en,H({},e),React__namespace.createElement(r,null,React__namespace.createElement(Ye,null)))})),Qe=Je.usePublisher,Xe=Je.useEmitterValue,tn=Je.useEmitter,en=Ce({usePublisher:Qe,useEmitterValue:Xe,useEmitter:tn}),nn=Te({usePublisher:Qe,useEmitterValue:Xe,useEmitter:tn}),on=system(function(){var t=statefulStream(function(t){return React__namespace.createElement("td",null,"Item $",t)}),e=statefulStream(null),n=statefulStream(null),o=statefulStream({}),r=statefulStream(ae),i=statefulStream(noop),a=function(t,e){return void 0===e&&(e=null),statefulStreamFromEmitter(pipe(o,map(function(e){return e[t]}),distinctUntilChanged()),e)};return {context:e,itemContent:t,fixedHeaderContent:n,components:o,computeItemKey:r,scrollerRef:i,TableComponent:a("Table","table"),TableHeadComponent:a("TableHead","thead"),TableBodyComponent:a("TableBody","tbody"),TableRowComponent:a("TableRow","tr"),ScrollerComponent:a("Scroller","div"),EmptyPlaceholder:a("EmptyPlaceholder"),ScrollSeekPlaceholder:a("ScrollSeekPlaceholder"),FillerRow:a("FillerRow")}}),rn=system(function(t){return H({},t[0],t[1])},tup(te,on)),an=function(t){return React__namespace.createElement("tr",null,React__namespace.createElement("td",{style:{height:t.height}}))},ln=function(t){return React__namespace.createElement("tr",null,React__namespace.createElement("td",{style:{height:t.height,padding:0,border:0}}))},sn=React__namespace.memo(function(){var t=pn("listState"),e=fn("sizeRanges"),n=pn("useWindowScroll"),o=pn("customScrollParent"),r=fn("windowScrollContainerState"),i=fn("scrollContainerState"),a=o||n?r:i,l=pn("itemContent"),s=pn("trackItemSizes"),u=U(e,pn("itemSize"),s,a,pn("log"),o),c=u.callbackRef,m=u.ref,d=React__namespace.useState(0),f=d[0],p=d[1];hn("deviation",function(t){f!==t&&(m.current.style.marginTop=t+"px",p(t));});var h=pn("EmptyPlaceholder"),g=pn("ScrollSeekPlaceholder")||an,v=pn("FillerRow")||ln,S=pn("TableBodyComponent"),I=pn("TableRowComponent"),C=pn("computeItemKey"),w=pn("isSeeking"),x=pn("paddingTopAddition"),y=pn("firstItemIndex"),b=pn("statefulTotalCount"),R=pn("context");if(0===b&&h)return React.createElement(h,ve(h,R));var L=t.offsetTop+x+f,k=t.offsetBottom,z=L>0?React__namespace.createElement(v,{height:L,key:"padding-top"}):null,B=k>0?React__namespace.createElement(v,{height:k,key:"padding-bottom"}):null,F=t.items.map(function(t){var e=t.originalIndex,n=C(e+y,t.data,R);return w?React.createElement(g,H({},ve(g,R),{key:n,index:t.index,height:t.size,type:t.type||"item"})):React.createElement(I,H({},ve(I,R),{key:n,"data-index":e,"data-known-size":t.size,"data-item-index":t.index,style:{overflowAnchor:"none"}}),l(t.index,t.data,R))});return React.createElement(S,H({ref:c,"data-test-id":"virtuoso-item-list"},ve(S,R)),[z].concat(F,[B]))}),un=function(t){var e=t.children,n=fn("viewportHeight"),o=V(compose(n,function(t){return A(t,"height")}));return React__namespace.createElement("div",{style:he,ref:o,"data-viewport-type":"element"},e)},cn=function(t){var e=t.children,n=ne(fn("windowViewportRect"),pn("customScrollParent"));return React__namespace.createElement("div",{ref:n,style:he,"data-viewport-type":"window"},e)},mn=systemToComponent(rn,{required:{},optional:{context:"context",followOutput:"followOutput",firstItemIndex:"firstItemIndex",itemContent:"itemContent",fixedHeaderContent:"fixedHeaderContent",overscan:"overscan",increaseViewportBy:"increaseViewportBy",totalCount:"totalCount",topItemCount:"topItemCount",initialTopMostItemIndex:"initialTopMostItemIndex",components:"components",groupCounts:"groupCounts",atBottomThreshold:"atBottomThreshold",computeItemKey:"computeItemKey",defaultItemHeight:"defaultItemHeight",fixedItemHeight:"fixedItemHeight",itemSize:"itemSize",scrollSeekConfiguration:"scrollSeekConfiguration",data:"data",initialItemCount:"initialItemCount",initialScrollTop:"initialScrollTop",alignToBottom:"alignToBottom",useWindowScroll:"useWindowScroll",customScrollParent:"customScrollParent",scrollerRef:"scrollerRef",logLevel:"logLevel",react18ConcurrentRendering:"react18ConcurrentRendering"},methods:{scrollToIndex:"scrollToIndex",scrollIntoView:"scrollIntoView",scrollTo:"scrollTo",scrollBy:"scrollBy"},events:{isScrolling:"isScrolling",endReached:"endReached",startReached:"startReached",rangeChanged:"rangeChanged",atBottomStateChange:"atBottomStateChange",atTopStateChange:"atTopStateChange",totalListHeightChanged:"totalListHeightChanged",itemsRendered:"itemsRendered",groupIndices:"groupIndices"}},React__namespace.memo(function(t){var e=pn("useWindowScroll"),n=pn("customScrollParent"),o=fn("fixedHeaderHeight"),r=pn("fixedHeaderContent"),i=pn("context"),a=V(compose(o,function(t){return A(t,"height")})),l=n||e?vn:gn,s=n||e?cn:un,u=pn("TableComponent"),c=pn("TableHeadComponent"),m=r?React__namespace.createElement(c,H({key:"TableHead",style:{zIndex:1,position:"sticky",top:0},ref:a},ve(c,i)),r()):null;return React__namespace.createElement(l,H({},t),React__namespace.createElement(s,null,React__namespace.createElement(u,H({style:{borderSpacing:0}},ve(u,i)),[m,React__namespace.createElement(sn,{key:"TableBody"})])))})),fn=mn.usePublisher,pn=mn.useEmitterValue,hn=mn.useEmitter,gn=Ce({usePublisher:fn,useEmitterValue:pn,useEmitter:hn}),vn=Te({usePublisher:fn,useEmitterValue:pn,useEmitter:hn}),Sn=Ee;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useGiphyPreview = function (separateGiphyPreview) {
        var _a = React.useState(), giphyPreviewMessage = _a[0], setGiphyPreviewMessage = _a[1];
        var client = useChatContext('useGiphyPreview').client;
        React.useEffect(function () {
            var handleEvent = function (event) {
                var message = event.message, user = event.user;
                if ((message === null || message === void 0 ? void 0 : message.command) === 'giphy' && (user === null || user === void 0 ? void 0 : user.id) === client.userID) {
                    setGiphyPreviewMessage(undefined);
                }
            };
            if (separateGiphyPreview)
                client.on('message.new', handleEvent);
            return function () { return client.off('message.new', handleEvent); };
        }, [separateGiphyPreview]);
        return { giphyPreviewMessage: giphyPreviewMessage, setGiphyPreviewMessage: setGiphyPreviewMessage };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function useNewMessageNotification(messages, currentUserId, hasMoreNewer) {
        var _a = React.useState(false), newMessagesNotification = _a[0], setNewMessagesNotification = _a[1];
        /**
         * use the flag to avoid the initial "new messages" quick blink
         */
        var didMount = React.useRef(false);
        var lastMessageId = React.useRef('');
        var atBottom = React.useRef(false);
        React.useEffect(function () {
            var _a;
            if (hasMoreNewer) {
                setNewMessagesNotification(true);
                return;
            }
            /* handle scrolling behavior for new messages */
            if (!(messages === null || messages === void 0 ? void 0 : messages.length))
                return;
            var lastMessage = messages[messages.length - 1];
            var prevMessageId = lastMessageId.current;
            lastMessageId.current = lastMessage.id || ''; // update last message id
            /* do nothing if new messages are loaded from top(loadMore)  */
            if (lastMessage.id === prevMessageId)
                return;
            /* if list is already at the bottom return, followOutput will do the job */
            if (atBottom.current)
                return;
            /* if the new message belongs to current user scroll to bottom */
            if (((_a = lastMessage.user) === null || _a === void 0 ? void 0 : _a.id) !== currentUserId && didMount.current) {
                /* otherwise just show newMessage notification  */
                setNewMessagesNotification(true);
            }
            didMount.current = true;
        }, [currentUserId, messages, hasMoreNewer]);
        return { atBottom: atBottom, newMessagesNotification: newMessagesNotification, setNewMessagesNotification: setNewMessagesNotification };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function usePrependedMessagesCount(messages, hasDateSeparator) {
        var _a;
        var firstRealMessageIndex = hasDateSeparator ? 1 : 0;
        var currentFirstMessageId = (_a = messages === null || messages === void 0 ? void 0 : messages[firstRealMessageIndex]) === null || _a === void 0 ? void 0 : _a.id;
        var firstMessageId = React.useRef(currentFirstMessageId);
        var earliestMessageId = React.useRef(currentFirstMessageId);
        var previousNumItemsPrepended = React.useRef(0);
        var numItemsPrepended = React.useMemo(function () {
            if (!messages || !messages.length) {
                return 0;
            }
            // if no new messages were prepended, return early (same amount as before)
            if (currentFirstMessageId === earliestMessageId.current) {
                return previousNumItemsPrepended.current;
            }
            if (!firstMessageId.current) {
                firstMessageId.current = currentFirstMessageId;
            }
            earliestMessageId.current = currentFirstMessageId;
            // if new messages were prepended, find out how many
            // start with this number because there cannot be fewer prepended items than before
            for (var i = previousNumItemsPrepended.current; i < messages.length; i += 1) {
                if (messages[i].id === firstMessageId.current) {
                    previousNumItemsPrepended.current = i;
                    return i;
                }
            }
            // if no match has found, we have jumped
            firstMessageId.current = currentFirstMessageId;
            return 0;
            // TODO: there's a bug here, the messages prop is the same array instance (something mutates it)
            // that's why the second dependency is necessary
        }, [messages, messages === null || messages === void 0 ? void 0 : messages.length]);
        return numItemsPrepended;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function useShouldForceScrollToBottom(messages, currentUserId) {
        var lastFocusedOwnMessage = React.useRef('');
        var initialFocusRegistered = React.useRef(false);
        function recheckForNewOwnMessage() {
            var _a;
            if (messages && messages.length > 0) {
                var lastMessage = messages[messages.length - 1];
                if (((_a = lastMessage.user) === null || _a === void 0 ? void 0 : _a.id) === currentUserId &&
                    lastFocusedOwnMessage.current !== lastMessage.id) {
                    lastFocusedOwnMessage.current = lastMessage.id;
                    return true;
                }
            }
            return false;
        }
        React.useEffect(function () {
            if (messages && messages.length && !initialFocusRegistered.current) {
                initialFocusRegistered.current = true;
                recheckForNewOwnMessage();
            }
        }, [messages, messages === null || messages === void 0 ? void 0 : messages.length]);
        return recheckForNewOwnMessage;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var PREPEND_OFFSET = Math.pow(10, 7);
    function captureResizeObserverExceededError(e) {
        if (e.message === 'ResizeObserver loop completed with undelivered notifications.' ||
            e.message === 'ResizeObserver loop limit exceeded') {
            e.stopImmediatePropagation();
        }
    }
    function useCaptureResizeObserverExceededError() {
        React.useEffect(function () {
            window.addEventListener('error', captureResizeObserverExceededError);
            return function () {
                window.removeEventListener('error', captureResizeObserverExceededError);
            };
        }, []);
    }
    function fractionalItemSize(element) {
        return element.getBoundingClientRect().height;
    }
    function findMessageIndex(messages, id) {
        return messages.findIndex(function (message) { return message.id === id; });
    }
    function calculateInitialTopMostItemIndex(messages, highlightedMessageId) {
        if (highlightedMessageId) {
            var index = findMessageIndex(messages, highlightedMessageId);
            if (index !== -1) {
                return { align: 'center', index: index };
            }
        }
        return messages.length - 1;
    }
    var VirtualizedMessageListWithContext = function (props) {
        var additionalVirtuosoProps = props.additionalVirtuosoProps, channel = props.channel, closeReactionSelectorOnClick = props.closeReactionSelectorOnClick, customMessageRenderer = props.customMessageRenderer, defaultItemHeight = props.defaultItemHeight, _a = props.disableDateSeparator, disableDateSeparator = _a === void 0 ? true : _a, hasMore = props.hasMore, hasMoreNewer = props.hasMoreNewer, _b = props.hideDeletedMessages, hideDeletedMessages = _b === void 0 ? false : _b, _c = props.hideNewMessageSeparator, hideNewMessageSeparator = _c === void 0 ? false : _c, highlightedMessageId = props.highlightedMessageId, jumpToLatestMessage = props.jumpToLatestMessage, loadingMore = props.loadingMore, loadMore = props.loadMore, loadMoreNewer = props.loadMoreNewer, propMessage = props.Message, _d = props.messageLimit, messageLimit = _d === void 0 ? 100 : _d, messages = props.messages, notifications = props.notifications, 
        // TODO: refactor to scrollSeekPlaceHolderConfiguration and components.ScrollSeekPlaceholder, like the Virtuoso Component
        _e = props.overscan, 
        // TODO: refactor to scrollSeekPlaceHolderConfiguration and components.ScrollSeekPlaceholder, like the Virtuoso Component
        overscan = _e === void 0 ? 0 : _e, scrollSeekPlaceHolder = props.scrollSeekPlaceHolder, _f = props.scrollToLatestMessageOnFocus, scrollToLatestMessageOnFocus = _f === void 0 ? false : _f, _g = props.separateGiphyPreview, separateGiphyPreview = _g === void 0 ? false : _g, _h = props.shouldGroupByUser, shouldGroupByUser = _h === void 0 ? false : _h, _j = props.stickToBottomScrollBehavior, stickToBottomScrollBehavior = _j === void 0 ? 'smooth' : _j, suppressAutoscroll = props.suppressAutoscroll;
        // Stops errors generated from react-virtuoso to bubble up
        // to Sentry or other tracking tools.
        useCaptureResizeObserverExceededError();
        var _k = useComponentContext('VirtualizedMessageList'), _l = _k.DateSeparator, DateSeparator$1 = _l === void 0 ? DateSeparator : _l, _m = _k.EmptyStateIndicator, EmptyStateIndicator$1 = _m === void 0 ? EmptyStateIndicator : _m, _o = _k.GiphyPreviewMessage, GiphyPreviewMessage$1 = _o === void 0 ? GiphyPreviewMessage : _o, _p = _k.LoadingIndicator, LoadingIndicator$1 = _p === void 0 ? LoadingIndicator : _p, _q = _k.MessageListNotifications, MessageListNotifications$1 = _q === void 0 ? MessageListNotifications : _q, _r = _k.MessageNotification, MessageNotification$1 = _r === void 0 ? MessageNotification : _r, _s = _k.MessageSystem, MessageSystem = _s === void 0 ? EventComponent : _s, _t = _k.TypingIndicator, TypingIndicator = _t === void 0 ? null : _t, _u = _k.VirtualMessage, contextMessage = _u === void 0 ? MessageSimple : _u;
        var _v = useChatContext('VirtualizedMessageList'), client = _v.client, customClasses = _v.customClasses;
        var lastRead = React.useMemo(function () { var _a; return (_a = channel.lastRead) === null || _a === void 0 ? void 0 : _a.call(channel); }, [channel]);
        var MessageUIComponent = propMessage || contextMessage;
        var _w = useGiphyPreview(separateGiphyPreview), giphyPreviewMessage = _w.giphyPreviewMessage, setGiphyPreviewMessage = _w.setGiphyPreviewMessage;
        var processedMessages = React.useMemo(function () {
            if (typeof messages === 'undefined') {
                return [];
            }
            if (disableDateSeparator &&
                !hideDeletedMessages &&
                hideNewMessageSeparator &&
                !separateGiphyPreview) {
                return messages;
            }
            return processMessages({
                enableDateSeparator: !disableDateSeparator,
                hideDeletedMessages: hideDeletedMessages,
                hideNewMessageSeparator: hideNewMessageSeparator,
                lastRead: lastRead,
                messages: messages,
                setGiphyPreviewMessage: setGiphyPreviewMessage,
                userId: client.userID || '',
            });
        }, [
            disableDateSeparator,
            hideDeletedMessages,
            hideNewMessageSeparator,
            lastRead,
            messages,
            messages === null || messages === void 0 ? void 0 : messages.length,
            client.userID,
        ]);
        var virtuoso = React.useRef(null);
        var _x = useNewMessageNotification(processedMessages, client.userID, hasMoreNewer), atBottom = _x.atBottom, newMessagesNotification = _x.newMessagesNotification, setNewMessagesNotification = _x.setNewMessagesNotification;
        var scrollToBottom = React.useCallback(function () { return __awaiter$1(void 0, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!hasMoreNewer) return [3 /*break*/, 2];
                        return [4 /*yield*/, jumpToLatestMessage()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                    case 2:
                        if (virtuoso.current) {
                            virtuoso.current.scrollToIndex(processedMessages.length - 1);
                        }
                        setNewMessagesNotification(false);
                        return [2 /*return*/];
                }
            });
        }); }, [
            virtuoso,
            processedMessages,
            setNewMessagesNotification,
            processedMessages.length,
            hasMoreNewer,
            jumpToLatestMessage,
        ]);
        var _y = React__default['default'].useState(false), newMessagesReceivedInBackground = _y[0], setNewMessagesReceivedInBackground = _y[1];
        var resetNewMessagesReceivedInBackground = React.useCallback(function () {
            setNewMessagesReceivedInBackground(false);
        }, []);
        React.useEffect(function () {
            setNewMessagesReceivedInBackground(true);
        }, [messages]);
        var scrollToBottomIfConfigured = React.useCallback(function (event) {
            if (scrollToLatestMessageOnFocus && event.target === window) {
                if (newMessagesReceivedInBackground) {
                    setTimeout(scrollToBottom, 100);
                }
            }
        }, [scrollToLatestMessageOnFocus, scrollToBottom, newMessagesReceivedInBackground]);
        React.useEffect(function () {
            if (typeof window !== 'undefined') {
                window.addEventListener('focus', scrollToBottomIfConfigured);
                window.addEventListener('blur', resetNewMessagesReceivedInBackground);
            }
            return function () {
                window.removeEventListener('focus', scrollToBottomIfConfigured);
                window.removeEventListener('blur', resetNewMessagesReceivedInBackground);
            };
        }, [scrollToBottomIfConfigured]);
        var numItemsPrepended = usePrependedMessagesCount(processedMessages, !disableDateSeparator);
        /**
         * Logic to update the key of the virtuoso component when the list jumps to a new location.
         */
        var _z = React.useState(+new Date()), messageSetKey = _z[0], setMessageSetKey = _z[1];
        var firstMessageId = React.useRef();
        React.useEffect(function () {
            var _a;
            var continuousSet = messages === null || messages === void 0 ? void 0 : messages.find(function (message) { return message.id === firstMessageId.current; });
            if (!continuousSet) {
                setMessageSetKey(+new Date());
            }
            firstMessageId.current = (_a = messages === null || messages === void 0 ? void 0 : messages[0]) === null || _a === void 0 ? void 0 : _a.id;
        }, [messages]);
        var shouldForceScrollToBottom = useShouldForceScrollToBottom(processedMessages, client.userID);
        var followOutput = function (isAtBottom) {
            if (hasMoreNewer || suppressAutoscroll) {
                return false;
            }
            if (shouldForceScrollToBottom()) {
                return isAtBottom ? stickToBottomScrollBehavior : 'auto';
            }
            // a message from another user has been received - don't scroll to bottom unless already there
            return isAtBottom ? stickToBottomScrollBehavior : false;
        };
        var messageRenderer = React.useCallback(function (messageList, virtuosoIndex) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            var streamMessageIndex = virtuosoIndex + numItemsPrepended - PREPEND_OFFSET;
            // use custom renderer supplied by client if present and skip the rest
            if (customMessageRenderer) {
                return customMessageRenderer(messageList, streamMessageIndex);
            }
            var message = messageList[streamMessageIndex];
            if (message.customType === CUSTOM_MESSAGE_TYPE.date && message.date && isDate(message.date)) {
                return React__default['default'].createElement(DateSeparator$1, { date: message.date, unread: message.unread });
            }
            if (!message)
                return React__default['default'].createElement("div", { style: { height: '1px' } }); // returning null or zero height breaks the virtuoso
            if (message.type === 'system') {
                return React__default['default'].createElement(MessageSystem, { message: message });
            }
            var groupedByUser = shouldGroupByUser &&
                streamMessageIndex > 0 &&
                ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) === ((_b = messageList[streamMessageIndex - 1].user) === null || _b === void 0 ? void 0 : _b.id);
            var firstOfGroup = shouldGroupByUser && ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id) !== ((_e = (_d = messageList[streamMessageIndex - 1]) === null || _d === void 0 ? void 0 : _d.user) === null || _e === void 0 ? void 0 : _e.id);
            var endOfGroup = shouldGroupByUser && ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id) !== ((_h = (_g = messageList[streamMessageIndex + 1]) === null || _g === void 0 ? void 0 : _g.user) === null || _h === void 0 ? void 0 : _h.id);
            return (React__default['default'].createElement(Message, { closeReactionSelectorOnClick: closeReactionSelectorOnClick, customMessageActions: props.customMessageActions, endOfGroup: endOfGroup, firstOfGroup: firstOfGroup, groupedByUser: groupedByUser, message: message, Message: MessageUIComponent, messageActions: props.messageActions }));
        }, [customMessageRenderer, shouldGroupByUser, numItemsPrepended]);
        var virtuosoComponents = React.useMemo(function () {
            var EmptyPlaceholder = function () { return (React__default['default'].createElement(React__default['default'].Fragment, null, EmptyStateIndicator$1 && React__default['default'].createElement(EmptyStateIndicator$1, { listType: 'message' }))); };
            var Header = function () {
                return loadingMore ? (React__default['default'].createElement("div", { className: 'str-chat__virtual-list__loading' },
                    React__default['default'].createElement(LoadingIndicator$1, { size: 20 }))) : (React__default['default'].createElement(React__default['default'].Fragment, null));
            };
            var virtualMessageClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.virtualMessage) || 'str-chat__virtual-list-message-wrapper';
            // using 'display: inline-block' traps CSS margins of the item elements, preventing incorrect item measurements
            var Item = function (props) { return React__default['default'].createElement("div", __assign$2({}, props, { className: virtualMessageClass })); };
            var Footer = function () {
                return TypingIndicator ? React__default['default'].createElement(TypingIndicator, { avatarSize: 24 }) : React__default['default'].createElement(React__default['default'].Fragment, null);
            };
            return {
                EmptyPlaceholder: EmptyPlaceholder,
                Footer: Footer,
                Header: Header,
                Item: Item,
            };
        }, [loadingMore]);
        var atBottomStateChange = function (isAtBottom) {
            atBottom.current = isAtBottom;
            if (isAtBottom && newMessagesNotification) {
                setNewMessagesNotification(false);
            }
        };
        var startReached = function () {
            if (hasMore && loadMore) {
                loadMore(messageLimit);
            }
        };
        var endReached = function () {
            if (hasMoreNewer && loadMoreNewer) {
                loadMoreNewer(messageLimit);
            }
        };
        React.useEffect(function () {
            var _a;
            if (highlightedMessageId) {
                var index = findMessageIndex(processedMessages, highlightedMessageId);
                if (index !== -1) {
                    (_a = virtuoso.current) === null || _a === void 0 ? void 0 : _a.scrollToIndex({ align: 'center', index: index });
                }
            }
        }, [highlightedMessageId]);
        if (!processedMessages)
            return null;
        return (React__default['default'].createElement(React__default['default'].Fragment, null,
            React__default['default'].createElement("div", { className: (customClasses === null || customClasses === void 0 ? void 0 : customClasses.virtualizedMessageList) || 'str-chat__virtual-list' },
                React__default['default'].createElement(Sn, __assign$2({ atBottomStateChange: atBottomStateChange, components: virtuosoComponents, endReached: endReached, firstItemIndex: PREPEND_OFFSET - numItemsPrepended, followOutput: followOutput, increaseViewportBy: { bottom: 200, top: 0 }, initialTopMostItemIndex: calculateInitialTopMostItemIndex(processedMessages, highlightedMessageId), itemContent: function (i) { return messageRenderer(processedMessages, i); }, itemSize: fractionalItemSize, key: messageSetKey, overscan: overscan, ref: virtuoso, startReached: startReached, style: { overflowX: 'hidden' }, totalCount: processedMessages.length }, additionalVirtuosoProps, (scrollSeekPlaceHolder ? { scrollSeek: scrollSeekPlaceHolder } : {}), (defaultItemHeight ? { defaultItemHeight: defaultItemHeight } : {})))),
            React__default['default'].createElement(MessageListNotifications$1, { hasNewMessages: newMessagesNotification, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification$1, notifications: notifications, scrollToBottom: scrollToBottom }),
            giphyPreviewMessage && React__default['default'].createElement(GiphyPreviewMessage$1, { message: giphyPreviewMessage })));
    };
    /**
     * The VirtualizedMessageList component renders a list of messages in a virtualized list.
     * It is a consumer of the React contexts set in [Channel](https://github.com/GetStream/stream-chat-react/blob/master/src/components/Channel/Channel.tsx).
     *
     * **Note**: It works well when there are thousands of messages in a channel, it has a shortcoming though - the message UI should have a fixed height.
     */
    function VirtualizedMessageList(props) {
        var _a = useChannelActionContext('VirtualizedMessageList'), jumpToLatestMessage = _a.jumpToLatestMessage, loadMore = _a.loadMore, loadMoreNewer = _a.loadMoreNewer;
        var _b = useChannelStateContext('VirtualizedMessageList'), channel = _b.channel, hasMore = _b.hasMore, hasMoreNewer = _b.hasMoreNewer, highlightedMessageId = _b.highlightedMessageId, loadingMore = _b.loadingMore, loadingMoreNewer = _b.loadingMoreNewer, contextMessages = _b.messages, notifications = _b.notifications, suppressAutoscroll = _b.suppressAutoscroll;
        var messages = props.messages || contextMessages;
        return (React__default['default'].createElement(VirtualizedMessageListWithContext, __assign$2({ channel: channel, hasMore: !!hasMore, hasMoreNewer: !!hasMoreNewer, highlightedMessageId: highlightedMessageId, jumpToLatestMessage: jumpToLatestMessage, loadingMore: !!loadingMore, loadingMoreNewer: !!loadingMoreNewer, loadMore: loadMore, loadMoreNewer: loadMoreNewer, messages: messages, notifications: notifications, suppressAutoscroll: suppressAutoscroll }, props)));
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * The Thread component renders a parent Message with a list of replies
     */
    var Thread = function (props) {
        var _a = useChannelStateContext('Thread'), channel = _a.channel, channelConfig = _a.channelConfig, thread = _a.thread;
        if (!thread || (channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.replies) === false)
            return null;
        // The wrapper ensures a key variable is set and the component recreates on thread switch
        return React__default['default'].createElement(ThreadInner, __assign$2({}, props, { key: "thread-" + thread.id + "-" + (channel === null || channel === void 0 ? void 0 : channel.cid) }));
    };
    var DefaultThreadHeader = function (props) {
        var closeThread = props.closeThread, thread = props.thread;
        var t = useTranslationContext('Thread').t;
        var getReplyCount = function () {
            if (!thread.reply_count)
                return '';
            return t('replyCount', { count: thread.reply_count });
        };
        return (React__default['default'].createElement("div", { className: 'str-chat__thread-header' },
            React__default['default'].createElement("div", { className: 'str-chat__thread-header-details' },
                React__default['default'].createElement("strong", null, t('Thread')),
                React__default['default'].createElement("small", null, getReplyCount())),
            React__default['default'].createElement("button", { "aria-label": 'Close thread', className: 'str-chat__square-button', "data-testid": 'close-button', onClick: function (event) { return closeThread(event); } },
                React__default['default'].createElement("svg", { height: '10', width: '10', xmlns: 'http://www.w3.org/2000/svg' },
                    React__default['default'].createElement("path", { d: 'M9.916 1.027L8.973.084 5 4.058 1.027.084l-.943.943L4.058 5 .084 8.973l.943.943L5 5.942l3.973 3.974.943-.943L5.942 5z', fillRule: 'evenodd' })))));
    };
    var DefaultThreadStart = function () {
        var t = useTranslationContext('Thread').t;
        return React__default['default'].createElement("div", { className: 'str-chat__thread-start' }, t('Start of a new thread'));
    };
    var ThreadInner = function (props) {
        var additionalMessageInputProps = props.additionalMessageInputProps, additionalMessageListProps = props.additionalMessageListProps, additionalParentMessageProps = props.additionalParentMessageProps, additionalVirtualizedMessageListProps = props.additionalVirtualizedMessageListProps, _a = props.autoFocus, autoFocus = _a === void 0 ? true : _a, _b = props.enableDateSeparator, enableDateSeparator = _b === void 0 ? false : _b, _c = props.fullWidth, fullWidth = _c === void 0 ? false : _c, PropInput = props.Input, PropMessage = props.Message, virtualized = props.virtualized;
        var _d = useChannelStateContext('Thread'), thread = _d.thread, threadHasMore = _d.threadHasMore, threadLoadingMore = _d.threadLoadingMore, threadMessages = _d.threadMessages;
        var _e = useChannelActionContext('Thread'), closeThread = _e.closeThread, loadMoreThread = _e.loadMoreThread, sendMessage = _e.sendMessage;
        var customClasses = useChatContext('Thread').customClasses;
        var _f = useComponentContext('Thread'), ContextInput = _f.ThreadInput, ContextMessage = _f.Message, _g = _f.ThreadHeader, ThreadHeader = _g === void 0 ? DefaultThreadHeader : _g, _h = _f.ThreadStart, ThreadStart = _h === void 0 ? DefaultThreadStart : _h, _j = _f.VirtualMessage, VirtualMessage = _j === void 0 ? FixedHeightMessage : _j;
        var messageList = React.useRef(null);
        var ThreadInput = PropInput || (additionalMessageInputProps === null || additionalMessageInputProps === void 0 ? void 0 : additionalMessageInputProps.Input) || ContextInput || MessageInputSmall;
        var ThreadMessage = PropMessage || (additionalMessageListProps === null || additionalMessageListProps === void 0 ? void 0 : additionalMessageListProps.Message);
        var FallbackMessage = virtualized ? VirtualMessage : ContextMessage;
        var ThreadMessageList = virtualized ? VirtualizedMessageList : MessageList;
        React.useEffect(function () {
            if ((thread === null || thread === void 0 ? void 0 : thread.id) && (thread === null || thread === void 0 ? void 0 : thread.reply_count)) {
                loadMoreThread();
            }
        }, []);
        var threadSubmitHandler = function (message, _, customMessageData) { return __awaiter$1(void 0, void 0, void 0, function () {
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, sendMessage(message, customMessageData)];
                    case 1:
                        _a.sent();
                        if (messageList.current) {
                            messageList.current.scrollTop = messageList.current.scrollHeight;
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        if (!thread)
            return null;
        var threadClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.thread) || 'str-chat__thread';
        return (React__default['default'].createElement("div", { className: threadClass + " " + (fullWidth ? 'str-chat__thread--full' : '') },
            React__default['default'].createElement(ThreadHeader, { closeThread: closeThread, thread: thread }),
            React__default['default'].createElement("div", { className: 'str-chat__thread-list', ref: messageList },
                React__default['default'].createElement(Message, __assign$2({ initialMessage: true, message: thread, Message: ThreadMessage || FallbackMessage, threadList: true }, additionalParentMessageProps)),
                React__default['default'].createElement(ThreadStart, null),
                React__default['default'].createElement(ThreadMessageList, __assign$2({ disableDateSeparator: !enableDateSeparator, hasMore: threadHasMore, loadingMore: threadLoadingMore, loadMore: loadMoreThread, Message: ThreadMessage || FallbackMessage, messages: threadMessages || [], threadList: true }, (virtualized ? additionalVirtualizedMessageListProps : additionalMessageListProps)))),
            React__default['default'].createElement(MessageInput, __assign$2({ focus: autoFocus, Input: ThreadInput, overrideSubmitHandler: threadSubmitHandler, parent: thread, publishTypingEvent: false }, additionalMessageInputProps))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedWindow = function (props) {
        var children = props.children, _a = props.hideOnThread, hideOnThread = _a === void 0 ? false : _a;
        var thread = useChannelStateContext('Window').thread;
        return (React__default['default'].createElement("div", { className: "str-chat__main-panel   " + (hideOnThread && thread ? 'str-chat__main-panel--hideOnThread' : '') }, children));
    };
    /**
     * A UI component for conditionally displaying a Thread or Channel
     */
    var Window = React__default['default'].memo(UnMemoizedWindow);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var sharedProps = createCommonjsModule$1(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PickerPropTypes = exports.EmojiPropTypes = void 0;

    var _propTypes = interopRequireDefault(propTypes$1);

    var EmojiPropTypes = {
      data: _propTypes["default"].object.isRequired,
      onOver: _propTypes["default"].func,
      onLeave: _propTypes["default"].func,
      onClick: _propTypes["default"].func,
      fallback: _propTypes["default"].func,
      backgroundImageFn: _propTypes["default"].func,
      "native": _propTypes["default"].bool,
      forceSize: _propTypes["default"].bool,
      tooltip: _propTypes["default"].bool,
      useButton: _propTypes["default"].bool,
      skin: _propTypes["default"].oneOf([1, 2, 3, 4, 5, 6]),
      sheetSize: _propTypes["default"].oneOf([16, 20, 32, 64]),
      sheetColumns: _propTypes["default"].number,
      sheetRows: _propTypes["default"].number,
      set: _propTypes["default"].oneOf(['apple', 'google', 'twitter', 'facebook']),
      size: _propTypes["default"].number.isRequired,
      emoji: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]).isRequired
    };
    exports.EmojiPropTypes = EmojiPropTypes;
    var PickerPropTypes = {
      onClick: _propTypes["default"].func,
      onSelect: _propTypes["default"].func,
      onSkinChange: _propTypes["default"].func,
      perLine: _propTypes["default"].number,
      emojiSize: _propTypes["default"].number,
      i18n: _propTypes["default"].object,
      style: _propTypes["default"].object,
      title: _propTypes["default"].string,
      emoji: _propTypes["default"].string,
      color: _propTypes["default"].string,
      set: EmojiPropTypes.set,
      skin: EmojiPropTypes.skin,
      "native": _propTypes["default"].bool,
      backgroundImageFn: EmojiPropTypes.backgroundImageFn,
      sheetSize: EmojiPropTypes.sheetSize,
      emojisToShowFilter: _propTypes["default"].func,
      showPreview: _propTypes["default"].bool,
      showSkinTones: _propTypes["default"].bool,
      emojiTooltip: EmojiPropTypes.tooltip,
      useButton: EmojiPropTypes.useButton,
      theme: _propTypes["default"].oneOf(['auto', 'light', 'dark']),
      include: _propTypes["default"].arrayOf(_propTypes["default"].string),
      exclude: _propTypes["default"].arrayOf(_propTypes["default"].string),
      recent: _propTypes["default"].arrayOf(_propTypes["default"].string),
      autoFocus: _propTypes["default"].bool,
      enableFrequentEmojiSort: _propTypes["default"].bool,
      custom: _propTypes["default"].arrayOf(_propTypes["default"].shape({
        name: _propTypes["default"].string.isRequired,
        short_names: _propTypes["default"].arrayOf(_propTypes["default"].string).isRequired,
        emoticons: _propTypes["default"].arrayOf(_propTypes["default"].string),
        keywords: _propTypes["default"].arrayOf(_propTypes["default"].string),
        imageUrl: _propTypes["default"].string,
        spriteUrl: _propTypes["default"].string,
        sheet_x: _propTypes["default"].number,
        sheet_y: _propTypes["default"].number,
        size: _propTypes["default"].number,
        sheetColumns: _propTypes["default"].number,
        sheetRows: _propTypes["default"].number
      })),
      skinEmoji: _propTypes["default"].string,
      notFound: _propTypes["default"].func,
      notFoundEmoji: _propTypes["default"].string,
      icons: _propTypes["default"].object
    };
    exports.PickerPropTypes = PickerPropTypes;
    });

    unwrapExports(sharedProps);
    sharedProps.PickerPropTypes;
    sharedProps.EmojiPropTypes;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var sharedDefaultProps = createCommonjsModule$1(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EmojiDefaultProps = exports.PickerDefaultProps = void 0;
    var EmojiDefaultProps = {
      skin: 1,
      set: 'apple',
      sheetSize: 64,
      sheetColumns: 57,
      sheetRows: 57,
      "native": false,
      forceSize: false,
      tooltip: false,
      useButton: true,
      backgroundImageFn: function backgroundImageFn(set, sheetSize) {
        return "https://unpkg.com/emoji-datasource-".concat(set, "@").concat("5.0.1", "/img/").concat(set, "/sheets-256/").concat(sheetSize, ".png");
      }
    };
    exports.EmojiDefaultProps = EmojiDefaultProps;
    var PickerDefaultProps = {
      onClick: function onClick() {},
      onSelect: function onSelect() {},
      onSkinChange: function onSkinChange() {},
      emojiSize: 24,
      perLine: 9,
      i18n: {},
      style: {},
      title: 'Emoji Mart™',
      emoji: 'department_store',
      color: '#ae65c5',
      set: EmojiDefaultProps.set,
      theme: 'light',
      skin: null,
      defaultSkin: EmojiDefaultProps.skin,
      "native": EmojiDefaultProps["native"],
      sheetSize: EmojiDefaultProps.sheetSize,
      backgroundImageFn: EmojiDefaultProps.backgroundImageFn,
      emojisToShowFilter: null,
      showPreview: true,
      showSkinTones: true,
      emojiTooltip: EmojiDefaultProps.tooltip,
      useButton: EmojiDefaultProps.useButton,
      autoFocus: false,
      enableFrequentEmojiSort: false,
      custom: [],
      skinEmoji: '',
      notFound: function notFound() {},
      notFoundEmoji: 'sleuth_or_spy',
      icons: {}
    };
    exports.PickerDefaultProps = PickerDefaultProps;
    });

    unwrapExports(sharedDefaultProps);
    sharedDefaultProps.EmojiDefaultProps;
    sharedDefaultProps.PickerDefaultProps;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var nimbleEmoji = createCommonjsModule$1(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _extends2 = interopRequireDefault(_extends_1);

    var _defineProperty2 = interopRequireDefault(defineProperty$1);

    var _react = interopRequireDefault(React__default['default']);

    var _propTypes = interopRequireDefault(propTypes$1);









    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var _getData = function _getData(props) {
      var emoji = props.emoji,
          skin = props.skin,
          set = props.set,
          data = props.data;
      return (0, utils.getData)(emoji, skin, set, data);
    };

    var _getPosition = function _getPosition(props) {
      var _getData2 = _getData(props),
          sheet_x = _getData2.sheet_x,
          sheet_y = _getData2.sheet_y,
          multiplyX = 100 / (props.sheetColumns - 1),
          multiplyY = 100 / (props.sheetRows - 1);

      return "".concat(multiplyX * sheet_x, "% ").concat(multiplyY * sheet_y, "%");
    };

    var _getSanitizedData = function _getSanitizedData(props) {
      var emoji = props.emoji,
          skin = props.skin,
          set = props.set,
          data = props.data;
      return (0, utils.getSanitizedData)(emoji, skin, set, data);
    };

    var _handleClick = function _handleClick(e, props) {
      if (!props.onClick) {
        return;
      }

      var onClick = props.onClick,
          emoji = _getSanitizedData(props);

      onClick(emoji, e);
    };

    var _handleOver = function _handleOver(e, props) {
      if (!props.onOver) {
        return;
      }

      var onOver = props.onOver,
          emoji = _getSanitizedData(props);

      onOver(emoji, e);
    };

    var _handleLeave = function _handleLeave(e, props) {
      if (!props.onLeave) {
        return;
      }

      var onLeave = props.onLeave,
          emoji = _getSanitizedData(props);

      onLeave(emoji, e);
    };

    var _isNumeric = function _isNumeric(value) {
      return !isNaN(value - parseFloat(value));
    };

    var _convertStyleToCSS = function _convertStyleToCSS(style) {
      var div = document.createElement('div');

      for (var key in style) {
        var value = style[key];

        if (_isNumeric(value)) {
          value += 'px';
        }

        div.style[key] = value;
      }

      return div.getAttribute('style');
    };

    var NimbleEmoji = function NimbleEmoji(props) {
      if (props.data.compressed) {
        (0, data.uncompress)(props.data);
      }

      for (var k in NimbleEmoji.defaultProps) {
        if (props[k] == undefined && NimbleEmoji.defaultProps[k] != undefined) {
          props[k] = NimbleEmoji.defaultProps[k];
        }
      }

      var data$1 = _getData(props);

      if (!data$1) {
        if (props.fallback) {
          return props.fallback(null, props);
        } else {
          return null;
        }
      }

      var unified = data$1.unified,
          custom = data$1.custom,
          short_names = data$1.short_names,
          imageUrl = data$1.imageUrl,
          style = {},
          children = props.children,
          className = 'emoji-mart-emoji',
          nativeEmoji = unified && (0, utils.unifiedToNative)(unified),
          label = [nativeEmoji].concat(short_names).filter(Boolean).join(', '),
          title = null;

      if (!unified && !custom) {
        if (props.fallback) {
          return props.fallback(data$1, props);
        } else {
          return null;
        }
      }

      if (props.tooltip) {
        title = short_names[0];
      }

      if (props["native"] && unified) {
        className += ' emoji-mart-emoji-native';
        style = {
          fontSize: props.size
        };
        children = nativeEmoji;

        if (props.forceSize) {
          style.display = 'inline-block';
          style.width = props.size;
          style.height = props.size;
          style.wordBreak = 'keep-all';
        }
      } else if (custom) {
        className += ' emoji-mart-emoji-custom';
        style = {
          width: props.size,
          height: props.size,
          display: 'inline-block'
        };

        if (data$1.spriteUrl) {
          style = _objectSpread({}, style, {
            backgroundImage: "url(".concat(data$1.spriteUrl, ")"),
            backgroundSize: "".concat(100 * props.sheetColumns, "% ").concat(100 * props.sheetRows, "%"),
            backgroundPosition: _getPosition(props)
          });
        } else {
          style = _objectSpread({}, style, {
            backgroundImage: "url(".concat(imageUrl, ")"),
            backgroundSize: 'contain',
            backgroundRepeat: 'no-repeat',
            backgroundPosition: 'center'
          });
        }
      } else {
        var setHasEmoji = data$1["has_img_".concat(props.set)] == undefined || data$1["has_img_".concat(props.set)];

        if (!setHasEmoji) {
          if (props.fallback) {
            return props.fallback(data$1, props);
          } else {
            return null;
          }
        } else {
          style = {
            width: props.size,
            height: props.size,
            display: 'inline-block',
            backgroundImage: "url(".concat(props.backgroundImageFn(props.set, props.sheetSize), ")"),
            backgroundSize: "".concat(100 * props.sheetColumns, "% ").concat(100 * props.sheetRows, "%"),
            backgroundPosition: _getPosition(props)
          };
        }
      }

      var Tag = {
        name: 'span',
        props: {}
      };

      if (props.onClick && props.useButton) {
        Tag.name = 'button';
        Tag.props = {
          type: 'button'
        };
      }

      if (props.html) {
        style = _convertStyleToCSS(style);
        return "<".concat(Tag.name, " style='").concat(style, "' aria-label='").concat(label, "' ").concat(title ? "title='".concat(title, "'") : '', " class='").concat(className, "'>").concat(children || '', "</").concat(Tag.name, ">");
      } else {
        return _react["default"].createElement(Tag.name, (0, _extends2["default"])({
          onClick: function onClick(e) {
            return _handleClick(e, props);
          },
          onMouseEnter: function onMouseEnter(e) {
            return _handleOver(e, props);
          },
          onMouseLeave: function onMouseLeave(e) {
            return _handleLeave(e, props);
          },
          "aria-label": label,
          title: title,
          className: className
        }, Tag.props), _react["default"].createElement("span", {
          style: style
        }, children));
      }
    };

    NimbleEmoji.propTypes
    /* remove-proptypes */
    = _objectSpread({}, sharedProps.EmojiPropTypes, {
      data: _propTypes["default"].object.isRequired
    });
    NimbleEmoji.defaultProps = sharedDefaultProps.EmojiDefaultProps;
    var _default = NimbleEmoji;
    exports["default"] = _default;
    });

    var nimbleEmoji$1 = unwrapExports(nimbleEmoji);

    var nimbleEmoji$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': nimbleEmoji$1,
        __moduleExports: nimbleEmoji
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var interopRequireWildcard = createCommonjsModule$1(function (module) {
    var _typeof = _typeof_1["default"];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;
      var cacheBabelInterop = new WeakMap();
      var cacheNodeInterop = new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }

      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return {
          "default": obj
        };
      }

      var cache = _getRequireWildcardCache(nodeInterop);

      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }

      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }

      newObj["default"] = obj;

      if (cache) {
        cache.set(obj, newObj);
      }

      return newObj;
    }

    module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;
    });

    unwrapExports(interopRequireWildcard);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var svgs = createCommonjsModule$1(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.search = exports.categories = void 0;

    var _react = interopRequireDefault(React__default['default']);

    var categories = {
      activity: function activity() {
        return _react["default"].createElement("svg", {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          width: "24",
          height: "24"
        }, _react["default"].createElement("path", {
          d: "M12 0C5.373 0 0 5.372 0 12c0 6.627 5.373 12 12 12 6.628 0 12-5.373 12-12 0-6.628-5.372-12-12-12m9.949 11H17.05c.224-2.527 1.232-4.773 1.968-6.113A9.966 9.966 0 0 1 21.949 11M13 11V2.051a9.945 9.945 0 0 1 4.432 1.564c-.858 1.491-2.156 4.22-2.392 7.385H13zm-2 0H8.961c-.238-3.165-1.536-5.894-2.393-7.385A9.95 9.95 0 0 1 11 2.051V11zm0 2v8.949a9.937 9.937 0 0 1-4.432-1.564c.857-1.492 2.155-4.221 2.393-7.385H11zm4.04 0c.236 3.164 1.534 5.893 2.392 7.385A9.92 9.92 0 0 1 13 21.949V13h2.04zM4.982 4.887C5.718 6.227 6.726 8.473 6.951 11h-4.9a9.977 9.977 0 0 1 2.931-6.113M2.051 13h4.9c-.226 2.527-1.233 4.771-1.969 6.113A9.972 9.972 0 0 1 2.051 13m16.967 6.113c-.735-1.342-1.744-3.586-1.968-6.113h4.899a9.961 9.961 0 0 1-2.931 6.113"
        }));
      },
      custom: function custom() {
        return _react["default"].createElement("svg", {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          width: "24",
          height: "24"
        }, _react["default"].createElement("g", {
          transform: "translate(2.000000, 1.000000)"
        }, _react["default"].createElement("rect", {
          id: "Rectangle",
          x: "8",
          y: "0",
          width: "3",
          height: "21",
          rx: "1.5"
        }), _react["default"].createElement("rect", {
          id: "Rectangle",
          transform: "translate(9.843, 10.549) rotate(60) translate(-9.843, -10.549) ",
          x: "8.343",
          y: "0.049",
          width: "3",
          height: "21",
          rx: "1.5"
        }), _react["default"].createElement("rect", {
          id: "Rectangle",
          transform: "translate(9.843, 10.549) rotate(-60) translate(-9.843, -10.549) ",
          x: "8.343",
          y: "0.049",
          width: "3",
          height: "21",
          rx: "1.5"
        })));
      },
      flags: function flags() {
        return _react["default"].createElement("svg", {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          width: "24",
          height: "24"
        }, _react["default"].createElement("path", {
          d: "M0 0l6.084 24H8L1.916 0zM21 5h-4l-1-4H4l3 12h3l1 4h13L21 5zM6.563 3h7.875l2 8H8.563l-2-8zm8.832 10l-2.856 1.904L12.063 13h3.332zM19 13l-1.5-6h1.938l2 8H16l3-2z"
        }));
      },
      foods: function foods() {
        return _react["default"].createElement("svg", {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          width: "24",
          height: "24"
        }, _react["default"].createElement("path", {
          d: "M17 4.978c-1.838 0-2.876.396-3.68.934.513-1.172 1.768-2.934 4.68-2.934a1 1 0 0 0 0-2c-2.921 0-4.629 1.365-5.547 2.512-.064.078-.119.162-.18.244C11.73 1.838 10.798.023 9.207.023 8.579.022 7.85.306 7 .978 5.027 2.54 5.329 3.902 6.492 4.999 3.609 5.222 0 7.352 0 12.969c0 4.582 4.961 11.009 9 11.009 1.975 0 2.371-.486 3-1 .629.514 1.025 1 3 1 4.039 0 9-6.418 9-11 0-5.953-4.055-8-7-8M8.242 2.546c.641-.508.943-.523.965-.523.426.169.975 1.405 1.357 3.055-1.527-.629-2.741-1.352-2.98-1.846.059-.112.241-.356.658-.686M15 21.978c-1.08 0-1.21-.109-1.559-.402l-.176-.146c-.367-.302-.816-.452-1.266-.452s-.898.15-1.266.452l-.176.146c-.347.292-.477.402-1.557.402-2.813 0-7-5.389-7-9.009 0-5.823 4.488-5.991 5-5.991 1.939 0 2.484.471 3.387 1.251l.323.276a1.995 1.995 0 0 0 2.58 0l.323-.276c.902-.78 1.447-1.251 3.387-1.251.512 0 5 .168 5 6 0 3.617-4.187 9-7 9"
        }));
      },
      nature: function nature() {
        return _react["default"].createElement("svg", {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          width: "24",
          height: "24"
        }, _react["default"].createElement("path", {
          d: "M15.5 8a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 15.5 8M8.5 8a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 8.5 8"
        }), _react["default"].createElement("path", {
          d: "M18.933 0h-.027c-.97 0-2.138.787-3.018 1.497-1.274-.374-2.612-.51-3.887-.51-1.285 0-2.616.133-3.874.517C7.245.79 6.069 0 5.093 0h-.027C3.352 0 .07 2.67.002 7.026c-.039 2.479.276 4.238 1.04 5.013.254.258.882.677 1.295.882.191 3.177.922 5.238 2.536 6.38.897.637 2.187.949 3.2 1.102C8.04 20.6 8 20.795 8 21c0 1.773 2.35 3 4 3 1.648 0 4-1.227 4-3 0-.201-.038-.393-.072-.586 2.573-.385 5.435-1.877 5.925-7.587.396-.22.887-.568 1.104-.788.763-.774 1.079-2.534 1.04-5.013C23.929 2.67 20.646 0 18.933 0M3.223 9.135c-.237.281-.837 1.155-.884 1.238-.15-.41-.368-1.349-.337-3.291.051-3.281 2.478-4.972 3.091-5.031.256.015.731.27 1.265.646-1.11 1.171-2.275 2.915-2.352 5.125-.133.546-.398.858-.783 1.313M12 22c-.901 0-1.954-.693-2-1 0-.654.475-1.236 1-1.602V20a1 1 0 1 0 2 0v-.602c.524.365 1 .947 1 1.602-.046.307-1.099 1-2 1m3-3.48v.02a4.752 4.752 0 0 0-1.262-1.02c1.092-.516 2.239-1.334 2.239-2.217 0-1.842-1.781-2.195-3.977-2.195-2.196 0-3.978.354-3.978 2.195 0 .883 1.148 1.701 2.238 2.217A4.8 4.8 0 0 0 9 18.539v-.025c-1-.076-2.182-.281-2.973-.842-1.301-.92-1.838-3.045-1.853-6.478l.023-.041c.496-.826 1.49-1.45 1.804-3.102 0-2.047 1.357-3.631 2.362-4.522C9.37 3.178 10.555 3 11.948 3c1.447 0 2.685.192 3.733.57 1 .9 2.316 2.465 2.316 4.48.313 1.651 1.307 2.275 1.803 3.102.035.058.068.117.102.178-.059 5.967-1.949 7.01-4.902 7.19m6.628-8.202c-.037-.065-.074-.13-.113-.195a7.587 7.587 0 0 0-.739-.987c-.385-.455-.648-.768-.782-1.313-.076-2.209-1.241-3.954-2.353-5.124.531-.376 1.004-.63 1.261-.647.636.071 3.044 1.764 3.096 5.031.027 1.81-.347 3.218-.37 3.235"
        }));
      },
      objects: function objects() {
        return _react["default"].createElement("svg", {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          width: "24",
          height: "24"
        }, _react["default"].createElement("path", {
          d: "M12 0a9 9 0 0 0-5 16.482V21s2.035 3 5 3 5-3 5-3v-4.518A9 9 0 0 0 12 0zm0 2c3.86 0 7 3.141 7 7s-3.14 7-7 7-7-3.141-7-7 3.14-7 7-7zM9 17.477c.94.332 1.946.523 3 .523s2.06-.19 3-.523v.834c-.91.436-1.925.689-3 .689a6.924 6.924 0 0 1-3-.69v-.833zm.236 3.07A8.854 8.854 0 0 0 12 21c.965 0 1.888-.167 2.758-.451C14.155 21.173 13.153 22 12 22c-1.102 0-2.117-.789-2.764-1.453z"
        }), _react["default"].createElement("path", {
          d: "M14.745 12.449h-.004c-.852-.024-1.188-.858-1.577-1.824-.421-1.061-.703-1.561-1.182-1.566h-.009c-.481 0-.783.497-1.235 1.537-.436.982-.801 1.811-1.636 1.791l-.276-.043c-.565-.171-.853-.691-1.284-1.794-.125-.313-.202-.632-.27-.913-.051-.213-.127-.53-.195-.634C7.067 9.004 7.039 9 6.99 9A1 1 0 0 1 7 7h.01c1.662.017 2.015 1.373 2.198 2.134.486-.981 1.304-2.058 2.797-2.075 1.531.018 2.28 1.153 2.731 2.141l.002-.008C14.944 8.424 15.327 7 16.979 7h.032A1 1 0 1 1 17 9h-.011c-.149.076-.256.474-.319.709a6.484 6.484 0 0 1-.311.951c-.429.973-.79 1.789-1.614 1.789"
        }));
      },
      people: function people() {
        return _react["default"].createElement("svg", {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          width: "24",
          height: "24"
        }, _react["default"].createElement("path", {
          d: "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0m0 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10"
        }), _react["default"].createElement("path", {
          d: "M8 7a2 2 0 1 0-.001 3.999A2 2 0 0 0 8 7M16 7a2 2 0 1 0-.001 3.999A2 2 0 0 0 16 7M15.232 15c-.693 1.195-1.87 2-3.349 2-1.477 0-2.655-.805-3.347-2H15m3-2H6a6 6 0 1 0 12 0"
        }));
      },
      places: function places() {
        return _react["default"].createElement("svg", {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          width: "24",
          height: "24"
        }, _react["default"].createElement("path", {
          d: "M6.5 12C5.122 12 4 13.121 4 14.5S5.122 17 6.5 17 9 15.879 9 14.5 7.878 12 6.5 12m0 3c-.275 0-.5-.225-.5-.5s.225-.5.5-.5.5.225.5.5-.225.5-.5.5M17.5 12c-1.378 0-2.5 1.121-2.5 2.5s1.122 2.5 2.5 2.5 2.5-1.121 2.5-2.5-1.122-2.5-2.5-2.5m0 3c-.275 0-.5-.225-.5-.5s.225-.5.5-.5.5.225.5.5-.225.5-.5.5"
        }), _react["default"].createElement("path", {
          d: "M22.482 9.494l-1.039-.346L21.4 9h.6c.552 0 1-.439 1-.992 0-.006-.003-.008-.003-.008H23c0-1-.889-2-1.984-2h-.642l-.731-1.717C19.262 3.012 18.091 2 16.764 2H7.236C5.909 2 4.738 3.012 4.357 4.283L3.626 6h-.642C1.889 6 1 7 1 8h.003S1 8.002 1 8.008C1 8.561 1.448 9 2 9h.6l-.043.148-1.039.346a2.001 2.001 0 0 0-1.359 2.097l.751 7.508a1 1 0 0 0 .994.901H3v1c0 1.103.896 2 2 2h2c1.104 0 2-.897 2-2v-1h6v1c0 1.103.896 2 2 2h2c1.104 0 2-.897 2-2v-1h1.096a.999.999 0 0 0 .994-.901l.751-7.508a2.001 2.001 0 0 0-1.359-2.097M6.273 4.857C6.402 4.43 6.788 4 7.236 4h9.527c.448 0 .834.43.963.857L19.313 9H4.688l1.585-4.143zM7 21H5v-1h2v1zm12 0h-2v-1h2v1zm2.189-3H2.811l-.662-6.607L3 11h18l.852.393L21.189 18z"
        }));
      },
      recent: function recent() {
        return _react["default"].createElement("svg", {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          width: "24",
          height: "24"
        }, _react["default"].createElement("path", {
          d: "M13 4h-2l-.001 7H9v2h2v2h2v-2h4v-2h-4z"
        }), _react["default"].createElement("path", {
          d: "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0m0 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10"
        }));
      },
      symbols: function symbols() {
        return _react["default"].createElement("svg", {
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 24 24",
          width: "24",
          height: "24"
        }, _react["default"].createElement("path", {
          d: "M0 0h11v2H0zM4 11h3V6h4V4H0v2h4zM15.5 17c1.381 0 2.5-1.116 2.5-2.493s-1.119-2.493-2.5-2.493S13 13.13 13 14.507 14.119 17 15.5 17m0-2.986c.276 0 .5.222.5.493 0 .272-.224.493-.5.493s-.5-.221-.5-.493.224-.493.5-.493M21.5 19.014c-1.381 0-2.5 1.116-2.5 2.493S20.119 24 21.5 24s2.5-1.116 2.5-2.493-1.119-2.493-2.5-2.493m0 2.986a.497.497 0 0 1-.5-.493c0-.271.224-.493.5-.493s.5.222.5.493a.497.497 0 0 1-.5.493M22 13l-9 9 1.513 1.5 8.99-9.009zM17 11c2.209 0 4-1.119 4-2.5V2s.985-.161 1.498.949C23.01 4.055 23 6 23 6s1-1.119 1-3.135C24-.02 21 0 21 0h-2v6.347A5.853 5.853 0 0 0 17 6c-2.209 0-4 1.119-4 2.5s1.791 2.5 4 2.5M10.297 20.482l-1.475-1.585a47.54 47.54 0 0 1-1.442 1.129c-.307-.288-.989-1.016-2.045-2.183.902-.836 1.479-1.466 1.729-1.892s.376-.871.376-1.336c0-.592-.273-1.178-.818-1.759-.546-.581-1.329-.871-2.349-.871-1.008 0-1.79.293-2.344.879-.556.587-.832 1.181-.832 1.784 0 .813.419 1.748 1.256 2.805-.847.614-1.444 1.208-1.794 1.784a3.465 3.465 0 0 0-.523 1.833c0 .857.308 1.56.924 2.107.616.549 1.423.823 2.42.823 1.173 0 2.444-.379 3.813-1.137L8.235 24h2.819l-2.09-2.383 1.333-1.135zm-6.736-6.389a1.02 1.02 0 0 1 .73-.286c.31 0 .559.085.747.254a.849.849 0 0 1 .283.659c0 .518-.419 1.112-1.257 1.784-.536-.651-.805-1.231-.805-1.742a.901.901 0 0 1 .302-.669M3.74 22c-.427 0-.778-.116-1.057-.349-.279-.232-.418-.487-.418-.766 0-.594.509-1.288 1.527-2.083.968 1.134 1.717 1.946 2.248 2.438-.921.507-1.686.76-2.3.76"
        }));
      }
    };
    exports.categories = categories;
    var search = {
      search: function search() {
        return _react["default"].createElement("svg", {
          xmlns: "http://www.w3.org/2000/svg",
          width: "13",
          height: "13",
          viewBox: "0 0 20 20",
          opacity: "0.5"
        }, _react["default"].createElement("path", {
          d: "M12.9 14.32a8 8 0 1 1 1.41-1.41l5.35 5.33-1.42 1.42-5.33-5.34zM8 14A6 6 0 1 0 8 2a6 6 0 0 0 0 12z"
        }));
      },
      "delete": function _delete() {
        return _react["default"].createElement("svg", {
          xmlns: "http://www.w3.org/2000/svg",
          width: "13",
          height: "13",
          viewBox: "0 0 20 20",
          opacity: "0.5"
        }, _react["default"].createElement("path", {
          d: "M10 8.586L2.929 1.515 1.515 2.929 8.586 10l-7.071 7.071 1.414 1.414L10 11.414l7.071 7.071 1.414-1.414L11.414 10l7.071-7.071-1.414-1.414L10 8.586z"
        }));
      }
    };
    exports.search = search;
    });

    unwrapExports(svgs);
    svgs.search;
    svgs.categories;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var frequently_1 = createCommonjsModule$1(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _store = interopRequireDefault(store);

    var DEFAULTS = ['+1', 'grinning', 'kissing_heart', 'heart_eyes', 'laughing', 'stuck_out_tongue_winking_eye', 'sweat_smile', 'joy', 'scream', 'disappointed', 'unamused', 'weary', 'sob', 'sunglasses', 'heart', 'poop'];
    var frequently, initialized;
    var defaults = {};

    function init() {
      initialized = true;
      frequently = _store["default"].get('frequently');
    }

    function add(emoji) {
      if (!initialized) init();
      var id = emoji.id;
      frequently || (frequently = defaults);
      frequently[id] || (frequently[id] = 0);
      frequently[id] += 1;

      _store["default"].set('last', id);

      _store["default"].set('frequently', frequently);
    }

    function get(perLine) {
      if (!initialized) init();

      if (!frequently) {
        defaults = {};
        var result = [];

        for (var i = 0; i < perLine; i++) {
          defaults[DEFAULTS[i]] = perLine - i;
          result.push(DEFAULTS[i]);
        }

        return result;
      }

      var quantity = perLine * 4;
      var frequentlyKeys = [];

      for (var key in frequently) {
        if (frequently.hasOwnProperty(key)) {
          frequentlyKeys.push(key);
        }
      }

      var sorted = frequentlyKeys.sort(function (a, b) {
        return frequently[a] - frequently[b];
      }).reverse();
      var sliced = sorted.slice(0, quantity);

      var last = _store["default"].get('last');

      if (last && sliced.indexOf(last) == -1) {
        sliced.pop();
        sliced.push(last);
      }

      return sliced;
    }

    var _default = {
      add: add,
      get: get
    };
    exports["default"] = _default;
    });

    unwrapExports(frequently_1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var anchors = createCommonjsModule$1(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _classCallCheck2 = interopRequireDefault(classCallCheck);

    var _createClass2 = interopRequireDefault(createClass);

    var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

    var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);

    var _assertThisInitialized2 = interopRequireDefault(assertThisInitialized);

    var _inherits2 = interopRequireDefault(inherits);

    var _react = interopRequireDefault(React__default['default']);

    var _propTypes = interopRequireDefault(propTypes$1);

    var Anchors =
    /*#__PURE__*/
    function (_React$PureComponent) {
      (0, _inherits2["default"])(Anchors, _React$PureComponent);

      function Anchors(props) {
        var _this;

        (0, _classCallCheck2["default"])(this, Anchors);
        _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Anchors).call(this, props));
        var defaultCategory = props.categories.filter(function (category) {
          return category.first;
        })[0];
        _this.state = {
          selected: defaultCategory.name
        };
        _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2["default"])(_this));
        return _this;
      }

      (0, _createClass2["default"])(Anchors, [{
        key: "handleClick",
        value: function handleClick(e) {
          var index = e.currentTarget.getAttribute('data-index');
          var _this$props = this.props,
              categories = _this$props.categories,
              onAnchorClick = _this$props.onAnchorClick;
          onAnchorClick(categories[index], index);
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;

          var _this$props2 = this.props,
              categories = _this$props2.categories,
              color = _this$props2.color,
              i18n = _this$props2.i18n,
              icons = _this$props2.icons,
              selected = this.state.selected;
          return _react["default"].createElement("nav", {
            className: "emoji-mart-anchors",
            "aria-label": i18n.categorieslabel
          }, categories.map(function (category, i) {
            var id = category.id,
                name = category.name,
                anchor = category.anchor,
                isSelected = name == selected;

            if (anchor === false) {
              return null;
            }

            var iconId = id.startsWith('custom-') ? 'custom' : id;
            return _react["default"].createElement("button", {
              key: id,
              "aria-label": i18n.categories[iconId],
              title: i18n.categories[iconId],
              "data-index": i,
              type: 'button',
              onClick: _this2.handleClick,
              className: "emoji-mart-anchor ".concat(isSelected ? 'emoji-mart-anchor-selected' : ''),
              style: {
                color: isSelected ? color : null
              }
            }, _react["default"].createElement("div", {
              className: "emoji-mart-anchor-icon"
            }, icons.categories[iconId]()), _react["default"].createElement("span", {
              className: "emoji-mart-anchor-bar",
              style: {
                backgroundColor: color
              }
            }));
          }));
        }
      }]);
      return Anchors;
    }(_react["default"].PureComponent);

    exports["default"] = Anchors;
    Anchors.propTypes
    /* remove-proptypes */
    = {
      categories: _propTypes["default"].array,
      onAnchorClick: _propTypes["default"].func,
      icons: _propTypes["default"].object
    };
    Anchors.defaultProps = {
      categories: [],
      onAnchorClick: function onAnchorClick() {},
      icons: {}
    };
    });

    unwrapExports(anchors);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var notFound = createCommonjsModule$1(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _defineProperty2 = interopRequireDefault(defineProperty$1);

    var _classCallCheck2 = interopRequireDefault(classCallCheck);

    var _createClass2 = interopRequireDefault(createClass);

    var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

    var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);

    var _inherits2 = interopRequireDefault(inherits);

    var _react = interopRequireDefault(React__default['default']);

    var _propTypes = interopRequireDefault(propTypes$1);

    var _nimbleEmoji = interopRequireDefault(nimbleEmoji);

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var NotFound =
    /*#__PURE__*/
    function (_React$PureComponent) {
      (0, _inherits2["default"])(NotFound, _React$PureComponent);

      function NotFound() {
        (0, _classCallCheck2["default"])(this, NotFound);
        return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(NotFound).apply(this, arguments));
      }

      (0, _createClass2["default"])(NotFound, [{
        key: "render",
        value: function render() {
          var _this$props = this.props,
              data = _this$props.data,
              emojiProps = _this$props.emojiProps,
              i18n = _this$props.i18n,
              notFound = _this$props.notFound,
              notFoundEmoji = _this$props.notFoundEmoji;

          var component = notFound && notFound() || _react["default"].createElement("div", {
            className: "emoji-mart-no-results"
          }, (0, _nimbleEmoji["default"])(_objectSpread({
            data: data
          }, emojiProps, {
            size: 38,
            emoji: notFoundEmoji,
            onOver: null,
            onLeave: null,
            onClick: null
          })), _react["default"].createElement("div", {
            className: "emoji-mart-no-results-label"
          }, i18n.notfound));

          return component;
        }
      }]);
      return NotFound;
    }(_react["default"].PureComponent);

    exports["default"] = NotFound;
    NotFound.propTypes
    /* remove-proptypes */
    = {
      notFound: _propTypes["default"].func.isRequired,
      emojiProps: _propTypes["default"].object.isRequired
    };
    });

    unwrapExports(notFound);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var category = createCommonjsModule$1(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _defineProperty2 = interopRequireDefault(defineProperty$1);

    var _classCallCheck2 = interopRequireDefault(classCallCheck);

    var _createClass2 = interopRequireDefault(createClass);

    var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

    var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);

    var _assertThisInitialized2 = interopRequireDefault(assertThisInitialized);

    var _inherits2 = interopRequireDefault(inherits);

    var _react = interopRequireDefault(React__default['default']);

    var _propTypes = interopRequireDefault(propTypes$1);

    var _frequently = interopRequireDefault(frequently_1);



    var _nimbleEmoji = interopRequireDefault(nimbleEmoji);

    var _notFound = interopRequireDefault(notFound);

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var Category =
    /*#__PURE__*/
    function (_React$Component) {
      (0, _inherits2["default"])(Category, _React$Component);

      function Category(props) {
        var _this;

        (0, _classCallCheck2["default"])(this, Category);
        _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Category).call(this, props));
        _this.data = props.data;
        _this.setContainerRef = _this.setContainerRef.bind((0, _assertThisInitialized2["default"])(_this));
        _this.setLabelRef = _this.setLabelRef.bind((0, _assertThisInitialized2["default"])(_this));
        return _this;
      }

      (0, _createClass2["default"])(Category, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.margin = 0;
          this.minMargin = 0;
          this.memoizeSize();
        }
      }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          var _this$props = this.props,
              name = _this$props.name,
              perLine = _this$props.perLine,
              _native = _this$props["native"],
              hasStickyPosition = _this$props.hasStickyPosition,
              emojis = _this$props.emojis,
              emojiProps = _this$props.emojiProps,
              skin = emojiProps.skin,
              size = emojiProps.size,
              set = emojiProps.set,
              nextPerLine = nextProps.perLine,
              nextNative = nextProps["native"],
              nextHasStickyPosition = nextProps.hasStickyPosition,
              nextEmojis = nextProps.emojis,
              nextEmojiProps = nextProps.emojiProps,
              nextSkin = nextEmojiProps.skin,
              nextSize = nextEmojiProps.size,
              nextSet = nextEmojiProps.set,
              shouldUpdate = false;

          if (name == 'Recent' && perLine != nextPerLine) {
            shouldUpdate = true;
          }

          if (name == 'Search') {
            shouldUpdate = !(emojis == nextEmojis);
          }

          if (skin != nextSkin || size != nextSize || _native != nextNative || set != nextSet || hasStickyPosition != nextHasStickyPosition) {
            shouldUpdate = true;
          }

          return shouldUpdate;
        }
      }, {
        key: "memoizeSize",
        value: function memoizeSize() {
          if (!this.container) {
            // probably this is a test environment, e.g. jest
            this.top = 0;
            this.maxMargin = 0;
            return;
          }

          var parent = this.container.parentElement;

          var _this$container$getBo = this.container.getBoundingClientRect(),
              top = _this$container$getBo.top,
              height = _this$container$getBo.height;

          var _parent$getBoundingCl = parent.getBoundingClientRect(),
              parentTop = _parent$getBoundingCl.top;

          var _this$label$getBoundi = this.label.getBoundingClientRect(),
              labelHeight = _this$label$getBoundi.height;

          this.top = top - parentTop + parent.scrollTop;

          if (height == 0) {
            this.maxMargin = 0;
          } else {
            this.maxMargin = height - labelHeight;
          }
        }
      }, {
        key: "handleScroll",
        value: function handleScroll(scrollTop) {
          var margin = scrollTop - this.top;
          margin = margin < this.minMargin ? this.minMargin : margin;
          margin = margin > this.maxMargin ? this.maxMargin : margin;
          if (margin == this.margin) return;

          if (!this.props.hasStickyPosition) {
            this.label.style.top = "".concat(margin, "px");
          }

          this.margin = margin;
          return true;
        }
      }, {
        key: "getEmojis",
        value: function getEmojis() {
          var _this2 = this;

          var _this$props2 = this.props,
              name = _this$props2.name,
              emojis = _this$props2.emojis,
              recent = _this$props2.recent,
              perLine = _this$props2.perLine;

          if (name == 'Recent') {
            var custom = this.props.custom;

            var frequentlyUsed = recent || _frequently["default"].get(perLine);

            if (frequentlyUsed.length) {
              emojis = frequentlyUsed.map(function (id) {
                var emoji = custom.filter(function (e) {
                  return e.id === id;
                })[0];

                if (emoji) {
                  return emoji;
                }

                return id;
              }).filter(function (id) {
                return !!(0, utils.getData)(id, null, null, _this2.data);
              });
            }

            if (emojis.length === 0 && frequentlyUsed.length > 0) {
              return null;
            }
          }

          if (emojis) {
            emojis = emojis.slice(0);
          }

          return emojis;
        }
      }, {
        key: "updateDisplay",
        value: function updateDisplay(display) {
          var emojis = this.getEmojis();

          if (!emojis || !this.container) {
            return;
          }

          this.container.style.display = display;
        }
      }, {
        key: "setContainerRef",
        value: function setContainerRef(c) {
          this.container = c;
        }
      }, {
        key: "setLabelRef",
        value: function setLabelRef(c) {
          this.label = c;
        }
      }, {
        key: "render",
        value: function render() {
          var _this3 = this;

          var _this$props3 = this.props,
              id = _this$props3.id,
              name = _this$props3.name,
              hasStickyPosition = _this$props3.hasStickyPosition,
              emojiProps = _this$props3.emojiProps,
              i18n = _this$props3.i18n,
              notFound = _this$props3.notFound,
              notFoundEmoji = _this$props3.notFoundEmoji,
              emojis = this.getEmojis(),
              labelStyles = {},
              labelSpanStyles = {},
              containerStyles = {};

          if (!emojis) {
            containerStyles = {
              display: 'none'
            };
          }

          if (!hasStickyPosition) {
            labelStyles = {
              height: 28
            };
            labelSpanStyles = {
              position: 'absolute'
            };
          }

          var label = i18n.categories[id] || name;
          return _react["default"].createElement("section", {
            ref: this.setContainerRef,
            className: "emoji-mart-category",
            "aria-label": label,
            style: containerStyles
          }, _react["default"].createElement("div", {
            style: labelStyles,
            "data-name": name,
            className: "emoji-mart-category-label"
          }, _react["default"].createElement("span", {
            style: labelSpanStyles,
            ref: this.setLabelRef,
            "aria-hidden": true
            /* already labeled by the section aria-label */

          }, label)), _react["default"].createElement("ul", {
            className: "emoji-mart-category-list"
          }, emojis && emojis.map(function (emoji) {
            return _react["default"].createElement("li", {
              key: emoji.short_names && emoji.short_names.join('_') || emoji
            }, (0, _nimbleEmoji["default"])(_objectSpread({
              emoji: emoji,
              data: _this3.data
            }, emojiProps)));
          })), emojis && !emojis.length && _react["default"].createElement(_notFound["default"], {
            i18n: i18n,
            notFound: notFound,
            notFoundEmoji: notFoundEmoji,
            data: this.data,
            emojiProps: emojiProps
          }));
        }
      }]);
      return Category;
    }(_react["default"].Component);

    exports["default"] = Category;
    Category.propTypes
    /* remove-proptypes */
    = {
      emojis: _propTypes["default"].array,
      hasStickyPosition: _propTypes["default"].bool,
      name: _propTypes["default"].string.isRequired,
      "native": _propTypes["default"].bool.isRequired,
      perLine: _propTypes["default"].number.isRequired,
      emojiProps: _propTypes["default"].object.isRequired,
      recent: _propTypes["default"].arrayOf(_propTypes["default"].string),
      notFound: _propTypes["default"].func,
      notFoundEmoji: _propTypes["default"].string.isRequired
    };
    Category.defaultProps = {
      emojis: [],
      hasStickyPosition: true
    };
    });

    unwrapExports(category);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var skins = createCommonjsModule$1(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _classCallCheck2 = interopRequireDefault(classCallCheck);

    var _createClass2 = interopRequireDefault(createClass);

    var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

    var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);

    var _inherits2 = interopRequireDefault(inherits);

    var _react = interopRequireDefault(React__default['default']);

    var _propTypes = interopRequireDefault(propTypes$1);

    var Skins =
    /*#__PURE__*/
    function (_React$PureComponent) {
      (0, _inherits2["default"])(Skins, _React$PureComponent);

      function Skins(props) {
        var _this;

        (0, _classCallCheck2["default"])(this, Skins);
        _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Skins).call(this, props));
        _this.state = {
          opened: false
        };
        return _this;
      }

      (0, _createClass2["default"])(Skins, [{
        key: "handleClick",
        value: function handleClick(e) {
          var skin = parseInt(e.currentTarget.getAttribute('data-skin'));
          var onChange = this.props.onChange;

          if (!this.state.opened) {
            this.setState({
              opened: true
            });
          } else {
            this.setState({
              opened: false
            });

            if (skin != this.props.skin) {
              onChange(skin);
            }
          }
        }
      }, {
        key: "render",
        value: function render() {
          return null;
        }
      }]);
      return Skins;
    }(_react["default"].PureComponent);

    exports["default"] = Skins;
    Skins.propTypes
    /* remove-proptypes */
    = {
      onChange: _propTypes["default"].func,
      skin: _propTypes["default"].number.isRequired
    };
    Skins.defaultProps = {
      onChange: function onChange() {}
    };
    });

    unwrapExports(skins);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var skinsEmoji = createCommonjsModule$1(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _classCallCheck2 = interopRequireDefault(classCallCheck);

    var _createClass2 = interopRequireDefault(createClass);

    var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

    var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);

    var _assertThisInitialized2 = interopRequireDefault(assertThisInitialized);

    var _inherits2 = interopRequireDefault(inherits);

    var _react = interopRequireDefault(React__default['default']);

    var _propTypes = interopRequireDefault(propTypes$1);

    var _nimbleEmoji = interopRequireDefault(nimbleEmoji);

    var _skins = interopRequireDefault(skins);

    var SkinsEmoji =
    /*#__PURE__*/
    function (_Skins) {
      (0, _inherits2["default"])(SkinsEmoji, _Skins);

      function SkinsEmoji(props) {
        var _this;

        (0, _classCallCheck2["default"])(this, SkinsEmoji);
        _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(SkinsEmoji).call(this, props));
        _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2["default"])(_this));
        return _this;
      }

      (0, _createClass2["default"])(SkinsEmoji, [{
        key: "render",
        value: function render() {
          var _this$props = this.props,
              skin = _this$props.skin,
              emojiProps = _this$props.emojiProps,
              data = _this$props.data,
              skinEmoji = _this$props.skinEmoji,
              i18n = _this$props.i18n;
          var opened = this.state.opened;
          var skinToneNodes = [];

          for (var skinTone = 1; skinTone <= 6; skinTone++) {
            var selected = skinTone === skin;
            skinToneNodes.push(_react["default"].createElement("span", {
              key: "skin-tone-".concat(skinTone),
              className: "emoji-mart-skin-swatch custom".concat(selected ? ' selected' : '')
            }, _react["default"].createElement("span", {
              onClick: this.handleClick,
              "data-skin": skinTone,
              className: "emoji-mart-skin-tone-".concat(skinTone)
            }, (0, _nimbleEmoji["default"])({
              emoji: skinEmoji,
              data: data,
              skin: skinTone,
              backgroundImageFn: emojiProps.backgroundImageFn,
              "native": emojiProps["native"],
              set: emojiProps.set,
              sheetSize: emojiProps.sheetSize,
              size: 23
            }))));
          }

          return _react["default"].createElement("div", {
            className: "emoji-mart-skin-swatches custom".concat(opened ? ' opened' : '')
          }, _react["default"].createElement("div", {
            className: "emoji-mart-skin-text".concat(opened ? ' opened' : '')
          }, i18n.skintext), skinToneNodes);
        }
      }]);
      return SkinsEmoji;
    }(_skins["default"]);

    exports["default"] = SkinsEmoji;
    SkinsEmoji.propTypes
    /* remove-proptypes */
    = {
      onChange: _propTypes["default"].func,
      skin: _propTypes["default"].number.isRequired,
      emojiProps: _propTypes["default"].object.isRequired,
      skinTone: _propTypes["default"].number,
      skinEmoji: _propTypes["default"].string.isRequired,
      i18n: _propTypes["default"].object
    };
    SkinsEmoji.defaultProps = {
      onChange: function onChange() {},
      skinTone: null
    };
    });

    unwrapExports(skinsEmoji);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var skinsDot = createCommonjsModule$1(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _extends2 = interopRequireDefault(_extends_1);

    var _classCallCheck2 = interopRequireDefault(classCallCheck);

    var _createClass2 = interopRequireDefault(createClass);

    var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

    var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);

    var _assertThisInitialized2 = interopRequireDefault(assertThisInitialized);

    var _inherits2 = interopRequireDefault(inherits);

    var _react = interopRequireDefault(React__default['default']);

    var _propTypes = interopRequireDefault(propTypes$1);

    var _skins = interopRequireDefault(skins);

    var SkinsDot =
    /*#__PURE__*/
    function (_Skins) {
      (0, _inherits2["default"])(SkinsDot, _Skins);

      function SkinsDot(props) {
        var _this;

        (0, _classCallCheck2["default"])(this, SkinsDot);
        _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(SkinsDot).call(this, props));
        _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2["default"])(_this));
        _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2["default"])(_this));
        return _this;
      }

      (0, _createClass2["default"])(SkinsDot, [{
        key: "handleKeyDown",
        value: function handleKeyDown(event) {
          // if either enter or space is pressed, then execute
          if (event.keyCode === 13 || event.keyCode === 32) {
            event.preventDefault();
            this.handleClick(event);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props,
              skin = _this$props.skin,
              i18n = _this$props.i18n;
          var opened = this.state.opened;
          var skinToneNodes = [];

          for (var skinTone = 1; skinTone <= 6; skinTone++) {
            var selected = skinTone === skin;
            var visible = opened || selected;
            skinToneNodes.push(_react["default"].createElement("span", (0, _extends2["default"])({
              key: "skin-tone-".concat(skinTone),
              className: "emoji-mart-skin-swatch".concat(selected ? ' selected' : ''),
              "aria-label": i18n.skintones[skinTone],
              "aria-hidden": !visible
            }, opened ? {
              role: 'menuitem'
            } : {}), _react["default"].createElement("span", (0, _extends2["default"])({
              onClick: this.handleClick,
              onKeyDown: this.handleKeyDown,
              role: "button"
            }, selected ? {
              'aria-haspopup': true,
              'aria-expanded': !!opened
            } : {}, opened ? {
              'aria-pressed': !!selected
            } : {}, {
              tabIndex: visible ? '0' : '',
              "aria-label": i18n.skintones[skinTone],
              title: i18n.skintones[skinTone],
              "data-skin": skinTone,
              className: "emoji-mart-skin emoji-mart-skin-tone-".concat(skinTone)
            }))));
          }

          return _react["default"].createElement("section", {
            className: "emoji-mart-skin-swatches".concat(opened ? ' opened' : ''),
            "aria-label": i18n.skintext
          }, _react["default"].createElement("div", opened ? {
            role: 'menubar'
          } : {}, skinToneNodes));
        }
      }]);
      return SkinsDot;
    }(_skins["default"]);

    exports["default"] = SkinsDot;
    SkinsDot.propTypes
    /* remove-proptypes */
    = {
      onChange: _propTypes["default"].func,
      skin: _propTypes["default"].number.isRequired,
      i18n: _propTypes["default"].object
    };
    SkinsDot.defaultProps = {
      onChange: function onChange() {}
    };
    });

    unwrapExports(skinsDot);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var preview = createCommonjsModule$1(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _defineProperty2 = interopRequireDefault(defineProperty$1);

    var _classCallCheck2 = interopRequireDefault(classCallCheck);

    var _createClass2 = interopRequireDefault(createClass);

    var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

    var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);

    var _inherits2 = interopRequireDefault(inherits);

    var _react = interopRequireDefault(React__default['default']);

    var _propTypes = interopRequireDefault(propTypes$1);



    var _nimbleEmoji = interopRequireDefault(nimbleEmoji);

    var _skinsEmoji = interopRequireDefault(skinsEmoji);

    var _skinsDot = interopRequireDefault(skinsDot);

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var Preview =
    /*#__PURE__*/
    function (_React$PureComponent) {
      (0, _inherits2["default"])(Preview, _React$PureComponent);

      function Preview(props) {
        var _this;

        (0, _classCallCheck2["default"])(this, Preview);
        _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Preview).call(this, props));
        _this.data = props.data;
        _this.state = {
          emoji: null
        };
        return _this;
      }

      (0, _createClass2["default"])(Preview, [{
        key: "render",
        value: function render() {
          var emoji = this.state.emoji,
              _this$props = this.props,
              emojiProps = _this$props.emojiProps,
              skinsProps = _this$props.skinsProps,
              showSkinTones = _this$props.showSkinTones,
              title = _this$props.title,
              idleEmoji = _this$props.emoji,
              i18n = _this$props.i18n,
              showPreview = _this$props.showPreview;

          if (emoji && showPreview) {
            var emojiData = (0, utils.getData)(emoji, null, null, this.data),
                _emojiData$emoticons = emojiData.emoticons,
                emoticons = _emojiData$emoticons === void 0 ? [] : _emojiData$emoticons,
                knownEmoticons = [],
                listedEmoticons = [];
            emoticons.forEach(function (emoticon) {
              if (knownEmoticons.indexOf(emoticon.toLowerCase()) >= 0) {
                return;
              }

              knownEmoticons.push(emoticon.toLowerCase());
              listedEmoticons.push(emoticon);
            });
            return _react["default"].createElement("div", {
              className: "emoji-mart-preview"
            }, _react["default"].createElement("div", {
              className: "emoji-mart-preview-emoji",
              "aria-hidden": "true"
            }, (0, _nimbleEmoji["default"])(_objectSpread({
              key: emoji.id,
              emoji: emoji,
              data: this.data
            }, emojiProps))), _react["default"].createElement("div", {
              className: "emoji-mart-preview-data",
              "aria-hidden": "true"
            }, _react["default"].createElement("div", {
              className: "emoji-mart-preview-name"
            }, emoji.name), _react["default"].createElement("div", {
              className: "emoji-mart-preview-shortnames"
            }, emojiData.short_names.map(function (short_name) {
              return _react["default"].createElement("span", {
                key: short_name,
                className: "emoji-mart-preview-shortname"
              }, ":", short_name, ":");
            })), _react["default"].createElement("div", {
              className: "emoji-mart-preview-emoticons"
            }, listedEmoticons.map(function (emoticon) {
              return _react["default"].createElement("span", {
                key: emoticon,
                className: "emoji-mart-preview-emoticon"
              }, emoticon);
            }))));
          } else {
            return _react["default"].createElement("div", {
              className: "emoji-mart-preview"
            }, _react["default"].createElement("div", {
              className: "emoji-mart-preview-emoji",
              "aria-hidden": "true"
            }, idleEmoji && idleEmoji.length && (0, _nimbleEmoji["default"])(_objectSpread({
              emoji: idleEmoji,
              data: this.data
            }, emojiProps))), _react["default"].createElement("div", {
              className: "emoji-mart-preview-data",
              "aria-hidden": "true"
            }, _react["default"].createElement("span", {
              className: "emoji-mart-title-label"
            }, title)), showSkinTones && _react["default"].createElement("div", {
              className: "emoji-mart-preview-skins".concat(skinsProps.skinEmoji ? ' custom' : '')
            }, skinsProps.skinEmoji ? _react["default"].createElement(_skinsEmoji["default"], {
              skin: skinsProps.skin,
              emojiProps: emojiProps,
              data: this.data,
              skinEmoji: skinsProps.skinEmoji,
              i18n: i18n,
              onChange: skinsProps.onChange
            }) : _react["default"].createElement(_skinsDot["default"], {
              skin: skinsProps.skin,
              i18n: i18n,
              onChange: skinsProps.onChange
            })));
          }
        }
      }]);
      return Preview;
    }(_react["default"].PureComponent);

    exports["default"] = Preview;
    Preview.propTypes
    /* remove-proptypes */
    = {
      showSkinTones: _propTypes["default"].bool,
      title: _propTypes["default"].string.isRequired,
      emoji: _propTypes["default"].string.isRequired,
      emojiProps: _propTypes["default"].object.isRequired,
      skinsProps: _propTypes["default"].object.isRequired
    };
    Preview.defaultProps = {
      showSkinTones: true,
      onChange: function onChange() {}
    };
    });

    unwrapExports(preview);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var search = createCommonjsModule$1(function (module, exports) {



    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _classCallCheck2 = interopRequireDefault(classCallCheck);

    var _createClass2 = interopRequireDefault(createClass);

    var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

    var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);

    var _assertThisInitialized2 = interopRequireDefault(assertThisInitialized);

    var _inherits2 = interopRequireDefault(inherits);

    var _react = interopRequireDefault(React__default['default']);

    var _propTypes = interopRequireDefault(propTypes$1);



    var _nimbleEmojiIndex = interopRequireDefault(nimbleEmojiIndex);



    var id = 0;

    var Search =
    /*#__PURE__*/
    function (_React$PureComponent) {
      (0, _inherits2["default"])(Search, _React$PureComponent);

      function Search(props) {
        var _this;

        (0, _classCallCheck2["default"])(this, Search);
        _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Search).call(this, props));
        _this.state = {
          icon: svgs.search.search,
          isSearching: false,
          id: ++id
        };
        _this.data = props.data;
        _this.emojiIndex = new _nimbleEmojiIndex["default"](_this.data);
        _this.setRef = _this.setRef.bind((0, _assertThisInitialized2["default"])(_this));
        _this.clear = _this.clear.bind((0, _assertThisInitialized2["default"])(_this));
        _this.handleKeyUp = _this.handleKeyUp.bind((0, _assertThisInitialized2["default"])(_this)); // throttle keyboard input so that typing isn't delayed

        _this.handleChange = (0, utils.throttleIdleTask)(_this.handleChange.bind((0, _assertThisInitialized2["default"])(_this)));
        return _this;
      }

      (0, _createClass2["default"])(Search, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          // in some cases (e.g. preact) the input may already be pre-populated
          // this.input is undefined in Jest tests
          if (this.input && this.input.value) {
            this.search(this.input.value);
          }
        }
      }, {
        key: "search",
        value: function search(value) {
          if (value == '') this.setState({
            icon: svgs.search.search,
            isSearching: false
          });else this.setState({
            icon: svgs.search["delete"],
            isSearching: true
          });
          this.props.onSearch(this.emojiIndex.search(value, {
            emojisToShowFilter: this.props.emojisToShowFilter,
            maxResults: this.props.maxResults,
            include: this.props.include,
            exclude: this.props.exclude,
            custom: this.props.custom
          }));
        }
      }, {
        key: "clear",
        value: function clear() {
          if (this.input.value == '') return;
          this.input.value = '';
          this.input.focus();
          this.search('');
        }
      }, {
        key: "handleChange",
        value: function handleChange() {
          if (this.input) {
            this.search(this.input.value);
          }
        }
      }, {
        key: "handleKeyUp",
        value: function handleKeyUp(e) {
          if (e.keyCode === 13) {
            this.clear();
          }
        }
      }, {
        key: "setRef",
        value: function setRef(c) {
          this.input = c;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props,
              i18n = _this$props.i18n,
              autoFocus = _this$props.autoFocus;
          var _this$state = this.state,
              icon = _this$state.icon,
              isSearching = _this$state.isSearching,
              id = _this$state.id;
          var inputId = "emoji-mart-search-".concat(id);
          return _react["default"].createElement("section", {
            className: "emoji-mart-search",
            "aria-label": i18n.search
          }, _react["default"].createElement("input", {
            id: inputId,
            ref: this.setRef,
            type: "search",
            onChange: this.handleChange,
            placeholder: i18n.search,
            autoFocus: autoFocus
          }), _react["default"].createElement("label", {
            className: "emoji-mart-sr-only",
            htmlFor: inputId
          }, i18n.search), _react["default"].createElement("button", {
            className: "emoji-mart-search-icon",
            onClick: this.clear,
            onKeyUp: this.handleKeyUp,
            "aria-label": i18n.clear,
            disabled: !isSearching
          }, icon()));
        }
      }]);
      return Search;
    }(_react["default"].PureComponent);

    exports["default"] = Search;
    Search.propTypes
    /* remove-proptypes */
    = {
      onSearch: _propTypes["default"].func,
      maxResults: _propTypes["default"].number,
      emojisToShowFilter: _propTypes["default"].func,
      autoFocus: _propTypes["default"].bool
    };
    Search.defaultProps = {
      onSearch: function onSearch() {},
      maxResults: 75,
      emojisToShowFilter: null,
      autoFocus: false
    };
    });

    unwrapExports(search);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var nimblePicker = createCommonjsModule$1(function (module, exports) {





    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;

    var _defineProperty2 = interopRequireDefault(defineProperty$1);

    var _classCallCheck2 = interopRequireDefault(classCallCheck);

    var _createClass2 = interopRequireDefault(createClass);

    var _possibleConstructorReturn2 = interopRequireDefault(possibleConstructorReturn);

    var _getPrototypeOf2 = interopRequireDefault(getPrototypeOf);

    var _assertThisInitialized2 = interopRequireDefault(assertThisInitialized);

    var _inherits2 = interopRequireDefault(inherits);

    var _react = interopRequireDefault(React__default['default']);

    var _propTypes = interopRequireDefault(propTypes$1);

    var icons = interopRequireWildcard(svgs);

    var _store = interopRequireDefault(store);

    var _frequently = interopRequireDefault(frequently_1);







    var _anchors = interopRequireDefault(anchors);

    var _category = interopRequireDefault(category);

    var _preview = interopRequireDefault(preview);

    var _search = interopRequireDefault(search);



    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var I18N = {
      search: 'Search',
      clear: 'Clear',
      // Accessible label on "clear" button
      notfound: 'No Emoji Found',
      skintext: 'Choose your default skin tone',
      categories: {
        search: 'Search Results',
        recent: 'Frequently Used',
        people: 'Smileys & People',
        nature: 'Animals & Nature',
        foods: 'Food & Drink',
        activity: 'Activity',
        places: 'Travel & Places',
        objects: 'Objects',
        symbols: 'Symbols',
        flags: 'Flags',
        custom: 'Custom'
      },
      categorieslabel: 'Emoji categories',
      // Accessible title for the list of categories
      skintones: {
        1: 'Default Skin Tone',
        2: 'Light Skin Tone',
        3: 'Medium-Light Skin Tone',
        4: 'Medium Skin Tone',
        5: 'Medium-Dark Skin Tone',
        6: 'Dark Skin Tone'
      }
    };

    var NimblePicker =
    /*#__PURE__*/
    function (_React$PureComponent) {
      (0, _inherits2["default"])(NimblePicker, _React$PureComponent);

      function NimblePicker(props) {
        var _this;

        (0, _classCallCheck2["default"])(this, NimblePicker);
        _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(NimblePicker).call(this, props));
        _this.CUSTOM = [];
        _this.RECENT_CATEGORY = {
          id: 'recent',
          name: 'Recent',
          emojis: null
        };
        _this.SEARCH_CATEGORY = {
          id: 'search',
          name: 'Search',
          emojis: null,
          anchor: false
        };

        if (props.data.compressed) {
          (0, data.uncompress)(props.data);
        }

        _this.data = props.data;
        _this.i18n = (0, utils.deepMerge)(I18N, props.i18n);
        _this.icons = (0, utils.deepMerge)(icons, props.icons);
        _this.state = {
          firstRender: true
        };
        _this.categories = [];
        var allCategories = [].concat(_this.data.categories);

        if (props.custom.length > 0) {
          var customCategories = {};
          var customCategoriesCreated = 0;
          props.custom.forEach(function (emoji) {
            if (!customCategories[emoji.customCategory]) {
              customCategories[emoji.customCategory] = {
                id: emoji.customCategory ? "custom-".concat(emoji.customCategory) : 'custom',
                name: emoji.customCategory || 'Custom',
                emojis: [],
                anchor: customCategoriesCreated === 0
              };
              customCategoriesCreated++;
            }

            var category = customCategories[emoji.customCategory];

            var customEmoji = _objectSpread({}, emoji, {
              // `<Category />` expects emoji to have an `id`.
              id: emoji.short_names[0],
              custom: true
            });

            category.emojis.push(customEmoji);

            _this.CUSTOM.push(customEmoji);
          });
          allCategories = allCategories.concat(Object.keys(customCategories).map(function (key) {
            return customCategories[key];
          }));
        }

        _this.hideRecent = true;

        if (props.include != undefined) {
          allCategories.sort(function (a, b) {
            if (props.include.indexOf(a.id) > props.include.indexOf(b.id)) {
              return 1;
            }

            return -1;
          });
        }

        for (var categoryIndex = 0; categoryIndex < allCategories.length; categoryIndex++) {
          var category = allCategories[categoryIndex];
          var isIncluded = props.include && props.include.length ? props.include.indexOf(category.id) > -1 : true;
          var isExcluded = props.exclude && props.exclude.length ? props.exclude.indexOf(category.id) > -1 : false;

          if (!isIncluded || isExcluded) {
            continue;
          }

          if (props.emojisToShowFilter) {
            var newEmojis = [];
            var emojis = category.emojis;

            for (var emojiIndex = 0; emojiIndex < emojis.length; emojiIndex++) {
              var emoji = emojis[emojiIndex];

              if (props.emojisToShowFilter(_this.data.emojis[emoji] || emoji)) {
                newEmojis.push(emoji);
              }
            }

            if (newEmojis.length) {
              var newCategory = {
                emojis: newEmojis,
                name: category.name,
                id: category.id
              };

              _this.categories.push(newCategory);
            }
          } else {
            _this.categories.push(category);
          }
        }

        var includeRecent = props.include && props.include.length ? props.include.indexOf(_this.RECENT_CATEGORY.id) > -1 : true;
        var excludeRecent = props.exclude && props.exclude.length ? props.exclude.indexOf(_this.RECENT_CATEGORY.id) > -1 : false;

        if (includeRecent && !excludeRecent) {
          _this.hideRecent = false;

          _this.categories.unshift(_this.RECENT_CATEGORY);
        }

        if (_this.categories[0]) {
          _this.categories[0].first = true;
        }

        _this.categories.unshift(_this.SEARCH_CATEGORY);

        _this.setAnchorsRef = _this.setAnchorsRef.bind((0, _assertThisInitialized2["default"])(_this));
        _this.handleAnchorClick = _this.handleAnchorClick.bind((0, _assertThisInitialized2["default"])(_this));
        _this.setSearchRef = _this.setSearchRef.bind((0, _assertThisInitialized2["default"])(_this));
        _this.handleSearch = _this.handleSearch.bind((0, _assertThisInitialized2["default"])(_this));
        _this.setScrollRef = _this.setScrollRef.bind((0, _assertThisInitialized2["default"])(_this));
        _this.handleScroll = _this.handleScroll.bind((0, _assertThisInitialized2["default"])(_this));
        _this.handleScrollPaint = _this.handleScrollPaint.bind((0, _assertThisInitialized2["default"])(_this));
        _this.handleEmojiOver = _this.handleEmojiOver.bind((0, _assertThisInitialized2["default"])(_this));
        _this.handleEmojiLeave = _this.handleEmojiLeave.bind((0, _assertThisInitialized2["default"])(_this));
        _this.handleEmojiClick = _this.handleEmojiClick.bind((0, _assertThisInitialized2["default"])(_this));
        _this.handleEmojiSelect = _this.handleEmojiSelect.bind((0, _assertThisInitialized2["default"])(_this));
        _this.setPreviewRef = _this.setPreviewRef.bind((0, _assertThisInitialized2["default"])(_this));
        _this.handleSkinChange = _this.handleSkinChange.bind((0, _assertThisInitialized2["default"])(_this));
        _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2["default"])(_this));
        _this.handleDarkMatchMediaChange = _this.handleDarkMatchMediaChange.bind((0, _assertThisInitialized2["default"])(_this));
        return _this;
      }

      (0, _createClass2["default"])(NimblePicker, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          if (this.state.firstRender) {
            this.testStickyPosition();
            this.firstRenderTimeout = setTimeout(function () {
              _this2.setState({
                firstRender: false
              });
            }, 60);
          }
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          this.updateCategoriesSize();
          this.handleScroll();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.SEARCH_CATEGORY.emojis = null;
          clearTimeout(this.leaveTimeout);
          clearTimeout(this.firstRenderTimeout);

          if (this.darkMatchMedia) {
            this.darkMatchMedia.removeListener(this.handleDarkMatchMediaChange);
          }
        }
      }, {
        key: "testStickyPosition",
        value: function testStickyPosition() {
          var stickyTestElement = document.createElement('div');
          var prefixes = ['', '-webkit-', '-ms-', '-moz-', '-o-'];
          prefixes.forEach(function (prefix) {
            return stickyTestElement.style.position = "".concat(prefix, "sticky");
          });
          this.hasStickyPosition = !!stickyTestElement.style.position.length;
        }
      }, {
        key: "getPreferredTheme",
        value: function getPreferredTheme() {
          if (this.props.theme != 'auto') return this.props.theme;
          if (this.state.theme) return this.state.theme;
          if (typeof matchMedia !== 'function') return sharedDefaultProps.PickerDefaultProps.theme;

          if (!this.darkMatchMedia) {
            this.darkMatchMedia = matchMedia('(prefers-color-scheme: dark)');
            this.darkMatchMedia.addListener(this.handleDarkMatchMediaChange);
          }

          if (this.darkMatchMedia.media.match(/^not/)) return sharedDefaultProps.PickerDefaultProps.theme;
          return this.darkMatchMedia.matches ? 'dark' : 'light';
        }
      }, {
        key: "handleDarkMatchMediaChange",
        value: function handleDarkMatchMediaChange() {
          this.setState({
            theme: this.darkMatchMedia.matches ? 'dark' : 'light'
          });
        }
      }, {
        key: "handleEmojiOver",
        value: function handleEmojiOver(emoji) {
          var preview = this.preview;

          if (!preview) {
            return;
          } // Use Array.prototype.find() when it is more widely supported.


          var emojiData = this.CUSTOM.filter(function (customEmoji) {
            return customEmoji.id === emoji.id;
          })[0];

          for (var key in emojiData) {
            if (emojiData.hasOwnProperty(key)) {
              emoji[key] = emojiData[key];
            }
          }

          preview.setState({
            emoji: emoji
          });
          clearTimeout(this.leaveTimeout);
        }
      }, {
        key: "handleEmojiLeave",
        value: function handleEmojiLeave(emoji) {
          var preview = this.preview;

          if (!preview) {
            return;
          }

          this.leaveTimeout = setTimeout(function () {
            preview.setState({
              emoji: null
            });
          }, 16);
        }
      }, {
        key: "handleEmojiClick",
        value: function handleEmojiClick(emoji, e) {
          this.props.onClick(emoji, e);
          this.handleEmojiSelect(emoji);
        }
      }, {
        key: "handleEmojiSelect",
        value: function handleEmojiSelect(emoji) {
          var _this3 = this;

          this.props.onSelect(emoji);
          if (!this.hideRecent && !this.props.recent) _frequently["default"].add(emoji);
          var component = this.categoryRefs['category-1'];

          if (component) {
            var maxMargin = component.maxMargin;

            if (this.props.enableFrequentEmojiSort) {
              component.forceUpdate();
            }

            requestAnimationFrame(function () {
              if (!_this3.scroll) return;
              component.memoizeSize();
              if (maxMargin == component.maxMargin) return;

              _this3.updateCategoriesSize();

              _this3.handleScrollPaint();

              if (_this3.SEARCH_CATEGORY.emojis) {
                component.updateDisplay('none');
              }
            });
          }
        }
      }, {
        key: "handleScroll",
        value: function handleScroll() {
          if (!this.waitingForPaint) {
            this.waitingForPaint = true;
            requestAnimationFrame(this.handleScrollPaint);
          }
        }
      }, {
        key: "handleScrollPaint",
        value: function handleScrollPaint() {
          this.waitingForPaint = false;

          if (!this.scroll) {
            return;
          }

          var activeCategory = null;

          if (this.SEARCH_CATEGORY.emojis) {
            activeCategory = this.SEARCH_CATEGORY;
          } else {
            var target = this.scroll,
                scrollTop = target.scrollTop,
                scrollingDown = scrollTop > (this.scrollTop || 0),
                minTop = 0;

            for (var i = 0, l = this.categories.length; i < l; i++) {
              var ii = scrollingDown ? this.categories.length - 1 - i : i,
                  category = this.categories[ii],
                  component = this.categoryRefs["category-".concat(ii)];

              if (component) {
                var active = component.handleScroll(scrollTop);

                if (!minTop || component.top < minTop) {
                  if (component.top > 0) {
                    minTop = component.top;
                  }
                }

                if (active && !activeCategory) {
                  activeCategory = category;
                }
              }
            }

            if (scrollTop < minTop) {
              activeCategory = this.categories.filter(function (category) {
                return !(category.anchor === false);
              })[0];
            } else if (scrollTop + this.clientHeight >= this.scrollHeight) {
              activeCategory = this.categories[this.categories.length - 1];
            }
          }

          if (activeCategory) {
            var anchors = this.anchors,
                _activeCategory = activeCategory,
                categoryName = _activeCategory.name;

            if (anchors.state.selected != categoryName) {
              anchors.setState({
                selected: categoryName
              });
            }
          }

          this.scrollTop = scrollTop;
        }
      }, {
        key: "handleSearch",
        value: function handleSearch(emojis) {
          this.SEARCH_CATEGORY.emojis = emojis;

          for (var i = 0, l = this.categories.length; i < l; i++) {
            var component = this.categoryRefs["category-".concat(i)];

            if (component && component.props.name != 'Search') {
              var display = emojis ? 'none' : 'inherit';
              component.updateDisplay(display);
            }
          }

          this.forceUpdate();

          if (this.scroll) {
            this.scroll.scrollTop = 0;
          }

          this.handleScroll();
        }
      }, {
        key: "handleAnchorClick",
        value: function handleAnchorClick(category, i) {
          var component = this.categoryRefs["category-".concat(i)],
              scroll = this.scroll;
              this.anchors;
              var scrollToComponent = null;

          scrollToComponent = function scrollToComponent() {
            if (component) {
              var top = component.top;

              if (category.first) {
                top = 0;
              } else {
                top += 1;
              }

              scroll.scrollTop = top;
            }
          };

          if (this.SEARCH_CATEGORY.emojis) {
            this.handleSearch(null);
            this.search.clear();
            requestAnimationFrame(scrollToComponent);
          } else {
            scrollToComponent();
          }
        }
      }, {
        key: "handleSkinChange",
        value: function handleSkinChange(skin) {
          var newState = {
            skin: skin
          },
              onSkinChange = this.props.onSkinChange;
          this.setState(newState);

          _store["default"].update(newState);

          onSkinChange(skin);
        }
      }, {
        key: "handleKeyDown",
        value: function handleKeyDown(e) {
          var handled = false;

          switch (e.keyCode) {
            case 13:
              var emoji;

              if (this.SEARCH_CATEGORY.emojis && this.SEARCH_CATEGORY.emojis.length && (emoji = (0, utils.getSanitizedData)(this.SEARCH_CATEGORY.emojis[0], this.state.skin, this.props.set, this.props.data))) {
                this.handleEmojiSelect(emoji);
                handled = true;
              }

              break;
          }

          if (handled) {
            e.preventDefault();
          }
        }
      }, {
        key: "updateCategoriesSize",
        value: function updateCategoriesSize() {
          for (var i = 0, l = this.categories.length; i < l; i++) {
            var component = this.categoryRefs["category-".concat(i)];
            if (component) component.memoizeSize();
          }

          if (this.scroll) {
            var target = this.scroll;
            this.scrollHeight = target.scrollHeight;
            this.clientHeight = target.clientHeight;
          }
        }
      }, {
        key: "getCategories",
        value: function getCategories() {
          return this.state.firstRender ? this.categories.slice(0, 3) : this.categories;
        }
      }, {
        key: "setAnchorsRef",
        value: function setAnchorsRef(c) {
          this.anchors = c;
        }
      }, {
        key: "setSearchRef",
        value: function setSearchRef(c) {
          this.search = c;
        }
      }, {
        key: "setPreviewRef",
        value: function setPreviewRef(c) {
          this.preview = c;
        }
      }, {
        key: "setScrollRef",
        value: function setScrollRef(c) {
          this.scroll = c;
        }
      }, {
        key: "setCategoryRef",
        value: function setCategoryRef(name, c) {
          if (!this.categoryRefs) {
            this.categoryRefs = {};
          }

          this.categoryRefs[name] = c;
        }
      }, {
        key: "render",
        value: function render() {
          var _this4 = this;

          var _this$props = this.props,
              perLine = _this$props.perLine,
              emojiSize = _this$props.emojiSize,
              set = _this$props.set,
              sheetSize = _this$props.sheetSize,
              sheetColumns = _this$props.sheetColumns,
              sheetRows = _this$props.sheetRows,
              style = _this$props.style,
              title = _this$props.title,
              emoji = _this$props.emoji,
              color = _this$props.color,
              _native = _this$props["native"],
              backgroundImageFn = _this$props.backgroundImageFn,
              emojisToShowFilter = _this$props.emojisToShowFilter,
              showPreview = _this$props.showPreview,
              showSkinTones = _this$props.showSkinTones,
              emojiTooltip = _this$props.emojiTooltip,
              useButton = _this$props.useButton,
              include = _this$props.include,
              exclude = _this$props.exclude,
              recent = _this$props.recent,
              autoFocus = _this$props.autoFocus,
              skinEmoji = _this$props.skinEmoji,
              notFound = _this$props.notFound,
              notFoundEmoji = _this$props.notFoundEmoji;
          var width = perLine * (emojiSize + 12) + 12 + 2 + (0, utils.measureScrollbar)();
          var theme = this.getPreferredTheme();
          var skin = this.props.skin || this.state.skin || _store["default"].get('skin') || this.props.defaultSkin;
          return _react["default"].createElement("section", {
            style: _objectSpread({
              width: width
            }, style),
            className: "emoji-mart emoji-mart-".concat(theme),
            "aria-label": title,
            onKeyDown: this.handleKeyDown
          }, _react["default"].createElement("div", {
            className: "emoji-mart-bar"
          }, _react["default"].createElement(_anchors["default"], {
            ref: this.setAnchorsRef,
            data: this.data,
            i18n: this.i18n,
            color: color,
            categories: this.categories,
            onAnchorClick: this.handleAnchorClick,
            icons: this.icons
          })), _react["default"].createElement(_search["default"], {
            ref: this.setSearchRef,
            onSearch: this.handleSearch,
            data: this.data,
            i18n: this.i18n,
            emojisToShowFilter: emojisToShowFilter,
            include: include,
            exclude: exclude,
            custom: this.CUSTOM,
            autoFocus: autoFocus
          }), _react["default"].createElement("div", {
            ref: this.setScrollRef,
            className: "emoji-mart-scroll",
            onScroll: this.handleScroll
          }, this.getCategories().map(function (category, i) {
            return _react["default"].createElement(_category["default"], {
              ref: _this4.setCategoryRef.bind(_this4, "category-".concat(i)),
              key: category.name,
              id: category.id,
              name: category.name,
              emojis: category.emojis,
              perLine: perLine,
              "native": _native,
              hasStickyPosition: _this4.hasStickyPosition,
              data: _this4.data,
              i18n: _this4.i18n,
              recent: category.id == _this4.RECENT_CATEGORY.id ? recent : undefined,
              custom: category.id == _this4.RECENT_CATEGORY.id ? _this4.CUSTOM : undefined,
              emojiProps: {
                "native": _native,
                skin: skin,
                size: emojiSize,
                set: set,
                sheetSize: sheetSize,
                sheetColumns: sheetColumns,
                sheetRows: sheetRows,
                forceSize: _native,
                tooltip: emojiTooltip,
                backgroundImageFn: backgroundImageFn,
                useButton: useButton,
                onOver: _this4.handleEmojiOver,
                onLeave: _this4.handleEmojiLeave,
                onClick: _this4.handleEmojiClick
              },
              notFound: notFound,
              notFoundEmoji: notFoundEmoji
            });
          })), (showPreview || showSkinTones) && _react["default"].createElement("div", {
            className: "emoji-mart-bar"
          }, _react["default"].createElement(_preview["default"], {
            ref: this.setPreviewRef,
            data: this.data,
            title: title,
            emoji: emoji,
            showSkinTones: showSkinTones,
            showPreview: showPreview,
            emojiProps: {
              "native": _native,
              size: 38,
              skin: skin,
              set: set,
              sheetSize: sheetSize,
              sheetColumns: sheetColumns,
              sheetRows: sheetRows,
              backgroundImageFn: backgroundImageFn
            },
            skinsProps: {
              skin: skin,
              onChange: this.handleSkinChange,
              skinEmoji: skinEmoji
            },
            i18n: this.i18n
          })));
        }
      }]);
      return NimblePicker;
    }(_react["default"].PureComponent);

    exports["default"] = NimblePicker;
    NimblePicker.propTypes
    /* remove-proptypes */
    = _objectSpread({}, sharedProps.PickerPropTypes, {
      data: _propTypes["default"].object.isRequired
    });
    NimblePicker.defaultProps = _objectSpread({}, sharedDefaultProps.PickerDefaultProps);
    });

    var nimblePicker$1 = unwrapExports(nimblePicker);

    var nimblePicker$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': nimblePicker$1,
        __moduleExports: nimblePicker
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0;

    /** `Object#toString` result references. */
    var symbolTag = '[object Symbol]';

    /** Used to match Latin Unicode letters (excluding mathematical operators). */
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    /** Used to compose unicode character classes. */
    var rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
        rsComboSymbolsRange = '\\u20d0-\\u20f0';

    /** Used to compose unicode capture groups. */
    var rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']';

    /**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */
    var reComboMark = RegExp(rsCombo, 'g');

    /** Used to map Latin Unicode letters to basic Latin letters. */
    var deburredLetters = {
      // Latin-1 Supplement block.
      '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
      '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
      '\xc7': 'C',  '\xe7': 'c',
      '\xd0': 'D',  '\xf0': 'd',
      '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
      '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
      '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
      '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
      '\xd1': 'N',  '\xf1': 'n',
      '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
      '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
      '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
      '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
      '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
      '\xc6': 'Ae', '\xe6': 'ae',
      '\xde': 'Th', '\xfe': 'th',
      '\xdf': 'ss',
      // Latin Extended-A block.
      '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
      '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
      '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
      '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
      '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
      '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
      '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
      '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
      '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
      '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
      '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
      '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
      '\u0134': 'J',  '\u0135': 'j',
      '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
      '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
      '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
      '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
      '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
      '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
      '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
      '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
      '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
      '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
      '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
      '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
      '\u0163': 't',  '\u0165': 't', '\u0167': 't',
      '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
      '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
      '\u0174': 'W',  '\u0175': 'w',
      '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
      '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
      '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
      '\u0132': 'IJ', '\u0133': 'ij',
      '\u0152': 'Oe', '\u0153': 'oe',
      '\u0149': "'n", '\u017f': 'ss'
    };

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */
    var deburrLetter = basePropertyOf(deburredLetters);

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Built-in value references. */
    var Symbol$1 = root.Symbol;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    var lodash_deburr = deburr;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function t(){return t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a]);}return e},t.apply(this,arguments)}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,a=new Array(t);r<t;r++)a[r]=e[r];return a}var a=/[|\\{}()[\]^$+*?.]/g,o=function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(a,"\\$&")},n=[["ß","ss"],["ẞ","Ss"],["ä","ae"],["Ä","Ae"],["ö","oe"],["Ö","Oe"],["ü","ue"],["Ü","Ue"],["À","A"],["Á","A"],["Â","A"],["Ã","A"],["Ä","Ae"],["Å","A"],["Æ","AE"],["Ç","C"],["È","E"],["É","E"],["Ê","E"],["Ë","E"],["Ì","I"],["Í","I"],["Î","I"],["Ï","I"],["Ð","D"],["Ñ","N"],["Ò","O"],["Ó","O"],["Ô","O"],["Õ","O"],["Ö","Oe"],["Ő","O"],["Ø","O"],["Ù","U"],["Ú","U"],["Û","U"],["Ü","Ue"],["Ű","U"],["Ý","Y"],["Þ","TH"],["ß","ss"],["à","a"],["á","a"],["â","a"],["ã","a"],["ä","ae"],["å","a"],["æ","ae"],["ç","c"],["è","e"],["é","e"],["ê","e"],["ë","e"],["ì","i"],["í","i"],["î","i"],["ï","i"],["ð","d"],["ñ","n"],["ò","o"],["ó","o"],["ô","o"],["õ","o"],["ö","oe"],["ő","o"],["ø","o"],["ù","u"],["ú","u"],["û","u"],["ü","ue"],["ű","u"],["ý","y"],["þ","th"],["ÿ","y"],["ẞ","SS"],["à","a"],["À","A"],["á","a"],["Á","A"],["â","a"],["Â","A"],["ã","a"],["Ã","A"],["è","e"],["È","E"],["é","e"],["É","E"],["ê","e"],["Ê","E"],["ì","i"],["Ì","I"],["í","i"],["Í","I"],["ò","o"],["Ò","O"],["ó","o"],["Ó","O"],["ô","o"],["Ô","O"],["õ","o"],["Õ","O"],["ù","u"],["Ù","U"],["ú","u"],["Ú","U"],["ý","y"],["Ý","Y"],["ă","a"],["Ă","A"],["Đ","D"],["đ","d"],["ĩ","i"],["Ĩ","I"],["ũ","u"],["Ũ","U"],["ơ","o"],["Ơ","O"],["ư","u"],["Ư","U"],["ạ","a"],["Ạ","A"],["ả","a"],["Ả","A"],["ấ","a"],["Ấ","A"],["ầ","a"],["Ầ","A"],["ẩ","a"],["Ẩ","A"],["ẫ","a"],["Ẫ","A"],["ậ","a"],["Ậ","A"],["ắ","a"],["Ắ","A"],["ằ","a"],["Ằ","A"],["ẳ","a"],["Ẳ","A"],["ẵ","a"],["Ẵ","A"],["ặ","a"],["Ặ","A"],["ẹ","e"],["Ẹ","E"],["ẻ","e"],["Ẻ","E"],["ẽ","e"],["Ẽ","E"],["ế","e"],["Ế","E"],["ề","e"],["Ề","E"],["ể","e"],["Ể","E"],["ễ","e"],["Ễ","E"],["ệ","e"],["Ệ","E"],["ỉ","i"],["Ỉ","I"],["ị","i"],["Ị","I"],["ọ","o"],["Ọ","O"],["ỏ","o"],["Ỏ","O"],["ố","o"],["Ố","O"],["ồ","o"],["Ồ","O"],["ổ","o"],["Ổ","O"],["ỗ","o"],["Ỗ","O"],["ộ","o"],["Ộ","O"],["ớ","o"],["Ớ","O"],["ờ","o"],["Ờ","O"],["ở","o"],["Ở","O"],["ỡ","o"],["Ỡ","O"],["ợ","o"],["Ợ","O"],["ụ","u"],["Ụ","U"],["ủ","u"],["Ủ","U"],["ứ","u"],["Ứ","U"],["ừ","u"],["Ừ","U"],["ử","u"],["Ử","U"],["ữ","u"],["Ữ","U"],["ự","u"],["Ự","U"],["ỳ","y"],["Ỳ","Y"],["ỵ","y"],["Ỵ","Y"],["ỷ","y"],["Ỷ","Y"],["ỹ","y"],["Ỹ","Y"],["ء","e"],["آ","a"],["أ","a"],["ؤ","w"],["إ","i"],["ئ","y"],["ا","a"],["ب","b"],["ة","t"],["ت","t"],["ث","th"],["ج","j"],["ح","h"],["خ","kh"],["د","d"],["ذ","dh"],["ر","r"],["ز","z"],["س","s"],["ش","sh"],["ص","s"],["ض","d"],["ط","t"],["ظ","z"],["ع","e"],["غ","gh"],["ـ","_"],["ف","f"],["ق","q"],["ك","k"],["ل","l"],["م","m"],["ن","n"],["ه","h"],["و","w"],["ى","a"],["ي","y"],["َ‎","a"],["ُ","u"],["ِ‎","i"],["٠","0"],["١","1"],["٢","2"],["٣","3"],["٤","4"],["٥","5"],["٦","6"],["٧","7"],["٨","8"],["٩","9"],["چ","ch"],["ک","k"],["گ","g"],["پ","p"],["ژ","zh"],["ی","y"],["۰","0"],["۱","1"],["۲","2"],["۳","3"],["۴","4"],["۵","5"],["۶","6"],["۷","7"],["۸","8"],["۹","9"],["ټ","p"],["ځ","z"],["څ","c"],["ډ","d"],["ﺫ","d"],["ﺭ","r"],["ړ","r"],["ﺯ","z"],["ږ","g"],["ښ","x"],["ګ","g"],["ڼ","n"],["ۀ","e"],["ې","e"],["ۍ","ai"],["ٹ","t"],["ڈ","d"],["ڑ","r"],["ں","n"],["ہ","h"],["ھ","h"],["ے","e"],["А","A"],["а","a"],["Б","B"],["б","b"],["В","V"],["в","v"],["Г","G"],["г","g"],["Д","D"],["д","d"],["ъе","ye"],["Ъе","Ye"],["ъЕ","yE"],["ЪЕ","YE"],["Е","E"],["е","e"],["Ё","Yo"],["ё","yo"],["Ж","Zh"],["ж","zh"],["З","Z"],["з","z"],["И","I"],["и","i"],["ый","iy"],["Ый","Iy"],["ЫЙ","IY"],["ыЙ","iY"],["Й","Y"],["й","y"],["К","K"],["к","k"],["Л","L"],["л","l"],["М","M"],["м","m"],["Н","N"],["н","n"],["О","O"],["о","o"],["П","P"],["п","p"],["Р","R"],["р","r"],["С","S"],["с","s"],["Т","T"],["т","t"],["У","U"],["у","u"],["Ф","F"],["ф","f"],["Х","Kh"],["х","kh"],["Ц","Ts"],["ц","ts"],["Ч","Ch"],["ч","ch"],["Ш","Sh"],["ш","sh"],["Щ","Sch"],["щ","sch"],["Ъ",""],["ъ",""],["Ы","Y"],["ы","y"],["Ь",""],["ь",""],["Э","E"],["э","e"],["Ю","Yu"],["ю","yu"],["Я","Ya"],["я","ya"],["ă","a"],["Ă","A"],["ș","s"],["Ș","S"],["ț","t"],["Ț","T"],["ţ","t"],["Ţ","T"],["ş","s"],["Ş","S"],["ç","c"],["Ç","C"],["ğ","g"],["Ğ","G"],["ı","i"],["İ","I"],["ա","a"],["Ա","A"],["բ","b"],["Բ","B"],["գ","g"],["Գ","G"],["դ","d"],["Դ","D"],["ե","ye"],["Ե","Ye"],["զ","z"],["Զ","Z"],["է","e"],["Է","E"],["ը","y"],["Ը","Y"],["թ","t"],["Թ","T"],["ժ","zh"],["Ժ","Zh"],["ի","i"],["Ի","I"],["լ","l"],["Լ","L"],["խ","kh"],["Խ","Kh"],["ծ","ts"],["Ծ","Ts"],["կ","k"],["Կ","K"],["հ","h"],["Հ","H"],["ձ","dz"],["Ձ","Dz"],["ղ","gh"],["Ղ","Gh"],["ճ","tch"],["Ճ","Tch"],["մ","m"],["Մ","M"],["յ","y"],["Յ","Y"],["ն","n"],["Ն","N"],["շ","sh"],["Շ","Sh"],["ո","vo"],["Ո","Vo"],["չ","ch"],["Չ","Ch"],["պ","p"],["Պ","P"],["ջ","j"],["Ջ","J"],["ռ","r"],["Ռ","R"],["ս","s"],["Ս","S"],["վ","v"],["Վ","V"],["տ","t"],["Տ","T"],["ր","r"],["Ր","R"],["ց","c"],["Ց","C"],["ու","u"],["ՈՒ","U"],["Ու","U"],["փ","p"],["Փ","P"],["ք","q"],["Ք","Q"],["օ","o"],["Օ","O"],["ֆ","f"],["Ֆ","F"],["և","yev"],["ა","a"],["ბ","b"],["გ","g"],["დ","d"],["ე","e"],["ვ","v"],["ზ","z"],["თ","t"],["ი","i"],["კ","k"],["ლ","l"],["მ","m"],["ნ","n"],["ო","o"],["პ","p"],["ჟ","zh"],["რ","r"],["ს","s"],["ტ","t"],["უ","u"],["ფ","ph"],["ქ","q"],["ღ","gh"],["ყ","k"],["შ","sh"],["ჩ","ch"],["ც","ts"],["ძ","dz"],["წ","ts"],["ჭ","tch"],["ხ","kh"],["ჯ","j"],["ჰ","h"],["č","c"],["ď","d"],["ě","e"],["ň","n"],["ř","r"],["š","s"],["ť","t"],["ů","u"],["ž","z"],["Č","C"],["Ď","D"],["Ě","E"],["Ň","N"],["Ř","R"],["Š","S"],["Ť","T"],["Ů","U"],["Ž","Z"],["ހ","h"],["ށ","sh"],["ނ","n"],["ރ","r"],["ބ","b"],["ޅ","lh"],["ކ","k"],["އ","a"],["ވ","v"],["މ","m"],["ފ","f"],["ދ","dh"],["ތ","th"],["ލ","l"],["ގ","g"],["ޏ","gn"],["ސ","s"],["ޑ","d"],["ޒ","z"],["ޓ","t"],["ޔ","y"],["ޕ","p"],["ޖ","j"],["ޗ","ch"],["ޘ","tt"],["ޙ","hh"],["ޚ","kh"],["ޛ","th"],["ޜ","z"],["ޝ","sh"],["ޞ","s"],["ޟ","d"],["ޠ","t"],["ޡ","z"],["ޢ","a"],["ޣ","gh"],["ޤ","q"],["ޥ","w"],["ަ","a"],["ާ","aa"],["ި","i"],["ީ","ee"],["ު","u"],["ޫ","oo"],["ެ","e"],["ޭ","ey"],["ޮ","o"],["ޯ","oa"],["ް",""],["α","a"],["β","v"],["γ","g"],["δ","d"],["ε","e"],["ζ","z"],["η","i"],["θ","th"],["ι","i"],["κ","k"],["λ","l"],["μ","m"],["ν","n"],["ξ","ks"],["ο","o"],["π","p"],["ρ","r"],["σ","s"],["τ","t"],["υ","y"],["φ","f"],["χ","x"],["ψ","ps"],["ω","o"],["ά","a"],["έ","e"],["ί","i"],["ό","o"],["ύ","y"],["ή","i"],["ώ","o"],["ς","s"],["ϊ","i"],["ΰ","y"],["ϋ","y"],["ΐ","i"],["Α","A"],["Β","B"],["Γ","G"],["Δ","D"],["Ε","E"],["Ζ","Z"],["Η","I"],["Θ","TH"],["Ι","I"],["Κ","K"],["Λ","L"],["Μ","M"],["Ν","N"],["Ξ","KS"],["Ο","O"],["Π","P"],["Ρ","R"],["Σ","S"],["Τ","T"],["Υ","Y"],["Φ","F"],["Χ","X"],["Ψ","PS"],["Ω","O"],["Ά","A"],["Έ","E"],["Ί","I"],["Ό","O"],["Ύ","Y"],["Ή","I"],["Ώ","O"],["Ϊ","I"],["Ϋ","Y"],["ā","a"],["ē","e"],["ģ","g"],["ī","i"],["ķ","k"],["ļ","l"],["ņ","n"],["ū","u"],["Ā","A"],["Ē","E"],["Ģ","G"],["Ī","I"],["Ķ","K"],["Ļ","L"],["Ņ","N"],["Ū","U"],["č","c"],["š","s"],["ž","z"],["Č","C"],["Š","S"],["Ž","Z"],["ą","a"],["č","c"],["ę","e"],["ė","e"],["į","i"],["š","s"],["ų","u"],["ū","u"],["ž","z"],["Ą","A"],["Č","C"],["Ę","E"],["Ė","E"],["Į","I"],["Š","S"],["Ų","U"],["Ū","U"],["Ќ","Kj"],["ќ","kj"],["Љ","Lj"],["љ","lj"],["Њ","Nj"],["њ","nj"],["Тс","Ts"],["тс","ts"],["ą","a"],["ć","c"],["ę","e"],["ł","l"],["ń","n"],["ś","s"],["ź","z"],["ż","z"],["Ą","A"],["Ć","C"],["Ę","E"],["Ł","L"],["Ń","N"],["Ś","S"],["Ź","Z"],["Ż","Z"],["Є","Ye"],["І","I"],["Ї","Yi"],["Ґ","G"],["є","ye"],["і","i"],["ї","yi"],["ґ","g"],["Ĳ","IJ"],["ĳ","ij"],["¢","c"],["¥","Y"],["߿","b"],["৳","t"],["૱","Bo"],["฿","B"],["₠","CE"],["₡","C"],["₢","Cr"],["₣","F"],["₥","m"],["₦","N"],["₧","Pt"],["₨","Rs"],["₩","W"],["₫","s"],["€","E"],["₭","K"],["₮","T"],["₯","Dp"],["₰","S"],["₱","P"],["₲","G"],["₳","A"],["₴","S"],["₵","C"],["₶","tt"],["₷","S"],["₸","T"],["₹","R"],["₺","L"],["₽","P"],["₿","B"],["﹩","$"],["￠","c"],["￥","Y"],["￦","W"],["𝐀","A"],["𝐁","B"],["𝐂","C"],["𝐃","D"],["𝐄","E"],["𝐅","F"],["𝐆","G"],["𝐇","H"],["𝐈","I"],["𝐉","J"],["𝐊","K"],["𝐋","L"],["𝐌","M"],["𝐍","N"],["𝐎","O"],["𝐏","P"],["𝐐","Q"],["𝐑","R"],["𝐒","S"],["𝐓","T"],["𝐔","U"],["𝐕","V"],["𝐖","W"],["𝐗","X"],["𝐘","Y"],["𝐙","Z"],["𝐚","a"],["𝐛","b"],["𝐜","c"],["𝐝","d"],["𝐞","e"],["𝐟","f"],["𝐠","g"],["𝐡","h"],["𝐢","i"],["𝐣","j"],["𝐤","k"],["𝐥","l"],["𝐦","m"],["𝐧","n"],["𝐨","o"],["𝐩","p"],["𝐪","q"],["𝐫","r"],["𝐬","s"],["𝐭","t"],["𝐮","u"],["𝐯","v"],["𝐰","w"],["𝐱","x"],["𝐲","y"],["𝐳","z"],["𝐴","A"],["𝐵","B"],["𝐶","C"],["𝐷","D"],["𝐸","E"],["𝐹","F"],["𝐺","G"],["𝐻","H"],["𝐼","I"],["𝐽","J"],["𝐾","K"],["𝐿","L"],["𝑀","M"],["𝑁","N"],["𝑂","O"],["𝑃","P"],["𝑄","Q"],["𝑅","R"],["𝑆","S"],["𝑇","T"],["𝑈","U"],["𝑉","V"],["𝑊","W"],["𝑋","X"],["𝑌","Y"],["𝑍","Z"],["𝑎","a"],["𝑏","b"],["𝑐","c"],["𝑑","d"],["𝑒","e"],["𝑓","f"],["𝑔","g"],["𝑖","i"],["𝑗","j"],["𝑘","k"],["𝑙","l"],["𝑚","m"],["𝑛","n"],["𝑜","o"],["𝑝","p"],["𝑞","q"],["𝑟","r"],["𝑠","s"],["𝑡","t"],["𝑢","u"],["𝑣","v"],["𝑤","w"],["𝑥","x"],["𝑦","y"],["𝑧","z"],["𝑨","A"],["𝑩","B"],["𝑪","C"],["𝑫","D"],["𝑬","E"],["𝑭","F"],["𝑮","G"],["𝑯","H"],["𝑰","I"],["𝑱","J"],["𝑲","K"],["𝑳","L"],["𝑴","M"],["𝑵","N"],["𝑶","O"],["𝑷","P"],["𝑸","Q"],["𝑹","R"],["𝑺","S"],["𝑻","T"],["𝑼","U"],["𝑽","V"],["𝑾","W"],["𝑿","X"],["𝒀","Y"],["𝒁","Z"],["𝒂","a"],["𝒃","b"],["𝒄","c"],["𝒅","d"],["𝒆","e"],["𝒇","f"],["𝒈","g"],["𝒉","h"],["𝒊","i"],["𝒋","j"],["𝒌","k"],["𝒍","l"],["𝒎","m"],["𝒏","n"],["𝒐","o"],["𝒑","p"],["𝒒","q"],["𝒓","r"],["𝒔","s"],["𝒕","t"],["𝒖","u"],["𝒗","v"],["𝒘","w"],["𝒙","x"],["𝒚","y"],["𝒛","z"],["𝒜","A"],["𝒞","C"],["𝒟","D"],["𝒢","g"],["𝒥","J"],["𝒦","K"],["𝒩","N"],["𝒪","O"],["𝒫","P"],["𝒬","Q"],["𝒮","S"],["𝒯","T"],["𝒰","U"],["𝒱","V"],["𝒲","W"],["𝒳","X"],["𝒴","Y"],["𝒵","Z"],["𝒶","a"],["𝒷","b"],["𝒸","c"],["𝒹","d"],["𝒻","f"],["𝒽","h"],["𝒾","i"],["𝒿","j"],["𝓀","h"],["𝓁","l"],["𝓂","m"],["𝓃","n"],["𝓅","p"],["𝓆","q"],["𝓇","r"],["𝓈","s"],["𝓉","t"],["𝓊","u"],["𝓋","v"],["𝓌","w"],["𝓍","x"],["𝓎","y"],["𝓏","z"],["𝓐","A"],["𝓑","B"],["𝓒","C"],["𝓓","D"],["𝓔","E"],["𝓕","F"],["𝓖","G"],["𝓗","H"],["𝓘","I"],["𝓙","J"],["𝓚","K"],["𝓛","L"],["𝓜","M"],["𝓝","N"],["𝓞","O"],["𝓟","P"],["𝓠","Q"],["𝓡","R"],["𝓢","S"],["𝓣","T"],["𝓤","U"],["𝓥","V"],["𝓦","W"],["𝓧","X"],["𝓨","Y"],["𝓩","Z"],["𝓪","a"],["𝓫","b"],["𝓬","c"],["𝓭","d"],["𝓮","e"],["𝓯","f"],["𝓰","g"],["𝓱","h"],["𝓲","i"],["𝓳","j"],["𝓴","k"],["𝓵","l"],["𝓶","m"],["𝓷","n"],["𝓸","o"],["𝓹","p"],["𝓺","q"],["𝓻","r"],["𝓼","s"],["𝓽","t"],["𝓾","u"],["𝓿","v"],["𝔀","w"],["𝔁","x"],["𝔂","y"],["𝔃","z"],["𝔄","A"],["𝔅","B"],["𝔇","D"],["𝔈","E"],["𝔉","F"],["𝔊","G"],["𝔍","J"],["𝔎","K"],["𝔏","L"],["𝔐","M"],["𝔑","N"],["𝔒","O"],["𝔓","P"],["𝔔","Q"],["𝔖","S"],["𝔗","T"],["𝔘","U"],["𝔙","V"],["𝔚","W"],["𝔛","X"],["𝔜","Y"],["𝔞","a"],["𝔟","b"],["𝔠","c"],["𝔡","d"],["𝔢","e"],["𝔣","f"],["𝔤","g"],["𝔥","h"],["𝔦","i"],["𝔧","j"],["𝔨","k"],["𝔩","l"],["𝔪","m"],["𝔫","n"],["𝔬","o"],["𝔭","p"],["𝔮","q"],["𝔯","r"],["𝔰","s"],["𝔱","t"],["𝔲","u"],["𝔳","v"],["𝔴","w"],["𝔵","x"],["𝔶","y"],["𝔷","z"],["𝔸","A"],["𝔹","B"],["𝔻","D"],["𝔼","E"],["𝔽","F"],["𝔾","G"],["𝕀","I"],["𝕁","J"],["𝕂","K"],["𝕃","L"],["𝕄","M"],["𝕆","N"],["𝕊","S"],["𝕋","T"],["𝕌","U"],["𝕍","V"],["𝕎","W"],["𝕏","X"],["𝕐","Y"],["𝕒","a"],["𝕓","b"],["𝕔","c"],["𝕕","d"],["𝕖","e"],["𝕗","f"],["𝕘","g"],["𝕙","h"],["𝕚","i"],["𝕛","j"],["𝕜","k"],["𝕝","l"],["𝕞","m"],["𝕟","n"],["𝕠","o"],["𝕡","p"],["𝕢","q"],["𝕣","r"],["𝕤","s"],["𝕥","t"],["𝕦","u"],["𝕧","v"],["𝕨","w"],["𝕩","x"],["𝕪","y"],["𝕫","z"],["𝕬","A"],["𝕭","B"],["𝕮","C"],["𝕯","D"],["𝕰","E"],["𝕱","F"],["𝕲","G"],["𝕳","H"],["𝕴","I"],["𝕵","J"],["𝕶","K"],["𝕷","L"],["𝕸","M"],["𝕹","N"],["𝕺","O"],["𝕻","P"],["𝕼","Q"],["𝕽","R"],["𝕾","S"],["𝕿","T"],["𝖀","U"],["𝖁","V"],["𝖂","W"],["𝖃","X"],["𝖄","Y"],["𝖅","Z"],["𝖆","a"],["𝖇","b"],["𝖈","c"],["𝖉","d"],["𝖊","e"],["𝖋","f"],["𝖌","g"],["𝖍","h"],["𝖎","i"],["𝖏","j"],["𝖐","k"],["𝖑","l"],["𝖒","m"],["𝖓","n"],["𝖔","o"],["𝖕","p"],["𝖖","q"],["𝖗","r"],["𝖘","s"],["𝖙","t"],["𝖚","u"],["𝖛","v"],["𝖜","w"],["𝖝","x"],["𝖞","y"],["𝖟","z"],["𝖠","A"],["𝖡","B"],["𝖢","C"],["𝖣","D"],["𝖤","E"],["𝖥","F"],["𝖦","G"],["𝖧","H"],["𝖨","I"],["𝖩","J"],["𝖪","K"],["𝖫","L"],["𝖬","M"],["𝖭","N"],["𝖮","O"],["𝖯","P"],["𝖰","Q"],["𝖱","R"],["𝖲","S"],["𝖳","T"],["𝖴","U"],["𝖵","V"],["𝖶","W"],["𝖷","X"],["𝖸","Y"],["𝖹","Z"],["𝖺","a"],["𝖻","b"],["𝖼","c"],["𝖽","d"],["𝖾","e"],["𝖿","f"],["𝗀","g"],["𝗁","h"],["𝗂","i"],["𝗃","j"],["𝗄","k"],["𝗅","l"],["𝗆","m"],["𝗇","n"],["𝗈","o"],["𝗉","p"],["𝗊","q"],["𝗋","r"],["𝗌","s"],["𝗍","t"],["𝗎","u"],["𝗏","v"],["𝗐","w"],["𝗑","x"],["𝗒","y"],["𝗓","z"],["𝗔","A"],["𝗕","B"],["𝗖","C"],["𝗗","D"],["𝗘","E"],["𝗙","F"],["𝗚","G"],["𝗛","H"],["𝗜","I"],["𝗝","J"],["𝗞","K"],["𝗟","L"],["𝗠","M"],["𝗡","N"],["𝗢","O"],["𝗣","P"],["𝗤","Q"],["𝗥","R"],["𝗦","S"],["𝗧","T"],["𝗨","U"],["𝗩","V"],["𝗪","W"],["𝗫","X"],["𝗬","Y"],["𝗭","Z"],["𝗮","a"],["𝗯","b"],["𝗰","c"],["𝗱","d"],["𝗲","e"],["𝗳","f"],["𝗴","g"],["𝗵","h"],["𝗶","i"],["𝗷","j"],["𝗸","k"],["𝗹","l"],["𝗺","m"],["𝗻","n"],["𝗼","o"],["𝗽","p"],["𝗾","q"],["𝗿","r"],["𝘀","s"],["𝘁","t"],["𝘂","u"],["𝘃","v"],["𝘄","w"],["𝘅","x"],["𝘆","y"],["𝘇","z"],["𝘈","A"],["𝘉","B"],["𝘊","C"],["𝘋","D"],["𝘌","E"],["𝘍","F"],["𝘎","G"],["𝘏","H"],["𝘐","I"],["𝘑","J"],["𝘒","K"],["𝘓","L"],["𝘔","M"],["𝘕","N"],["𝘖","O"],["𝘗","P"],["𝘘","Q"],["𝘙","R"],["𝘚","S"],["𝘛","T"],["𝘜","U"],["𝘝","V"],["𝘞","W"],["𝘟","X"],["𝘠","Y"],["𝘡","Z"],["𝘢","a"],["𝘣","b"],["𝘤","c"],["𝘥","d"],["𝘦","e"],["𝘧","f"],["𝘨","g"],["𝘩","h"],["𝘪","i"],["𝘫","j"],["𝘬","k"],["𝘭","l"],["𝘮","m"],["𝘯","n"],["𝘰","o"],["𝘱","p"],["𝘲","q"],["𝘳","r"],["𝘴","s"],["𝘵","t"],["𝘶","u"],["𝘷","v"],["𝘸","w"],["𝘹","x"],["𝘺","y"],["𝘻","z"],["𝘼","A"],["𝘽","B"],["𝘾","C"],["𝘿","D"],["𝙀","E"],["𝙁","F"],["𝙂","G"],["𝙃","H"],["𝙄","I"],["𝙅","J"],["𝙆","K"],["𝙇","L"],["𝙈","M"],["𝙉","N"],["𝙊","O"],["𝙋","P"],["𝙌","Q"],["𝙍","R"],["𝙎","S"],["𝙏","T"],["𝙐","U"],["𝙑","V"],["𝙒","W"],["𝙓","X"],["𝙔","Y"],["𝙕","Z"],["𝙖","a"],["𝙗","b"],["𝙘","c"],["𝙙","d"],["𝙚","e"],["𝙛","f"],["𝙜","g"],["𝙝","h"],["𝙞","i"],["𝙟","j"],["𝙠","k"],["𝙡","l"],["𝙢","m"],["𝙣","n"],["𝙤","o"],["𝙥","p"],["𝙦","q"],["𝙧","r"],["𝙨","s"],["𝙩","t"],["𝙪","u"],["𝙫","v"],["𝙬","w"],["𝙭","x"],["𝙮","y"],["𝙯","z"],["𝙰","A"],["𝙱","B"],["𝙲","C"],["𝙳","D"],["𝙴","E"],["𝙵","F"],["𝙶","G"],["𝙷","H"],["𝙸","I"],["𝙹","J"],["𝙺","K"],["𝙻","L"],["𝙼","M"],["𝙽","N"],["𝙾","O"],["𝙿","P"],["𝚀","Q"],["𝚁","R"],["𝚂","S"],["𝚃","T"],["𝚄","U"],["𝚅","V"],["𝚆","W"],["𝚇","X"],["𝚈","Y"],["𝚉","Z"],["𝚊","a"],["𝚋","b"],["𝚌","c"],["𝚍","d"],["𝚎","e"],["𝚏","f"],["𝚐","g"],["𝚑","h"],["𝚒","i"],["𝚓","j"],["𝚔","k"],["𝚕","l"],["𝚖","m"],["𝚗","n"],["𝚘","o"],["𝚙","p"],["𝚚","q"],["𝚛","r"],["𝚜","s"],["𝚝","t"],["𝚞","u"],["𝚟","v"],["𝚠","w"],["𝚡","x"],["𝚢","y"],["𝚣","z"],["𝚤","l"],["𝚥","j"],["𝛢","A"],["𝛣","B"],["𝛤","G"],["𝛥","D"],["𝛦","E"],["𝛧","Z"],["𝛨","I"],["𝛩","TH"],["𝛪","I"],["𝛫","K"],["𝛬","L"],["𝛭","M"],["𝛮","N"],["𝛯","KS"],["𝛰","O"],["𝛱","P"],["𝛲","R"],["𝛳","TH"],["𝛴","S"],["𝛵","T"],["𝛶","Y"],["𝛷","F"],["𝛸","x"],["𝛹","PS"],["𝛺","O"],["𝛻","D"],["𝛼","a"],["𝛽","b"],["𝛾","g"],["𝛿","d"],["𝜀","e"],["𝜁","z"],["𝜂","i"],["𝜃","th"],["𝜄","i"],["𝜅","k"],["𝜆","l"],["𝜇","m"],["𝜈","n"],["𝜉","ks"],["𝜊","o"],["𝜋","p"],["𝜌","r"],["𝜍","s"],["𝜎","s"],["𝜏","t"],["𝜐","y"],["𝜑","f"],["𝜒","x"],["𝜓","ps"],["𝜔","o"],["𝜕","d"],["𝜖","E"],["𝜗","TH"],["𝜘","K"],["𝜙","f"],["𝜚","r"],["𝜛","p"],["𝜜","A"],["𝜝","V"],["𝜞","G"],["𝜟","D"],["𝜠","E"],["𝜡","Z"],["𝜢","I"],["𝜣","TH"],["𝜤","I"],["𝜥","K"],["𝜦","L"],["𝜧","M"],["𝜨","N"],["𝜩","KS"],["𝜪","O"],["𝜫","P"],["𝜬","S"],["𝜭","TH"],["𝜮","S"],["𝜯","T"],["𝜰","Y"],["𝜱","F"],["𝜲","X"],["𝜳","PS"],["𝜴","O"],["𝜵","D"],["𝜶","a"],["𝜷","v"],["𝜸","g"],["𝜹","d"],["𝜺","e"],["𝜻","z"],["𝜼","i"],["𝜽","th"],["𝜾","i"],["𝜿","k"],["𝝀","l"],["𝝁","m"],["𝝂","n"],["𝝃","ks"],["𝝄","o"],["𝝅","p"],["𝝆","r"],["𝝇","s"],["𝝈","s"],["𝝉","t"],["𝝊","y"],["𝝋","f"],["𝝌","x"],["𝝍","ps"],["𝝎","o"],["𝝏","a"],["𝝐","e"],["𝝑","i"],["𝝒","k"],["𝝓","f"],["𝝔","r"],["𝝕","p"],["𝝖","A"],["𝝗","B"],["𝝘","G"],["𝝙","D"],["𝝚","E"],["𝝛","Z"],["𝝜","I"],["𝝝","TH"],["𝝞","I"],["𝝟","K"],["𝝠","L"],["𝝡","M"],["𝝢","N"],["𝝣","KS"],["𝝤","O"],["𝝥","P"],["𝝦","R"],["𝝧","TH"],["𝝨","S"],["𝝩","T"],["𝝪","Y"],["𝝫","F"],["𝝬","X"],["𝝭","PS"],["𝝮","O"],["𝝯","D"],["𝝰","a"],["𝝱","v"],["𝝲","g"],["𝝳","d"],["𝝴","e"],["𝝵","z"],["𝝶","i"],["𝝷","th"],["𝝸","i"],["𝝹","k"],["𝝺","l"],["𝝻","m"],["𝝼","n"],["𝝽","ks"],["𝝾","o"],["𝝿","p"],["𝞀","r"],["𝞁","s"],["𝞂","s"],["𝞃","t"],["𝞄","y"],["𝞅","f"],["𝞆","x"],["𝞇","ps"],["𝞈","o"],["𝞉","a"],["𝞊","e"],["𝞋","i"],["𝞌","k"],["𝞍","f"],["𝞎","r"],["𝞏","p"],["𝞐","A"],["𝞑","V"],["𝞒","G"],["𝞓","D"],["𝞔","E"],["𝞕","Z"],["𝞖","I"],["𝞗","TH"],["𝞘","I"],["𝞙","K"],["𝞚","L"],["𝞛","M"],["𝞜","N"],["𝞝","KS"],["𝞞","O"],["𝞟","P"],["𝞠","S"],["𝞡","TH"],["𝞢","S"],["𝞣","T"],["𝞤","Y"],["𝞥","F"],["𝞦","X"],["𝞧","PS"],["𝞨","O"],["𝞩","D"],["𝞪","av"],["𝞫","g"],["𝞬","d"],["𝞭","e"],["𝞮","z"],["𝞯","i"],["𝞰","i"],["𝞱","th"],["𝞲","i"],["𝞳","k"],["𝞴","l"],["𝞵","m"],["𝞶","n"],["𝞷","ks"],["𝞸","o"],["𝞹","p"],["𝞺","r"],["𝞻","s"],["𝞼","s"],["𝞽","t"],["𝞾","y"],["𝞿","f"],["𝟀","x"],["𝟁","ps"],["𝟂","o"],["𝟃","a"],["𝟄","e"],["𝟅","i"],["𝟆","k"],["𝟇","f"],["𝟈","r"],["𝟉","p"],["𝟊","F"],["𝟋","f"],["⒜","(a)"],["⒝","(b)"],["⒞","(c)"],["⒟","(d)"],["⒠","(e)"],["⒡","(f)"],["⒢","(g)"],["⒣","(h)"],["⒤","(i)"],["⒥","(j)"],["⒦","(k)"],["⒧","(l)"],["⒨","(m)"],["⒩","(n)"],["⒪","(o)"],["⒫","(p)"],["⒬","(q)"],["⒭","(r)"],["⒮","(s)"],["⒯","(t)"],["⒰","(u)"],["⒱","(v)"],["⒲","(w)"],["⒳","(x)"],["⒴","(y)"],["⒵","(z)"],["Ⓐ","(A)"],["Ⓑ","(B)"],["Ⓒ","(C)"],["Ⓓ","(D)"],["Ⓔ","(E)"],["Ⓕ","(F)"],["Ⓖ","(G)"],["Ⓗ","(H)"],["Ⓘ","(I)"],["Ⓙ","(J)"],["Ⓚ","(K)"],["Ⓛ","(L)"],["Ⓝ","(N)"],["Ⓞ","(O)"],["Ⓟ","(P)"],["Ⓠ","(Q)"],["Ⓡ","(R)"],["Ⓢ","(S)"],["Ⓣ","(T)"],["Ⓤ","(U)"],["Ⓥ","(V)"],["Ⓦ","(W)"],["Ⓧ","(X)"],["Ⓨ","(Y)"],["Ⓩ","(Z)"],["ⓐ","(a)"],["ⓑ","(b)"],["ⓒ","(b)"],["ⓓ","(c)"],["ⓔ","(e)"],["ⓕ","(f)"],["ⓖ","(g)"],["ⓗ","(h)"],["ⓘ","(i)"],["ⓙ","(j)"],["ⓚ","(k)"],["ⓛ","(l)"],["ⓜ","(m)"],["ⓝ","(n)"],["ⓞ","(o)"],["ⓟ","(p)"],["ⓠ","(q)"],["ⓡ","(r)"],["ⓢ","(s)"],["ⓣ","(t)"],["ⓤ","(u)"],["ⓥ","(v)"],["ⓦ","(w)"],["ⓧ","(x)"],["ⓨ","(y)"],["ⓩ","(z)"],["Ċ","C"],["ċ","c"],["Ġ","G"],["ġ","g"],["Ħ","H"],["ħ","h"],["Ż","Z"],["ż","z"],["𝟎","0"],["𝟏","1"],["𝟐","2"],["𝟑","3"],["𝟒","4"],["𝟓","5"],["𝟔","6"],["𝟕","7"],["𝟖","8"],["𝟗","9"],["𝟘","0"],["𝟙","1"],["𝟚","2"],["𝟛","3"],["𝟜","4"],["𝟝","5"],["𝟞","6"],["𝟟","7"],["𝟠","8"],["𝟡","9"],["𝟢","0"],["𝟣","1"],["𝟤","2"],["𝟥","3"],["𝟦","4"],["𝟧","5"],["𝟨","6"],["𝟩","7"],["𝟪","8"],["𝟫","9"],["𝟬","0"],["𝟭","1"],["𝟮","2"],["𝟯","3"],["𝟰","4"],["𝟱","5"],["𝟲","6"],["𝟳","7"],["𝟴","8"],["𝟵","9"],["𝟶","0"],["𝟷","1"],["𝟸","2"],["𝟹","3"],["𝟺","4"],["𝟻","5"],["𝟼","6"],["𝟽","7"],["𝟾","8"],["𝟿","9"],["①","1"],["②","2"],["③","3"],["④","4"],["⑤","5"],["⑥","6"],["⑦","7"],["⑧","8"],["⑨","9"],["⑩","10"],["⑪","11"],["⑫","12"],["⑬","13"],["⑭","14"],["⑮","15"],["⑯","16"],["⑰","17"],["⑱","18"],["⑲","19"],["⑳","20"],["⑴","1"],["⑵","2"],["⑶","3"],["⑷","4"],["⑸","5"],["⑹","6"],["⑺","7"],["⑻","8"],["⑼","9"],["⑽","10"],["⑾","11"],["⑿","12"],["⒀","13"],["⒁","14"],["⒂","15"],["⒃","16"],["⒄","17"],["⒅","18"],["⒆","19"],["⒇","20"],["⒈","1."],["⒉","2."],["⒊","3."],["⒋","4."],["⒌","5."],["⒍","6."],["⒎","7."],["⒏","8."],["⒐","9."],["⒑","10."],["⒒","11."],["⒓","12."],["⒔","13."],["⒕","14."],["⒖","15."],["⒗","16."],["⒘","17."],["⒙","18."],["⒚","19."],["⒛","20."],["⓪","0"],["⓫","11"],["⓬","12"],["⓭","13"],["⓮","14"],["⓯","15"],["⓰","16"],["⓱","17"],["⓲","18"],["⓳","19"],["⓴","20"],["⓵","1"],["⓶","2"],["⓷","3"],["⓸","4"],["⓹","5"],["⓺","6"],["⓻","7"],["⓼","8"],["⓽","9"],["⓾","10"],["⓿","0"],["🙰","&"],["🙱","&"],["🙲","&"],["🙳","&"],["🙴","&"],["🙵","&"],["🙶",'"'],["🙷",'"'],["🙸",'"'],["‽","?!"],["🙹","?!"],["🙺","?!"],["🙻","?!"],["🙼","/"],["🙽","\\"],["🜇","AR"],["🜈","V"],["🜉","V"],["🜆","VR"],["🜅","VF"],["🜩","2"],["🜪","5"],["🝡","f"],["🝢","W"],["🝣","U"],["🝧","V"],["🝨","T"],["🝪","V"],["🝫","MB"],["🝬","VB"],["🝲","3B"],["🝳","3B"],["💯","100"],["🔙","BACK"],["🔚","END"],["🔛","ON!"],["🔜","SOON"],["🔝","TOP"],["🔞","18"],["🔤","abc"],["🔠","ABCD"],["🔡","abcd"],["🔢","1234"],["🔣","T&@%"],["#️⃣","#"],["*️⃣","*"],["0️⃣","0"],["1️⃣","1"],["2️⃣","2"],["3️⃣","3"],["4️⃣","4"],["5️⃣","5"],["6️⃣","6"],["7️⃣","7"],["8️⃣","8"],["9️⃣","9"],["🔟","10"],["🅰️","A"],["🅱️","B"],["🆎","AB"],["🆑","CL"],["🅾️","O"],["🅿","P"],["🆘","SOS"],["🅲","C"],["🅳","D"],["🅴","E"],["🅵","F"],["🅶","G"],["🅷","H"],["🅸","I"],["🅹","J"],["🅺","K"],["🅻","L"],["🅼","M"],["🅽","N"],["🆀","Q"],["🆁","R"],["🆂","S"],["🆃","T"],["🆄","U"],["🆅","V"],["🆆","W"],["🆇","X"],["🆈","Y"],["🆉","Z"]];function i(a,i){if("string"!=typeof a)throw new TypeError("Expected a string, got `"+typeof a+"`");i=t({customReplacements:[]},i);var s=new Map([].concat(n,i.customReplacements));return a=function(e,t){for(var a,n=function(e,t){var a="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(a)return (a=a.call(e)).next.bind(a);if(Array.isArray(e)||(a=function(e,t){if(e){if("string"==typeof e)return r(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return "Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?r(e,t):void 0}}(e))){a&&(e=a);var o=0;return function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(t);!(a=n()).done;){var i=a.value,s=i[1];e=e.replace(new RegExp(o(i[0]),"g"),s);}return e}(a=a.normalize(),s),lodash_deburr(a)}

    var index_module = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': i
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const emptyString$1 = '';

    /**
    @private
    */
    class StringScanner {
      /**
      @param {string} string
      */
      constructor(string) {
        /** @type {string[]} */
        this.chars = [ ...string ];

        /** @type {number} */
        this.charCount = this.chars.length;

        /** @type {number} */
        this.charIndex = 0;

        /** @type {number[]} */
        this.charsToBytes = new Array(this.charCount);

        /** @type {boolean} */
        this.multiByteMode = false;

        /** @type {string} */
        this.string = string;

        let { chars, charCount, charsToBytes } = this;

        if (charCount === string.length) {
          // There are no multibyte characters in the input string, so char indexes
          // and byte indexes are the same.
          for (let i = 0; i < charCount; ++i) {
            charsToBytes[i] = i;
          }
        } else {
          // Create a mapping of character indexes to byte indexes. When the string
          // contains multibyte characters, a byte index may not necessarily align
          // with a character index.
          for (let byteIndex = 0, charIndex = 0; charIndex < charCount; ++charIndex) {
            charsToBytes[charIndex] = byteIndex;
            byteIndex += chars[charIndex].length;
          }

          this.multiByteMode = true;
        }
      }

      /**
      Whether the current character index is at the end of the input string.

      @type {boolean}
      */
      get isEnd() {
        return this.charIndex >= this.charCount;
      }

      // -- Protected Methods ------------------------------------------------------

      /**
      Returns the number of characters in the given _string_, which may differ from
      the byte length if the string contains multibyte characters.

      @param {string} string
      @returns {number}
      */
      _charLength(string) {
        let { length } = string;

        if (length < 2 || !this.multiByteMode) {
          return length;
        }

        // We could get the char length with `[ ...string ].length`, but that's
        // actually slower than this approach, which replaces surrogate pairs with
        // single-byte characters.
        return string.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, '_').length;
      }

      // -- Public Methods ---------------------------------------------------------

      /**
      Advances the scanner by the given number of characters, stopping if the end of
      the string is reached.

      @param {number} [count]
      */
      advance(count = 1) {
        this.charIndex = Math.min(this.charCount, this.charIndex + count);
      }

      /**
      Consumes and returns the given number of characters if possible, advancing the
      scanner and stopping if the end of the string is reached.

      If no characters could be consumed, an empty string will be returned.

      @param {number} [count]
      @returns {string}
      */
      consume(count = 1) {
        let chars = this.peek(count);
        this.advance(count);
        return chars;
      }

      /**
      Consumes a match for the given sticky regex, advances the scanner, updates the
      `lastIndex` property of the regex, and returns the matching string.

      The regex must have a sticky flag ("y") so that its `lastIndex` prop can be
      used to anchor the match at the current scanner position.

      Returns the consumed string, or an empty string if nothing was consumed.

      @param {RegExp} regex
      @returns {string}
      */
      consumeMatch(regex) {
        if (!regex.sticky) {
          throw new Error('`regex` must have a sticky flag ("y")');
        }

        regex.lastIndex = this.charsToBytes[this.charIndex];

        let result = regex.exec(this.string);

        if (result === null) {
          return emptyString$1;
        }

        let match = result[0];
        this.advance(this._charLength(match));
        return match;
      }

      /**
      Consumes and returns all characters for which the given function returns a
      truthy value, stopping on the first falsy return value or if the end of the
      input is reached.

      @param {(char: string) => boolean} fn
      @returns {string}
      */
      consumeMatchFn(fn) {
        let startIndex = this.charIndex;

        while (!this.isEnd && fn(this.peek())) {
          this.advance();
        }

        return this.charIndex > startIndex
          ? this.string.slice(this.charsToBytes[startIndex], this.charsToBytes[this.charIndex])
          : emptyString$1;
      }

      /**
      Consumes the given string if it exists at the current character index, and
      advances the scanner.

      If the given string doesn't exist at the current character index, an empty
      string will be returned and the scanner will not be advanced.

      @param {string} stringToConsume
      @returns {string}
      */
      consumeString(stringToConsume) {
        if (this.consumeStringFast(stringToConsume)) {
          return stringToConsume;
        }

        if (!this.multiByteMode) {
          return emptyString$1;
        }

        let { length } = stringToConsume;
        let charLengthToMatch = this._charLength(stringToConsume);

        if (charLengthToMatch !== length
            && stringToConsume === this.peek(charLengthToMatch)) {

          this.advance(charLengthToMatch);
          return stringToConsume;
        }

        return emptyString$1;
      }

      /**
       * Does the same thing as `consumeString()`, but doesn't support consuming
       * multibyte characters. This can be much faster if you only need to match
       * single byte characters.
       *
       * @param {string} stringToConsume
       * @returns {string}
       */
      consumeStringFast(stringToConsume) {
        if (this.peek() === stringToConsume[0]) {
          let { length } = stringToConsume;

          if (length === 1) {
            this.advance();
            return stringToConsume;
          }

          if (this.peek(length) === stringToConsume) {
            this.advance(length);
            return stringToConsume;
          }
        }

        return emptyString$1;
      }

      /**
      Consumes characters until the given global regex is matched, advancing the
      scanner up to (but not beyond) the beginning of the match and updating the
      `lastIndex` property of the regex.

      The regex must have a global flag ("g") so that its `lastIndex` prop can be
      used to begin the search at the current scanner position.

      Returns the consumed string, or an empty string if nothing was consumed.

      @param {RegExp} regex
      @returns {string}
      */
      consumeUntilMatch(regex) {
        if (!regex.global) {
          throw new Error('`regex` must have a global flag ("g")');
        }

        let byteIndex = this.charsToBytes[this.charIndex];
        regex.lastIndex = byteIndex;

        let match = regex.exec(this.string);

        if (match === null || match.index === byteIndex) {
          return emptyString$1;
        }

        let result = this.string.slice(byteIndex, match.index);
        this.advance(this._charLength(result));
        return result;
      }

      /**
      Consumes characters until the given string is found, advancing the scanner up
      to (but not beyond) that point.

      Returns the consumed string, or an empty string if nothing was consumed.

      @param {string} searchString
      @returns {string}
      */
      consumeUntilString(searchString) {
        let { charIndex, charsToBytes, string } = this;
        let byteIndex = charsToBytes[charIndex];
        let matchByteIndex = string.indexOf(searchString, byteIndex);

        if (matchByteIndex <= 0) {
          return emptyString$1;
        }

        let result = string.slice(byteIndex, matchByteIndex);
        this.advance(this._charLength(result));
        return result;
      }

      /**
      Returns the given number of characters starting at the current character
      index, without advancing the scanner and without exceeding the end of the
      input string.

      @param {number} [count]
      @returns {string}
      */
      peek(count = 1) {
        // Inlining this comparison instead of checking `this.isEnd` improves perf
        // slightly since `peek()` is called so frequently.
        if (this.charIndex >= this.charCount) {
          return emptyString$1;
        }

        if (count === 1) {
          return this.chars[this.charIndex];
        }

        let { charsToBytes, charIndex } = this;
        return this.string.slice(charsToBytes[charIndex], charsToBytes[charIndex + count]);
      }

      /**
      Resets the scanner position to the given character _index_, or to the start of
      the input string if no index is given.

      If _index_ is negative, the scanner position will be moved backward by that
      many characters, stopping if the beginning of the string is reached.

      @param {number} [index]
      */
      reset(index = 0) {
        this.charIndex = index >= 0
          ? Math.min(this.charCount, index)
          : Math.max(0, this.charIndex + index);
      }
    }

    var StringScanner_1 = StringScanner;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // -- Exported Constants -------------------------------------------------------

    /**
    Mapping of predefined entity names to their replacement values.

    @type {Readonly<{[name: string]: string}>}
    @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-predefined-ent
    */
    const predefinedEntities = Object.freeze(Object.assign(Object.create(null), {
      amp: '&',
      apos: "'",
      gt: '>',
      lt: '<',
      quot: '"'
    }));

    var predefinedEntities_1 = predefinedEntities;

    // -- Exported Functions -------------------------------------------------------

    /**
    Returns `true` if _char_ is an XML `NameChar`, `false` if it isn't.

    @param {string} char
    @returns {boolean}
    @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-NameChar
    */
    function isNameChar(char) {
      if (isNameStartChar(char)) {
        return true;
      }

      let cp = getCodePoint(char);

      return cp === 0x2D // -
        || cp === 0x2E // .
        || (cp >= 0x30 && cp <= 0x39) // 0-9
        || cp === 0xB7
        || (cp >= 0x300 && cp <= 0x36F)
        || (cp >= 0x203F && cp <= 0x2040);
    }

    var isNameChar_1 = isNameChar;

    /**
    Returns `true` if _char_ is an XML `NameStartChar`, `false` if it isn't.

    @param {string} char
    @returns {boolean}
    @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-NameStartChar
    */
    function isNameStartChar(char) {
      let cp = getCodePoint(char);

      return cp === 0x3A // :
        || cp === 0x5F // _
        || (cp >= 0x41 && cp <= 0x5A) // A-Z
        || (cp >= 0x61 && cp <= 0x7A) // a-z
        || (cp >= 0xC0 && cp <= 0xD6)
        || (cp >= 0xD8 && cp <= 0xF6)
        || (cp >= 0xF8 && cp <= 0x2FF)
        || (cp >= 0x370 && cp <= 0x37D)
        || (cp >= 0x37F && cp <= 0x1FFF)
        || (cp >= 0x200C && cp <= 0x200D)
        || (cp >= 0x2070 && cp <= 0x218F)
        || (cp >= 0x2C00 && cp <= 0x2FEF)
        || (cp >= 0x3001 && cp <= 0xD7FF)
        || (cp >= 0xF900 && cp <= 0xFDCF)
        || (cp >= 0xFDF0 && cp <= 0xFFFD)
        || (cp >= 0x10000 && cp <= 0xEFFFF);
    }

    var isNameStartChar_1 = isNameStartChar;

    /**
    Returns `true` if _char_ is not a valid XML `Char`, `false` otherwise.

    @param {string} char
    @returns {boolean}
    @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Char
    */
    function isNotXmlChar(char) {
      return !isXmlChar(char);
    }

    var isNotXmlChar_1 = isNotXmlChar;

    /**
    Returns `true` if _char_ is a valid reference character (which may appear
    between `&` and `;` in a reference), `false` otherwise.

    @param {string} char
    @returns {boolean}
    @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-references
    */
    function isReferenceChar(char) {
      return char === '#' || isNameChar(char);
    }

    var isReferenceChar_1 = isReferenceChar;

    /**
    Returns `true` if _char_ is an XML whitespace character, `false` otherwise.

    @param {string} char
    @returns {boolean}
    @see https://www.w3.org/TR/2008/REC-xml-20081126/#white
    */
    function isWhitespace(char) {
      let cp = getCodePoint(char);

      return cp === 0x20
        || cp === 0x9
        || cp === 0xA
        || cp === 0xD;
    }

    var isWhitespace_1 = isWhitespace;

    /**
    Returns `true` if _char_ is a valid XML `Char`, `false` otherwise.

    @param {string} char
    @returns {boolean}
    @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Char
    */
    function isXmlChar(char) {
      let cp = getCodePoint(char);

      return cp === 0x9
        || cp === 0xA
        || cp === 0xD
        || (cp >= 0x20 && cp <= 0xD7FF)
        || (cp >= 0xE000 && cp <= 0xFFFD)
        || (cp >= 0x10000 && cp <= 0x10FFFF);
    }

    var isXmlChar_1 = isXmlChar;

    // -- Private Functions --------------------------------------------------------

    /**
    Returns the Unicode code point value of the given character, or `-1` if _char_
    is empty.

    @param {string} char
    @returns {number}
    */
    function getCodePoint(char) {
      return char.codePointAt(0) || -1;
    }

    var syntax = {
    	predefinedEntities: predefinedEntities_1,
    	isNameChar: isNameChar_1,
    	isNameStartChar: isNameStartChar_1,
    	isNotXmlChar: isNotXmlChar_1,
    	isReferenceChar: isReferenceChar_1,
    	isWhitespace: isWhitespace_1,
    	isXmlChar: isXmlChar_1
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
    Base interface for a node in an XML document.

    @public
    */
    class XmlNode {
      constructor() {
        /**
        Parent node of this node, or `null` if this node has no parent.

        @type {XmlDocument|XmlElement|null}
        @public
        */
        this.parent = null;
      }

      /**
      Document that contains this node, or `null` if this node is not associated
      with a document.

      @type {XmlDocument?}
      @public
      */
      get document() {
        return this.parent
          ? this.parent.document
          : null;
      }

      /**
      Whether this node is the root node of the document.

      @returns {boolean}
      @public
      */
      get isRootNode() {
        return this.parent
          ? this.parent === this.document
          : false;
      }

      /**
      Whether whitespace should be preserved in the content of this element and
      its children.

      This is influenced by the value of the special `xml:space` attribute, and
      will be `true` for any node whose `xml:space` attribute is set to
      "preserve". If a node has no such attribute, it will inherit the value of
      the nearest ancestor that does (if any).

      @type {boolean}
      @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-white-space
      @public
      */
      get preserveWhitespace() {
        return Boolean(this.parent && this.parent.preserveWhitespace);
      }

      /**
      Type of this node.

      The value of this property is a string that matches one of the static `TYPE_*`
      properties on the `XmlNode` class (e.g. `TYPE_ELEMENT`, `TYPE_TEXT`, etc.).

      The `XmlNode` class itself is a base class and doesn't have its own type name.

      @type {string}
      @public
      */
      get type() {
        return '';
      }

      /**
      Returns a JSON-serializable object representing this node, minus properties
      that could result in circular references.

      @returns {{[key: string]: any}}
      @public
      */
      toJSON() {
        /** @type {{[key: string]: any}} */
        let json = {
          type: this.type
        };

        if (this.isRootNode) {
          json.isRootNode = true;
        }

        if (this.preserveWhitespace) {
          json.preserveWhitespace = true;
        }

        return json;
      }
    }

    /**
    Type value for an `XmlCdata` node.

    @type {string}
    @public
    */
    XmlNode.TYPE_CDATA = 'cdata';

    /**
    Type value for an `XmlComment` node.

    @type {string}
    @public
    */
    XmlNode.TYPE_COMMENT = 'comment';

    /**
    Type value for an `XmlDocument` node.

    @type {string}
    @public
    */
    XmlNode.TYPE_DOCUMENT = 'document';

    /**
    Type value for an `XmlElement` node.

    @type {string}
    @public
    */
    XmlNode.TYPE_ELEMENT = 'element';

    /**
    Type value for an `XmlProcessingInstruction` node.

    @type {string}
    @public
    */
    XmlNode.TYPE_PROCESSING_INSTRUCTION = 'pi';

    /**
    Type value for an `XmlText` node.

    @type {string}
    @public
    */
    XmlNode.TYPE_TEXT = 'text';

    var XmlNode_1 = XmlNode;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    /**
    Text content within an XML document.

    @public
    */
    class XmlText extends XmlNode_1 {
      /**
      @param {string} [text]
      */
      constructor(text = '') {
        super();

        /**
        Text content of this node.

        @type {string}
        @public
        */
        this.text = text;
      }

      get type() {
        return XmlNode_1.TYPE_TEXT;
      }

      toJSON() {
        return Object.assign(XmlNode_1.prototype.toJSON.call(this), {
          text: this.text
        });
      }
    }

    var XmlText_1 = XmlText;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};



    /**
    A CDATA section within an XML document.

    @public
    */
    class XmlCdata extends XmlText_1 {
      get type() {
        return XmlNode_1.TYPE_CDATA;
      }
    }

    var XmlCdata_1 = XmlCdata;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    /**
    A comment within an XML document.

    @public
    */
    class XmlComment extends XmlNode_1 {
      /**
      @param {string} [content]
      */
      constructor(content = '') {
        super();

        /**
        Content of this comment.

        @type {string}
        @public
        */
        this.content = content;
      }

      get type() {
        return XmlNode_1.TYPE_COMMENT;
      }

      toJSON() {
        return Object.assign(XmlNode_1.prototype.toJSON.call(this), {
          content: this.content
        });
      }
    }

    var XmlComment_1 = XmlComment;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    /**
    Element in an XML document.

    @public
    */
    class XmlElement extends XmlNode_1 {
      /**
      @param {string} name
      @param {{[attrName: string]: string}} [attributes]
      @param {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>} [children]
      */
      constructor(name, attributes = Object.create(null), children = []) {
        super();

        /**
        Name of this element.

        @type {string}
        @public
        */
        this.name = name;

        /**
        Attributes on this element.

        @type {{[attrName: string]: string}}
        @public
        */
        this.attributes = attributes;

        /**
        Child nodes of this element.

        @type {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>}
        @public
        */
        this.children = children;
      }

      /**
      Whether this node is empty (meaning it has no children).

      @type {boolean}
      @public
      */
      get isEmpty() {
        return this.children.length === 0;
      }

      /** @type {boolean} */
      get preserveWhitespace() {
        /** @type {XmlNode?} */
        let node = this;

        while (node instanceof XmlElement) {
          if ('xml:space' in node.attributes) {
            return node.attributes['xml:space'] === 'preserve';
          }

          node = node.parent;
        }

        return false;
      }

      /**
      Text content of this element and all its descendants.

      @type {string}
      @public
      */
      get text() {
        return this.children
          .map(child => 'text' in child ? child.text : '')
          .join('');
      }

      get type() {
        return XmlNode_1.TYPE_ELEMENT;
      }

      /** @returns {{[key: string]: any}} */
      toJSON() {
        return Object.assign(XmlNode_1.prototype.toJSON.call(this), {
          name: this.name,
          attributes: this.attributes,
          children: this.children.map(child => child.toJSON()),
        });
      }
    }

    var XmlElement_1 = XmlElement;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};



    /**
    Represents an XML document. All elements within the document are descendants of
    this node.

    @public
    */
    class XmlDocument extends XmlNode_1 {
      /**
      @param {Array<XmlComment|XmlElement|XmlProcessingInstruction>} [children]
      */
      constructor(children = []) {
        super();

        /**
        Child nodes of this document.

        @type {Array<XmlComment|XmlElement|XmlProcessingInstruction>}
        @public
        */
        this.children = children;
      }

      get document() {
        return this;
      }

      /**
      Root element of this document, or `null` if this document is empty.

      @type {XmlElement?}
      @public
      */
      get root() {
        // @ts-ignore
        return this.children.find((child) => child instanceof XmlElement_1) || null;
      }

      /**
      Text content of this document and all its descendants.

      @type {string}
      @public
      */
      get text() {
        return this.children
          .map(child => 'text' in child ? child.text : '')
          .join('');
      }

      get type() {
        return XmlNode_1.TYPE_DOCUMENT;
      }

      toJSON() {
        return Object.assign(XmlNode_1.prototype.toJSON.call(this), {
          children: this.children.map(child => child.toJSON()),
        });
      }
    }

    var XmlDocument_1 = XmlDocument;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    /**
    A processing instruction within an XML document.

    @public
    */
    class XmlProcessingInstruction extends XmlNode_1 {
      /**
      @param {string} name
      @param {string} [content]
      */
      constructor(name, content = '') {
        super();

        /**
        Name of this processing instruction. Also sometimes referred to as the
        processing instruction "target".

        @type {string}
        @public
        */
        this.name = name;

        /**
        Content of this processing instruction.

        @type {string}
        @public
        */
        this.content = content;
      }

      get type() {
        return XmlNode_1.TYPE_PROCESSING_INSTRUCTION;
      }

      toJSON() {
        return Object.assign(XmlNode_1.prototype.toJSON.call(this), {
          name: this.name,
          content: this.content
        });
      }
    }

    var XmlProcessingInstruction_1 = XmlProcessingInstruction;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};









    const emptyString = '';

    /**
    Parses an XML string into an `XmlDocument`.

    @private
    */
    class Parser {
      /**
      @param {string} xml
        XML string to parse.

      @param {object} [options]
        Parsing options.

        @param {boolean} [options.ignoreUndefinedEntities=false]
        @param {boolean} [options.preserveCdata=false]
        @param {boolean} [options.preserveComments=false]
        @param {(entity: string) => string?} [options.resolveUndefinedEntity]
        @param {boolean} [options.sortAttributes=false]
      */
      constructor(xml, options = {}) {
        /** @type {XmlDocument} */
        this.document = new XmlDocument_1();

        /** @type {XmlDocument|XmlElement} */
        this.currentNode = this.document;

        this.options = options;
        this.scanner = new StringScanner_1(normalizeXmlString(xml));

        this.consumeProlog();

        if (!this.consumeElement()) {
          this.error('Root element is missing or invalid');
        }

        while (this.consumeMisc()) {} // eslint-disable-line no-empty

        if (!this.scanner.isEnd) {
          this.error('Extra content at the end of the document');
        }
      }

      /**
      Adds the given `XmlNode` as a child of `this.currentNode`.

      @param {XmlNode} node
      */
      addNode(node) {
        node.parent = this.currentNode;

        // @ts-ignore
        this.currentNode.children.push(node);
      }

      /**
      Adds the given _text_ to the document, either by appending it to a preceding
      `XmlText` node (if possible) or by creating a new `XmlText` node.

      @param {string} text
      */
      addText(text) {
        let { children } = this.currentNode;

        if (children.length > 0) {
          let prevNode = children[children.length - 1];

          if (prevNode instanceof XmlText_1) {
            // The previous node is a text node, so we can append to it and avoid
            // creating another node.
            prevNode.text += text;
            return;
          }
        }

        this.addNode(new XmlText_1(text));
      }

      /**
      Consumes an `AttValue` (attribute value) if possible.

      @returns {string|false}
        Contents of the `AttValue` minus quotes, or `false` if nothing was consumed.
        An empty string indicates that an `AttValue` was consumed but was empty.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-AttValue
      */
      consumeAttributeValue() {
        let { scanner } = this;
        let quote = scanner.peek();

        if (quote !== '"' && quote !== "'") {
          return false;
        }

        scanner.advance();

        let chars;
        let isClosed = false;
        let value = emptyString;
        let regex = quote === '"'
          ? /[^"&<]+/y
          : /[^'&<]+/y;

        matchLoop: while (!scanner.isEnd) {
          chars = scanner.consumeMatch(regex);

          if (chars) {
            this.validateChars(chars);
            value += chars.replace(/[\t\r\n]/g, ' ');
          }

          let nextChar = scanner.peek();

          switch (nextChar) {
            case quote:
              isClosed = true;
              break matchLoop;

            case '&':
              value += this.consumeReference();
              continue;

            case '<':
              this.error('Unescaped `<` is not allowed in an attribute value'); /* istanbul ignore next */
              break;

            case emptyString:
              this.error('Unclosed attribute'); /* istanbul ignore next */
              break;

          }
        }

        if (!isClosed) {
          this.error('Unclosed attribute');
        }

        scanner.advance();
        return value;
      }

      /**
      Consumes a CDATA section if possible.

      @returns {boolean}
        Whether a CDATA section was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-cdata-sect
      */
      consumeCdataSection() {
        let { scanner } = this;

        if (!scanner.consumeStringFast('<![CDATA[')) {
          return false;
        }

        let text = scanner.consumeUntilString(']]>');
        this.validateChars(text);

        if (!scanner.consumeStringFast(']]>')) {
          this.error('Unclosed CDATA section');
        }

        if (this.options.preserveCdata) {
          this.addNode(new XmlCdata_1(text));
        } else {
          this.addText(text);
        }

        return true;
      }

      /**
      Consumes character data if possible.

      @returns {boolean}
        Whether character data was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#dt-chardata
      */
      consumeCharData() {
        let { scanner } = this;
        let charData = scanner.consumeUntilMatch(/<|&|]]>/g);

        if (!charData) {
          return false;
        }

        this.validateChars(charData);

        if (scanner.peek() === ']' && scanner.peek(3) === ']]>') {
          this.error('Element content may not contain the CDATA section close delimiter `]]>`');
        }

        this.addText(charData);
        return true;
      }

      /**
      Consumes a comment if possible.

      @returns {boolean}
        Whether a comment was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Comment
      */
      consumeComment() {
        let { scanner } = this;

        if (!scanner.consumeStringFast('<!--')) {
          return false;
        }

        let content = scanner.consumeUntilString('--');
        this.validateChars(content);

        if (!scanner.consumeStringFast('-->')) {
          if (scanner.peek(2) === '--') {
            this.error("The string `--` isn't allowed inside a comment");
          } else {
            this.error('Unclosed comment');
          }
        }

        if (this.options.preserveComments) {
          this.addNode(new XmlComment_1(content.trim()));
        }

        return true;
      }

      /**
      Consumes a reference in a content context if possible.

      This differs from `consumeReference()` in that a consumed reference will be
      added to the document as a text node instead of returned.

      @returns {boolean}
        Whether a reference was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#entproc
      */
      consumeContentReference() {
        let ref = this.consumeReference();

        if (ref) {
          this.addText(ref);
          return true;
        }

        return false;
      }

      /**
      Consumes a doctype declaration if possible.

      This is a loose implementation since doctype declarations are currently
      discarded without further parsing.

      @returns {boolean}
        Whether a doctype declaration was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#dtd
      */
      consumeDoctypeDeclaration() {
        let { scanner } = this;

        if (!scanner.consumeStringFast('<!DOCTYPE')
            || !this.consumeWhitespace()) {

          return false;
        }

        scanner.consumeMatch(/[^[>]+/y);

        if (scanner.consumeMatch(/\[[\s\S]+?\][\x20\t\r\n]*>/y)) {
          return true;
        }

        if (!scanner.consumeStringFast('>')) {
          this.error('Unclosed doctype declaration');
        }

        return true;
      }

      /**
      Consumes an element if possible.

      @returns {boolean}
        Whether an element was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-element
      */
      consumeElement() {
        let { scanner } = this;
        let mark = scanner.charIndex;

        if (scanner.peek() !== '<') {
          return false;
        }

        scanner.advance();
        let name = this.consumeName();

        if (!name) {
          scanner.reset(mark);
          return false;
        }

        let attributes = Object.create(null);

        while (this.consumeWhitespace()) {
          let attrName = this.consumeName();

          if (!attrName) {
            continue;
          }

          let attrValue = this.consumeEqual()
            && this.consumeAttributeValue();

          if (attrValue === false) {
            this.error('Attribute value expected');
          }

          if (attrName in attributes) {
            this.error(`Duplicate attribute: ${attrName}`);
          }

          if (attrName === 'xml:space'
              && attrValue !== 'default'
              && attrValue !== 'preserve') {

            this.error('Value of the `xml:space` attribute must be "default" or "preserve"');
          }

          attributes[attrName] = attrValue;
        }

        if (this.options.sortAttributes) {
          let attrNames = Object.keys(attributes).sort();
          let sortedAttributes = Object.create(null);

          for (let i = 0; i < attrNames.length; ++i) {
            let attrName = attrNames[i];
            sortedAttributes[attrName] = attributes[attrName];
          }

          attributes = sortedAttributes;
        }

        let isEmpty = Boolean(scanner.consumeStringFast('/>'));
        let element = new XmlElement_1(name, attributes);

        element.parent = this.currentNode;

        if (!isEmpty) {
          if (!scanner.consumeStringFast('>')) {
            this.error(`Unclosed start tag for element \`${name}\``);
          }

          this.currentNode = element;
          this.consumeCharData();

          while (
            this.consumeElement()
              || this.consumeContentReference()
              || this.consumeCdataSection()
              || this.consumeProcessingInstruction()
              || this.consumeComment()
          ) {
            this.consumeCharData();
          }

          let endTagMark = scanner.charIndex;
          let endTagName;

          if (!scanner.consumeStringFast('</')
              || !(endTagName = this.consumeName())
              || endTagName !== name) {

            scanner.reset(endTagMark);
            this.error(`Missing end tag for element ${name}`);
          }

          this.consumeWhitespace();

          if (!scanner.consumeStringFast('>')) {
            this.error(`Unclosed end tag for element ${name}`);
          }

          this.currentNode = element.parent;
        }

        this.addNode(element);
        return true;
      }

      /**
      Consumes an `Eq` production if possible.

      @returns {boolean}
        Whether an `Eq` production was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Eq
      */
      consumeEqual() {
        this.consumeWhitespace();

        if (this.scanner.consumeStringFast('=')) {
          this.consumeWhitespace();
          return true;
        }

        return false;
      }

      /**
      Consumes `Misc` content if possible.

      @returns {boolean}
        Whether anything was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Misc
      */
      consumeMisc() {
        return this.consumeComment()
          || this.consumeProcessingInstruction()
          || this.consumeWhitespace();
      }

      /**
      Consumes one or more `Name` characters if possible.

      @returns {string}
        `Name` characters, or an empty string if none were consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Name
      */
      consumeName() {
        return syntax.isNameStartChar(this.scanner.peek())
          ? this.scanner.consumeMatchFn(syntax.isNameChar)
          : emptyString;
      }

      /**
      Consumes a processing instruction if possible.

      @returns {boolean}
        Whether a processing instruction was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-pi
      */
      consumeProcessingInstruction() {
        let { scanner } = this;
        let mark = scanner.charIndex;

        if (!scanner.consumeStringFast('<?')) {
          return false;
        }

        let name = this.consumeName();

        if (name) {
          if (name.toLowerCase() === 'xml') {
            scanner.reset(mark);
            this.error("XML declaration isn't allowed here");
          }
        } else {
          this.error('Invalid processing instruction');
        }

        if (!this.consumeWhitespace()) {
          if (scanner.consumeStringFast('?>')) {
            this.addNode(new XmlProcessingInstruction_1(name));
            return true;
          }

          this.error('Whitespace is required after a processing instruction name');
        }

        let content = scanner.consumeUntilString('?>');
        this.validateChars(content);

        if (!scanner.consumeStringFast('?>')) {
          this.error('Unterminated processing instruction');
        }

        this.addNode(new XmlProcessingInstruction_1(name, content));
        return true;
      }

      /**
      Consumes a prolog if possible.

      @returns {boolean}
        Whether a prolog was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-prolog-dtd
      */
      consumeProlog() {
        let { scanner } = this;
        let mark = scanner.charIndex;

        this.consumeXmlDeclaration();

        while (this.consumeMisc()) {} // eslint-disable-line no-empty

        if (this.consumeDoctypeDeclaration()) {
          while (this.consumeMisc()) {} // eslint-disable-line no-empty
        }

        return mark < scanner.charIndex;
      }

      /**
      Consumes a reference if possible.

      This differs from `consumeContentReference()` in that a consumed reference
      will be returned rather than added to the document.

      @returns {string|false}
        Parsed reference value, or `false` if nothing was consumed (to distinguish
        from a reference that resolves to an empty string).

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Reference
      */
      consumeReference() {
        let { scanner } = this;

        if (scanner.peek() !== '&') {
          return false;
        }

        scanner.advance();

        let ref = scanner.consumeMatchFn(syntax.isReferenceChar);

        if (scanner.consume() !== ';') {
          this.error('Unterminated reference (a reference must end with `;`)');
        }

        let parsedValue;

        if (ref[0] === '#') {
          // This is a character reference.
          let codePoint = ref[1] === 'x'
            ? parseInt(ref.slice(2), 16) // Hex codepoint.
            : parseInt(ref.slice(1), 10); // Decimal codepoint.

          if (isNaN(codePoint)) {
            this.error('Invalid character reference');
          }

          parsedValue = String.fromCodePoint(codePoint);

          if (!syntax.isXmlChar(parsedValue)) {
            this.error('Character reference resolves to an invalid character');
          }
        } else {
          // This is an entity reference.
          parsedValue = syntax.predefinedEntities[ref];

          if (parsedValue === undefined) {
            let {
              ignoreUndefinedEntities,
              resolveUndefinedEntity
            } = this.options;

            let wrappedRef = `&${ref};`; // for backcompat with <= 2.x

            if (resolveUndefinedEntity) {
              let resolvedValue = resolveUndefinedEntity(wrappedRef);

              if (resolvedValue !== null && resolvedValue !== undefined) {
                let type = typeof resolvedValue;

                if (type !== 'string') {
                  throw new TypeError(`\`resolveUndefinedEntity()\` must return a string, \`null\`, or \`undefined\`, but returned a value of type ${type}`);
                }

                return resolvedValue;
              }
            }

            if (ignoreUndefinedEntities) {
              return wrappedRef;
            }

            scanner.reset(-wrappedRef.length);
            this.error(`Named entity isn't defined: ${wrappedRef}`);
          }
        }

        return parsedValue;
      }

      /**
      Consumes a `SystemLiteral` if possible.

      A `SystemLiteral` is similar to an attribute value, but allows the characters
      `<` and `&` and doesn't replace references.

      @returns {string|false}
        Value of the `SystemLiteral` minus quotes, or `false` if nothing was
        consumed. An empty string indicates that a `SystemLiteral` was consumed but
        was empty.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-SystemLiteral
      */
      consumeSystemLiteral() {
        let { scanner } = this;
        let quote = scanner.consumeStringFast('"') || scanner.consumeStringFast("'");

        if (!quote) {
          return false;
        }

        let value = scanner.consumeUntilString(quote);
        this.validateChars(value);

        if (!scanner.consumeStringFast(quote)) {
          this.error('Missing end quote');
        }

        return value;
      }

      /**
      Consumes one or more whitespace characters if possible.

      @returns {boolean}
        Whether any whitespace characters were consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#white
      */
      consumeWhitespace() {
        return Boolean(this.scanner.consumeMatchFn(syntax.isWhitespace));
      }

      /**
      Consumes an XML declaration if possible.

      @returns {boolean}
        Whether an XML declaration was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-XMLDecl
      */
      consumeXmlDeclaration() {
        let { scanner } = this;

        if (!scanner.consumeStringFast('<?xml')) {
          return false;
        }

        if (!this.consumeWhitespace()) {
          this.error('Invalid XML declaration');
        }

        let version = Boolean(scanner.consumeStringFast('version'))
          && this.consumeEqual()
          && this.consumeSystemLiteral();

        if (version === false) {
          this.error('XML version is missing or invalid');
        } else if (!/^1\.[0-9]+$/.test(version)) {
          this.error('Invalid character in version number');
        }

        if (this.consumeWhitespace()) {
          let encoding = Boolean(scanner.consumeStringFast('encoding'))
            && this.consumeEqual()
            && this.consumeSystemLiteral();

          if (encoding) {
            this.consumeWhitespace();
          }

          let standalone = Boolean(scanner.consumeStringFast('standalone'))
            && this.consumeEqual()
            && this.consumeSystemLiteral();

          if (standalone) {
            if (standalone !== 'yes' && standalone !== 'no') {
              this.error('Only "yes" and "no" are permitted as values of `standalone`');
            }

            this.consumeWhitespace();
          }
        }

        if (!scanner.consumeStringFast('?>')) {
          this.error('Invalid or unclosed XML declaration');
        }

        return true;
      }

      /**
      Throws an error at the current scanner position.

      @param {string} message
      */
      error(message) {
        let { charIndex, string: xml } = this.scanner;
        let column = 1;
        let excerpt = '';
        let line = 1;

        // Find the line and column where the error occurred.
        for (let i = 0; i < charIndex; ++i) {
          let char = xml[i];

          if (char === '\n') {
            column = 1;
            excerpt = '';
            line += 1;
          } else {
            column += 1;
            excerpt += char;
          }
        }

        let eol = xml.indexOf('\n', charIndex);

        excerpt += eol === -1
          ? xml.slice(charIndex)
          : xml.slice(charIndex, eol);

        let excerptStart = 0;

        // Keep the excerpt below 50 chars, but always keep the error position in
        // view.
        if (excerpt.length > 50) {
          if (column < 40) {
            excerpt = excerpt.slice(0, 50);
          } else {
            excerptStart = column - 20;
            excerpt = excerpt.slice(excerptStart, column + 30);
          }
        }

        let err = new Error(
          `${message} (line ${line}, column ${column})\n`
            + `  ${excerpt}\n`
            + ' '.repeat(column - excerptStart + 1) + '^\n'
        );

        Object.assign(err, {
          column,
          excerpt,
          line,
          pos: charIndex
        });

        throw err;
      }

      /**
      Throws an invalid character error if any character in the given _string_ isn't
      a valid XML character.

      @param {string} string
      */
      validateChars(string) {
        let charIndex = 0;

        for (let char of string) {
          if (syntax.isNotXmlChar(char)) {
            this.scanner.reset(-([ ...string ].length - charIndex));
            this.error('Invalid character');
          }

          charIndex += 1;
        }
      }
    }

    var Parser_1 = Parser;

    // -- Private Functions --------------------------------------------------------

    /**
    Normalizes the given XML string by stripping a byte order mark (if present) and
    replacing CRLF sequences and lone CR characters with LF characters.

    @param {string} xml
    @returns {string}
    */
    function normalizeXmlString(xml) {
      if (xml[0] === '\uFEFF') {
        xml = xml.slice(1);
      }

      return xml.replace(/\r\n?/g, '\n');
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};









    /**
    Parses the given XML string and returns an `XmlDocument` instance representing
    the document tree.

    @example

      const parseXml = require('@rgrove/parse-xml');
      let doc = parseXml('<kittens fuzzy="yes">I like fuzzy kittens.</kittens>');

    @param {string} xml
      XML string to parse.

    @param {object} [options]
      Parsing options.

      @param {boolean} [options.ignoreUndefinedEntities=false]
        When `true`, an undefined named entity (like "&bogus;") will be left in the
        output as is instead of causing a parse error.

      @param {boolean} [options.preserveCdata=false]
        When `true`, CDATA sections will be preserved in the document as `XmlCdata`
        nodes. Otherwise CDATA sections will be represented as `XmlText` nodes,
        which keeps the node tree simpler and easier to work with.

      @param {boolean} [options.preserveComments=false]
        When `true`, comments will be preserved in the document as `XmlComment`
        nodes. Otherwise comments will not be included in the node tree.

      @param {(entity: string) => string?} [options.resolveUndefinedEntity]
        When an undefined named entity is encountered, this function will be called
        with the entity as its only argument. It should return a string value with
        which to replace the entity, or `null` or `undefined` to treat the entity as
        undefined (which may result in a parse error depending on the value of
        `ignoreUndefinedEntities`).

      @param {boolean} [options.sortAttributes=false]
        When `true`, attributes in an element's `attributes` object will be sorted
        in alphanumeric order by name. Otherwise they'll retain their original order
        as found in the XML.

    @returns {XmlDocument}
    @public
    */
    function parseXml(xml, options) {
      return (new Parser_1(xml, options)).document;
    }

    parseXml.XmlCdata = XmlCdata_1;
    parseXml.XmlComment = XmlComment_1;
    parseXml.XmlDocument = XmlDocument_1;
    parseXml.XmlElement = XmlElement_1;
    parseXml.XmlNode = XmlNode_1;
    parseXml.XmlProcessingInstruction = XmlProcessingInstruction_1;
    parseXml.XmlText = XmlText_1;

    var src = parseXml;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var ical = createCommonjsModule$1(function (module) {
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    /* istanbul ignore next */
    /* jshint ignore:start */
    {
      // CommonJS, where exports may be different each time.
      ICAL = module.exports;
    }
    /* jshint ignore:end */


    /**
     * The number of characters before iCalendar line folding should occur
     * @type {Number}
     * @default 75
     */
    ICAL.foldLength = 75;


    /**
     * The character(s) to be used for a newline. The default value is provided by
     * rfc5545.
     * @type {String}
     * @default "\r\n"
     */
    ICAL.newLineChar = '\r\n';


    /**
     * Helper functions used in various places within ical.js
     * @namespace
     */
    ICAL.helpers = {
      /**
       * Compiles a list of all referenced TZIDs in all subcomponents and
       * removes any extra VTIMEZONE subcomponents. In addition, if any TZIDs
       * are referenced by a component, but a VTIMEZONE does not exist,
       * an attempt will be made to generate a VTIMEZONE using ICAL.TimezoneService.
       *
       * @param {ICAL.Component} vcal     The top-level VCALENDAR component.
       * @return {ICAL.Component}         The ICAL.Component that was passed in.
       */
      updateTimezones: function(vcal) {
        var allsubs, properties, vtimezones, reqTzid, i, tzid;

        if (!vcal || vcal.name !== "vcalendar") {
          //not a top-level vcalendar component
          return vcal;
        }

        //Store vtimezone subcomponents in an object reference by tzid.
        //Store properties from everything else in another array
        allsubs = vcal.getAllSubcomponents();
        properties = [];
        vtimezones = {};
        for (i = 0; i < allsubs.length; i++) {
          if (allsubs[i].name === "vtimezone") {
            tzid = allsubs[i].getFirstProperty("tzid").getFirstValue();
            vtimezones[tzid] = allsubs[i];
          } else {
            properties = properties.concat(allsubs[i].getAllProperties());
          }
        }

        //create an object with one entry for each required tz
        reqTzid = {};
        for (i = 0; i < properties.length; i++) {
          if ((tzid = properties[i].getParameter("tzid"))) {
            reqTzid[tzid] = true;
          }
        }

        //delete any vtimezones that are not on the reqTzid list.
        for (i in vtimezones) {
          if (vtimezones.hasOwnProperty(i) && !reqTzid[i]) {
            vcal.removeSubcomponent(vtimezones[i]);
          }
        }

        //create any missing, but registered timezones
        for (i in reqTzid) {
          if (
            reqTzid.hasOwnProperty(i) &&
            !vtimezones[i] &&
            ICAL.TimezoneService.has(i)
          ) {
            vcal.addSubcomponent(ICAL.TimezoneService.get(i).component);
          }
        }

        return vcal;
      },

      /**
       * Checks if the given type is of the number type and also NaN.
       *
       * @param {Number} number     The number to check
       * @return {Boolean}          True, if the number is strictly NaN
       */
      isStrictlyNaN: function(number) {
        return typeof(number) === 'number' && isNaN(number);
      },

      /**
       * Parses a string value that is expected to be an integer, when the valid is
       * not an integer throws a decoration error.
       *
       * @param {String} string     Raw string input
       * @return {Number}           Parsed integer
       */
      strictParseInt: function(string) {
        var result = parseInt(string, 10);

        if (ICAL.helpers.isStrictlyNaN(result)) {
          throw new Error(
            'Could not extract integer from "' + string + '"'
          );
        }

        return result;
      },

      /**
       * Creates or returns a class instance of a given type with the initialization
       * data if the data is not already an instance of the given type.
       *
       * @example
       * var time = new ICAL.Time(...);
       * var result = ICAL.helpers.formatClassType(time, ICAL.Time);
       *
       * (result instanceof ICAL.Time)
       * // => true
       *
       * result = ICAL.helpers.formatClassType({}, ICAL.Time);
       * (result isntanceof ICAL.Time)
       * // => true
       *
       *
       * @param {Object} data       object initialization data
       * @param {Object} type       object type (like ICAL.Time)
       * @return {?}                An instance of the found type.
       */
      formatClassType: function formatClassType(data, type) {
        if (typeof(data) === 'undefined') {
          return undefined;
        }

        if (data instanceof type) {
          return data;
        }
        return new type(data);
      },

      /**
       * Identical to indexOf but will only match values when they are not preceded
       * by a backslash character.
       *
       * @param {String} buffer         String to search
       * @param {String} search         Value to look for
       * @param {Number} pos            Start position
       * @return {Number}               The position, or -1 if not found
       */
      unescapedIndexOf: function(buffer, search, pos) {
        while ((pos = buffer.indexOf(search, pos)) !== -1) {
          if (pos > 0 && buffer[pos - 1] === '\\') {
            pos += 1;
          } else {
            return pos;
          }
        }
        return -1;
      },

      /**
       * Find the index for insertion using binary search.
       *
       * @param {Array} list            The list to search
       * @param {?} seekVal             The value to insert
       * @param {function(?,?)} cmpfunc The comparison func, that can
       *                                  compare two seekVals
       * @return {Number}               The insert position
       */
      binsearchInsert: function(list, seekVal, cmpfunc) {
        if (!list.length)
          return 0;

        var low = 0, high = list.length - 1,
            mid, cmpval;

        while (low <= high) {
          mid = low + Math.floor((high - low) / 2);
          cmpval = cmpfunc(seekVal, list[mid]);

          if (cmpval < 0)
            high = mid - 1;
          else if (cmpval > 0)
            low = mid + 1;
          else
            break;
        }

        if (cmpval < 0)
          return mid; // insertion is displacing, so use mid outright.
        else if (cmpval > 0)
          return mid + 1;
        else
          return mid;
      },

      /**
       * Convenience function for debug output
       * @private
       */
      dumpn: /* istanbul ignore next */ function() {
        if (!ICAL.debug) {
          return;
        }

        if (typeof (console) !== 'undefined' && 'log' in console) {
          ICAL.helpers.dumpn = function consoleDumpn(input) {
            console.log(input);
          };
        } else {
          ICAL.helpers.dumpn = function geckoDumpn(input) {
            dump(input + '\n');
          };
        }

        ICAL.helpers.dumpn(arguments[0]);
      },

      /**
       * Clone the passed object or primitive. By default a shallow clone will be
       * executed.
       *
       * @param {*} aSrc            The thing to clone
       * @param {Boolean=} aDeep    If true, a deep clone will be performed
       * @return {*}                The copy of the thing
       */
      clone: function(aSrc, aDeep) {
        if (!aSrc || typeof aSrc != "object") {
          return aSrc;
        } else if (aSrc instanceof Date) {
          return new Date(aSrc.getTime());
        } else if ("clone" in aSrc) {
          return aSrc.clone();
        } else if (Array.isArray(aSrc)) {
          var arr = [];
          for (var i = 0; i < aSrc.length; i++) {
            arr.push(aDeep ? ICAL.helpers.clone(aSrc[i], true) : aSrc[i]);
          }
          return arr;
        } else {
          var obj = {};
          for (var name in aSrc) {
            // uses prototype method to allow use of Object.create(null);
            /* istanbul ignore else */
            if (Object.prototype.hasOwnProperty.call(aSrc, name)) {
              if (aDeep) {
                obj[name] = ICAL.helpers.clone(aSrc[name], true);
              } else {
                obj[name] = aSrc[name];
              }
            }
          }
          return obj;
        }
      },

      /**
       * Performs iCalendar line folding. A line ending character is inserted and
       * the next line begins with a whitespace.
       *
       * @example
       * SUMMARY:This line will be fold
       *  ed right in the middle of a word.
       *
       * @param {String} aLine      The line to fold
       * @return {String}           The folded line
       */
      foldline: function foldline(aLine) {
        var result = "";
        var line = aLine || "";

        while (line.length) {
          result += ICAL.newLineChar + " " + line.substr(0, ICAL.foldLength);
          line = line.substr(ICAL.foldLength);
        }
        return result.substr(ICAL.newLineChar.length + 1);
      },

      /**
       * Pads the given string or number with zeros so it will have at least two
       * characters.
       *
       * @param {String|Number} data    The string or number to pad
       * @return {String}               The number padded as a string
       */
      pad2: function pad(data) {
        if (typeof(data) !== 'string') {
          // handle fractions.
          if (typeof(data) === 'number') {
            data = parseInt(data);
          }
          data = String(data);
        }

        var len = data.length;

        switch (len) {
          case 0:
            return '00';
          case 1:
            return '0' + data;
          default:
            return data;
        }
      },

      /**
       * Truncates the given number, correctly handling negative numbers.
       *
       * @param {Number} number     The number to truncate
       * @return {Number}           The truncated number
       */
      trunc: function trunc(number) {
        return (number < 0 ? Math.ceil(number) : Math.floor(number));
      },

      /**
       * Poor-man's cross-browser inheritance for JavaScript. Doesn't support all
       * the features, but enough for our usage.
       *
       * @param {Function} base     The base class constructor function.
       * @param {Function} child    The child class constructor function.
       * @param {Object} extra      Extends the prototype with extra properties
       *                              and methods
       */
      inherits: function(base, child, extra) {
        function F() {}
        F.prototype = base.prototype;
        child.prototype = new F();

        if (extra) {
          ICAL.helpers.extend(extra, child.prototype);
        }
      },

      /**
       * Poor-man's cross-browser object extension. Doesn't support all the
       * features, but enough for our usage. Note that the target's properties are
       * not overwritten with the source properties.
       *
       * @example
       * var child = ICAL.helpers.extend(parent, {
       *   "bar": 123
       * });
       *
       * @param {Object} source     The object to extend
       * @param {Object} target     The object to extend with
       * @return {Object}           Returns the target.
       */
      extend: function(source, target) {
        for (var key in source) {
          var descr = Object.getOwnPropertyDescriptor(source, key);
          if (descr && !Object.getOwnPropertyDescriptor(target, key)) {
            Object.defineProperty(target, key, descr);
          }
        }
        return target;
      }
    };
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */

    /** @namespace ICAL */


    /**
     * This symbol is further described later on
     * @ignore
     */
    ICAL.design = (function() {

      var FROM_ICAL_NEWLINE = /\\\\|\\;|\\,|\\[Nn]/g;
      var TO_ICAL_NEWLINE = /\\|;|,|\n/g;
      var FROM_VCARD_NEWLINE = /\\\\|\\,|\\[Nn]/g;
      var TO_VCARD_NEWLINE = /\\|,|\n/g;

      function createTextType(fromNewline, toNewline) {
        var result = {
          matches: /.*/,

          fromICAL: function(aValue, structuredEscape) {
            return replaceNewline(aValue, fromNewline, structuredEscape);
          },

          toICAL: function(aValue, structuredEscape) {
            var regEx = toNewline;
            if (structuredEscape)
              regEx = new RegExp(regEx.source + '|' + structuredEscape);
            return aValue.replace(regEx, function(str) {
              switch (str) {
              case "\\":
                return "\\\\";
              case ";":
                return "\\;";
              case ",":
                return "\\,";
              case "\n":
                return "\\n";
              /* istanbul ignore next */
              default:
                return str;
              }
            });
          }
        };
        return result;
      }

      // default types used multiple times
      var DEFAULT_TYPE_TEXT = { defaultType: "text" };
      var DEFAULT_TYPE_TEXT_MULTI = { defaultType: "text", multiValue: "," };
      var DEFAULT_TYPE_TEXT_STRUCTURED = { defaultType: "text", structuredValue: ";" };
      var DEFAULT_TYPE_INTEGER = { defaultType: "integer" };
      var DEFAULT_TYPE_DATETIME_DATE = { defaultType: "date-time", allowedTypes: ["date-time", "date"] };
      var DEFAULT_TYPE_DATETIME = { defaultType: "date-time" };
      var DEFAULT_TYPE_URI = { defaultType: "uri" };
      var DEFAULT_TYPE_UTCOFFSET = { defaultType: "utc-offset" };
      var DEFAULT_TYPE_RECUR = { defaultType: "recur" };
      var DEFAULT_TYPE_DATE_ANDOR_TIME = { defaultType: "date-and-or-time", allowedTypes: ["date-time", "date", "text"] };

      function replaceNewlineReplace(string) {
        switch (string) {
          case "\\\\":
            return "\\";
          case "\\;":
            return ";";
          case "\\,":
            return ",";
          case "\\n":
          case "\\N":
            return "\n";
          /* istanbul ignore next */
          default:
            return string;
        }
      }

      function replaceNewline(value, newline, structuredEscape) {
        // avoid regex when possible.
        if (value.indexOf('\\') === -1) {
          return value;
        }
        if (structuredEscape)
          newline = new RegExp(newline.source + '|\\\\' + structuredEscape);
        return value.replace(newline, replaceNewlineReplace);
      }

      var commonProperties = {
        "categories": DEFAULT_TYPE_TEXT_MULTI,
        "url": DEFAULT_TYPE_URI,
        "version": DEFAULT_TYPE_TEXT,
        "uid": DEFAULT_TYPE_TEXT
      };

      var commonValues = {
        "boolean": {
          values: ["TRUE", "FALSE"],

          fromICAL: function(aValue) {
            switch (aValue) {
              case 'TRUE':
                return true;
              case 'FALSE':
                return false;
              default:
                //TODO: parser warning
                return false;
            }
          },

          toICAL: function(aValue) {
            if (aValue) {
              return 'TRUE';
            }
            return 'FALSE';
          }

        },
        float: {
          matches: /^[+-]?\d+\.\d+$/,

          fromICAL: function(aValue) {
            var parsed = parseFloat(aValue);
            if (ICAL.helpers.isStrictlyNaN(parsed)) {
              // TODO: parser warning
              return 0.0;
            }
            return parsed;
          },

          toICAL: function(aValue) {
            return String(aValue);
          }
        },
        integer: {
          fromICAL: function(aValue) {
            var parsed = parseInt(aValue);
            if (ICAL.helpers.isStrictlyNaN(parsed)) {
              return 0;
            }
            return parsed;
          },

          toICAL: function(aValue) {
            return String(aValue);
          }
        },
        "utc-offset": {
          toICAL: function(aValue) {
            if (aValue.length < 7) {
              // no seconds
              // -0500
              return aValue.substr(0, 3) +
                     aValue.substr(4, 2);
            } else {
              // seconds
              // -050000
              return aValue.substr(0, 3) +
                     aValue.substr(4, 2) +
                     aValue.substr(7, 2);
            }
          },

          fromICAL: function(aValue) {
            if (aValue.length < 6) {
              // no seconds
              // -05:00
              return aValue.substr(0, 3) + ':' +
                     aValue.substr(3, 2);
            } else {
              // seconds
              // -05:00:00
              return aValue.substr(0, 3) + ':' +
                     aValue.substr(3, 2) + ':' +
                     aValue.substr(5, 2);
            }
          },

          decorate: function(aValue) {
            return ICAL.UtcOffset.fromString(aValue);
          },

          undecorate: function(aValue) {
            return aValue.toString();
          }
        }
      };

      var icalParams = {
        // Although the syntax is DQUOTE uri DQUOTE, I don't think we should
        // enfoce anything aside from it being a valid content line.
        //
        // At least some params require - if multi values are used - DQUOTEs
        // for each of its values - e.g. delegated-from="uri1","uri2"
        // To indicate this, I introduced the new k/v pair
        // multiValueSeparateDQuote: true
        //
        // "ALTREP": { ... },

        // CN just wants a param-value
        // "CN": { ... }

        "cutype": {
          values: ["INDIVIDUAL", "GROUP", "RESOURCE", "ROOM", "UNKNOWN"],
          allowXName: true,
          allowIanaToken: true
        },

        "delegated-from": {
          valueType: "cal-address",
          multiValue: ",",
          multiValueSeparateDQuote: true
        },
        "delegated-to": {
          valueType: "cal-address",
          multiValue: ",",
          multiValueSeparateDQuote: true
        },
        // "DIR": { ... }, // See ALTREP
        "encoding": {
          values: ["8BIT", "BASE64"]
        },
        // "FMTTYPE": { ... }, // See ALTREP
        "fbtype": {
          values: ["FREE", "BUSY", "BUSY-UNAVAILABLE", "BUSY-TENTATIVE"],
          allowXName: true,
          allowIanaToken: true
        },
        // "LANGUAGE": { ... }, // See ALTREP
        "member": {
          valueType: "cal-address",
          multiValue: ",",
          multiValueSeparateDQuote: true
        },
        "partstat": {
          // TODO These values are actually different per-component
          values: ["NEEDS-ACTION", "ACCEPTED", "DECLINED", "TENTATIVE",
                   "DELEGATED", "COMPLETED", "IN-PROCESS"],
          allowXName: true,
          allowIanaToken: true
        },
        "range": {
          values: ["THISLANDFUTURE"]
        },
        "related": {
          values: ["START", "END"]
        },
        "reltype": {
          values: ["PARENT", "CHILD", "SIBLING"],
          allowXName: true,
          allowIanaToken: true
        },
        "role": {
          values: ["REQ-PARTICIPANT", "CHAIR",
                   "OPT-PARTICIPANT", "NON-PARTICIPANT"],
          allowXName: true,
          allowIanaToken: true
        },
        "rsvp": {
          values: ["TRUE", "FALSE"]
        },
        "sent-by": {
          valueType: "cal-address"
        },
        "tzid": {
          matches: /^\//
        },
        "value": {
          // since the value here is a 'type' lowercase is used.
          values: ["binary", "boolean", "cal-address", "date", "date-time",
                   "duration", "float", "integer", "period", "recur", "text",
                   "time", "uri", "utc-offset"],
          allowXName: true,
          allowIanaToken: true
        }
      };

      // When adding a value here, be sure to add it to the parameter types!
      var icalValues = ICAL.helpers.extend(commonValues, {
        text: createTextType(FROM_ICAL_NEWLINE, TO_ICAL_NEWLINE),

        uri: {
          // TODO
          /* ... */
        },

        "binary": {
          decorate: function(aString) {
            return ICAL.Binary.fromString(aString);
          },

          undecorate: function(aBinary) {
            return aBinary.toString();
          }
        },
        "cal-address": {
          // needs to be an uri
        },
        "date": {
          decorate: function(aValue, aProp) {
            if (design.strict) {
              return ICAL.Time.fromDateString(aValue, aProp);
            } else {
              return ICAL.Time.fromString(aValue, aProp);
            }
          },

          /**
           * undecorates a time object.
           */
          undecorate: function(aValue) {
            return aValue.toString();
          },

          fromICAL: function(aValue) {
            // from: 20120901
            // to: 2012-09-01
            if (!design.strict && aValue.length >= 15) {
              // This is probably a date-time, e.g. 20120901T130000Z
              return icalValues["date-time"].fromICAL(aValue);
            } else {
              return aValue.substr(0, 4) + '-' +
                     aValue.substr(4, 2) + '-' +
                     aValue.substr(6, 2);
            }
          },

          toICAL: function(aValue) {
            // from: 2012-09-01
            // to: 20120901
            var len = aValue.length;

            if (len == 10) {
              return aValue.substr(0, 4) +
                     aValue.substr(5, 2) +
                     aValue.substr(8, 2);
            } else if (len >= 19) {
              return icalValues["date-time"].toICAL(aValue);
            } else {
              //TODO: serialize warning?
              return aValue;
            }

          }
        },
        "date-time": {
          fromICAL: function(aValue) {
            // from: 20120901T130000
            // to: 2012-09-01T13:00:00
            if (!design.strict && aValue.length == 8) {
              // This is probably a date, e.g. 20120901
              return icalValues.date.fromICAL(aValue);
            } else {
              var result = aValue.substr(0, 4) + '-' +
                           aValue.substr(4, 2) + '-' +
                           aValue.substr(6, 2) + 'T' +
                           aValue.substr(9, 2) + ':' +
                           aValue.substr(11, 2) + ':' +
                           aValue.substr(13, 2);

              if (aValue[15] && aValue[15] === 'Z') {
                result += 'Z';
              }

              return result;
            }
          },

          toICAL: function(aValue) {
            // from: 2012-09-01T13:00:00
            // to: 20120901T130000
            var len = aValue.length;

            if (len == 10 && !design.strict) {
              return icalValues.date.toICAL(aValue);
            } else if (len >= 19) {
              var result = aValue.substr(0, 4) +
                           aValue.substr(5, 2) +
                           // grab the (DDTHH) segment
                           aValue.substr(8, 5) +
                           // MM
                           aValue.substr(14, 2) +
                           // SS
                           aValue.substr(17, 2);

              if (aValue[19] && aValue[19] === 'Z') {
                result += 'Z';
              }
              return result;
            } else {
              // TODO: error
              return aValue;
            }
          },

          decorate: function(aValue, aProp) {
            if (design.strict) {
              return ICAL.Time.fromDateTimeString(aValue, aProp);
            } else {
              return ICAL.Time.fromString(aValue, aProp);
            }
          },

          undecorate: function(aValue) {
            return aValue.toString();
          }
        },
        duration: {
          decorate: function(aValue) {
            return ICAL.Duration.fromString(aValue);
          },
          undecorate: function(aValue) {
            return aValue.toString();
          }
        },
        period: {

          fromICAL: function(string) {
            var parts = string.split('/');
            parts[0] = icalValues['date-time'].fromICAL(parts[0]);

            if (!ICAL.Duration.isValueString(parts[1])) {
              parts[1] = icalValues['date-time'].fromICAL(parts[1]);
            }

            return parts;
          },

          toICAL: function(parts) {
            if (!design.strict && parts[0].length == 10) {
              parts[0] = icalValues.date.toICAL(parts[0]);
            } else {
              parts[0] = icalValues['date-time'].toICAL(parts[0]);
            }

            if (!ICAL.Duration.isValueString(parts[1])) {
              if (!design.strict && parts[1].length == 10) {
                parts[1] = icalValues.date.toICAL(parts[1]);
              } else {
                parts[1] = icalValues['date-time'].toICAL(parts[1]);
              }
            }

            return parts.join("/");
          },

          decorate: function(aValue, aProp) {
            return ICAL.Period.fromJSON(aValue, aProp, !design.strict);
          },

          undecorate: function(aValue) {
            return aValue.toJSON();
          }
        },
        recur: {
          fromICAL: function(string) {
            return ICAL.Recur._stringToData(string, true);
          },

          toICAL: function(data) {
            var str = "";
            for (var k in data) {
              /* istanbul ignore if */
              if (!Object.prototype.hasOwnProperty.call(data, k)) {
                continue;
              }
              var val = data[k];
              if (k == "until") {
                if (val.length > 10) {
                  val = icalValues['date-time'].toICAL(val);
                } else {
                  val = icalValues.date.toICAL(val);
                }
              } else if (k == "wkst") {
                if (typeof val === 'number') {
                  val = ICAL.Recur.numericDayToIcalDay(val);
                }
              } else if (Array.isArray(val)) {
                val = val.join(",");
              }
              str += k.toUpperCase() + "=" + val + ";";
            }
            return str.substr(0, str.length - 1);
          },

          decorate: function decorate(aValue) {
            return ICAL.Recur.fromData(aValue);
          },

          undecorate: function(aRecur) {
            return aRecur.toJSON();
          }
        },

        time: {
          fromICAL: function(aValue) {
            // from: MMHHSS(Z)?
            // to: HH:MM:SS(Z)?
            if (aValue.length < 6) {
              // TODO: parser exception?
              return aValue;
            }

            // HH::MM::SSZ?
            var result = aValue.substr(0, 2) + ':' +
                         aValue.substr(2, 2) + ':' +
                         aValue.substr(4, 2);

            if (aValue[6] === 'Z') {
              result += 'Z';
            }

            return result;
          },

          toICAL: function(aValue) {
            // from: HH:MM:SS(Z)?
            // to: MMHHSS(Z)?
            if (aValue.length < 8) {
              //TODO: error
              return aValue;
            }

            var result = aValue.substr(0, 2) +
                         aValue.substr(3, 2) +
                         aValue.substr(6, 2);

            if (aValue[8] === 'Z') {
              result += 'Z';
            }

            return result;
          }
        }
      });

      var icalProperties = ICAL.helpers.extend(commonProperties, {

        "action": DEFAULT_TYPE_TEXT,
        "attach": { defaultType: "uri" },
        "attendee": { defaultType: "cal-address" },
        "calscale": DEFAULT_TYPE_TEXT,
        "class": DEFAULT_TYPE_TEXT,
        "comment": DEFAULT_TYPE_TEXT,
        "completed": DEFAULT_TYPE_DATETIME,
        "contact": DEFAULT_TYPE_TEXT,
        "created": DEFAULT_TYPE_DATETIME,
        "description": DEFAULT_TYPE_TEXT,
        "dtend": DEFAULT_TYPE_DATETIME_DATE,
        "dtstamp": DEFAULT_TYPE_DATETIME,
        "dtstart": DEFAULT_TYPE_DATETIME_DATE,
        "due": DEFAULT_TYPE_DATETIME_DATE,
        "duration": { defaultType: "duration" },
        "exdate": {
          defaultType: "date-time",
          allowedTypes: ["date-time", "date"],
          multiValue: ','
        },
        "exrule": DEFAULT_TYPE_RECUR,
        "freebusy": { defaultType: "period", multiValue: "," },
        "geo": { defaultType: "float", structuredValue: ";" },
        "last-modified": DEFAULT_TYPE_DATETIME,
        "location": DEFAULT_TYPE_TEXT,
        "method": DEFAULT_TYPE_TEXT,
        "organizer": { defaultType: "cal-address" },
        "percent-complete": DEFAULT_TYPE_INTEGER,
        "priority": DEFAULT_TYPE_INTEGER,
        "prodid": DEFAULT_TYPE_TEXT,
        "related-to": DEFAULT_TYPE_TEXT,
        "repeat": DEFAULT_TYPE_INTEGER,
        "rdate": {
          defaultType: "date-time",
          allowedTypes: ["date-time", "date", "period"],
          multiValue: ',',
          detectType: function(string) {
            if (string.indexOf('/') !== -1) {
              return 'period';
            }
            return (string.indexOf('T') === -1) ? 'date' : 'date-time';
          }
        },
        "recurrence-id": DEFAULT_TYPE_DATETIME_DATE,
        "resources": DEFAULT_TYPE_TEXT_MULTI,
        "request-status": DEFAULT_TYPE_TEXT_STRUCTURED,
        "rrule": DEFAULT_TYPE_RECUR,
        "sequence": DEFAULT_TYPE_INTEGER,
        "status": DEFAULT_TYPE_TEXT,
        "summary": DEFAULT_TYPE_TEXT,
        "transp": DEFAULT_TYPE_TEXT,
        "trigger": { defaultType: "duration", allowedTypes: ["duration", "date-time"] },
        "tzoffsetfrom": DEFAULT_TYPE_UTCOFFSET,
        "tzoffsetto": DEFAULT_TYPE_UTCOFFSET,
        "tzurl": DEFAULT_TYPE_URI,
        "tzid": DEFAULT_TYPE_TEXT,
        "tzname": DEFAULT_TYPE_TEXT
      });

      // When adding a value here, be sure to add it to the parameter types!
      var vcardValues = ICAL.helpers.extend(commonValues, {
        text: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),
        uri: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),

        date: {
          decorate: function(aValue) {
            return ICAL.VCardTime.fromDateAndOrTimeString(aValue, "date");
          },
          undecorate: function(aValue) {
            return aValue.toString();
          },
          fromICAL: function(aValue) {
            if (aValue.length == 8) {
              return icalValues.date.fromICAL(aValue);
            } else if (aValue[0] == '-' && aValue.length == 6) {
              return aValue.substr(0, 4) + '-' + aValue.substr(4);
            } else {
              return aValue;
            }
          },
          toICAL: function(aValue) {
            if (aValue.length == 10) {
              return icalValues.date.toICAL(aValue);
            } else if (aValue[0] == '-' && aValue.length == 7) {
              return aValue.substr(0, 4) + aValue.substr(5);
            } else {
              return aValue;
            }
          }
        },

        time: {
          decorate: function(aValue) {
            return ICAL.VCardTime.fromDateAndOrTimeString("T" + aValue, "time");
          },
          undecorate: function(aValue) {
            return aValue.toString();
          },
          fromICAL: function(aValue) {
            var splitzone = vcardValues.time._splitZone(aValue, true);
            var zone = splitzone[0], value = splitzone[1];

            //console.log("SPLIT: ",splitzone);

            if (value.length == 6) {
              value = value.substr(0, 2) + ':' +
                      value.substr(2, 2) + ':' +
                      value.substr(4, 2);
            } else if (value.length == 4 && value[0] != '-') {
              value = value.substr(0, 2) + ':' + value.substr(2, 2);
            } else if (value.length == 5) {
              value = value.substr(0, 3) + ':' + value.substr(3, 2);
            }

            if (zone.length == 5 && (zone[0] == '-' || zone[0] == '+')) {
              zone = zone.substr(0, 3) + ':' + zone.substr(3);
            }

            return value + zone;
          },

          toICAL: function(aValue) {
            var splitzone = vcardValues.time._splitZone(aValue);
            var zone = splitzone[0], value = splitzone[1];

            if (value.length == 8) {
              value = value.substr(0, 2) +
                      value.substr(3, 2) +
                      value.substr(6, 2);
            } else if (value.length == 5 && value[0] != '-') {
              value = value.substr(0, 2) + value.substr(3, 2);
            } else if (value.length == 6) {
              value = value.substr(0, 3) + value.substr(4, 2);
            }

            if (zone.length == 6 && (zone[0] == '-' || zone[0] == '+')) {
              zone = zone.substr(0, 3) + zone.substr(4);
            }

            return value + zone;
          },

          _splitZone: function(aValue, isFromIcal) {
            var lastChar = aValue.length - 1;
            var signChar = aValue.length - (isFromIcal ? 5 : 6);
            var sign = aValue[signChar];
            var zone, value;

            if (aValue[lastChar] == 'Z') {
              zone = aValue[lastChar];
              value = aValue.substr(0, lastChar);
            } else if (aValue.length > 6 && (sign == '-' || sign == '+')) {
              zone = aValue.substr(signChar);
              value = aValue.substr(0, signChar);
            } else {
              zone = "";
              value = aValue;
            }

            return [zone, value];
          }
        },

        "date-time": {
          decorate: function(aValue) {
            return ICAL.VCardTime.fromDateAndOrTimeString(aValue, "date-time");
          },

          undecorate: function(aValue) {
            return aValue.toString();
          },

          fromICAL: function(aValue) {
            return vcardValues['date-and-or-time'].fromICAL(aValue);
          },

          toICAL: function(aValue) {
            return vcardValues['date-and-or-time'].toICAL(aValue);
          }
        },

        "date-and-or-time": {
          decorate: function(aValue) {
            return ICAL.VCardTime.fromDateAndOrTimeString(aValue, "date-and-or-time");
          },

          undecorate: function(aValue) {
            return aValue.toString();
          },

          fromICAL: function(aValue) {
            var parts = aValue.split('T');
            return (parts[0] ? vcardValues.date.fromICAL(parts[0]) : '') +
                   (parts[1] ? 'T' + vcardValues.time.fromICAL(parts[1]) : '');
          },

          toICAL: function(aValue) {
            var parts = aValue.split('T');
            return vcardValues.date.toICAL(parts[0]) +
                   (parts[1] ? 'T' + vcardValues.time.toICAL(parts[1]) : '');

          }
        },
        timestamp: icalValues['date-time'],
        "language-tag": {
          matches: /^[a-zA-Z0-9-]+$/ // Could go with a more strict regex here
        }
      });

      var vcardParams = {
        "type": {
          valueType: "text",
          multiValue: ","
        },
        "value": {
          // since the value here is a 'type' lowercase is used.
          values: ["text", "uri", "date", "time", "date-time", "date-and-or-time",
                   "timestamp", "boolean", "integer", "float", "utc-offset",
                   "language-tag"],
          allowXName: true,
          allowIanaToken: true
        }
      };

      var vcardProperties = ICAL.helpers.extend(commonProperties, {
        "adr": { defaultType: "text", structuredValue: ";", multiValue: "," },
        "anniversary": DEFAULT_TYPE_DATE_ANDOR_TIME,
        "bday": DEFAULT_TYPE_DATE_ANDOR_TIME,
        "caladruri": DEFAULT_TYPE_URI,
        "caluri": DEFAULT_TYPE_URI,
        "clientpidmap": DEFAULT_TYPE_TEXT_STRUCTURED,
        "email": DEFAULT_TYPE_TEXT,
        "fburl": DEFAULT_TYPE_URI,
        "fn": DEFAULT_TYPE_TEXT,
        "gender": DEFAULT_TYPE_TEXT_STRUCTURED,
        "geo": DEFAULT_TYPE_URI,
        "impp": DEFAULT_TYPE_URI,
        "key": DEFAULT_TYPE_URI,
        "kind": DEFAULT_TYPE_TEXT,
        "lang": { defaultType: "language-tag" },
        "logo": DEFAULT_TYPE_URI,
        "member": DEFAULT_TYPE_URI,
        "n": { defaultType: "text", structuredValue: ";", multiValue: "," },
        "nickname": DEFAULT_TYPE_TEXT_MULTI,
        "note": DEFAULT_TYPE_TEXT,
        "org": { defaultType: "text", structuredValue: ";" },
        "photo": DEFAULT_TYPE_URI,
        "related": DEFAULT_TYPE_URI,
        "rev": { defaultType: "timestamp" },
        "role": DEFAULT_TYPE_TEXT,
        "sound": DEFAULT_TYPE_URI,
        "source": DEFAULT_TYPE_URI,
        "tel": { defaultType: "uri", allowedTypes: ["uri", "text"] },
        "title": DEFAULT_TYPE_TEXT,
        "tz": { defaultType: "text", allowedTypes: ["text", "utc-offset", "uri"] },
        "xml": DEFAULT_TYPE_TEXT
      });

      var vcard3Values = ICAL.helpers.extend(commonValues, {
        binary: icalValues.binary,
        date: vcardValues.date,
        "date-time": vcardValues["date-time"],
        "phone-number": {
          // TODO
          /* ... */
        },
        uri: icalValues.uri,
        text: icalValues.text,
        time: icalValues.time,
        vcard: icalValues.text,
        "utc-offset": {
          toICAL: function(aValue) {
            return aValue.substr(0, 7);
          },

          fromICAL: function(aValue) {
            return aValue.substr(0, 7);
          },

          decorate: function(aValue) {
            return ICAL.UtcOffset.fromString(aValue);
          },

          undecorate: function(aValue) {
            return aValue.toString();
          }
        }
      });

      var vcard3Params = {
        "type": {
          valueType: "text",
          multiValue: ","
        },
        "value": {
          // since the value here is a 'type' lowercase is used.
          values: ["text", "uri", "date", "date-time", "phone-number", "time",
                   "boolean", "integer", "float", "utc-offset", "vcard", "binary"],
          allowXName: true,
          allowIanaToken: true
        }
      };

      var vcard3Properties = ICAL.helpers.extend(commonProperties, {
        fn: DEFAULT_TYPE_TEXT,
        n: { defaultType: "text", structuredValue: ";", multiValue: "," },
        nickname: DEFAULT_TYPE_TEXT_MULTI,
        photo: { defaultType: "binary", allowedTypes: ["binary", "uri"] },
        bday: {
          defaultType: "date-time",
          allowedTypes: ["date-time", "date"],
          detectType: function(string) {
            return (string.indexOf('T') === -1) ? 'date' : 'date-time';
          }
        },

        adr: { defaultType: "text", structuredValue: ";", multiValue: "," },
        label: DEFAULT_TYPE_TEXT,

        tel: { defaultType: "phone-number" },
        email: DEFAULT_TYPE_TEXT,
        mailer: DEFAULT_TYPE_TEXT,

        tz: { defaultType: "utc-offset", allowedTypes: ["utc-offset", "text"] },
        geo: { defaultType: "float", structuredValue: ";" },

        title: DEFAULT_TYPE_TEXT,
        role: DEFAULT_TYPE_TEXT,
        logo: { defaultType: "binary", allowedTypes: ["binary", "uri"] },
        agent: { defaultType: "vcard", allowedTypes: ["vcard", "text", "uri"] },
        org: DEFAULT_TYPE_TEXT_STRUCTURED,

        note: DEFAULT_TYPE_TEXT_MULTI,
        prodid: DEFAULT_TYPE_TEXT,
        rev: {
          defaultType: "date-time",
          allowedTypes: ["date-time", "date"],
          detectType: function(string) {
            return (string.indexOf('T') === -1) ? 'date' : 'date-time';
          }
        },
        "sort-string": DEFAULT_TYPE_TEXT,
        sound: { defaultType: "binary", allowedTypes: ["binary", "uri"] },

        class: DEFAULT_TYPE_TEXT,
        key: { defaultType: "binary", allowedTypes: ["binary", "text"] }
      });

      /**
       * iCalendar design set
       * @type {ICAL.design.designSet}
       */
      var icalSet = {
        value: icalValues,
        param: icalParams,
        property: icalProperties
      };

      /**
       * vCard 4.0 design set
       * @type {ICAL.design.designSet}
       */
      var vcardSet = {
        value: vcardValues,
        param: vcardParams,
        property: vcardProperties
      };

      /**
       * vCard 3.0 design set
       * @type {ICAL.design.designSet}
       */
      var vcard3Set = {
        value: vcard3Values,
        param: vcard3Params,
        property: vcard3Properties
      };

      /**
       * The design data, used by the parser to determine types for properties and
       * other metadata needed to produce correct jCard/jCal data.
       *
       * @alias ICAL.design
       * @namespace
       */
      var design = {
        /**
         * A designSet describes value, parameter and property data. It is used by
         * ther parser and stringifier in components and properties to determine they
         * should be represented.
         *
         * @typedef {Object} designSet
         * @memberOf ICAL.design
         * @property {Object} value       Definitions for value types, keys are type names
         * @property {Object} param       Definitions for params, keys are param names
         * @property {Object} property    Defintions for properties, keys are property names
         */

        /**
         * Can be set to false to make the parser more lenient.
         */
        strict: true,

        /**
         * The default set for new properties and components if none is specified.
         * @type {ICAL.design.designSet}
         */
        defaultSet: icalSet,

        /**
         * The default type for unknown properties
         * @type {String}
         */
        defaultType: 'unknown',

        /**
         * Holds the design set for known top-level components
         *
         * @type {Object}
         * @property {ICAL.design.designSet} vcard       vCard VCARD
         * @property {ICAL.design.designSet} vevent      iCalendar VEVENT
         * @property {ICAL.design.designSet} vtodo       iCalendar VTODO
         * @property {ICAL.design.designSet} vjournal    iCalendar VJOURNAL
         * @property {ICAL.design.designSet} valarm      iCalendar VALARM
         * @property {ICAL.design.designSet} vtimezone   iCalendar VTIMEZONE
         * @property {ICAL.design.designSet} daylight    iCalendar DAYLIGHT
         * @property {ICAL.design.designSet} standard    iCalendar STANDARD
         *
         * @example
         * var propertyName = 'fn';
         * var componentDesign = ICAL.design.components.vcard;
         * var propertyDetails = componentDesign.property[propertyName];
         * if (propertyDetails.defaultType == 'text') {
         *   // Yep, sure is...
         * }
         */
        components: {
          vcard: vcardSet,
          vcard3: vcard3Set,
          vevent: icalSet,
          vtodo: icalSet,
          vjournal: icalSet,
          valarm: icalSet,
          vtimezone: icalSet,
          daylight: icalSet,
          standard: icalSet
        },


        /**
         * The design set for iCalendar (rfc5545/rfc7265) components.
         * @type {ICAL.design.designSet}
         */
        icalendar: icalSet,

        /**
         * The design set for vCard (rfc6350/rfc7095) components.
         * @type {ICAL.design.designSet}
         */
        vcard: vcardSet,

        /**
         * The design set for vCard (rfc2425/rfc2426/rfc7095) components.
         * @type {ICAL.design.designSet}
         */
        vcard3: vcard3Set,

        /**
         * Gets the design set for the given component name.
         *
         * @param {String} componentName        The name of the component
         * @return {ICAL.design.designSet}      The design set for the component
         */
        getDesignSet: function(componentName) {
          var isInDesign = componentName && componentName in design.components;
          return isInDesign ? design.components[componentName] : design.defaultSet;
        }
      };

      return design;
    }());
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    /**
     * Contains various functions to convert jCal and jCard data back into
     * iCalendar and vCard.
     * @namespace
     */
    ICAL.stringify = (function() {

      var LINE_ENDING = '\r\n';
      var DEFAULT_VALUE_TYPE = 'unknown';

      var design = ICAL.design;
      var helpers = ICAL.helpers;

      /**
       * Convert a full jCal/jCard array into a iCalendar/vCard string.
       *
       * @function ICAL.stringify
       * @variation function
       * @param {Array} jCal    The jCal/jCard document
       * @return {String}       The stringified iCalendar/vCard document
       */
      function stringify(jCal) {
        if (typeof jCal[0] == "string") {
          // This is a single component
          jCal = [jCal];
        }

        var i = 0;
        var len = jCal.length;
        var result = '';

        for (; i < len; i++) {
          result += stringify.component(jCal[i]) + LINE_ENDING;
        }

        return result;
      }

      /**
       * Converts an jCal component array into a ICAL string.
       * Recursive will resolve sub-components.
       *
       * Exact component/property order is not saved all
       * properties will come before subcomponents.
       *
       * @function ICAL.stringify.component
       * @param {Array} component
       *        jCal/jCard fragment of a component
       * @param {ICAL.design.designSet} designSet
       *        The design data to use for this component
       * @return {String}       The iCalendar/vCard string
       */
      stringify.component = function(component, designSet) {
        var name = component[0].toUpperCase();
        var result = 'BEGIN:' + name + LINE_ENDING;

        var props = component[1];
        var propIdx = 0;
        var propLen = props.length;

        var designSetName = component[0];
        // rfc6350 requires that in vCard 4.0 the first component is the VERSION
        // component with as value 4.0, note that 3.0 does not have this requirement.
        if (designSetName === 'vcard' && component[1].length > 0 &&
                !(component[1][0][0] === "version" && component[1][0][3] === "4.0")) {
          designSetName = "vcard3";
        }
        designSet = designSet || design.getDesignSet(designSetName);

        for (; propIdx < propLen; propIdx++) {
          result += stringify.property(props[propIdx], designSet) + LINE_ENDING;
        }

        // Ignore subcomponents if none exist, e.g. in vCard.
        var comps = component[2] || [];
        var compIdx = 0;
        var compLen = comps.length;

        for (; compIdx < compLen; compIdx++) {
          result += stringify.component(comps[compIdx], designSet) + LINE_ENDING;
        }

        result += 'END:' + name;
        return result;
      };

      /**
       * Converts a single jCal/jCard property to a iCalendar/vCard string.
       *
       * @function ICAL.stringify.property
       * @param {Array} property
       *        jCal/jCard property array
       * @param {ICAL.design.designSet} designSet
       *        The design data to use for this property
       * @param {Boolean} noFold
       *        If true, the line is not folded
       * @return {String}       The iCalendar/vCard string
       */
      stringify.property = function(property, designSet, noFold) {
        var name = property[0].toUpperCase();
        var jsName = property[0];
        var params = property[1];

        var line = name;

        var paramName;
        for (paramName in params) {
          var value = params[paramName];

          /* istanbul ignore else */
          if (params.hasOwnProperty(paramName)) {
            var multiValue = (paramName in designSet.param) && designSet.param[paramName].multiValue;
            if (multiValue && Array.isArray(value)) {
              if (designSet.param[paramName].multiValueSeparateDQuote) {
                multiValue = '"' + multiValue + '"';
              }
              value = value.map(stringify._rfc6868Unescape);
              value = stringify.multiValue(value, multiValue, "unknown", null, designSet);
            } else {
              value = stringify._rfc6868Unescape(value);
            }


            line += ';' + paramName.toUpperCase();
            line += '=' + stringify.propertyValue(value);
          }
        }

        if (property.length === 3) {
          // If there are no values, we must assume a blank value
          return line + ':';
        }

        var valueType = property[2];

        if (!designSet) {
          designSet = design.defaultSet;
        }

        var propDetails;
        var multiValue = false;
        var structuredValue = false;
        var isDefault = false;

        if (jsName in designSet.property) {
          propDetails = designSet.property[jsName];

          if ('multiValue' in propDetails) {
            multiValue = propDetails.multiValue;
          }

          if (('structuredValue' in propDetails) && Array.isArray(property[3])) {
            structuredValue = propDetails.structuredValue;
          }

          if ('defaultType' in propDetails) {
            if (valueType === propDetails.defaultType) {
              isDefault = true;
            }
          } else {
            if (valueType === DEFAULT_VALUE_TYPE) {
              isDefault = true;
            }
          }
        } else {
          if (valueType === DEFAULT_VALUE_TYPE) {
            isDefault = true;
          }
        }

        // push the VALUE property if type is not the default
        // for the current property.
        if (!isDefault) {
          // value will never contain ;/:/, so we don't escape it here.
          line += ';VALUE=' + valueType.toUpperCase();
        }

        line += ':';

        if (multiValue && structuredValue) {
          line += stringify.multiValue(
            property[3], structuredValue, valueType, multiValue, designSet, structuredValue
          );
        } else if (multiValue) {
          line += stringify.multiValue(
            property.slice(3), multiValue, valueType, null, designSet, false
          );
        } else if (structuredValue) {
          line += stringify.multiValue(
            property[3], structuredValue, valueType, null, designSet, structuredValue
          );
        } else {
          line += stringify.value(property[3], valueType, designSet, false);
        }

        return noFold ? line : ICAL.helpers.foldline(line);
      };

      /**
       * Handles escaping of property values that may contain:
       *
       *    COLON (:), SEMICOLON (;), or COMMA (,)
       *
       * If any of the above are present the result is wrapped
       * in double quotes.
       *
       * @function ICAL.stringify.propertyValue
       * @param {String} value      Raw property value
       * @return {String}           Given or escaped value when needed
       */
      stringify.propertyValue = function(value) {

        if ((helpers.unescapedIndexOf(value, ',') === -1) &&
            (helpers.unescapedIndexOf(value, ':') === -1) &&
            (helpers.unescapedIndexOf(value, ';') === -1)) {

          return value;
        }

        return '"' + value + '"';
      };

      /**
       * Converts an array of ical values into a single
       * string based on a type and a delimiter value (like ",").
       *
       * @function ICAL.stringify.multiValue
       * @param {Array} values      List of values to convert
       * @param {String} delim      Used to join the values (",", ";", ":")
       * @param {String} type       Lowecase ical value type
       *        (like boolean, date-time, etc..)
       * @param {?String} innerMulti If set, each value will again be processed
       *        Used for structured values
       * @param {ICAL.design.designSet} designSet
       *        The design data to use for this property
       *
       * @return {String}           iCalendar/vCard string for value
       */
      stringify.multiValue = function(values, delim, type, innerMulti, designSet, structuredValue) {
        var result = '';
        var len = values.length;
        var i = 0;

        for (; i < len; i++) {
          if (innerMulti && Array.isArray(values[i])) {
            result += stringify.multiValue(values[i], innerMulti, type, null, designSet, structuredValue);
          } else {
            result += stringify.value(values[i], type, designSet, structuredValue);
          }

          if (i !== (len - 1)) {
            result += delim;
          }
        }

        return result;
      };

      /**
       * Processes a single ical value runs the associated "toICAL" method from the
       * design value type if available to convert the value.
       *
       * @function ICAL.stringify.value
       * @param {String|Number} value       A formatted value
       * @param {String} type               Lowercase iCalendar/vCard value type
       *  (like boolean, date-time, etc..)
       * @return {String}                   iCalendar/vCard value for single value
       */
      stringify.value = function(value, type, designSet, structuredValue) {
        if (type in designSet.value && 'toICAL' in designSet.value[type]) {
          return designSet.value[type].toICAL(value, structuredValue);
        }
        return value;
      };

      /**
       * Internal helper for rfc6868. Exposing this on ICAL.stringify so that
       * hackers can disable the rfc6868 parsing if the really need to.
       *
       * @param {String} val        The value to unescape
       * @return {String}           The escaped value
       */
      stringify._rfc6868Unescape = function(val) {
        return val.replace(/[\n^"]/g, function(x) {
          return RFC6868_REPLACE_MAP[x];
        });
      };
      var RFC6868_REPLACE_MAP = { '"': "^'", "\n": "^n", "^": "^^" };

      return stringify;
    }());
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    /**
     * Contains various functions to parse iCalendar and vCard data.
     * @namespace
     */
    ICAL.parse = (function() {

      var CHAR = /[^ \t]/;
      var VALUE_DELIMITER = ':';
      var PARAM_DELIMITER = ';';
      var PARAM_NAME_DELIMITER = '=';
      var DEFAULT_VALUE_TYPE = 'unknown';
      var DEFAULT_PARAM_TYPE = 'text';

      var design = ICAL.design;
      var helpers = ICAL.helpers;

      /**
       * An error that occurred during parsing.
       *
       * @param {String} message        The error message
       * @memberof ICAL.parse
       * @extends {Error}
       * @class
       */
      function ParserError(message) {
        this.message = message;
        this.name = 'ParserError';

        try {
          throw new Error();
        } catch (e) {
          if (e.stack) {
            var split = e.stack.split('\n');
            split.shift();
            this.stack = split.join('\n');
          }
        }
      }

      ParserError.prototype = Error.prototype;

      /**
       * Parses iCalendar or vCard data into a raw jCal object. Consult
       * documentation on the {@tutorial layers|layers of parsing} for more
       * details.
       *
       * @function ICAL.parse
       * @variation function
       * @todo Fix the API to be more clear on the return type
       * @param {String} input      The string data to parse
       * @return {Object|Object[]}  A single jCal object, or an array thereof
       */
      function parser(input) {
        var state = {};
        var root = state.component = [];

        state.stack = [root];

        parser._eachLine(input, function(err, line) {
          parser._handleContentLine(line, state);
        });


        // when there are still items on the stack
        // throw a fatal error, a component was not closed
        // correctly in that case.
        if (state.stack.length > 1) {
          throw new ParserError(
            'invalid ical body. component began but did not end'
          );
        }

        state = null;

        return (root.length == 1 ? root[0] : root);
      }

      /**
       * Parse an iCalendar property value into the jCal for a single property
       *
       * @function ICAL.parse.property
       * @param {String} str
       *   The iCalendar property string to parse
       * @param {ICAL.design.designSet=} designSet
       *   The design data to use for this property
       * @return {Object}
       *   The jCal Object containing the property
       */
      parser.property = function(str, designSet) {
        var state = {
          component: [[], []],
          designSet: designSet || design.defaultSet
        };
        parser._handleContentLine(str, state);
        return state.component[1][0];
      };

      /**
       * Convenience method to parse a component. You can use ICAL.parse() directly
       * instead.
       *
       * @function ICAL.parse.component
       * @see ICAL.parse(function)
       * @param {String} str    The iCalendar component string to parse
       * @return {Object}       The jCal Object containing the component
       */
      parser.component = function(str) {
        return parser(str);
      };

      // classes & constants
      parser.ParserError = ParserError;

      /**
       * The state for parsing content lines from an iCalendar/vCard string.
       *
       * @private
       * @memberof ICAL.parse
       * @typedef {Object} parserState
       * @property {ICAL.design.designSet} designSet    The design set to use for parsing
       * @property {ICAL.Component[]} stack             The stack of components being processed
       * @property {ICAL.Component} component           The currently active component
       */


      /**
       * Handles a single line of iCalendar/vCard, updating the state.
       *
       * @private
       * @function ICAL.parse._handleContentLine
       * @param {String} line               The content line to process
       * @param {ICAL.parse.parserState}    The current state of the line parsing
       */
      parser._handleContentLine = function(line, state) {
        // break up the parts of the line
        var valuePos = line.indexOf(VALUE_DELIMITER);
        var paramPos = line.indexOf(PARAM_DELIMITER);

        var lastParamIndex;
        var lastValuePos;

        // name of property or begin/end
        var name;
        var value;
        // params is only overridden if paramPos !== -1.
        // we can't do params = params || {} later on
        // because it sacrifices ops.
        var params = {};

        /**
         * Different property cases
         *
         *
         * 1. RRULE:FREQ=foo
         *    // FREQ= is not a param but the value
         *
         * 2. ATTENDEE;ROLE=REQ-PARTICIPANT;
         *    // ROLE= is a param because : has not happened yet
         */
          // when the parameter delimiter is after the
          // value delimiter then its not a parameter.

        if ((paramPos !== -1 && valuePos !== -1)) {
          // when the parameter delimiter is after the
          // value delimiter then its not a parameter.
          if (paramPos > valuePos) {
            paramPos = -1;
          }
        }

        var parsedParams;
        if (paramPos !== -1) {
          name = line.substring(0, paramPos).toLowerCase();
          parsedParams = parser._parseParameters(line.substring(paramPos), 0, state.designSet);
          if (parsedParams[2] == -1) {
            throw new ParserError("Invalid parameters in '" + line + "'");
          }
          params = parsedParams[0];
          lastParamIndex = parsedParams[1].length + parsedParams[2] + paramPos;
          if ((lastValuePos =
            line.substring(lastParamIndex).indexOf(VALUE_DELIMITER)) !== -1) {
            value = line.substring(lastParamIndex + lastValuePos + 1);
          } else {
            throw new ParserError("Missing parameter value in '" + line + "'");
          }
        } else if (valuePos !== -1) {
          // without parmeters (BEGIN:VCAENDAR, CLASS:PUBLIC)
          name = line.substring(0, valuePos).toLowerCase();
          value = line.substring(valuePos + 1);

          if (name === 'begin') {
            var newComponent = [value.toLowerCase(), [], []];
            if (state.stack.length === 1) {
              state.component.push(newComponent);
            } else {
              state.component[2].push(newComponent);
            }
            state.stack.push(state.component);
            state.component = newComponent;
            if (!state.designSet) {
              state.designSet = design.getDesignSet(state.component[0]);
            }
            return;
          } else if (name === 'end') {
            state.component = state.stack.pop();
            return;
          }
          // If its not begin/end, then this is a property with an empty value,
          // which should be considered valid.
        } else {
          /**
           * Invalid line.
           * The rational to throw an error is we will
           * never be certain that the rest of the file
           * is sane and its unlikely that we can serialize
           * the result correctly either.
           */
          throw new ParserError(
            'invalid line (no token ";" or ":") "' + line + '"'
          );
        }

        var valueType;
        var multiValue = false;
        var structuredValue = false;
        var propertyDetails;

        if (name in state.designSet.property) {
          propertyDetails = state.designSet.property[name];

          if ('multiValue' in propertyDetails) {
            multiValue = propertyDetails.multiValue;
          }

          if ('structuredValue' in propertyDetails) {
            structuredValue = propertyDetails.structuredValue;
          }

          if (value && 'detectType' in propertyDetails) {
            valueType = propertyDetails.detectType(value);
          }
        }

        // attempt to determine value
        if (!valueType) {
          if (!('value' in params)) {
            if (propertyDetails) {
              valueType = propertyDetails.defaultType;
            } else {
              valueType = DEFAULT_VALUE_TYPE;
            }
          } else {
            // possible to avoid this?
            valueType = params.value.toLowerCase();
          }
        }

        delete params.value;

        /**
         * Note on `var result` juggling:
         *
         * I observed that building the array in pieces has adverse
         * effects on performance, so where possible we inline the creation.
         * Its a little ugly but resulted in ~2000 additional ops/sec.
         */

        var result;
        if (multiValue && structuredValue) {
          value = parser._parseMultiValue(value, structuredValue, valueType, [], multiValue, state.designSet, structuredValue);
          result = [name, params, valueType, value];
        } else if (multiValue) {
          result = [name, params, valueType];
          parser._parseMultiValue(value, multiValue, valueType, result, null, state.designSet, false);
        } else if (structuredValue) {
          value = parser._parseMultiValue(value, structuredValue, valueType, [], null, state.designSet, structuredValue);
          result = [name, params, valueType, value];
        } else {
          value = parser._parseValue(value, valueType, state.designSet, false);
          result = [name, params, valueType, value];
        }
        // rfc6350 requires that in vCard 4.0 the first component is the VERSION
        // component with as value 4.0, note that 3.0 does not have this requirement.
        if (state.component[0] === 'vcard' && state.component[1].length === 0 &&
                !(name === 'version' && value === '4.0')) {
          state.designSet = design.getDesignSet("vcard3");
        }
        state.component[1].push(result);
      };

      /**
       * Parse a value from the raw value into the jCard/jCal value.
       *
       * @private
       * @function ICAL.parse._parseValue
       * @param {String} value          Original value
       * @param {String} type           Type of value
       * @param {Object} designSet      The design data to use for this value
       * @return {Object} varies on type
       */
      parser._parseValue = function(value, type, designSet, structuredValue) {
        if (type in designSet.value && 'fromICAL' in designSet.value[type]) {
          return designSet.value[type].fromICAL(value, structuredValue);
        }
        return value;
      };

      /**
       * Parse parameters from a string to object.
       *
       * @function ICAL.parse._parseParameters
       * @private
       * @param {String} line           A single unfolded line
       * @param {Numeric} start         Position to start looking for properties
       * @param {Object} designSet      The design data to use for this property
       * @return {Object} key/value pairs
       */
      parser._parseParameters = function(line, start, designSet) {
        var lastParam = start;
        var pos = 0;
        var delim = PARAM_NAME_DELIMITER;
        var result = {};
        var name, lcname;
        var value, valuePos = -1;
        var type, multiValue, mvdelim;

        // find the next '=' sign
        // use lastParam and pos to find name
        // check if " is used if so get value from "->"
        // then increment pos to find next ;

        while ((pos !== false) &&
               (pos = helpers.unescapedIndexOf(line, delim, pos + 1)) !== -1) {

          name = line.substr(lastParam + 1, pos - lastParam - 1);
          if (name.length == 0) {
            throw new ParserError("Empty parameter name in '" + line + "'");
          }
          lcname = name.toLowerCase();
          mvdelim = false;
          multiValue = false;

          if (lcname in designSet.param && designSet.param[lcname].valueType) {
            type = designSet.param[lcname].valueType;
          } else {
            type = DEFAULT_PARAM_TYPE;
          }

          if (lcname in designSet.param) {
            multiValue = designSet.param[lcname].multiValue;
            if (designSet.param[lcname].multiValueSeparateDQuote) {
              mvdelim = parser._rfc6868Escape('"' + multiValue + '"');
            }
          }

          var nextChar = line[pos + 1];
          if (nextChar === '"') {
            valuePos = pos + 2;
            pos = helpers.unescapedIndexOf(line, '"', valuePos);
            if (multiValue && pos != -1) {
                var extendedValue = true;
                while (extendedValue) {
                  if (line[pos + 1] == multiValue && line[pos + 2] == '"') {
                    pos = helpers.unescapedIndexOf(line, '"', pos + 3);
                  } else {
                    extendedValue = false;
                  }
                }
              }
            if (pos === -1) {
              throw new ParserError(
                'invalid line (no matching double quote) "' + line + '"'
              );
            }
            value = line.substr(valuePos, pos - valuePos);
            lastParam = helpers.unescapedIndexOf(line, PARAM_DELIMITER, pos);
            if (lastParam === -1) {
              pos = false;
            }
          } else {
            valuePos = pos + 1;

            // move to next ";"
            var nextPos = helpers.unescapedIndexOf(line, PARAM_DELIMITER, valuePos);
            var propValuePos = helpers.unescapedIndexOf(line, VALUE_DELIMITER, valuePos);
            if (propValuePos !== -1 && nextPos > propValuePos) {
              // this is a delimiter in the property value, let's stop here
              nextPos = propValuePos;
              pos = false;
            } else if (nextPos === -1) {
              // no ";"
              if (propValuePos === -1) {
                nextPos = line.length;
              } else {
                nextPos = propValuePos;
              }
              pos = false;
            } else {
              lastParam = nextPos;
              pos = nextPos;
            }

            value = line.substr(valuePos, nextPos - valuePos);
          }

          value = parser._rfc6868Escape(value);
          if (multiValue) {
            var delimiter = mvdelim || multiValue;
            value = parser._parseMultiValue(value, delimiter, type, [], null, designSet);
          } else {
            value = parser._parseValue(value, type, designSet);
          }

          if (multiValue && (lcname in result)) {
            if (Array.isArray(result[lcname])) {
              result[lcname].push(value);
            } else {
              result[lcname] = [
                result[lcname],
                value
              ];
            }
          } else {
            result[lcname] = value;
          }
        }
        return [result, value, valuePos];
      };

      /**
       * Internal helper for rfc6868. Exposing this on ICAL.parse so that
       * hackers can disable the rfc6868 parsing if the really need to.
       *
       * @function ICAL.parse._rfc6868Escape
       * @param {String} val        The value to escape
       * @return {String}           The escaped value
       */
      parser._rfc6868Escape = function(val) {
        return val.replace(/\^['n^]/g, function(x) {
          return RFC6868_REPLACE_MAP[x];
        });
      };
      var RFC6868_REPLACE_MAP = { "^'": '"', "^n": "\n", "^^": "^" };

      /**
       * Parse a multi value string. This function is used either for parsing
       * actual multi-value property's values, or for handling parameter values. It
       * can be used for both multi-value properties and structured value properties.
       *
       * @private
       * @function ICAL.parse._parseMultiValue
       * @param {String} buffer     The buffer containing the full value
       * @param {String} delim      The multi-value delimiter
       * @param {String} type       The value type to be parsed
       * @param {Array.<?>} result        The array to append results to, varies on value type
       * @param {String} innerMulti The inner delimiter to split each value with
       * @param {ICAL.design.designSet} designSet   The design data for this value
       * @return {?|Array.<?>}            Either an array of results, or the first result
       */
      parser._parseMultiValue = function(buffer, delim, type, result, innerMulti, designSet, structuredValue) {
        var pos = 0;
        var lastPos = 0;
        var value;
        if (delim.length === 0) {
          return buffer;
        }

        // split each piece
        while ((pos = helpers.unescapedIndexOf(buffer, delim, lastPos)) !== -1) {
          value = buffer.substr(lastPos, pos - lastPos);
          if (innerMulti) {
            value = parser._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);
          } else {
            value = parser._parseValue(value, type, designSet, structuredValue);
          }
          result.push(value);
          lastPos = pos + delim.length;
        }

        // on the last piece take the rest of string
        value = buffer.substr(lastPos);
        if (innerMulti) {
          value = parser._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);
        } else {
          value = parser._parseValue(value, type, designSet, structuredValue);
        }
        result.push(value);

        return result.length == 1 ? result[0] : result;
      };

      /**
       * Process a complete buffer of iCalendar/vCard data line by line, correctly
       * unfolding content. Each line will be processed with the given callback
       *
       * @private
       * @function ICAL.parse._eachLine
       * @param {String} buffer                         The buffer to process
       * @param {function(?String, String)} callback    The callback for each line
       */
      parser._eachLine = function(buffer, callback) {
        var len = buffer.length;
        var lastPos = buffer.search(CHAR);
        var pos = lastPos;
        var line;
        var firstChar;

        var newlineOffset;

        do {
          pos = buffer.indexOf('\n', lastPos) + 1;

          if (pos > 1 && buffer[pos - 2] === '\r') {
            newlineOffset = 2;
          } else {
            newlineOffset = 1;
          }

          if (pos === 0) {
            pos = len;
            newlineOffset = 0;
          }

          firstChar = buffer[lastPos];

          if (firstChar === ' ' || firstChar === '\t') {
            // add to line
            line += buffer.substr(
              lastPos + 1,
              pos - lastPos - (newlineOffset + 1)
            );
          } else {
            if (line)
              callback(null, line);
            // push line
            line = buffer.substr(
              lastPos,
              pos - lastPos - newlineOffset
            );
          }

          lastPos = pos;
        } while (pos !== len);

        // extra ending line
        line = line.trim();

        if (line.length)
          callback(null, line);
      };

      return parser;

    }());
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    /**
     * This symbol is further described later on
     * @ignore
     */
    ICAL.Component = (function() {

      var PROPERTY_INDEX = 1;
      var COMPONENT_INDEX = 2;
      var NAME_INDEX = 0;

      /**
       * @classdesc
       * Wraps a jCal component, adding convenience methods to add, remove and
       * update subcomponents and properties.
       *
       * @class
       * @alias ICAL.Component
       * @param {Array|String} jCal         Raw jCal component data OR name of new
       *                                      component
       * @param {ICAL.Component} parent     Parent component to associate
       */
      function Component(jCal, parent) {
        if (typeof(jCal) === 'string') {
          // jCal spec (name, properties, components)
          jCal = [jCal, [], []];
        }

        // mostly for legacy reasons.
        this.jCal = jCal;

        this.parent = parent || null;
      }

      Component.prototype = {
        /**
         * Hydrated properties are inserted into the _properties array at the same
         * position as in the jCal array, so its possible the array contains
         * undefined values for unhydrdated properties. To avoid iterating the
         * array when checking if all properties have been hydrated, we save the
         * count here.
         *
         * @type {Number}
         * @private
         */
        _hydratedPropertyCount: 0,

        /**
         * The same count as for _hydratedPropertyCount, but for subcomponents
         *
         * @type {Number}
         * @private
         */
        _hydratedComponentCount: 0,

        /**
         * The name of this component
         * @readonly
         */
        get name() {
          return this.jCal[NAME_INDEX];
        },

        /**
         * The design set for this component, e.g. icalendar vs vcard
         *
         * @type {ICAL.design.designSet}
         * @private
         */
        get _designSet() {
          var parentDesign = this.parent && this.parent._designSet;
          return parentDesign || ICAL.design.getDesignSet(this.name);
        },

        _hydrateComponent: function(index) {
          if (!this._components) {
            this._components = [];
            this._hydratedComponentCount = 0;
          }

          if (this._components[index]) {
            return this._components[index];
          }

          var comp = new Component(
            this.jCal[COMPONENT_INDEX][index],
            this
          );

          this._hydratedComponentCount++;
          return (this._components[index] = comp);
        },

        _hydrateProperty: function(index) {
          if (!this._properties) {
            this._properties = [];
            this._hydratedPropertyCount = 0;
          }

          if (this._properties[index]) {
            return this._properties[index];
          }

          var prop = new ICAL.Property(
            this.jCal[PROPERTY_INDEX][index],
            this
          );

          this._hydratedPropertyCount++;
          return (this._properties[index] = prop);
        },

        /**
         * Finds first sub component, optionally filtered by name.
         *
         * @param {String=} name        Optional name to filter by
         * @return {?ICAL.Component}     The found subcomponent
         */
        getFirstSubcomponent: function(name) {
          if (name) {
            var i = 0;
            var comps = this.jCal[COMPONENT_INDEX];
            var len = comps.length;

            for (; i < len; i++) {
              if (comps[i][NAME_INDEX] === name) {
                var result = this._hydrateComponent(i);
                return result;
              }
            }
          } else {
            if (this.jCal[COMPONENT_INDEX].length) {
              return this._hydrateComponent(0);
            }
          }

          // ensure we return a value (strict mode)
          return null;
        },

        /**
         * Finds all sub components, optionally filtering by name.
         *
         * @param {String=} name            Optional name to filter by
         * @return {ICAL.Component[]}       The found sub components
         */
        getAllSubcomponents: function(name) {
          var jCalLen = this.jCal[COMPONENT_INDEX].length;
          var i = 0;

          if (name) {
            var comps = this.jCal[COMPONENT_INDEX];
            var result = [];

            for (; i < jCalLen; i++) {
              if (name === comps[i][NAME_INDEX]) {
                result.push(
                  this._hydrateComponent(i)
                );
              }
            }
            return result;
          } else {
            if (!this._components ||
                (this._hydratedComponentCount !== jCalLen)) {
              for (; i < jCalLen; i++) {
                this._hydrateComponent(i);
              }
            }

            return this._components || [];
          }
        },

        /**
         * Returns true when a named property exists.
         *
         * @param {String} name     The property name
         * @return {Boolean}        True, when property is found
         */
        hasProperty: function(name) {
          var props = this.jCal[PROPERTY_INDEX];
          var len = props.length;

          var i = 0;
          for (; i < len; i++) {
            // 0 is property name
            if (props[i][NAME_INDEX] === name) {
              return true;
            }
          }

          return false;
        },

        /**
         * Finds the first property, optionally with the given name.
         *
         * @param {String=} name        Lowercase property name
         * @return {?ICAL.Property}     The found property
         */
        getFirstProperty: function(name) {
          if (name) {
            var i = 0;
            var props = this.jCal[PROPERTY_INDEX];
            var len = props.length;

            for (; i < len; i++) {
              if (props[i][NAME_INDEX] === name) {
                var result = this._hydrateProperty(i);
                return result;
              }
            }
          } else {
            if (this.jCal[PROPERTY_INDEX].length) {
              return this._hydrateProperty(0);
            }
          }

          return null;
        },

        /**
         * Returns first property's value, if available.
         *
         * @param {String=} name    Lowercase property name
         * @return {?String}        The found property value.
         */
        getFirstPropertyValue: function(name) {
          var prop = this.getFirstProperty(name);
          if (prop) {
            return prop.getFirstValue();
          }

          return null;
        },

        /**
         * Get all properties in the component, optionally filtered by name.
         *
         * @param {String=} name        Lowercase property name
         * @return {ICAL.Property[]}    List of properties
         */
        getAllProperties: function(name) {
          var jCalLen = this.jCal[PROPERTY_INDEX].length;
          var i = 0;

          if (name) {
            var props = this.jCal[PROPERTY_INDEX];
            var result = [];

            for (; i < jCalLen; i++) {
              if (name === props[i][NAME_INDEX]) {
                result.push(
                  this._hydrateProperty(i)
                );
              }
            }
            return result;
          } else {
            if (!this._properties ||
                (this._hydratedPropertyCount !== jCalLen)) {
              for (; i < jCalLen; i++) {
                this._hydrateProperty(i);
              }
            }

            return this._properties || [];
          }
        },

        _removeObjectByIndex: function(jCalIndex, cache, index) {
          cache = cache || [];
          // remove cached version
          if (cache[index]) {
            var obj = cache[index];
            if ("parent" in obj) {
                obj.parent = null;
            }
          }

          cache.splice(index, 1);

          // remove it from the jCal
          this.jCal[jCalIndex].splice(index, 1);
        },

        _removeObject: function(jCalIndex, cache, nameOrObject) {
          var i = 0;
          var objects = this.jCal[jCalIndex];
          var len = objects.length;
          var cached = this[cache];

          if (typeof(nameOrObject) === 'string') {
            for (; i < len; i++) {
              if (objects[i][NAME_INDEX] === nameOrObject) {
                this._removeObjectByIndex(jCalIndex, cached, i);
                return true;
              }
            }
          } else if (cached) {
            for (; i < len; i++) {
              if (cached[i] && cached[i] === nameOrObject) {
                this._removeObjectByIndex(jCalIndex, cached, i);
                return true;
              }
            }
          }

          return false;
        },

        _removeAllObjects: function(jCalIndex, cache, name) {
          var cached = this[cache];

          // Unfortunately we have to run through all children to reset their
          // parent property.
          var objects = this.jCal[jCalIndex];
          var i = objects.length - 1;

          // descending search required because splice
          // is used and will effect the indices.
          for (; i >= 0; i--) {
            if (!name || objects[i][NAME_INDEX] === name) {
              this._removeObjectByIndex(jCalIndex, cached, i);
            }
          }
        },

        /**
         * Adds a single sub component.
         *
         * @param {ICAL.Component} component        The component to add
         * @return {ICAL.Component}                 The passed in component
         */
        addSubcomponent: function(component) {
          if (!this._components) {
            this._components = [];
            this._hydratedComponentCount = 0;
          }

          if (component.parent) {
            component.parent.removeSubcomponent(component);
          }

          var idx = this.jCal[COMPONENT_INDEX].push(component.jCal);
          this._components[idx - 1] = component;
          this._hydratedComponentCount++;
          component.parent = this;
          return component;
        },

        /**
         * Removes a single component by name or the instance of a specific
         * component.
         *
         * @param {ICAL.Component|String} nameOrComp    Name of component, or component
         * @return {Boolean}                            True when comp is removed
         */
        removeSubcomponent: function(nameOrComp) {
          var removed = this._removeObject(COMPONENT_INDEX, '_components', nameOrComp);
          if (removed) {
            this._hydratedComponentCount--;
          }
          return removed;
        },

        /**
         * Removes all components or (if given) all components by a particular
         * name.
         *
         * @param {String=} name            Lowercase component name
         */
        removeAllSubcomponents: function(name) {
          var removed = this._removeAllObjects(COMPONENT_INDEX, '_components', name);
          this._hydratedComponentCount = 0;
          return removed;
        },

        /**
         * Adds an {@link ICAL.Property} to the component.
         *
         * @param {ICAL.Property} property      The property to add
         * @return {ICAL.Property}              The passed in property
         */
        addProperty: function(property) {
          if (!(property instanceof ICAL.Property)) {
            throw new TypeError('must instance of ICAL.Property');
          }

          if (!this._properties) {
            this._properties = [];
            this._hydratedPropertyCount = 0;
          }

          if (property.parent) {
            property.parent.removeProperty(property);
          }

          var idx = this.jCal[PROPERTY_INDEX].push(property.jCal);
          this._properties[idx - 1] = property;
          this._hydratedPropertyCount++;
          property.parent = this;
          return property;
        },

        /**
         * Helper method to add a property with a value to the component.
         *
         * @param {String}               name         Property name to add
         * @param {String|Number|Object} value        Property value
         * @return {ICAL.Property}                    The created property
         */
        addPropertyWithValue: function(name, value) {
          var prop = new ICAL.Property(name);
          prop.setValue(value);

          this.addProperty(prop);

          return prop;
        },

        /**
         * Helper method that will update or create a property of the given name
         * and sets its value. If multiple properties with the given name exist,
         * only the first is updated.
         *
         * @param {String}               name         Property name to update
         * @param {String|Number|Object} value        Property value
         * @return {ICAL.Property}                    The created property
         */
        updatePropertyWithValue: function(name, value) {
          var prop = this.getFirstProperty(name);

          if (prop) {
            prop.setValue(value);
          } else {
            prop = this.addPropertyWithValue(name, value);
          }

          return prop;
        },

        /**
         * Removes a single property by name or the instance of the specific
         * property.
         *
         * @param {String|ICAL.Property} nameOrProp     Property name or instance to remove
         * @return {Boolean}                            True, when deleted
         */
        removeProperty: function(nameOrProp) {
          var removed = this._removeObject(PROPERTY_INDEX, '_properties', nameOrProp);
          if (removed) {
            this._hydratedPropertyCount--;
          }
          return removed;
        },

        /**
         * Removes all properties associated with this component, optionally
         * filtered by name.
         *
         * @param {String=} name        Lowercase property name
         * @return {Boolean}            True, when deleted
         */
        removeAllProperties: function(name) {
          var removed = this._removeAllObjects(PROPERTY_INDEX, '_properties', name);
          this._hydratedPropertyCount = 0;
          return removed;
        },

        /**
         * Returns the Object representation of this component. The returned object
         * is a live jCal object and should be cloned if modified.
         * @return {Object}
         */
        toJSON: function() {
          return this.jCal;
        },

        /**
         * The string representation of this component.
         * @return {String}
         */
        toString: function() {
          return ICAL.stringify.component(
            this.jCal, this._designSet
          );
        }
      };

      /**
       * Create an {@link ICAL.Component} by parsing the passed iCalendar string.
       *
       * @param {String} str        The iCalendar string to parse
       */
      Component.fromString = function(str) {
        return new Component(ICAL.parse.component(str));
      };

      return Component;
    }());
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    /**
     * This symbol is further described later on
     * @ignore
     */
    ICAL.Property = (function() {

      var NAME_INDEX = 0;
      var PROP_INDEX = 1;
      var TYPE_INDEX = 2;
      var VALUE_INDEX = 3;

      var design = ICAL.design;

      /**
       * @classdesc
       * Provides a layer on top of the raw jCal object for manipulating a single
       * property, with its parameters and value.
       *
       * @description
       * Its important to note that mutations done in the wrapper
       * directly mutate the jCal object used to initialize.
       *
       * Can also be used to create new properties by passing
       * the name of the property (as a String).
       *
       * @class
       * @alias ICAL.Property
       * @param {Array|String} jCal         Raw jCal representation OR
       *  the new name of the property
       *
       * @param {ICAL.Component=} parent    Parent component
       */
      function Property(jCal, parent) {
        this._parent = parent || null;

        if (typeof(jCal) === 'string') {
          // We are creating the property by name and need to detect the type
          this.jCal = [jCal, {}, design.defaultType];
          this.jCal[TYPE_INDEX] = this.getDefaultType();
        } else {
          this.jCal = jCal;
        }
        this._updateType();
      }

      Property.prototype = {

        /**
         * The value type for this property
         * @readonly
         * @type {String}
         */
        get type() {
          return this.jCal[TYPE_INDEX];
        },

        /**
         * The name of this property, in lowercase.
         * @readonly
         * @type {String}
         */
        get name() {
          return this.jCal[NAME_INDEX];
        },

        /**
         * The parent component for this property.
         * @type {ICAL.Component}
         */
        get parent() {
          return this._parent;
        },

        set parent(p) {
          // Before setting the parent, check if the design set has changed. If it
          // has, we later need to update the type if it was unknown before.
          var designSetChanged = !this._parent || (p && p._designSet != this._parent._designSet);

          this._parent = p;

          if (this.type == design.defaultType && designSetChanged) {
            this.jCal[TYPE_INDEX] = this.getDefaultType();
            this._updateType();
          }

          return p;
        },

        /**
         * The design set for this property, e.g. icalendar vs vcard
         *
         * @type {ICAL.design.designSet}
         * @private
         */
        get _designSet() {
          return this.parent ? this.parent._designSet : design.defaultSet;
        },

        /**
         * Updates the type metadata from the current jCal type and design set.
         *
         * @private
         */
        _updateType: function() {
          var designSet = this._designSet;

          if (this.type in designSet.value) {
            designSet.value[this.type];

            if ('decorate' in designSet.value[this.type]) {
              this.isDecorated = true;
            } else {
              this.isDecorated = false;
            }

            if (this.name in designSet.property) {
              this.isMultiValue = ('multiValue' in designSet.property[this.name]);
              this.isStructuredValue = ('structuredValue' in designSet.property[this.name]);
            }
          }
        },

        /**
         * Hydrate a single value. The act of hydrating means turning the raw jCal
         * value into a potentially wrapped object, for example {@link ICAL.Time}.
         *
         * @private
         * @param {Number} index        The index of the value to hydrate
         * @return {Object}             The decorated value.
         */
        _hydrateValue: function(index) {
          if (this._values && this._values[index]) {
            return this._values[index];
          }

          // for the case where there is no value.
          if (this.jCal.length <= (VALUE_INDEX + index)) {
            return null;
          }

          if (this.isDecorated) {
            if (!this._values) {
              this._values = [];
            }
            return (this._values[index] = this._decorate(
              this.jCal[VALUE_INDEX + index]
            ));
          } else {
            return this.jCal[VALUE_INDEX + index];
          }
        },

        /**
         * Decorate a single value, returning its wrapped object. This is used by
         * the hydrate function to actually wrap the value.
         *
         * @private
         * @param {?} value         The value to decorate
         * @return {Object}         The decorated value
         */
        _decorate: function(value) {
          return this._designSet.value[this.type].decorate(value, this);
        },

        /**
         * Undecorate a single value, returning its raw jCal data.
         *
         * @private
         * @param {Object} value         The value to undecorate
         * @return {?}                   The undecorated value
         */
        _undecorate: function(value) {
          return this._designSet.value[this.type].undecorate(value, this);
        },

        /**
         * Sets the value at the given index while also hydrating it. The passed
         * value can either be a decorated or undecorated value.
         *
         * @private
         * @param {?} value             The value to set
         * @param {Number} index        The index to set it at
         */
        _setDecoratedValue: function(value, index) {
          if (!this._values) {
            this._values = [];
          }

          if (typeof(value) === 'object' && 'icaltype' in value) {
            // decorated value
            this.jCal[VALUE_INDEX + index] = this._undecorate(value);
            this._values[index] = value;
          } else {
            // undecorated value
            this.jCal[VALUE_INDEX + index] = value;
            this._values[index] = this._decorate(value);
          }
        },

        /**
         * Gets a parameter on the property.
         *
         * @param {String}        name   Property name (lowercase)
         * @return {Array|String}        Property value
         */
        getParameter: function(name) {
          if (name in this.jCal[PROP_INDEX]) {
            return this.jCal[PROP_INDEX][name];
          } else {
            return undefined;
          }
        },

        /**
         * Gets first parameter on the property.
         *
         * @param {String}        name   Property name (lowercase)
         * @return {String}        Property value
         */
        getFirstParameter: function(name) {
          var parameters = this.getParameter(name);

          if (Array.isArray(parameters)) {
            return parameters[0];
          }

          return parameters;
        },

        /**
         * Sets a parameter on the property.
         *
         * @param {String}       name     The parameter name
         * @param {Array|String} value    The parameter value
         */
        setParameter: function(name, value) {
          var lcname = name.toLowerCase();
          if (typeof value === "string" &&
              lcname in this._designSet.param &&
              'multiValue' in this._designSet.param[lcname]) {
              value = [value];
          }
          this.jCal[PROP_INDEX][name] = value;
        },

        /**
         * Removes a parameter
         *
         * @param {String} name     The parameter name
         */
        removeParameter: function(name) {
          delete this.jCal[PROP_INDEX][name];
        },

        /**
         * Get the default type based on this property's name.
         *
         * @return {String}     The default type for this property
         */
        getDefaultType: function() {
          var name = this.jCal[NAME_INDEX];
          var designSet = this._designSet;

          if (name in designSet.property) {
            var details = designSet.property[name];
            if ('defaultType' in details) {
              return details.defaultType;
            }
          }
          return design.defaultType;
        },

        /**
         * Sets type of property and clears out any existing values of the current
         * type.
         *
         * @param {String} type     New iCAL type (see design.*.values)
         */
        resetType: function(type) {
          this.removeAllValues();
          this.jCal[TYPE_INDEX] = type;
          this._updateType();
        },

        /**
         * Finds the first property value.
         *
         * @return {String}         First property value
         */
        getFirstValue: function() {
          return this._hydrateValue(0);
        },

        /**
         * Gets all values on the property.
         *
         * NOTE: this creates an array during each call.
         *
         * @return {Array}          List of values
         */
        getValues: function() {
          var len = this.jCal.length - VALUE_INDEX;

          if (len < 1) {
            // its possible for a property to have no value.
            return [];
          }

          var i = 0;
          var result = [];

          for (; i < len; i++) {
            result[i] = this._hydrateValue(i);
          }

          return result;
        },

        /**
         * Removes all values from this property
         */
        removeAllValues: function() {
          if (this._values) {
            this._values.length = 0;
          }
          this.jCal.length = 3;
        },

        /**
         * Sets the values of the property.  Will overwrite the existing values.
         * This can only be used for multi-value properties.
         *
         * @param {Array} values    An array of values
         */
        setValues: function(values) {
          if (!this.isMultiValue) {
            throw new Error(
              this.name + ': does not not support mulitValue.\n' +
              'override isMultiValue'
            );
          }

          var len = values.length;
          var i = 0;
          this.removeAllValues();

          if (len > 0 &&
              typeof(values[0]) === 'object' &&
              'icaltype' in values[0]) {
            this.resetType(values[0].icaltype);
          }

          if (this.isDecorated) {
            for (; i < len; i++) {
              this._setDecoratedValue(values[i], i);
            }
          } else {
            for (; i < len; i++) {
              this.jCal[VALUE_INDEX + i] = values[i];
            }
          }
        },

        /**
         * Sets the current value of the property. If this is a multi-value
         * property, all other values will be removed.
         *
         * @param {String|Object} value     New property value.
         */
        setValue: function(value) {
          this.removeAllValues();
          if (typeof(value) === 'object' && 'icaltype' in value) {
            this.resetType(value.icaltype);
          }

          if (this.isDecorated) {
            this._setDecoratedValue(value, 0);
          } else {
            this.jCal[VALUE_INDEX] = value;
          }
        },

        /**
         * Returns the Object representation of this component. The returned object
         * is a live jCal object and should be cloned if modified.
         * @return {Object}
         */
        toJSON: function() {
          return this.jCal;
        },

        /**
         * The string representation of this component.
         * @return {String}
         */
        toICALString: function() {
          return ICAL.stringify.property(
            this.jCal, this._designSet, true
          );
        }
      };

      /**
       * Create an {@link ICAL.Property} by parsing the passed iCalendar string.
       *
       * @param {String} str                        The iCalendar string to parse
       * @param {ICAL.design.designSet=} designSet  The design data to use for this property
       * @return {ICAL.Property}                    The created iCalendar property
       */
      Property.fromString = function(str, designSet) {
        return new Property(ICAL.parse.property(str, designSet));
      };

      return Property;
    }());
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    /**
     * This symbol is further described later on
     * @ignore
     */
    ICAL.UtcOffset = (function() {

      /**
       * @classdesc
       * This class represents the "duration" value type, with various calculation
       * and manipulation methods.
       *
       * @class
       * @alias ICAL.UtcOffset
       * @param {Object} aData          An object with members of the utc offset
       * @param {Number=} aData.hours   The hours for the utc offset
       * @param {Number=} aData.minutes The minutes in the utc offset
       * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1
       */
      function UtcOffset(aData) {
        this.fromData(aData);
      }

      UtcOffset.prototype = {

        /**
         * The hours in the utc-offset
         * @type {Number}
         */
        hours: 0,

        /**
         * The minutes in the utc-offset
         * @type {Number}
         */
        minutes: 0,

        /**
         * The sign of the utc offset, 1 for positive offset, -1 for negative
         * offsets.
         * @type {Number}
         */
        factor: 1,

        /**
         * The type name, to be used in the jCal object.
         * @constant
         * @type {String}
         * @default "utc-offset"
         */
        icaltype: "utc-offset",

        /**
         * Returns a clone of the utc offset object.
         *
         * @return {ICAL.UtcOffset}     The cloned object
         */
        clone: function() {
          return ICAL.UtcOffset.fromSeconds(this.toSeconds());
        },

        /**
         * Sets up the current instance using members from the passed data object.
         *
         * @param {Object} aData          An object with members of the utc offset
         * @param {Number=} aData.hours   The hours for the utc offset
         * @param {Number=} aData.minutes The minutes in the utc offset
         * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1
         */
        fromData: function(aData) {
          if (aData) {
            for (var key in aData) {
              /* istanbul ignore else */
              if (aData.hasOwnProperty(key)) {
                this[key] = aData[key];
              }
            }
          }
          this._normalize();
        },

        /**
         * Sets up the current instance from the given seconds value. The seconds
         * value is truncated to the minute. Offsets are wrapped when the world
         * ends, the hour after UTC+14:00 is UTC-12:00.
         *
         * @param {Number} aSeconds         The seconds to convert into an offset
         */
        fromSeconds: function(aSeconds) {
          var secs = Math.abs(aSeconds);

          this.factor = aSeconds < 0 ? -1 : 1;
          this.hours = ICAL.helpers.trunc(secs / 3600);

          secs -= (this.hours * 3600);
          this.minutes = ICAL.helpers.trunc(secs / 60);
          return this;
        },

        /**
         * Convert the current offset to a value in seconds
         *
         * @return {Number}                 The offset in seconds
         */
        toSeconds: function() {
          return this.factor * (60 * this.minutes + 3600 * this.hours);
        },

        /**
         * Compare this utc offset with another one.
         *
         * @param {ICAL.UtcOffset} other        The other offset to compare with
         * @return {Number}                     -1, 0 or 1 for less/equal/greater
         */
        compare: function icaltime_compare(other) {
          var a = this.toSeconds();
          var b = other.toSeconds();
          return (a > b) - (b > a);
        },

        _normalize: function() {
          // Range: 97200 seconds (with 1 hour inbetween)
          var secs = this.toSeconds();
          var factor = this.factor;
          while (secs < -43200) { // = UTC-12:00
            secs += 97200;
          }
          while (secs > 50400) { // = UTC+14:00
            secs -= 97200;
          }

          this.fromSeconds(secs);

          // Avoid changing the factor when on zero seconds
          if (secs == 0) {
            this.factor = factor;
          }
        },

        /**
         * The iCalendar string representation of this utc-offset.
         * @return {String}
         */
        toICALString: function() {
          return ICAL.design.icalendar.value['utc-offset'].toICAL(this.toString());
        },

        /**
         * The string representation of this utc-offset.
         * @return {String}
         */
        toString: function toString() {
          return (this.factor == 1 ? "+" : "-") +
                  ICAL.helpers.pad2(this.hours) + ':' +
                  ICAL.helpers.pad2(this.minutes);
        }
      };

      /**
       * Creates a new {@link ICAL.UtcOffset} instance from the passed string.
       *
       * @param {String} aString    The string to parse
       * @return {ICAL.Duration}    The created utc-offset instance
       */
      UtcOffset.fromString = function(aString) {
        // -05:00
        var options = {};
        //TODO: support seconds per rfc5545 ?
        options.factor = (aString[0] === '+') ? 1 : -1;
        options.hours = ICAL.helpers.strictParseInt(aString.substr(1, 2));
        options.minutes = ICAL.helpers.strictParseInt(aString.substr(4, 2));

        return new ICAL.UtcOffset(options);
      };

      /**
       * Creates a new {@link ICAL.UtcOffset} instance from the passed seconds
       * value.
       *
       * @param {Number} aSeconds       The number of seconds to convert
       */
      UtcOffset.fromSeconds = function(aSeconds) {
        var instance = new UtcOffset();
        instance.fromSeconds(aSeconds);
        return instance;
      };

      return UtcOffset;
    }());
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    /**
     * This symbol is further described later on
     * @ignore
     */
    ICAL.Binary = (function() {

      /**
       * @classdesc
       * Represents the BINARY value type, which contains extra methods for
       * encoding and decoding.
       *
       * @class
       * @alias ICAL.Binary
       * @param {String} aValue     The binary data for this value
       */
      function Binary(aValue) {
        this.value = aValue;
      }

      Binary.prototype = {
        /**
         * The type name, to be used in the jCal object.
         * @default "binary"
         * @constant
         */
        icaltype: "binary",

        /**
         * Base64 decode the current value
         *
         * @return {String}         The base64-decoded value
         */
        decodeValue: function decodeValue() {
          return this._b64_decode(this.value);
        },

        /**
         * Encodes the passed parameter with base64 and sets the internal
         * value to the result.
         *
         * @param {String} aValue      The raw binary value to encode
         */
        setEncodedValue: function setEncodedValue(aValue) {
          this.value = this._b64_encode(aValue);
        },

        _b64_encode: function base64_encode(data) {
          // http://kevin.vanzonneveld.net
          // +   original by: Tyler Akins (http://rumkin.com)
          // +   improved by: Bayron Guevara
          // +   improved by: Thunder.m
          // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
          // +   bugfixed by: Pellentesque Malesuada
          // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
          // +   improved by: Rafał Kukawski (http://kukawski.pl)
          // *     example 1: base64_encode('Kevin van Zonneveld');
          // *     returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='
          // mozilla has this native
          // - but breaks in 2.0.0.12!
          //if (typeof this.window['atob'] == 'function') {
          //    return atob(data);
          //}
          var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
                    "abcdefghijklmnopqrstuvwxyz0123456789+/=";
          var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
            ac = 0,
            enc = "",
            tmp_arr = [];

          if (!data) {
            return data;
          }

          do { // pack three octets into four hexets
            o1 = data.charCodeAt(i++);
            o2 = data.charCodeAt(i++);
            o3 = data.charCodeAt(i++);

            bits = o1 << 16 | o2 << 8 | o3;

            h1 = bits >> 18 & 0x3f;
            h2 = bits >> 12 & 0x3f;
            h3 = bits >> 6 & 0x3f;
            h4 = bits & 0x3f;

            // use hexets to index into b64, and append result to encoded string
            tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
          } while (i < data.length);

          enc = tmp_arr.join('');

          var r = data.length % 3;

          return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);

        },

        _b64_decode: function base64_decode(data) {
          // http://kevin.vanzonneveld.net
          // +   original by: Tyler Akins (http://rumkin.com)
          // +   improved by: Thunder.m
          // +      input by: Aman Gupta
          // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
          // +   bugfixed by: Onno Marsman
          // +   bugfixed by: Pellentesque Malesuada
          // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
          // +      input by: Brett Zamir (http://brett-zamir.me)
          // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
          // *     example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');
          // *     returns 1: 'Kevin van Zonneveld'
          // mozilla has this native
          // - but breaks in 2.0.0.12!
          //if (typeof this.window['btoa'] == 'function') {
          //    return btoa(data);
          //}
          var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
                    "abcdefghijklmnopqrstuvwxyz0123456789+/=";
          var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
            ac = 0,
            dec = "",
            tmp_arr = [];

          if (!data) {
            return data;
          }

          data += '';

          do { // unpack four hexets into three octets using index points in b64
            h1 = b64.indexOf(data.charAt(i++));
            h2 = b64.indexOf(data.charAt(i++));
            h3 = b64.indexOf(data.charAt(i++));
            h4 = b64.indexOf(data.charAt(i++));

            bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;

            o1 = bits >> 16 & 0xff;
            o2 = bits >> 8 & 0xff;
            o3 = bits & 0xff;

            if (h3 == 64) {
              tmp_arr[ac++] = String.fromCharCode(o1);
            } else if (h4 == 64) {
              tmp_arr[ac++] = String.fromCharCode(o1, o2);
            } else {
              tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
            }
          } while (i < data.length);

          dec = tmp_arr.join('');

          return dec;
        },

        /**
         * The string representation of this value
         * @return {String}
         */
        toString: function() {
          return this.value;
        }
      };

      /**
       * Creates a binary value from the given string.
       *
       * @param {String} aString        The binary value string
       * @return {ICAL.Binary}          The binary value instance
       */
      Binary.fromString = function(aString) {
        return new Binary(aString);
      };

      return Binary;
    }());
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */



    (function() {
      /**
       * @classdesc
       * This class represents the "period" value type, with various calculation
       * and manipulation methods.
       *
       * @description
       * The passed data object cannot contain both and end date and a duration.
       *
       * @class
       * @param {Object} aData                  An object with members of the period
       * @param {ICAL.Time=} aData.start        The start of the period
       * @param {ICAL.Time=} aData.end          The end of the period
       * @param {ICAL.Duration=} aData.duration The duration of the period
       */
      ICAL.Period = function icalperiod(aData) {
        this.wrappedJSObject = this;

        if (aData && 'start' in aData) {
          if (aData.start && !(aData.start instanceof ICAL.Time)) {
            throw new TypeError('.start must be an instance of ICAL.Time');
          }
          this.start = aData.start;
        }

        if (aData && aData.end && aData.duration) {
          throw new Error('cannot accept both end and duration');
        }

        if (aData && 'end' in aData) {
          if (aData.end && !(aData.end instanceof ICAL.Time)) {
            throw new TypeError('.end must be an instance of ICAL.Time');
          }
          this.end = aData.end;
        }

        if (aData && 'duration' in aData) {
          if (aData.duration && !(aData.duration instanceof ICAL.Duration)) {
            throw new TypeError('.duration must be an instance of ICAL.Duration');
          }
          this.duration = aData.duration;
        }
      };

      ICAL.Period.prototype = {

        /**
         * The start of the period
         * @type {ICAL.Time}
         */
        start: null,

        /**
         * The end of the period
         * @type {ICAL.Time}
         */
        end: null,

        /**
         * The duration of the period
         * @type {ICAL.Duration}
         */
        duration: null,

        /**
         * The class identifier.
         * @constant
         * @type {String}
         * @default "icalperiod"
         */
        icalclass: "icalperiod",

        /**
         * The type name, to be used in the jCal object.
         * @constant
         * @type {String}
         * @default "period"
         */
        icaltype: "period",

        /**
         * Returns a clone of the duration object.
         *
         * @return {ICAL.Period}      The cloned object
         */
        clone: function() {
          return ICAL.Period.fromData({
            start: this.start ? this.start.clone() : null,
            end: this.end ? this.end.clone() : null,
            duration: this.duration ? this.duration.clone() : null
          });
        },

        /**
         * Calculates the duration of the period, either directly or by subtracting
         * start from end date.
         *
         * @return {ICAL.Duration}      The calculated duration
         */
        getDuration: function duration() {
          if (this.duration) {
            return this.duration;
          } else {
            return this.end.subtractDate(this.start);
          }
        },

        /**
         * Calculates the end date of the period, either directly or by adding
         * duration to start date.
         *
         * @return {ICAL.Time}          The calculated end date
         */
        getEnd: function() {
          if (this.end) {
            return this.end;
          } else {
            var end = this.start.clone();
            end.addDuration(this.duration);
            return end;
          }
        },

        /**
         * The string representation of this period.
         * @return {String}
         */
        toString: function toString() {
          return this.start + "/" + (this.end || this.duration);
        },

        /**
         * The jCal representation of this period type.
         * @return {Object}
         */
        toJSON: function() {
          return [this.start.toString(), (this.end || this.duration).toString()];
        },

        /**
         * The iCalendar string representation of this period.
         * @return {String}
         */
        toICALString: function() {
          return this.start.toICALString() + "/" +
                 (this.end || this.duration).toICALString();
        }
      };

      /**
       * Creates a new {@link ICAL.Period} instance from the passed string.
       *
       * @param {String} str            The string to parse
       * @param {ICAL.Property} prop    The property this period will be on
       * @return {ICAL.Period}          The created period instance
       */
      ICAL.Period.fromString = function fromString(str, prop) {
        var parts = str.split('/');

        if (parts.length !== 2) {
          throw new Error(
            'Invalid string value: "' + str + '" must contain a "/" char.'
          );
        }

        var options = {
          start: ICAL.Time.fromDateTimeString(parts[0], prop)
        };

        var end = parts[1];

        if (ICAL.Duration.isValueString(end)) {
          options.duration = ICAL.Duration.fromString(end);
        } else {
          options.end = ICAL.Time.fromDateTimeString(end, prop);
        }

        return new ICAL.Period(options);
      };

      /**
       * Creates a new {@link ICAL.Period} instance from the given data object.
       * The passed data object cannot contain both and end date and a duration.
       *
       * @param {Object} aData                  An object with members of the period
       * @param {ICAL.Time=} aData.start        The start of the period
       * @param {ICAL.Time=} aData.end          The end of the period
       * @param {ICAL.Duration=} aData.duration The duration of the period
       * @return {ICAL.Period}                  The period instance
       */
      ICAL.Period.fromData = function fromData(aData) {
        return new ICAL.Period(aData);
      };

      /**
       * Returns a new period instance from the given jCal data array. The first
       * member is always the start date string, the second member is either a
       * duration or end date string.
       *
       * @param {Array<String,String>} aData    The jCal data array
       * @param {ICAL.Property} aProp           The property this jCal data is on
       * @param {Boolean} aLenient              If true, data value can be both date and date-time
       * @return {ICAL.Period}                  The period instance
       */
      ICAL.Period.fromJSON = function(aData, aProp, aLenient) {
        function fromDateOrDateTimeString(aValue, aProp) {
          if (aLenient) {
            return ICAL.Time.fromString(aValue, aProp);
          } else {
            return ICAL.Time.fromDateTimeString(aValue, aProp);
          }
        }

        if (ICAL.Duration.isValueString(aData[1])) {
          return ICAL.Period.fromData({
            start: fromDateOrDateTimeString(aData[0], aProp),
            duration: ICAL.Duration.fromString(aData[1])
          });
        } else {
          return ICAL.Period.fromData({
            start: fromDateOrDateTimeString(aData[0], aProp),
            end: fromDateOrDateTimeString(aData[1], aProp)
          });
        }
      };
    })();
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */



    (function() {
      var DURATION_LETTERS = /([PDWHMTS]{1,1})/;

      /**
       * @classdesc
       * This class represents the "duration" value type, with various calculation
       * and manipulation methods.
       *
       * @class
       * @alias ICAL.Duration
       * @param {Object} data               An object with members of the duration
       * @param {Number} data.weeks         Duration in weeks
       * @param {Number} data.days          Duration in days
       * @param {Number} data.hours         Duration in hours
       * @param {Number} data.minutes       Duration in minutes
       * @param {Number} data.seconds       Duration in seconds
       * @param {Boolean} data.isNegative   If true, the duration is negative
       */
      ICAL.Duration = function icalduration(data) {
        this.wrappedJSObject = this;
        this.fromData(data);
      };

      ICAL.Duration.prototype = {
        /**
         * The weeks in this duration
         * @type {Number}
         * @default 0
         */
        weeks: 0,

        /**
         * The days in this duration
         * @type {Number}
         * @default 0
         */
        days: 0,

        /**
         * The days in this duration
         * @type {Number}
         * @default 0
         */
        hours: 0,

        /**
         * The minutes in this duration
         * @type {Number}
         * @default 0
         */
        minutes: 0,

        /**
         * The seconds in this duration
         * @type {Number}
         * @default 0
         */
        seconds: 0,

        /**
         * The seconds in this duration
         * @type {Boolean}
         * @default false
         */
        isNegative: false,

        /**
         * The class identifier.
         * @constant
         * @type {String}
         * @default "icalduration"
         */
        icalclass: "icalduration",

        /**
         * The type name, to be used in the jCal object.
         * @constant
         * @type {String}
         * @default "duration"
         */
        icaltype: "duration",

        /**
         * Returns a clone of the duration object.
         *
         * @return {ICAL.Duration}      The cloned object
         */
        clone: function clone() {
          return ICAL.Duration.fromData(this);
        },

        /**
         * The duration value expressed as a number of seconds.
         *
         * @return {Number}             The duration value in seconds
         */
        toSeconds: function toSeconds() {
          var seconds = this.seconds + 60 * this.minutes + 3600 * this.hours +
                        86400 * this.days + 7 * 86400 * this.weeks;
          return (this.isNegative ? -seconds : seconds);
        },

        /**
         * Reads the passed seconds value into this duration object. Afterwards,
         * members like {@link ICAL.Duration#days days} and {@link ICAL.Duration#weeks weeks} will be set up
         * accordingly.
         *
         * @param {Number} aSeconds     The duration value in seconds
         * @return {ICAL.Duration}      Returns this instance
         */
        fromSeconds: function fromSeconds(aSeconds) {
          var secs = Math.abs(aSeconds);

          this.isNegative = (aSeconds < 0);
          this.days = ICAL.helpers.trunc(secs / 86400);

          // If we have a flat number of weeks, use them.
          if (this.days % 7 == 0) {
            this.weeks = this.days / 7;
            this.days = 0;
          } else {
            this.weeks = 0;
          }

          secs -= (this.days + 7 * this.weeks) * 86400;

          this.hours = ICAL.helpers.trunc(secs / 3600);
          secs -= this.hours * 3600;

          this.minutes = ICAL.helpers.trunc(secs / 60);
          secs -= this.minutes * 60;

          this.seconds = secs;
          return this;
        },

        /**
         * Sets up the current instance using members from the passed data object.
         *
         * @param {Object} aData               An object with members of the duration
         * @param {Number} aData.weeks         Duration in weeks
         * @param {Number} aData.days          Duration in days
         * @param {Number} aData.hours         Duration in hours
         * @param {Number} aData.minutes       Duration in minutes
         * @param {Number} aData.seconds       Duration in seconds
         * @param {Boolean} aData.isNegative   If true, the duration is negative
         */
        fromData: function fromData(aData) {
          var propsToCopy = ["weeks", "days", "hours",
                             "minutes", "seconds", "isNegative"];
          for (var key in propsToCopy) {
            /* istanbul ignore if */
            if (!propsToCopy.hasOwnProperty(key)) {
              continue;
            }
            var prop = propsToCopy[key];
            if (aData && prop in aData) {
              this[prop] = aData[prop];
            } else {
              this[prop] = 0;
            }
          }
        },

        /**
         * Resets the duration instance to the default values, i.e. PT0S
         */
        reset: function reset() {
          this.isNegative = false;
          this.weeks = 0;
          this.days = 0;
          this.hours = 0;
          this.minutes = 0;
          this.seconds = 0;
        },

        /**
         * Compares the duration instance with another one.
         *
         * @param {ICAL.Duration} aOther        The instance to compare with
         * @return {Number}                     -1, 0 or 1 for less/equal/greater
         */
        compare: function compare(aOther) {
          var thisSeconds = this.toSeconds();
          var otherSeconds = aOther.toSeconds();
          return (thisSeconds > otherSeconds) - (thisSeconds < otherSeconds);
        },

        /**
         * Normalizes the duration instance. For example, a duration with a value
         * of 61 seconds will be normalized to 1 minute and 1 second.
         */
        normalize: function normalize() {
          this.fromSeconds(this.toSeconds());
        },

        /**
         * The string representation of this duration.
         * @return {String}
         */
        toString: function toString() {
          if (this.toSeconds() == 0) {
            return "PT0S";
          } else {
            var str = "";
            if (this.isNegative) str += "-";
            str += "P";
            if (this.weeks) str += this.weeks + "W";
            if (this.days) str += this.days + "D";

            if (this.hours || this.minutes || this.seconds) {
              str += "T";
              if (this.hours) str += this.hours + "H";
              if (this.minutes) str += this.minutes + "M";
              if (this.seconds) str += this.seconds + "S";
            }
            return str;
          }
        },

        /**
         * The iCalendar string representation of this duration.
         * @return {String}
         */
        toICALString: function() {
          return this.toString();
        }
      };

      /**
       * Returns a new ICAL.Duration instance from the passed seconds value.
       *
       * @param {Number} aSeconds       The seconds to create the instance from
       * @return {ICAL.Duration}        The newly created duration instance
       */
      ICAL.Duration.fromSeconds = function icalduration_from_seconds(aSeconds) {
        return (new ICAL.Duration()).fromSeconds(aSeconds);
      };

      /**
       * Internal helper function to handle a chunk of a duration.
       *
       * @param {String} letter type of duration chunk
       * @param {String} number numeric value or -/+
       * @param {Object} dict target to assign values to
       */
      function parseDurationChunk(letter, number, object) {
        var type;
        switch (letter) {
          case 'P':
            if (number && number === '-') {
              object.isNegative = true;
            } else {
              object.isNegative = false;
            }
            // period
            break;
          case 'D':
            type = 'days';
            break;
          case 'W':
            type = 'weeks';
            break;
          case 'H':
            type = 'hours';
            break;
          case 'M':
            type = 'minutes';
            break;
          case 'S':
            type = 'seconds';
            break;
          default:
            // Not a valid chunk
            return 0;
        }

        if (type) {
          if (!number && number !== 0) {
            throw new Error(
              'invalid duration value: Missing number before "' + letter + '"'
            );
          }
          var num = parseInt(number, 10);
          if (ICAL.helpers.isStrictlyNaN(num)) {
            throw new Error(
              'invalid duration value: Invalid number "' + number + '" before "' + letter + '"'
            );
          }
          object[type] = num;
        }

        return 1;
      }

      /**
       * Checks if the given string is an iCalendar duration value.
       *
       * @param {String} value      The raw ical value
       * @return {Boolean}          True, if the given value is of the
       *                              duration ical type
       */
      ICAL.Duration.isValueString = function(string) {
        return (string[0] === 'P' || string[1] === 'P');
      };

      /**
       * Creates a new {@link ICAL.Duration} instance from the passed string.
       *
       * @param {String} aStr       The string to parse
       * @return {ICAL.Duration}    The created duration instance
       */
      ICAL.Duration.fromString = function icalduration_from_string(aStr) {
        var pos = 0;
        var dict = Object.create(null);
        var chunks = 0;

        while ((pos = aStr.search(DURATION_LETTERS)) !== -1) {
          var type = aStr[pos];
          var numeric = aStr.substr(0, pos);
          aStr = aStr.substr(pos + 1);

          chunks += parseDurationChunk(type, numeric, dict);
        }

        if (chunks < 2) {
          // There must be at least a chunk with "P" and some unit chunk
          throw new Error(
            'invalid duration value: Not enough duration components in "' + aStr + '"'
          );
        }

        return new ICAL.Duration(dict);
      };

      /**
       * Creates a new ICAL.Duration instance from the given data object.
       *
       * @param {Object} aData               An object with members of the duration
       * @param {Number} aData.weeks         Duration in weeks
       * @param {Number} aData.days          Duration in days
       * @param {Number} aData.hours         Duration in hours
       * @param {Number} aData.minutes       Duration in minutes
       * @param {Number} aData.seconds       Duration in seconds
       * @param {Boolean} aData.isNegative   If true, the duration is negative
       * @return {ICAL.Duration}             The createad duration instance
       */
      ICAL.Duration.fromData = function icalduration_from_data(aData) {
        return new ICAL.Duration(aData);
      };
    })();
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2012 */



    (function() {
      var OPTIONS = ["tzid", "location", "tznames",
                     "latitude", "longitude"];

      /**
       * @classdesc
       * Timezone representation, created by passing in a tzid and component.
       *
       * @example
       * var vcalendar;
       * var timezoneComp = vcalendar.getFirstSubcomponent('vtimezone');
       * var tzid = timezoneComp.getFirstPropertyValue('tzid');
       *
       * var timezone = new ICAL.Timezone({
       *   component: timezoneComp,
       *   tzid
       * });
       *
       * @class
       * @param {ICAL.Component|Object} data options for class
       * @param {String|ICAL.Component} data.component
       *        If data is a simple object, then this member can be set to either a
       *        string containing the component data, or an already parsed
       *        ICAL.Component
       * @param {String} data.tzid      The timezone identifier
       * @param {String} data.location  The timezone locationw
       * @param {String} data.tznames   An alternative string representation of the
       *                                  timezone
       * @param {Number} data.latitude  The latitude of the timezone
       * @param {Number} data.longitude The longitude of the timezone
       */
      ICAL.Timezone = function icaltimezone(data) {
        this.wrappedJSObject = this;
        this.fromData(data);
      };

      ICAL.Timezone.prototype = {

        /**
         * Timezone identifier
         * @type {String}
         */
        tzid: "",

        /**
         * Timezone location
         * @type {String}
         */
        location: "",

        /**
         * Alternative timezone name, for the string representation
         * @type {String}
         */
        tznames: "",

        /**
         * The primary latitude for the timezone.
         * @type {Number}
         */
        latitude: 0.0,

        /**
         * The primary longitude for the timezone.
         * @type {Number}
         */
        longitude: 0.0,

        /**
         * The vtimezone component for this timezone.
         * @type {ICAL.Component}
         */
        component: null,

        /**
         * The year this timezone has been expanded to. All timezone transition
         * dates until this year are known and can be used for calculation
         *
         * @private
         * @type {Number}
         */
        expandedUntilYear: 0,

        /**
         * The class identifier.
         * @constant
         * @type {String}
         * @default "icaltimezone"
         */
        icalclass: "icaltimezone",

        /**
         * Sets up the current instance using members from the passed data object.
         *
         * @param {ICAL.Component|Object} aData options for class
         * @param {String|ICAL.Component} aData.component
         *        If aData is a simple object, then this member can be set to either a
         *        string containing the component data, or an already parsed
         *        ICAL.Component
         * @param {String} aData.tzid      The timezone identifier
         * @param {String} aData.location  The timezone locationw
         * @param {String} aData.tznames   An alternative string representation of the
         *                                  timezone
         * @param {Number} aData.latitude  The latitude of the timezone
         * @param {Number} aData.longitude The longitude of the timezone
         */
        fromData: function fromData(aData) {
          this.expandedUntilYear = 0;
          this.changes = [];

          if (aData instanceof ICAL.Component) {
            // Either a component is passed directly
            this.component = aData;
          } else {
            // Otherwise the component may be in the data object
            if (aData && "component" in aData) {
              if (typeof aData.component == "string") {
                // If a string was passed, parse it as a component
                var jCal = ICAL.parse(aData.component);
                this.component = new ICAL.Component(jCal);
              } else if (aData.component instanceof ICAL.Component) {
                // If it was a component already, then just set it
                this.component = aData.component;
              } else {
                // Otherwise just null out the component
                this.component = null;
              }
            }

            // Copy remaining passed properties
            for (var key in OPTIONS) {
              /* istanbul ignore else */
              if (OPTIONS.hasOwnProperty(key)) {
                var prop = OPTIONS[key];
                if (aData && prop in aData) {
                  this[prop] = aData[prop];
                }
              }
            }
          }

          // If we have a component but no TZID, attempt to get it from the
          // component's properties.
          if (this.component instanceof ICAL.Component && !this.tzid) {
            this.tzid = this.component.getFirstPropertyValue('tzid');
          }

          return this;
        },

        /**
         * Finds the utcOffset the given time would occur in this timezone.
         *
         * @param {ICAL.Time} tt        The time to check for
         * @return {Number} utc offset in seconds
         */
        utcOffset: function utcOffset(tt) {
          if (this == ICAL.Timezone.utcTimezone || this == ICAL.Timezone.localTimezone) {
            return 0;
          }

          this._ensureCoverage(tt.year);

          if (!this.changes.length) {
            return 0;
          }

          var tt_change = {
            year: tt.year,
            month: tt.month,
            day: tt.day,
            hour: tt.hour,
            minute: tt.minute,
            second: tt.second
          };

          var change_num = this._findNearbyChange(tt_change);
          var change_num_to_use = -1;
          var step = 1;

          // TODO: replace with bin search?
          for (;;) {
            var change = ICAL.helpers.clone(this.changes[change_num], true);
            if (change.utcOffset < change.prevUtcOffset) {
              ICAL.Timezone.adjust_change(change, 0, 0, 0, change.utcOffset);
            } else {
              ICAL.Timezone.adjust_change(change, 0, 0, 0,
                                              change.prevUtcOffset);
            }

            var cmp = ICAL.Timezone._compare_change_fn(tt_change, change);

            if (cmp >= 0) {
              change_num_to_use = change_num;
            } else {
              step = -1;
            }

            if (step == -1 && change_num_to_use != -1) {
              break;
            }

            change_num += step;

            if (change_num < 0) {
              return 0;
            }

            if (change_num >= this.changes.length) {
              break;
            }
          }

          var zone_change = this.changes[change_num_to_use];
          var utcOffset_change = zone_change.utcOffset - zone_change.prevUtcOffset;

          if (utcOffset_change < 0 && change_num_to_use > 0) {
            var tmp_change = ICAL.helpers.clone(zone_change, true);
            ICAL.Timezone.adjust_change(tmp_change, 0, 0, 0,
                                            tmp_change.prevUtcOffset);

            if (ICAL.Timezone._compare_change_fn(tt_change, tmp_change) < 0) {
              var prev_zone_change = this.changes[change_num_to_use - 1];

              var want_daylight = false; // TODO

              if (zone_change.is_daylight != want_daylight &&
                  prev_zone_change.is_daylight == want_daylight) {
                zone_change = prev_zone_change;
              }
            }
          }

          // TODO return is_daylight?
          return zone_change.utcOffset;
        },

        _findNearbyChange: function icaltimezone_find_nearby_change(change) {
          // find the closest match
          var idx = ICAL.helpers.binsearchInsert(
            this.changes,
            change,
            ICAL.Timezone._compare_change_fn
          );

          if (idx >= this.changes.length) {
            return this.changes.length - 1;
          }

          return idx;
        },

        _ensureCoverage: function(aYear) {
          if (ICAL.Timezone._minimumExpansionYear == -1) {
            var today = ICAL.Time.now();
            ICAL.Timezone._minimumExpansionYear = today.year;
          }

          var changesEndYear = aYear;
          if (changesEndYear < ICAL.Timezone._minimumExpansionYear) {
            changesEndYear = ICAL.Timezone._minimumExpansionYear;
          }

          changesEndYear += ICAL.Timezone.EXTRA_COVERAGE;

          if (changesEndYear > ICAL.Timezone.MAX_YEAR) {
            changesEndYear = ICAL.Timezone.MAX_YEAR;
          }

          if (!this.changes.length || this.expandedUntilYear < aYear) {
            var subcomps = this.component.getAllSubcomponents();
            var compLen = subcomps.length;
            var compIdx = 0;

            for (; compIdx < compLen; compIdx++) {
              this._expandComponent(
                subcomps[compIdx], changesEndYear, this.changes
              );
            }

            this.changes.sort(ICAL.Timezone._compare_change_fn);
            this.expandedUntilYear = changesEndYear;
          }
        },

        _expandComponent: function(aComponent, aYear, changes) {
          if (!aComponent.hasProperty("dtstart") ||
              !aComponent.hasProperty("tzoffsetto") ||
              !aComponent.hasProperty("tzoffsetfrom")) {
            return null;
          }

          var dtstart = aComponent.getFirstProperty("dtstart").getFirstValue();
          var change;

          function convert_tzoffset(offset) {
            return offset.factor * (offset.hours * 3600 + offset.minutes * 60);
          }

          function init_changes() {
            var changebase = {};
            changebase.is_daylight = (aComponent.name == "daylight");
            changebase.utcOffset = convert_tzoffset(
              aComponent.getFirstProperty("tzoffsetto").getFirstValue()
            );

            changebase.prevUtcOffset = convert_tzoffset(
              aComponent.getFirstProperty("tzoffsetfrom").getFirstValue()
            );

            return changebase;
          }

          if (!aComponent.hasProperty("rrule") && !aComponent.hasProperty("rdate")) {
            change = init_changes();
            change.year = dtstart.year;
            change.month = dtstart.month;
            change.day = dtstart.day;
            change.hour = dtstart.hour;
            change.minute = dtstart.minute;
            change.second = dtstart.second;

            ICAL.Timezone.adjust_change(change, 0, 0, 0,
                                            -change.prevUtcOffset);
            changes.push(change);
          } else {
            var props = aComponent.getAllProperties("rdate");
            for (var rdatekey in props) {
              /* istanbul ignore if */
              if (!props.hasOwnProperty(rdatekey)) {
                continue;
              }
              var rdate = props[rdatekey];
              var time = rdate.getFirstValue();
              change = init_changes();

              change.year = time.year;
              change.month = time.month;
              change.day = time.day;

              if (time.isDate) {
                change.hour = dtstart.hour;
                change.minute = dtstart.minute;
                change.second = dtstart.second;

                if (dtstart.zone != ICAL.Timezone.utcTimezone) {
                  ICAL.Timezone.adjust_change(change, 0, 0, 0,
                                                  -change.prevUtcOffset);
                }
              } else {
                change.hour = time.hour;
                change.minute = time.minute;
                change.second = time.second;

                if (time.zone != ICAL.Timezone.utcTimezone) {
                  ICAL.Timezone.adjust_change(change, 0, 0, 0,
                                                  -change.prevUtcOffset);
                }
              }

              changes.push(change);
            }

            var rrule = aComponent.getFirstProperty("rrule");

            if (rrule) {
              rrule = rrule.getFirstValue();
              change = init_changes();

              if (rrule.until && rrule.until.zone == ICAL.Timezone.utcTimezone) {
                rrule.until.adjust(0, 0, 0, change.prevUtcOffset);
                rrule.until.zone = ICAL.Timezone.localTimezone;
              }

              var iterator = rrule.iterator(dtstart);

              var occ;
              while ((occ = iterator.next())) {
                change = init_changes();
                if (occ.year > aYear || !occ) {
                  break;
                }

                change.year = occ.year;
                change.month = occ.month;
                change.day = occ.day;
                change.hour = occ.hour;
                change.minute = occ.minute;
                change.second = occ.second;
                change.isDate = occ.isDate;

                ICAL.Timezone.adjust_change(change, 0, 0, 0,
                                                -change.prevUtcOffset);
                changes.push(change);
              }
            }
          }

          return changes;
        },

        /**
         * The string representation of this timezone.
         * @return {String}
         */
        toString: function toString() {
          return (this.tznames ? this.tznames : this.tzid);
        }
      };

      ICAL.Timezone._compare_change_fn = function icaltimezone_compare_change_fn(a, b) {
        if (a.year < b.year) return -1;
        else if (a.year > b.year) return 1;

        if (a.month < b.month) return -1;
        else if (a.month > b.month) return 1;

        if (a.day < b.day) return -1;
        else if (a.day > b.day) return 1;

        if (a.hour < b.hour) return -1;
        else if (a.hour > b.hour) return 1;

        if (a.minute < b.minute) return -1;
        else if (a.minute > b.minute) return 1;

        if (a.second < b.second) return -1;
        else if (a.second > b.second) return 1;

        return 0;
      };

      /**
       * Convert the date/time from one zone to the next.
       *
       * @param {ICAL.Time} tt                  The time to convert
       * @param {ICAL.Timezone} from_zone       The source zone to convert from
       * @param {ICAL.Timezone} to_zone         The target zone to convert to
       * @return {ICAL.Time}                    The converted date/time object
       */
      ICAL.Timezone.convert_time = function icaltimezone_convert_time(tt, from_zone, to_zone) {
        if (tt.isDate ||
            from_zone.tzid == to_zone.tzid ||
            from_zone == ICAL.Timezone.localTimezone ||
            to_zone == ICAL.Timezone.localTimezone) {
          tt.zone = to_zone;
          return tt;
        }

        var utcOffset = from_zone.utcOffset(tt);
        tt.adjust(0, 0, 0, - utcOffset);

        utcOffset = to_zone.utcOffset(tt);
        tt.adjust(0, 0, 0, utcOffset);

        return null;
      };

      /**
       * Creates a new ICAL.Timezone instance from the passed data object.
       *
       * @param {ICAL.Component|Object} aData options for class
       * @param {String|ICAL.Component} aData.component
       *        If aData is a simple object, then this member can be set to either a
       *        string containing the component data, or an already parsed
       *        ICAL.Component
       * @param {String} aData.tzid      The timezone identifier
       * @param {String} aData.location  The timezone locationw
       * @param {String} aData.tznames   An alternative string representation of the
       *                                  timezone
       * @param {Number} aData.latitude  The latitude of the timezone
       * @param {Number} aData.longitude The longitude of the timezone
       */
      ICAL.Timezone.fromData = function icaltimezone_fromData(aData) {
        var tt = new ICAL.Timezone();
        return tt.fromData(aData);
      };

      /**
       * The instance describing the UTC timezone
       * @type {ICAL.Timezone}
       * @constant
       * @instance
       */
      ICAL.Timezone.utcTimezone = ICAL.Timezone.fromData({
        tzid: "UTC"
      });

      /**
       * The instance describing the local timezone
       * @type {ICAL.Timezone}
       * @constant
       * @instance
       */
      ICAL.Timezone.localTimezone = ICAL.Timezone.fromData({
        tzid: "floating"
      });

      /**
       * Adjust a timezone change object.
       * @private
       * @param {Object} change     The timezone change object
       * @param {Number} days       The extra amount of days
       * @param {Number} hours      The extra amount of hours
       * @param {Number} minutes    The extra amount of minutes
       * @param {Number} seconds    The extra amount of seconds
       */
      ICAL.Timezone.adjust_change = function icaltimezone_adjust_change(change, days, hours, minutes, seconds) {
        return ICAL.Time.prototype.adjust.call(
          change,
          days,
          hours,
          minutes,
          seconds,
          change
        );
      };

      ICAL.Timezone._minimumExpansionYear = -1;
      ICAL.Timezone.MAX_YEAR = 2035; // TODO this is because of time_t, which we don't need. Still usefull?
      ICAL.Timezone.EXTRA_COVERAGE = 5;
    })();
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    /**
     * This symbol is further described later on
     * @ignore
     */
    ICAL.TimezoneService = (function() {
      var zones;

      /**
       * @classdesc
       * Singleton class to contain timezones.  Right now its all manual registry in
       * the future we may use this class to download timezone information or handle
       * loading pre-expanded timezones.
       *
       * @namespace
       * @alias ICAL.TimezoneService
       */
      var TimezoneService = {
        get count() {
          return Object.keys(zones).length;
        },

        reset: function() {
          zones = Object.create(null);
          var utc = ICAL.Timezone.utcTimezone;

          zones.Z = utc;
          zones.UTC = utc;
          zones.GMT = utc;
        },

        /**
         * Checks if timezone id has been registered.
         *
         * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)
         * @return {Boolean}        False, when not present
         */
        has: function(tzid) {
          return !!zones[tzid];
        },

        /**
         * Returns a timezone by its tzid if present.
         *
         * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)
         * @return {?ICAL.Timezone} The timezone, or null if not found
         */
        get: function(tzid) {
          return zones[tzid];
        },

        /**
         * Registers a timezone object or component.
         *
         * @param {String=} name
         *        The name of the timezone. Defaults to the component's TZID if not
         *        passed.
         * @param {ICAL.Component|ICAL.Timezone} zone
         *        The initialized zone or vtimezone.
         */
        register: function(name, timezone) {
          if (name instanceof ICAL.Component) {
            if (name.name === 'vtimezone') {
              timezone = new ICAL.Timezone(name);
              name = timezone.tzid;
            }
          }

          if (timezone instanceof ICAL.Timezone) {
            zones[name] = timezone;
          } else {
            throw new TypeError('timezone must be ICAL.Timezone or ICAL.Component');
          }
        },

        /**
         * Removes a timezone by its tzid from the list.
         *
         * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)
         * @return {?ICAL.Timezone} The removed timezone, or null if not registered
         */
        remove: function(tzid) {
          return (delete zones[tzid]);
        }
      };

      // initialize defaults
      TimezoneService.reset();

      return TimezoneService;
    }());
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */



    (function() {

      /**
       * @classdesc
       * iCalendar Time representation (similar to JS Date object).  Fully
       * independent of system (OS) timezone / time.  Unlike JS Date, the month
       * January is 1, not zero.
       *
       * @example
       * var time = new ICAL.Time({
       *   year: 2012,
       *   month: 10,
       *   day: 11
       *   minute: 0,
       *   second: 0,
       *   isDate: false
       * });
       *
       *
       * @alias ICAL.Time
       * @class
       * @param {Object} data           Time initialization
       * @param {Number=} data.year     The year for this date
       * @param {Number=} data.month    The month for this date
       * @param {Number=} data.day      The day for this date
       * @param {Number=} data.hour     The hour for this date
       * @param {Number=} data.minute   The minute for this date
       * @param {Number=} data.second   The second for this date
       * @param {Boolean=} data.isDate  If true, the instance represents a date (as
       *                                  opposed to a date-time)
       * @param {ICAL.Timezone} zone timezone this position occurs in
       */
      ICAL.Time = function icaltime(data, zone) {
        this.wrappedJSObject = this;
        var time = this._time = Object.create(null);

        /* time defaults */
        time.year = 0;
        time.month = 1;
        time.day = 1;
        time.hour = 0;
        time.minute = 0;
        time.second = 0;
        time.isDate = false;

        this.fromData(data, zone);
      };

      ICAL.Time._dowCache = {};
      ICAL.Time._wnCache = {};

      ICAL.Time.prototype = {

        /**
         * The class identifier.
         * @constant
         * @type {String}
         * @default "icaltime"
         */
        icalclass: "icaltime",
        _cachedUnixTime: null,

        /**
         * The type name, to be used in the jCal object. This value may change and
         * is strictly defined by the {@link ICAL.Time#isDate isDate} member.
         * @readonly
         * @type {String}
         * @default "date-time"
         */
        get icaltype() {
          return this.isDate ? 'date' : 'date-time';
        },

        /**
         * The timezone for this time.
         * @type {ICAL.Timezone}
         */
        zone: null,

        /**
         * Internal uses to indicate that a change has been made and the next read
         * operation must attempt to normalize the value (for example changing the
         * day to 33).
         *
         * @type {Boolean}
         * @private
         */
        _pendingNormalization: false,

        /**
         * Returns a clone of the time object.
         *
         * @return {ICAL.Time}              The cloned object
         */
        clone: function() {
          return new ICAL.Time(this._time, this.zone);
        },

        /**
         * Reset the time instance to epoch time
         */
        reset: function icaltime_reset() {
          this.fromData(ICAL.Time.epochTime);
          this.zone = ICAL.Timezone.utcTimezone;
        },

        /**
         * Reset the time instance to the given date/time values.
         *
         * @param {Number} year             The year to set
         * @param {Number} month            The month to set
         * @param {Number} day              The day to set
         * @param {Number} hour             The hour to set
         * @param {Number} minute           The minute to set
         * @param {Number} second           The second to set
         * @param {ICAL.Timezone} timezone  The timezone to set
         */
        resetTo: function icaltime_resetTo(year, month, day,
                                           hour, minute, second, timezone) {
          this.fromData({
            year: year,
            month: month,
            day: day,
            hour: hour,
            minute: minute,
            second: second,
            zone: timezone
          });
        },

        /**
         * Set up the current instance from the Javascript date value.
         *
         * @param {?Date} aDate     The Javascript Date to read, or null to reset
         * @param {Boolean} useUTC  If true, the UTC values of the date will be used
         */
        fromJSDate: function icaltime_fromJSDate(aDate, useUTC) {
          if (!aDate) {
            this.reset();
          } else {
            if (useUTC) {
              this.zone = ICAL.Timezone.utcTimezone;
              this.year = aDate.getUTCFullYear();
              this.month = aDate.getUTCMonth() + 1;
              this.day = aDate.getUTCDate();
              this.hour = aDate.getUTCHours();
              this.minute = aDate.getUTCMinutes();
              this.second = aDate.getUTCSeconds();
            } else {
              this.zone = ICAL.Timezone.localTimezone;
              this.year = aDate.getFullYear();
              this.month = aDate.getMonth() + 1;
              this.day = aDate.getDate();
              this.hour = aDate.getHours();
              this.minute = aDate.getMinutes();
              this.second = aDate.getSeconds();
            }
          }
          this._cachedUnixTime = null;
          return this;
        },

        /**
         * Sets up the current instance using members from the passed data object.
         *
         * @param {Object} aData            Time initialization
         * @param {Number=} aData.year      The year for this date
         * @param {Number=} aData.month     The month for this date
         * @param {Number=} aData.day       The day for this date
         * @param {Number=} aData.hour      The hour for this date
         * @param {Number=} aData.minute    The minute for this date
         * @param {Number=} aData.second    The second for this date
         * @param {Boolean=} aData.isDate   If true, the instance represents a date
         *                                    (as opposed to a date-time)
         * @param {ICAL.Timezone=} aZone    Timezone this position occurs in
         */
        fromData: function fromData(aData, aZone) {
          if (aData) {
            for (var key in aData) {
              /* istanbul ignore else */
              if (Object.prototype.hasOwnProperty.call(aData, key)) {
                // ical type cannot be set
                if (key === 'icaltype') continue;
                this[key] = aData[key];
              }
            }
          }

          if (aZone) {
            this.zone = aZone;
          }

          if (aData && !("isDate" in aData)) {
            this.isDate = !("hour" in aData);
          } else if (aData && ("isDate" in aData)) {
            this.isDate = aData.isDate;
          }

          if (aData && "timezone" in aData) {
            var zone = ICAL.TimezoneService.get(
              aData.timezone
            );

            this.zone = zone || ICAL.Timezone.localTimezone;
          }

          if (aData && "zone" in aData) {
            this.zone = aData.zone;
          }

          if (!this.zone) {
            this.zone = ICAL.Timezone.localTimezone;
          }

          this._cachedUnixTime = null;
          return this;
        },

        /**
         * Calculate the day of week.
         * @param {ICAL.Time.weekDay=} aWeekStart
         *        The week start weekday, defaults to SUNDAY
         * @return {ICAL.Time.weekDay}
         */
        dayOfWeek: function icaltime_dayOfWeek(aWeekStart) {
          var firstDow = aWeekStart || ICAL.Time.SUNDAY;
          var dowCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + firstDow;
          if (dowCacheKey in ICAL.Time._dowCache) {
            return ICAL.Time._dowCache[dowCacheKey];
          }

          // Using Zeller's algorithm
          var q = this.day;
          var m = this.month + (this.month < 3 ? 12 : 0);
          var Y = this.year - (this.month < 3 ? 1 : 0);

          var h = (q + Y + ICAL.helpers.trunc(((m + 1) * 26) / 10) + ICAL.helpers.trunc(Y / 4));
          /* istanbul ignore else */
          {
            h += ICAL.helpers.trunc(Y / 100) * 6 + ICAL.helpers.trunc(Y / 400);
          }

          // Normalize to 1 = wkst
          h = ((h + 7 - firstDow) % 7) + 1;
          ICAL.Time._dowCache[dowCacheKey] = h;
          return h;
        },

        /**
         * Calculate the day of year.
         * @return {Number}
         */
        dayOfYear: function dayOfYear() {
          var is_leap = (ICAL.Time.isLeapYear(this.year) ? 1 : 0);
          var diypm = ICAL.Time.daysInYearPassedMonth;
          return diypm[is_leap][this.month - 1] + this.day;
        },

        /**
         * Returns a copy of the current date/time, rewound to the start of the
         * week. The resulting ICAL.Time instance is of icaltype date, even if this
         * is a date-time.
         *
         * @param {ICAL.Time.weekDay=} aWeekStart
         *        The week start weekday, defaults to SUNDAY
         * @return {ICAL.Time}      The start of the week (cloned)
         */
        startOfWeek: function startOfWeek(aWeekStart) {
          var firstDow = aWeekStart || ICAL.Time.SUNDAY;
          var result = this.clone();
          result.day -= ((this.dayOfWeek() + 7 - firstDow) % 7);
          result.isDate = true;
          result.hour = 0;
          result.minute = 0;
          result.second = 0;
          return result;
        },

        /**
         * Returns a copy of the current date/time, shifted to the end of the week.
         * The resulting ICAL.Time instance is of icaltype date, even if this is a
         * date-time.
         *
         * @param {ICAL.Time.weekDay=} aWeekStart
         *        The week start weekday, defaults to SUNDAY
         * @return {ICAL.Time}      The end of the week (cloned)
         */
        endOfWeek: function endOfWeek(aWeekStart) {
          var firstDow = aWeekStart || ICAL.Time.SUNDAY;
          var result = this.clone();
          result.day += (7 - this.dayOfWeek() + firstDow - ICAL.Time.SUNDAY) % 7;
          result.isDate = true;
          result.hour = 0;
          result.minute = 0;
          result.second = 0;
          return result;
        },

        /**
         * Returns a copy of the current date/time, rewound to the start of the
         * month. The resulting ICAL.Time instance is of icaltype date, even if
         * this is a date-time.
         *
         * @return {ICAL.Time}      The start of the month (cloned)
         */
        startOfMonth: function startOfMonth() {
          var result = this.clone();
          result.day = 1;
          result.isDate = true;
          result.hour = 0;
          result.minute = 0;
          result.second = 0;
          return result;
        },

        /**
         * Returns a copy of the current date/time, shifted to the end of the
         * month.  The resulting ICAL.Time instance is of icaltype date, even if
         * this is a date-time.
         *
         * @return {ICAL.Time}      The end of the month (cloned)
         */
        endOfMonth: function endOfMonth() {
          var result = this.clone();
          result.day = ICAL.Time.daysInMonth(result.month, result.year);
          result.isDate = true;
          result.hour = 0;
          result.minute = 0;
          result.second = 0;
          return result;
        },

        /**
         * Returns a copy of the current date/time, rewound to the start of the
         * year. The resulting ICAL.Time instance is of icaltype date, even if
         * this is a date-time.
         *
         * @return {ICAL.Time}      The start of the year (cloned)
         */
        startOfYear: function startOfYear() {
          var result = this.clone();
          result.day = 1;
          result.month = 1;
          result.isDate = true;
          result.hour = 0;
          result.minute = 0;
          result.second = 0;
          return result;
        },

        /**
         * Returns a copy of the current date/time, shifted to the end of the
         * year.  The resulting ICAL.Time instance is of icaltype date, even if
         * this is a date-time.
         *
         * @return {ICAL.Time}      The end of the year (cloned)
         */
        endOfYear: function endOfYear() {
          var result = this.clone();
          result.day = 31;
          result.month = 12;
          result.isDate = true;
          result.hour = 0;
          result.minute = 0;
          result.second = 0;
          return result;
        },

        /**
         * First calculates the start of the week, then returns the day of year for
         * this date. If the day falls into the previous year, the day is zero or negative.
         *
         * @param {ICAL.Time.weekDay=} aFirstDayOfWeek
         *        The week start weekday, defaults to SUNDAY
         * @return {Number}     The calculated day of year
         */
        startDoyWeek: function startDoyWeek(aFirstDayOfWeek) {
          var firstDow = aFirstDayOfWeek || ICAL.Time.SUNDAY;
          var delta = this.dayOfWeek() - firstDow;
          if (delta < 0) delta += 7;
          return this.dayOfYear() - delta;
        },

        /**
         * Get the dominical letter for the current year. Letters range from A - G
         * for common years, and AG to GF for leap years.
         *
         * @param {Number} yr           The year to retrieve the letter for
         * @return {String}             The dominical letter.
         */
        getDominicalLetter: function() {
          return ICAL.Time.getDominicalLetter(this.year);
        },

        /**
         * Finds the nthWeekDay relative to the current month (not day).  The
         * returned value is a day relative the month that this month belongs to so
         * 1 would indicate the first of the month and 40 would indicate a day in
         * the following month.
         *
         * @param {Number} aDayOfWeek   Day of the week see the day name constants
         * @param {Number} aPos         Nth occurrence of a given week day values
         *        of 1 and 0 both indicate the first weekday of that type. aPos may
         *        be either positive or negative
         *
         * @return {Number} numeric value indicating a day relative
         *                   to the current month of this time object
         */
        nthWeekDay: function icaltime_nthWeekDay(aDayOfWeek, aPos) {
          var daysInMonth = ICAL.Time.daysInMonth(this.month, this.year);
          var weekday;
          var pos = aPos;

          var start = 0;

          var otherDay = this.clone();

          if (pos >= 0) {
            otherDay.day = 1;

            // because 0 means no position has been given
            // 1 and 0 indicate the same day.
            if (pos != 0) {
              // remove the extra numeric value
              pos--;
            }

            // set current start offset to current day.
            start = otherDay.day;

            // find the current day of week
            var startDow = otherDay.dayOfWeek();

            // calculate the difference between current
            // day of the week and desired day of the week
            var offset = aDayOfWeek - startDow;


            // if the offset goes into the past
            // week we add 7 so its goes into the next
            // week. We only want to go forward in time here.
            if (offset < 0)
              // this is really important otherwise we would
              // end up with dates from in the past.
              offset += 7;

            // add offset to start so start is the same
            // day of the week as the desired day of week.
            start += offset;

            // because we are going to add (and multiply)
            // the numeric value of the day we subtract it
            // from the start position so not to add it twice.
            start -= aDayOfWeek;

            // set week day
            weekday = aDayOfWeek;
          } else {

            // then we set it to the last day in the current month
            otherDay.day = daysInMonth;

            // find the ends weekday
            var endDow = otherDay.dayOfWeek();

            pos++;

            weekday = (endDow - aDayOfWeek);

            if (weekday < 0) {
              weekday += 7;
            }

            weekday = daysInMonth - weekday;
          }

          weekday += pos * 7;

          return start + weekday;
        },

        /**
         * Checks if current time is the nth weekday, relative to the current
         * month.  Will always return false when rule resolves outside of current
         * month.
         *
         * @param {ICAL.Time.weekDay} aDayOfWeek       Day of week to check
         * @param {Number} aPos                        Relative position
         * @return {Boolean}                           True, if its the nth weekday
         */
        isNthWeekDay: function(aDayOfWeek, aPos) {
          var dow = this.dayOfWeek();

          if (aPos === 0 && dow === aDayOfWeek) {
            return true;
          }

          // get pos
          var day = this.nthWeekDay(aDayOfWeek, aPos);

          if (day === this.day) {
            return true;
          }

          return false;
        },

        /**
         * Calculates the ISO 8601 week number. The first week of a year is the
         * week that contains the first Thursday. The year can have 53 weeks, if
         * January 1st is a Friday.
         *
         * Note there are regions where the first week of the year is the one that
         * starts on January 1st, which may offset the week number. Also, if a
         * different week start is specified, this will also affect the week
         * number.
         *
         * @see ICAL.Time.weekOneStarts
         * @param {ICAL.Time.weekDay} aWeekStart        The weekday the week starts with
         * @return {Number}                             The ISO week number
         */
        weekNumber: function weekNumber(aWeekStart) {
          var wnCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + aWeekStart;
          if (wnCacheKey in ICAL.Time._wnCache) {
            return ICAL.Time._wnCache[wnCacheKey];
          }
          // This function courtesty of Julian Bucknall, published under the MIT license
          // http://www.boyet.com/articles/publishedarticles/calculatingtheisoweeknumb.html
          // plus some fixes to be able to use different week starts.
          var week1;

          var dt = this.clone();
          dt.isDate = true;
          var isoyear = this.year;

          if (dt.month == 12 && dt.day > 25) {
            week1 = ICAL.Time.weekOneStarts(isoyear + 1, aWeekStart);
            if (dt.compare(week1) < 0) {
              week1 = ICAL.Time.weekOneStarts(isoyear, aWeekStart);
            } else {
              isoyear++;
            }
          } else {
            week1 = ICAL.Time.weekOneStarts(isoyear, aWeekStart);
            if (dt.compare(week1) < 0) {
              week1 = ICAL.Time.weekOneStarts(--isoyear, aWeekStart);
            }
          }

          var daysBetween = (dt.subtractDate(week1).toSeconds() / 86400);
          var answer = ICAL.helpers.trunc(daysBetween / 7) + 1;
          ICAL.Time._wnCache[wnCacheKey] = answer;
          return answer;
        },

        /**
         * Adds the duration to the current time. The instance is modified in
         * place.
         *
         * @param {ICAL.Duration} aDuration         The duration to add
         */
        addDuration: function icaltime_add(aDuration) {
          var mult = (aDuration.isNegative ? -1 : 1);

          // because of the duration optimizations it is much
          // more efficient to grab all the values up front
          // then set them directly (which will avoid a normalization call).
          // So we don't actually normalize until we need it.
          var second = this.second;
          var minute = this.minute;
          var hour = this.hour;
          var day = this.day;

          second += mult * aDuration.seconds;
          minute += mult * aDuration.minutes;
          hour += mult * aDuration.hours;
          day += mult * aDuration.days;
          day += mult * 7 * aDuration.weeks;

          this.second = second;
          this.minute = minute;
          this.hour = hour;
          this.day = day;

          this._cachedUnixTime = null;
        },

        /**
         * Subtract the date details (_excluding_ timezone).  Useful for finding
         * the relative difference between two time objects excluding their
         * timezone differences.
         *
         * @param {ICAL.Time} aDate     The date to substract
         * @return {ICAL.Duration}      The difference as a duration
         */
        subtractDate: function icaltime_subtract(aDate) {
          var unixTime = this.toUnixTime() + this.utcOffset();
          var other = aDate.toUnixTime() + aDate.utcOffset();
          return ICAL.Duration.fromSeconds(unixTime - other);
        },

        /**
         * Subtract the date details, taking timezones into account.
         *
         * @param {ICAL.Time} aDate  The date to subtract
         * @return {ICAL.Duration}  The difference in duration
         */
        subtractDateTz: function icaltime_subtract_abs(aDate) {
          var unixTime = this.toUnixTime();
          var other = aDate.toUnixTime();
          return ICAL.Duration.fromSeconds(unixTime - other);
        },

        /**
         * Compares the ICAL.Time instance with another one.
         *
         * @param {ICAL.Duration} aOther        The instance to compare with
         * @return {Number}                     -1, 0 or 1 for less/equal/greater
         */
        compare: function icaltime_compare(other) {
          var a = this.toUnixTime();
          var b = other.toUnixTime();

          if (a > b) return 1;
          if (b > a) return -1;
          return 0;
        },

        /**
         * Compares only the date part of this instance with another one.
         *
         * @param {ICAL.Duration} other         The instance to compare with
         * @param {ICAL.Timezone} tz            The timezone to compare in
         * @return {Number}                     -1, 0 or 1 for less/equal/greater
         */
        compareDateOnlyTz: function icaltime_compareDateOnlyTz(other, tz) {
          function cmp(attr) {
            return ICAL.Time._cmp_attr(a, b, attr);
          }
          var a = this.convertToZone(tz);
          var b = other.convertToZone(tz);
          var rc = 0;

          if ((rc = cmp("year")) != 0) return rc;
          if ((rc = cmp("month")) != 0) return rc;
          if ((rc = cmp("day")) != 0) return rc;

          return rc;
        },

        /**
         * Convert the instance into another timzone. The returned ICAL.Time
         * instance is always a copy.
         *
         * @param {ICAL.Timezone} zone      The zone to convert to
         * @return {ICAL.Time}              The copy, converted to the zone
         */
        convertToZone: function convertToZone(zone) {
          var copy = this.clone();
          var zone_equals = (this.zone.tzid == zone.tzid);

          if (!this.isDate && !zone_equals) {
            ICAL.Timezone.convert_time(copy, this.zone, zone);
          }

          copy.zone = zone;
          return copy;
        },

        /**
         * Calculates the UTC offset of the current date/time in the timezone it is
         * in.
         *
         * @return {Number}     UTC offset in seconds
         */
        utcOffset: function utc_offset() {
          if (this.zone == ICAL.Timezone.localTimezone ||
              this.zone == ICAL.Timezone.utcTimezone) {
            return 0;
          } else {
            return this.zone.utcOffset(this);
          }
        },

        /**
         * Returns an RFC 5545 compliant ical representation of this object.
         *
         * @return {String} ical date/date-time
         */
        toICALString: function() {
          var string = this.toString();

          if (string.length > 10) {
            return ICAL.design.icalendar.value['date-time'].toICAL(string);
          } else {
            return ICAL.design.icalendar.value.date.toICAL(string);
          }
        },

        /**
         * The string representation of this date/time, in jCal form
         * (including : and - separators).
         * @return {String}
         */
        toString: function toString() {
          var result = this.year + '-' +
                       ICAL.helpers.pad2(this.month) + '-' +
                       ICAL.helpers.pad2(this.day);

          if (!this.isDate) {
              result += 'T' + ICAL.helpers.pad2(this.hour) + ':' +
                        ICAL.helpers.pad2(this.minute) + ':' +
                        ICAL.helpers.pad2(this.second);

            if (this.zone === ICAL.Timezone.utcTimezone) {
              result += 'Z';
            }
          }

          return result;
        },

        /**
         * Converts the current instance to a Javascript date
         * @return {Date}
         */
        toJSDate: function toJSDate() {
          if (this.zone == ICAL.Timezone.localTimezone) {
            if (this.isDate) {
              return new Date(this.year, this.month - 1, this.day);
            } else {
              return new Date(this.year, this.month - 1, this.day,
                              this.hour, this.minute, this.second, 0);
            }
          } else {
            return new Date(this.toUnixTime() * 1000);
          }
        },

        _normalize: function icaltime_normalize() {
          this._time.isDate;
          if (this._time.isDate) {
            this._time.hour = 0;
            this._time.minute = 0;
            this._time.second = 0;
          }
          this.adjust(0, 0, 0, 0);

          return this;
        },

        /**
         * Adjust the date/time by the given offset
         *
         * @param {Number} aExtraDays       The extra amount of days
         * @param {Number} aExtraHours      The extra amount of hours
         * @param {Number} aExtraMinutes    The extra amount of minutes
         * @param {Number} aExtraSeconds    The extra amount of seconds
         * @param {Number=} aTime           The time to adjust, defaults to the
         *                                    current instance.
         */
        adjust: function icaltime_adjust(aExtraDays, aExtraHours,
                                         aExtraMinutes, aExtraSeconds, aTime) {

          var minutesOverflow, hoursOverflow,
              daysOverflow = 0, yearsOverflow = 0;

          var second, minute, hour, day;
          var daysInMonth;

          var time = aTime || this._time;

          if (!time.isDate) {
            second = time.second + aExtraSeconds;
            time.second = second % 60;
            minutesOverflow = ICAL.helpers.trunc(second / 60);
            if (time.second < 0) {
              time.second += 60;
              minutesOverflow--;
            }

            minute = time.minute + aExtraMinutes + minutesOverflow;
            time.minute = minute % 60;
            hoursOverflow = ICAL.helpers.trunc(minute / 60);
            if (time.minute < 0) {
              time.minute += 60;
              hoursOverflow--;
            }

            hour = time.hour + aExtraHours + hoursOverflow;

            time.hour = hour % 24;
            daysOverflow = ICAL.helpers.trunc(hour / 24);
            if (time.hour < 0) {
              time.hour += 24;
              daysOverflow--;
            }
          }


          // Adjust month and year first, because we need to know what month the day
          // is in before adjusting it.
          if (time.month > 12) {
            yearsOverflow = ICAL.helpers.trunc((time.month - 1) / 12);
          } else if (time.month < 1) {
            yearsOverflow = ICAL.helpers.trunc(time.month / 12) - 1;
          }

          time.year += yearsOverflow;
          time.month -= 12 * yearsOverflow;

          // Now take care of the days (and adjust month if needed)
          day = time.day + aExtraDays + daysOverflow;

          if (day > 0) {
            for (;;) {
              daysInMonth = ICAL.Time.daysInMonth(time.month, time.year);
              if (day <= daysInMonth) {
                break;
              }

              time.month++;
              if (time.month > 12) {
                time.year++;
                time.month = 1;
              }

              day -= daysInMonth;
            }
          } else {
            while (day <= 0) {
              if (time.month == 1) {
                time.year--;
                time.month = 12;
              } else {
                time.month--;
              }

              day += ICAL.Time.daysInMonth(time.month, time.year);
            }
          }

          time.day = day;

          this._cachedUnixTime = null;
          return this;
        },

        /**
         * Sets up the current instance from unix time, the number of seconds since
         * January 1st, 1970.
         *
         * @param {Number} seconds      The seconds to set up with
         */
        fromUnixTime: function fromUnixTime(seconds) {
          this.zone = ICAL.Timezone.utcTimezone;
          var epoch = ICAL.Time.epochTime.clone();
          epoch.adjust(0, 0, 0, seconds);

          this.year = epoch.year;
          this.month = epoch.month;
          this.day = epoch.day;
          this.hour = epoch.hour;
          this.minute = epoch.minute;
          this.second = Math.floor(epoch.second);

          this._cachedUnixTime = null;
        },

        /**
         * Converts the current instance to seconds since January 1st 1970.
         *
         * @return {Number}         Seconds since 1970
         */
        toUnixTime: function toUnixTime() {
          if (this._cachedUnixTime !== null) {
            return this._cachedUnixTime;
          }
          var offset = this.utcOffset();

          // we use the offset trick to ensure
          // that we are getting the actual UTC time
          var ms = Date.UTC(
            this.year,
            this.month - 1,
            this.day,
            this.hour,
            this.minute,
            this.second - offset
          );

          // seconds
          this._cachedUnixTime = ms / 1000;
          return this._cachedUnixTime;
        },

        /**
         * Converts time to into Object which can be serialized then re-created
         * using the constructor.
         *
         * @example
         * // toJSON will automatically be called
         * var json = JSON.stringify(mytime);
         *
         * var deserialized = JSON.parse(json);
         *
         * var time = new ICAL.Time(deserialized);
         *
         * @return {Object}
         */
        toJSON: function() {
          var copy = [
            'year',
            'month',
            'day',
            'hour',
            'minute',
            'second',
            'isDate'
          ];

          var result = Object.create(null);

          var i = 0;
          var len = copy.length;
          var prop;

          for (; i < len; i++) {
            prop = copy[i];
            result[prop] = this[prop];
          }

          if (this.zone) {
            result.timezone = this.zone.tzid;
          }

          return result;
        }

      };

      (function setupNormalizeAttributes() {
        // This needs to run before any instances are created!
        function defineAttr(attr) {
          Object.defineProperty(ICAL.Time.prototype, attr, {
            get: function getTimeAttr() {
              if (this._pendingNormalization) {
                this._normalize();
                this._pendingNormalization = false;
              }

              return this._time[attr];
            },
            set: function setTimeAttr(val) {
              // Check if isDate will be set and if was not set to normalize date.
              // This avoids losing days when seconds, minutes and hours are zeroed
              // what normalize will do when time is a date.
              if (attr === "isDate" && val && !this._time.isDate) {
                this.adjust(0, 0, 0, 0);
              }
              this._cachedUnixTime = null;
              this._pendingNormalization = true;
              this._time[attr] = val;

              return val;
            }
          });

        }

        /* istanbul ignore else */
        if ("defineProperty" in Object) {
          defineAttr("year");
          defineAttr("month");
          defineAttr("day");
          defineAttr("hour");
          defineAttr("minute");
          defineAttr("second");
          defineAttr("isDate");
        }
      })();

      /**
       * Returns the days in the given month
       *
       * @param {Number} month      The month to check
       * @param {Number} year       The year to check
       * @return {Number}           The number of days in the month
       */
      ICAL.Time.daysInMonth = function icaltime_daysInMonth(month, year) {
        var _daysInMonth = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        var days = 30;

        if (month < 1 || month > 12) return days;

        days = _daysInMonth[month];

        if (month == 2) {
          days += ICAL.Time.isLeapYear(year);
        }

        return days;
      };

      /**
       * Checks if the year is a leap year
       *
       * @param {Number} year       The year to check
       * @return {Boolean}          True, if the year is a leap year
       */
      ICAL.Time.isLeapYear = function isLeapYear(year) {
        if (year <= 1752) {
          return ((year % 4) == 0);
        } else {
          return (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0));
        }
      };

      /**
       * Create a new ICAL.Time from the day of year and year. The date is returned
       * in floating timezone.
       *
       * @param {Number} aDayOfYear     The day of year
       * @param {Number} aYear          The year to create the instance in
       * @return {ICAL.Time}            The created instance with the calculated date
       */
      ICAL.Time.fromDayOfYear = function icaltime_fromDayOfYear(aDayOfYear, aYear) {
        var year = aYear;
        var doy = aDayOfYear;
        var tt = new ICAL.Time();
        tt.auto_normalize = false;
        var is_leap = (ICAL.Time.isLeapYear(year) ? 1 : 0);

        if (doy < 1) {
          year--;
          is_leap = (ICAL.Time.isLeapYear(year) ? 1 : 0);
          doy += ICAL.Time.daysInYearPassedMonth[is_leap][12];
          return ICAL.Time.fromDayOfYear(doy, year);
        } else if (doy > ICAL.Time.daysInYearPassedMonth[is_leap][12]) {
          is_leap = (ICAL.Time.isLeapYear(year) ? 1 : 0);
          doy -= ICAL.Time.daysInYearPassedMonth[is_leap][12];
          year++;
          return ICAL.Time.fromDayOfYear(doy, year);
        }

        tt.year = year;
        tt.isDate = true;

        for (var month = 11; month >= 0; month--) {
          if (doy > ICAL.Time.daysInYearPassedMonth[is_leap][month]) {
            tt.month = month + 1;
            tt.day = doy - ICAL.Time.daysInYearPassedMonth[is_leap][month];
            break;
          }
        }

        tt.auto_normalize = true;
        return tt;
      };

      /**
       * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.
       *
       * @deprecated                Use {@link ICAL.Time.fromDateString} instead
       * @param {String} str        The string to create from
       * @return {ICAL.Time}        The date/time instance
       */
      ICAL.Time.fromStringv2 = function fromString(str) {
        return new ICAL.Time({
          year: parseInt(str.substr(0, 4), 10),
          month: parseInt(str.substr(5, 2), 10),
          day: parseInt(str.substr(8, 2), 10),
          isDate: true
        });
      };

      /**
       * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.
       *
       * @param {String} aValue     The string to create from
       * @return {ICAL.Time}        The date/time instance
       */
      ICAL.Time.fromDateString = function(aValue) {
        // Dates should have no timezone.
        // Google likes to sometimes specify Z on dates
        // we specifically ignore that to avoid issues.

        // YYYY-MM-DD
        // 2012-10-10
        return new ICAL.Time({
          year: ICAL.helpers.strictParseInt(aValue.substr(0, 4)),
          month: ICAL.helpers.strictParseInt(aValue.substr(5, 2)),
          day: ICAL.helpers.strictParseInt(aValue.substr(8, 2)),
          isDate: true
        });
      };

      /**
       * Returns a new ICAL.Time instance from a date-time string, e.g
       * 2015-01-02T03:04:05. If a property is specified, the timezone is set up
       * from the property's TZID parameter.
       *
       * @param {String} aValue         The string to create from
       * @param {ICAL.Property=} prop   The property the date belongs to
       * @return {ICAL.Time}            The date/time instance
       */
      ICAL.Time.fromDateTimeString = function(aValue, prop) {
        if (aValue.length < 19) {
          throw new Error(
            'invalid date-time value: "' + aValue + '"'
          );
        }

        var zone;

        if (aValue[19] && aValue[19] === 'Z') {
          zone = 'Z';
        } else if (prop) {
          zone = prop.getParameter('tzid');
        }

        // 2012-10-10T10:10:10(Z)?
        var time = new ICAL.Time({
          year: ICAL.helpers.strictParseInt(aValue.substr(0, 4)),
          month: ICAL.helpers.strictParseInt(aValue.substr(5, 2)),
          day: ICAL.helpers.strictParseInt(aValue.substr(8, 2)),
          hour: ICAL.helpers.strictParseInt(aValue.substr(11, 2)),
          minute: ICAL.helpers.strictParseInt(aValue.substr(14, 2)),
          second: ICAL.helpers.strictParseInt(aValue.substr(17, 2)),
          timezone: zone
        });

        return time;
      };

      /**
       * Returns a new ICAL.Time instance from a date or date-time string,
       *
       * @param {String} aValue         The string to create from
       * @param {ICAL.Property=} prop   The property the date belongs to
       * @return {ICAL.Time}            The date/time instance
       */
      ICAL.Time.fromString = function fromString(aValue, aProperty) {
        if (aValue.length > 10) {
          return ICAL.Time.fromDateTimeString(aValue, aProperty);
        } else {
          return ICAL.Time.fromDateString(aValue);
        }
      };

      /**
       * Creates a new ICAL.Time instance from the given Javascript Date.
       *
       * @param {?Date} aDate     The Javascript Date to read, or null to reset
       * @param {Boolean} useUTC  If true, the UTC values of the date will be used
       */
      ICAL.Time.fromJSDate = function fromJSDate(aDate, useUTC) {
        var tt = new ICAL.Time();
        return tt.fromJSDate(aDate, useUTC);
      };

      /**
       * Creates a new ICAL.Time instance from the the passed data object.
       *
       * @param {Object} aData            Time initialization
       * @param {Number=} aData.year      The year for this date
       * @param {Number=} aData.month     The month for this date
       * @param {Number=} aData.day       The day for this date
       * @param {Number=} aData.hour      The hour for this date
       * @param {Number=} aData.minute    The minute for this date
       * @param {Number=} aData.second    The second for this date
       * @param {Boolean=} aData.isDate   If true, the instance represents a date
       *                                    (as opposed to a date-time)
       * @param {ICAL.Timezone=} aZone    Timezone this position occurs in
       */
      ICAL.Time.fromData = function fromData(aData, aZone) {
        var t = new ICAL.Time();
        return t.fromData(aData, aZone);
      };

      /**
       * Creates a new ICAL.Time instance from the current moment.
       * @return {ICAL.Time}
       */
      ICAL.Time.now = function icaltime_now() {
        return ICAL.Time.fromJSDate(new Date(), false);
      };

      /**
       * Returns the date on which ISO week number 1 starts.
       *
       * @see ICAL.Time#weekNumber
       * @param {Number} aYear                  The year to search in
       * @param {ICAL.Time.weekDay=} aWeekStart The week start weekday, used for calculation.
       * @return {ICAL.Time}                    The date on which week number 1 starts
       */
      ICAL.Time.weekOneStarts = function weekOneStarts(aYear, aWeekStart) {
        var t = ICAL.Time.fromData({
          year: aYear,
          month: 1,
          day: 1,
          isDate: true
        });

        var dow = t.dayOfWeek();
        var wkst = aWeekStart || ICAL.Time.DEFAULT_WEEK_START;
        if (dow > ICAL.Time.THURSDAY) {
          t.day += 7;
        }
        if (wkst > ICAL.Time.THURSDAY) {
          t.day -= 7;
        }

        t.day -= dow - wkst;

        return t;
      };

      /**
       * Get the dominical letter for the given year. Letters range from A - G for
       * common years, and AG to GF for leap years.
       *
       * @param {Number} yr           The year to retrieve the letter for
       * @return {String}             The dominical letter.
       */
      ICAL.Time.getDominicalLetter = function(yr) {
        var LTRS = "GFEDCBA";
        var dom = (yr + (yr / 4 | 0) + (yr / 400 | 0) - (yr / 100 | 0) - 1) % 7;
        var isLeap = ICAL.Time.isLeapYear(yr);
        if (isLeap) {
          return LTRS[(dom + 6) % 7] + LTRS[dom];
        } else {
          return LTRS[dom];
        }
      };

      /**
       * January 1st, 1970 as an ICAL.Time.
       * @type {ICAL.Time}
       * @constant
       * @instance
       */
      ICAL.Time.epochTime = ICAL.Time.fromData({
        year: 1970,
        month: 1,
        day: 1,
        hour: 0,
        minute: 0,
        second: 0,
        isDate: false,
        timezone: "Z"
      });

      ICAL.Time._cmp_attr = function _cmp_attr(a, b, attr) {
        if (a[attr] > b[attr]) return 1;
        if (a[attr] < b[attr]) return -1;
        return 0;
      };

      /**
       * The days that have passed in the year after a given month. The array has
       * two members, one being an array of passed days for non-leap years, the
       * other analog for leap years.
       * @example
       * var isLeapYear = ICAL.Time.isLeapYear(year);
       * var passedDays = ICAL.Time.daysInYearPassedMonth[isLeapYear][month];
       * @type {Array.<Array.<Number>>}
       */
      ICAL.Time.daysInYearPassedMonth = [
        [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365],
        [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]
      ];

      /**
       * The weekday, 1 = SUNDAY, 7 = SATURDAY. Access via
       * ICAL.Time.MONDAY, ICAL.Time.TUESDAY, ...
       *
       * @typedef {Number} weekDay
       * @memberof ICAL.Time
       */

      ICAL.Time.SUNDAY = 1;
      ICAL.Time.MONDAY = 2;
      ICAL.Time.TUESDAY = 3;
      ICAL.Time.WEDNESDAY = 4;
      ICAL.Time.THURSDAY = 5;
      ICAL.Time.FRIDAY = 6;
      ICAL.Time.SATURDAY = 7;

      /**
       * The default weekday for the WKST part.
       * @constant
       * @default ICAL.Time.MONDAY
       */
      ICAL.Time.DEFAULT_WEEK_START = ICAL.Time.MONDAY;
    })();
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2015 */



    (function() {

      /**
       * Describes a vCard time, which has slight differences to the ICAL.Time.
       * Properties can be null if not specified, for example for dates with
       * reduced accuracy or truncation.
       *
       * Note that currently not all methods are correctly re-implemented for
       * VCardTime. For example, comparison will have undefined results when some
       * members are null.
       *
       * Also, normalization is not yet implemented for this class!
       *
       * @alias ICAL.VCardTime
       * @class
       * @extends {ICAL.Time}
       * @param {Object} data                           The data for the time instance
       * @param {Number=} data.year                     The year for this date
       * @param {Number=} data.month                    The month for this date
       * @param {Number=} data.day                      The day for this date
       * @param {Number=} data.hour                     The hour for this date
       * @param {Number=} data.minute                   The minute for this date
       * @param {Number=} data.second                   The second for this date
       * @param {ICAL.Timezone|ICAL.UtcOffset} zone     The timezone to use
       * @param {String} icaltype                       The type for this date/time object
       */
      ICAL.VCardTime = function(data, zone, icaltype) {
        this.wrappedJSObject = this;
        var time = this._time = Object.create(null);

        time.year = null;
        time.month = null;
        time.day = null;
        time.hour = null;
        time.minute = null;
        time.second = null;

        this.icaltype = icaltype || "date-and-or-time";

        this.fromData(data, zone);
      };
      ICAL.helpers.inherits(ICAL.Time, ICAL.VCardTime, /** @lends ICAL.VCardTime */ {

        /**
         * The class identifier.
         * @constant
         * @type {String}
         * @default "vcardtime"
         */
        icalclass: "vcardtime",

        /**
         * The type name, to be used in the jCal object.
         * @type {String}
         * @default "date-and-or-time"
         */
        icaltype: "date-and-or-time",

        /**
         * The timezone. This can either be floating, UTC, or an instance of
         * ICAL.UtcOffset.
         * @type {ICAL.Timezone|ICAL.UtcOFfset}
         */
        zone: null,

        /**
         * Returns a clone of the vcard date/time object.
         *
         * @return {ICAL.VCardTime}     The cloned object
         */
        clone: function() {
          return new ICAL.VCardTime(this._time, this.zone, this.icaltype);
        },

        _normalize: function() {
          return this;
        },

        /**
         * @inheritdoc
         */
        utcOffset: function() {
          if (this.zone instanceof ICAL.UtcOffset) {
            return this.zone.toSeconds();
          } else {
            return ICAL.Time.prototype.utcOffset.apply(this, arguments);
          }
        },

        /**
         * Returns an RFC 6350 compliant representation of this object.
         *
         * @return {String}         vcard date/time string
         */
        toICALString: function() {
          return ICAL.design.vcard.value[this.icaltype].toICAL(this.toString());
        },

        /**
         * The string representation of this date/time, in jCard form
         * (including : and - separators).
         * @return {String}
         */
        toString: function toString() {
          var p2 = ICAL.helpers.pad2;
          var y = this.year, m = this.month, d = this.day;
          var h = this.hour, mm = this.minute, s = this.second;

          var hasYear = y !== null, hasMonth = m !== null, hasDay = d !== null;
          var hasHour = h !== null, hasMinute = mm !== null, hasSecond = s !== null;

          var datepart = (hasYear ? p2(y) + (hasMonth || hasDay ? '-' : '') : (hasMonth || hasDay ? '--' : '')) +
                         (hasMonth ? p2(m) : '') +
                         (hasDay ? '-' + p2(d) : '');
          var timepart = (hasHour ? p2(h) : '-') + (hasHour && hasMinute ? ':' : '') +
                         (hasMinute ? p2(mm) : '') + (!hasHour && !hasMinute ? '-' : '') +
                         (hasMinute && hasSecond ? ':' : '') +
                         (hasSecond ? p2(s) : '');

          var zone;
          if (this.zone === ICAL.Timezone.utcTimezone) {
            zone = 'Z';
          } else if (this.zone instanceof ICAL.UtcOffset) {
            zone = this.zone.toString();
          } else if (this.zone === ICAL.Timezone.localTimezone) {
            zone = '';
          } else if (this.zone instanceof ICAL.Timezone) {
            var offset = ICAL.UtcOffset.fromSeconds(this.zone.utcOffset(this));
            zone = offset.toString();
          } else {
            zone = '';
          }

          switch (this.icaltype) {
            case "time":
              return timepart + zone;
            case "date-and-or-time":
            case "date-time":
              return datepart + (timepart == '--' ? '' : 'T' + timepart + zone);
            case "date":
              return datepart;
          }
          return null;
        }
      });

      /**
       * Returns a new ICAL.VCardTime instance from a date and/or time string.
       *
       * @param {String} aValue     The string to create from
       * @param {String} aIcalType  The type for this instance, e.g. date-and-or-time
       * @return {ICAL.VCardTime}   The date/time instance
       */
      ICAL.VCardTime.fromDateAndOrTimeString = function(aValue, aIcalType) {
        function part(v, s, e) {
          return v ? ICAL.helpers.strictParseInt(v.substr(s, e)) : null;
        }
        var parts = aValue.split('T');
        var dt = parts[0], tmz = parts[1];
        var splitzone = tmz ? ICAL.design.vcard.value.time._splitZone(tmz) : [];
        var zone = splitzone[0], tm = splitzone[1];

        ICAL.helpers.strictParseInt;
        var dtlen = dt ? dt.length : 0;
        var tmlen = tm ? tm.length : 0;

        var hasDashDate = dt && dt[0] == '-' && dt[1] == '-';
        var hasDashTime = tm && tm[0] == '-';

        var o = {
          year: hasDashDate ? null : part(dt, 0, 4),
          month: hasDashDate && (dtlen == 4 || dtlen == 7) ? part(dt, 2, 2) : dtlen == 7 ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 5, 2) : null,
          day: dtlen == 5 ? part(dt, 3, 2) : dtlen == 7 && hasDashDate ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 8, 2) : null,

          hour: hasDashTime ? null : part(tm, 0, 2),
          minute: hasDashTime && tmlen == 3 ? part(tm, 1, 2) : tmlen > 4 ? hasDashTime ? part(tm, 1, 2) : part(tm, 3, 2) : null,
          second: tmlen == 4 ? part(tm, 2, 2) : tmlen == 6 ? part(tm, 4, 2) : tmlen == 8 ? part(tm, 6, 2) : null
        };

        if (zone == 'Z') {
          zone = ICAL.Timezone.utcTimezone;
        } else if (zone && zone[3] == ':') {
          zone = ICAL.UtcOffset.fromString(zone);
        } else {
          zone = null;
        }

        return new ICAL.VCardTime(o, zone, aIcalType);
      };
    })();
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */



    (function() {
      var DOW_MAP = {
        SU: ICAL.Time.SUNDAY,
        MO: ICAL.Time.MONDAY,
        TU: ICAL.Time.TUESDAY,
        WE: ICAL.Time.WEDNESDAY,
        TH: ICAL.Time.THURSDAY,
        FR: ICAL.Time.FRIDAY,
        SA: ICAL.Time.SATURDAY
      };

      var REVERSE_DOW_MAP = {};
      for (var key in DOW_MAP) {
        /* istanbul ignore else */
        if (DOW_MAP.hasOwnProperty(key)) {
          REVERSE_DOW_MAP[DOW_MAP[key]] = key;
        }
      }

      /**
       * @classdesc
       * This class represents the "recur" value type, with various calculation
       * and manipulation methods.
       *
       * @class
       * @alias ICAL.Recur
       * @param {Object} data                               An object with members of the recurrence
       * @param {ICAL.Recur.frequencyValues=} data.freq     The frequency value
       * @param {Number=} data.interval                     The INTERVAL value
       * @param {ICAL.Time.weekDay=} data.wkst              The week start value
       * @param {ICAL.Time=} data.until                     The end of the recurrence set
       * @param {Number=} data.count                        The number of occurrences
       * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part
       * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part
       * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part
       * @param {Array.<String>=} data.byday                The BYDAY values
       * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part
       * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part
       * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part
       * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part
       * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part
       */
      ICAL.Recur = function icalrecur(data) {
        this.wrappedJSObject = this;
        this.parts = {};

        if (data && typeof(data) === 'object') {
          this.fromData(data);
        }
      };

      ICAL.Recur.prototype = {
        /**
         * An object holding the BY-parts of the recurrence rule
         * @type {Object}
         */
        parts: null,

        /**
         * The interval value for the recurrence rule.
         * @type {Number}
         */
        interval: 1,

        /**
         * The week start day
         *
         * @type {ICAL.Time.weekDay}
         * @default ICAL.Time.MONDAY
         */
        wkst: ICAL.Time.MONDAY,

        /**
         * The end of the recurrence
         * @type {?ICAL.Time}
         */
        until: null,

        /**
         * The maximum number of occurrences
         * @type {?Number}
         */
        count: null,

        /**
         * The frequency value.
         * @type {ICAL.Recur.frequencyValues}
         */
        freq: null,

        /**
         * The class identifier.
         * @constant
         * @type {String}
         * @default "icalrecur"
         */
        icalclass: "icalrecur",

        /**
         * The type name, to be used in the jCal object.
         * @constant
         * @type {String}
         * @default "recur"
         */
        icaltype: "recur",

        /**
         * Create a new iterator for this recurrence rule. The passed start date
         * must be the start date of the event, not the start of the range to
         * search in.
         *
         * @example
         * var recur = comp.getFirstPropertyValue('rrule');
         * var dtstart = comp.getFirstPropertyValue('dtstart');
         * var iter = recur.iterator(dtstart);
         * for (var next = iter.next(); next; next = iter.next()) {
         *   if (next.compare(rangeStart) < 0) {
         *     continue;
         *   }
         *   console.log(next.toString());
         * }
         *
         * @param {ICAL.Time} aStart        The item's start date
         * @return {ICAL.RecurIterator}     The recurrence iterator
         */
        iterator: function(aStart) {
          return new ICAL.RecurIterator({
            rule: this,
            dtstart: aStart
          });
        },

        /**
         * Returns a clone of the recurrence object.
         *
         * @return {ICAL.Recur}      The cloned object
         */
        clone: function clone() {
          return new ICAL.Recur(this.toJSON());
        },

        /**
         * Checks if the current rule is finite, i.e. has a count or until part.
         *
         * @return {Boolean}        True, if the rule is finite
         */
        isFinite: function isfinite() {
          return !!(this.count || this.until);
        },

        /**
         * Checks if the current rule has a count part, and not limited by an until
         * part.
         *
         * @return {Boolean}        True, if the rule is by count
         */
        isByCount: function isbycount() {
          return !!(this.count && !this.until);
        },

        /**
         * Adds a component (part) to the recurrence rule. This is not a component
         * in the sense of {@link ICAL.Component}, but a part of the recurrence
         * rule, i.e. BYMONTH.
         *
         * @param {String} aType            The name of the component part
         * @param {Array|String} aValue     The component value
         */
        addComponent: function addPart(aType, aValue) {
          var ucname = aType.toUpperCase();
          if (ucname in this.parts) {
            this.parts[ucname].push(aValue);
          } else {
            this.parts[ucname] = [aValue];
          }
        },

        /**
         * Sets the component value for the given by-part.
         *
         * @param {String} aType        The component part name
         * @param {Array} aValues       The component values
         */
        setComponent: function setComponent(aType, aValues) {
          this.parts[aType.toUpperCase()] = aValues.slice();
        },

        /**
         * Gets (a copy) of the requested component value.
         *
         * @param {String} aType        The component part name
         * @return {Array}              The component part value
         */
        getComponent: function getComponent(aType) {
          var ucname = aType.toUpperCase();
          return (ucname in this.parts ? this.parts[ucname].slice() : []);
        },

        /**
         * Retrieves the next occurrence after the given recurrence id. See the
         * guide on {@tutorial terminology} for more details.
         *
         * NOTE: Currently, this method iterates all occurrences from the start
         * date. It should not be called in a loop for performance reasons. If you
         * would like to get more than one occurrence, you can iterate the
         * occurrences manually, see the example on the
         * {@link ICAL.Recur#iterator iterator} method.
         *
         * @param {ICAL.Time} aStartTime        The start of the event series
         * @param {ICAL.Time} aRecurrenceId     The date of the last occurrence
         * @return {ICAL.Time}                  The next occurrence after
         */
        getNextOccurrence: function getNextOccurrence(aStartTime, aRecurrenceId) {
          var iter = this.iterator(aStartTime);
          var next;

          do {
            next = iter.next();
          } while (next && next.compare(aRecurrenceId) <= 0);

          if (next && aRecurrenceId.zone) {
            next.zone = aRecurrenceId.zone;
          }

          return next;
        },

        /**
         * Sets up the current instance using members from the passed data object.
         *
         * @param {Object} data                               An object with members of the recurrence
         * @param {ICAL.Recur.frequencyValues=} data.freq     The frequency value
         * @param {Number=} data.interval                     The INTERVAL value
         * @param {ICAL.Time.weekDay=} data.wkst              The week start value
         * @param {ICAL.Time=} data.until                     The end of the recurrence set
         * @param {Number=} data.count                        The number of occurrences
         * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part
         * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part
         * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part
         * @param {Array.<String>=} data.byday                The BYDAY values
         * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part
         * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part
         * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part
         * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part
         * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part
         */
        fromData: function(data) {
          for (var key in data) {
            var uckey = key.toUpperCase();

            if (uckey in partDesign) {
              if (Array.isArray(data[key])) {
                this.parts[uckey] = data[key];
              } else {
                this.parts[uckey] = [data[key]];
              }
            } else {
              this[key] = data[key];
            }
          }

          if (this.interval && typeof this.interval != "number") {
            optionDesign.INTERVAL(this.interval, this);
          }

          if (this.wkst && typeof this.wkst != "number") {
            this.wkst = ICAL.Recur.icalDayToNumericDay(this.wkst);
          }

          if (this.until && !(this.until instanceof ICAL.Time)) {
            this.until = ICAL.Time.fromString(this.until);
          }
        },

        /**
         * The jCal representation of this recurrence type.
         * @return {Object}
         */
        toJSON: function() {
          var res = Object.create(null);
          res.freq = this.freq;

          if (this.count) {
            res.count = this.count;
          }

          if (this.interval > 1) {
            res.interval = this.interval;
          }

          for (var k in this.parts) {
            /* istanbul ignore if */
            if (!this.parts.hasOwnProperty(k)) {
              continue;
            }
            var kparts = this.parts[k];
            if (Array.isArray(kparts) && kparts.length == 1) {
              res[k.toLowerCase()] = kparts[0];
            } else {
              res[k.toLowerCase()] = ICAL.helpers.clone(this.parts[k]);
            }
          }

          if (this.until) {
            res.until = this.until.toString();
          }
          if ('wkst' in this && this.wkst !== ICAL.Time.DEFAULT_WEEK_START) {
            res.wkst = ICAL.Recur.numericDayToIcalDay(this.wkst);
          }
          return res;
        },

        /**
         * The string representation of this recurrence rule.
         * @return {String}
         */
        toString: function icalrecur_toString() {
          // TODO retain order
          var str = "FREQ=" + this.freq;
          if (this.count) {
            str += ";COUNT=" + this.count;
          }
          if (this.interval > 1) {
            str += ";INTERVAL=" + this.interval;
          }
          for (var k in this.parts) {
            /* istanbul ignore else */
            if (this.parts.hasOwnProperty(k)) {
              str += ";" + k + "=" + this.parts[k];
            }
          }
          if (this.until) {
            str += ';UNTIL=' + this.until.toICALString();
          }
          if ('wkst' in this && this.wkst !== ICAL.Time.DEFAULT_WEEK_START) {
            str += ';WKST=' + ICAL.Recur.numericDayToIcalDay(this.wkst);
          }
          return str;
        }
      };

      function parseNumericValue(type, min, max, value) {
        var result = value;

        if (value[0] === '+') {
          result = value.substr(1);
        }

        result = ICAL.helpers.strictParseInt(result);

        if (min !== undefined && value < min) {
          throw new Error(
            type + ': invalid value "' + value + '" must be > ' + min
          );
        }

        if (max !== undefined && value > max) {
          throw new Error(
            type + ': invalid value "' + value + '" must be < ' + min
          );
        }

        return result;
      }

      /**
       * Convert an ical representation of a day (SU, MO, etc..)
       * into a numeric value of that day.
       *
       * @param {String} string     The iCalendar day name
       * @param {ICAL.Time.weekDay=} aWeekStart
       *        The week start weekday, defaults to SUNDAY
       * @return {Number}           Numeric value of given day
       */
      ICAL.Recur.icalDayToNumericDay = function toNumericDay(string, aWeekStart) {
        //XXX: this is here so we can deal
        //     with possibly invalid string values.
        var firstDow = aWeekStart || ICAL.Time.SUNDAY;
        return ((DOW_MAP[string] - firstDow + 7) % 7) + 1;
      };

      /**
       * Convert a numeric day value into its ical representation (SU, MO, etc..)
       *
       * @param {Number} num        Numeric value of given day
       * @param {ICAL.Time.weekDay=} aWeekStart
       *        The week start weekday, defaults to SUNDAY
       * @return {String}           The ICAL day value, e.g SU,MO,...
       */
      ICAL.Recur.numericDayToIcalDay = function toIcalDay(num, aWeekStart) {
        //XXX: this is here so we can deal with possibly invalid number values.
        //     Also, this allows consistent mapping between day numbers and day
        //     names for external users.
        var firstDow = aWeekStart || ICAL.Time.SUNDAY;
        var dow = (num + firstDow - ICAL.Time.SUNDAY);
        if (dow > 7) {
          dow -= 7;
        }
        return REVERSE_DOW_MAP[dow];
      };

      var VALID_DAY_NAMES = /^(SU|MO|TU|WE|TH|FR|SA)$/;
      var VALID_BYDAY_PART = /^([+-])?(5[0-3]|[1-4][0-9]|[1-9])?(SU|MO|TU|WE|TH|FR|SA)$/;

      /**
       * Possible frequency values for the FREQ part
       * (YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY, SECONDLY)
       *
       * @typedef {String} frequencyValues
       * @memberof ICAL.Recur
       */

      var ALLOWED_FREQ = ['SECONDLY', 'MINUTELY', 'HOURLY',
                          'DAILY', 'WEEKLY', 'MONTHLY', 'YEARLY'];

      var optionDesign = {
        FREQ: function(value, dict, fmtIcal) {
          // yes this is actually equal or faster then regex.
          // upside here is we can enumerate the valid values.
          if (ALLOWED_FREQ.indexOf(value) !== -1) {
            dict.freq = value;
          } else {
            throw new Error(
              'invalid frequency "' + value + '" expected: "' +
              ALLOWED_FREQ.join(', ') + '"'
            );
          }
        },

        COUNT: function(value, dict, fmtIcal) {
          dict.count = ICAL.helpers.strictParseInt(value);
        },

        INTERVAL: function(value, dict, fmtIcal) {
          dict.interval = ICAL.helpers.strictParseInt(value);
          if (dict.interval < 1) {
            // 0 or negative values are not allowed, some engines seem to generate
            // it though. Assume 1 instead.
            dict.interval = 1;
          }
        },

        UNTIL: function(value, dict, fmtIcal) {
          if (value.length > 10) {
            dict.until = ICAL.design.icalendar.value['date-time'].fromICAL(value);
          } else {
            dict.until = ICAL.design.icalendar.value.date.fromICAL(value);
          }
          if (!fmtIcal) {
            dict.until = ICAL.Time.fromString(dict.until);
          }
        },

        WKST: function(value, dict, fmtIcal) {
          if (VALID_DAY_NAMES.test(value)) {
            dict.wkst = ICAL.Recur.icalDayToNumericDay(value);
          } else {
            throw new Error('invalid WKST value "' + value + '"');
          }
        }
      };

      var partDesign = {
        BYSECOND: parseNumericValue.bind(this, 'BYSECOND', 0, 60),
        BYMINUTE: parseNumericValue.bind(this, 'BYMINUTE', 0, 59),
        BYHOUR: parseNumericValue.bind(this, 'BYHOUR', 0, 23),
        BYDAY: function(value) {
          if (VALID_BYDAY_PART.test(value)) {
            return value;
          } else {
            throw new Error('invalid BYDAY value "' + value + '"');
          }
        },
        BYMONTHDAY: parseNumericValue.bind(this, 'BYMONTHDAY', -31, 31),
        BYYEARDAY: parseNumericValue.bind(this, 'BYYEARDAY', -366, 366),
        BYWEEKNO: parseNumericValue.bind(this, 'BYWEEKNO', -53, 53),
        BYMONTH: parseNumericValue.bind(this, 'BYMONTH', 0, 12),
        BYSETPOS: parseNumericValue.bind(this, 'BYSETPOS', -366, 366)
      };


      /**
       * Creates a new {@link ICAL.Recur} instance from the passed string.
       *
       * @param {String} string         The string to parse
       * @return {ICAL.Recur}           The created recurrence instance
       */
      ICAL.Recur.fromString = function(string) {
        var data = ICAL.Recur._stringToData(string, false);
        return new ICAL.Recur(data);
      };

      /**
       * Creates a new {@link ICAL.Recur} instance using members from the passed
       * data object.
       *
       * @param {Object} aData                              An object with members of the recurrence
       * @param {ICAL.Recur.frequencyValues=} aData.freq    The frequency value
       * @param {Number=} aData.interval                    The INTERVAL value
       * @param {ICAL.Time.weekDay=} aData.wkst             The week start value
       * @param {ICAL.Time=} aData.until                    The end of the recurrence set
       * @param {Number=} aData.count                       The number of occurrences
       * @param {Array.<Number>=} aData.bysecond            The seconds for the BYSECOND part
       * @param {Array.<Number>=} aData.byminute            The minutes for the BYMINUTE part
       * @param {Array.<Number>=} aData.byhour              The hours for the BYHOUR part
       * @param {Array.<String>=} aData.byday               The BYDAY values
       * @param {Array.<Number>=} aData.bymonthday          The days for the BYMONTHDAY part
       * @param {Array.<Number>=} aData.byyearday           The days for the BYYEARDAY part
       * @param {Array.<Number>=} aData.byweekno            The weeks for the BYWEEKNO part
       * @param {Array.<Number>=} aData.bymonth             The month for the BYMONTH part
       * @param {Array.<Number>=} aData.bysetpos            The positionals for the BYSETPOS part
       */
      ICAL.Recur.fromData = function(aData) {
        return new ICAL.Recur(aData);
      };

      /**
       * Converts a recurrence string to a data object, suitable for the fromData
       * method.
       *
       * @param {String} string     The string to parse
       * @param {Boolean} fmtIcal   If true, the string is considered to be an
       *                              iCalendar string
       * @return {ICAL.Recur}       The recurrence instance
       */
      ICAL.Recur._stringToData = function(string, fmtIcal) {
        var dict = Object.create(null);

        // split is slower in FF but fast enough.
        // v8 however this is faster then manual split?
        var values = string.split(';');
        var len = values.length;

        for (var i = 0; i < len; i++) {
          var parts = values[i].split('=');
          var ucname = parts[0].toUpperCase();
          var lcname = parts[0].toLowerCase();
          var name = (fmtIcal ? lcname : ucname);
          var value = parts[1];

          if (ucname in partDesign) {
            var partArr = value.split(',');
            var partArrIdx = 0;
            var partArrLen = partArr.length;

            for (; partArrIdx < partArrLen; partArrIdx++) {
              partArr[partArrIdx] = partDesign[ucname](partArr[partArrIdx]);
            }
            dict[name] = (partArr.length == 1 ? partArr[0] : partArr);
          } else if (ucname in optionDesign) {
            optionDesign[ucname](value, dict, fmtIcal);
          } else {
            // Don't swallow unknown values. Just set them as they are.
            dict[lcname] = value;
          }
        }

        return dict;
      };
    })();
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    /**
     * This symbol is further described later on
     * @ignore
     */
    ICAL.RecurIterator = (function() {

      /**
       * @classdesc
       * An iterator for a single recurrence rule. This class usually doesn't have
       * to be instanciated directly, the convenience method
       * {@link ICAL.Recur#iterator} can be used.
       *
       * @description
       * The options object may contain additional members when resuming iteration from a previous run
       *
       * @description
       * The options object may contain additional members when resuming iteration
       * from a previous run.
       *
       * @class
       * @alias ICAL.RecurIterator
       * @param {Object} options                The iterator options
       * @param {ICAL.Recur} options.rule       The rule to iterate.
       * @param {ICAL.Time} options.dtstart     The start date of the event.
       * @param {Boolean=} options.initialized  When true, assume that options are
       *        from a previously constructed iterator. Initialization will not be
       *        repeated.
       */
      function icalrecur_iterator(options) {
        this.fromData(options);
      }

      icalrecur_iterator.prototype = {

        /**
         * True when iteration is finished.
         * @type {Boolean}
         */
        completed: false,

        /**
         * The rule that is being iterated
         * @type {ICAL.Recur}
         */
        rule: null,

        /**
         * The start date of the event being iterated.
         * @type {ICAL.Time}
         */
        dtstart: null,

        /**
         * The last occurrence that was returned from the
         * {@link ICAL.RecurIterator#next} method.
         * @type {ICAL.Time}
         */
        last: null,

        /**
         * The sequence number from the occurrence
         * @type {Number}
         */
        occurrence_number: 0,

        /**
         * The indices used for the {@link ICAL.RecurIterator#by_data} object.
         * @type {Object}
         * @private
         */
        by_indices: null,

        /**
         * If true, the iterator has already been initialized
         * @type {Boolean}
         * @private
         */
        initialized: false,

        /**
         * The initializd by-data.
         * @type {Object}
         * @private
         */
        by_data: null,

        /**
         * The expanded yeardays
         * @type {Array}
         * @private
         */
        days: null,

        /**
         * The index in the {@link ICAL.RecurIterator#days} array.
         * @type {Number}
         * @private
         */
        days_index: 0,

        /**
         * Initialize the recurrence iterator from the passed data object. This
         * method is usually not called directly, you can initialize the iterator
         * through the constructor.
         *
         * @param {Object} options                The iterator options
         * @param {ICAL.Recur} options.rule       The rule to iterate.
         * @param {ICAL.Time} options.dtstart     The start date of the event.
         * @param {Boolean=} options.initialized  When true, assume that options are
         *        from a previously constructed iterator. Initialization will not be
         *        repeated.
         */
        fromData: function(options) {
          this.rule = ICAL.helpers.formatClassType(options.rule, ICAL.Recur);

          if (!this.rule) {
            throw new Error('iterator requires a (ICAL.Recur) rule');
          }

          this.dtstart = ICAL.helpers.formatClassType(options.dtstart, ICAL.Time);

          if (!this.dtstart) {
            throw new Error('iterator requires a (ICAL.Time) dtstart');
          }

          if (options.by_data) {
            this.by_data = options.by_data;
          } else {
            this.by_data = ICAL.helpers.clone(this.rule.parts, true);
          }

          if (options.occurrence_number)
            this.occurrence_number = options.occurrence_number;

          this.days = options.days || [];
          if (options.last) {
            this.last = ICAL.helpers.formatClassType(options.last, ICAL.Time);
          }

          this.by_indices = options.by_indices;

          if (!this.by_indices) {
            this.by_indices = {
              "BYSECOND": 0,
              "BYMINUTE": 0,
              "BYHOUR": 0,
              "BYDAY": 0,
              "BYMONTH": 0,
              "BYWEEKNO": 0,
              "BYMONTHDAY": 0
            };
          }

          this.initialized = options.initialized || false;

          if (!this.initialized) {
            this.init();
          }
        },

        /**
         * Intialize the iterator
         * @private
         */
        init: function icalrecur_iterator_init() {
          this.initialized = true;
          this.last = this.dtstart.clone();
          var parts = this.by_data;

          if ("BYDAY" in parts) {
            // libical does this earlier when the rule is loaded, but we postpone to
            // now so we can preserve the original order.
            this.sort_byday_rules(parts.BYDAY);
          }

          // If the BYYEARDAY appares, no other date rule part may appear
          if ("BYYEARDAY" in parts) {
            if ("BYMONTH" in parts || "BYWEEKNO" in parts ||
                "BYMONTHDAY" in parts || "BYDAY" in parts) {
              throw new Error("Invalid BYYEARDAY rule");
            }
          }

          // BYWEEKNO and BYMONTHDAY rule parts may not both appear
          if ("BYWEEKNO" in parts && "BYMONTHDAY" in parts) {
            throw new Error("BYWEEKNO does not fit to BYMONTHDAY");
          }

          // For MONTHLY recurrences (FREQ=MONTHLY) neither BYYEARDAY nor
          // BYWEEKNO may appear.
          if (this.rule.freq == "MONTHLY" &&
              ("BYYEARDAY" in parts || "BYWEEKNO" in parts)) {
            throw new Error("For MONTHLY recurrences neither BYYEARDAY nor BYWEEKNO may appear");
          }

          // For WEEKLY recurrences (FREQ=WEEKLY) neither BYMONTHDAY nor
          // BYYEARDAY may appear.
          if (this.rule.freq == "WEEKLY" &&
              ("BYYEARDAY" in parts || "BYMONTHDAY" in parts)) {
            throw new Error("For WEEKLY recurrences neither BYMONTHDAY nor BYYEARDAY may appear");
          }

          // BYYEARDAY may only appear in YEARLY rules
          if (this.rule.freq != "YEARLY" && "BYYEARDAY" in parts) {
            throw new Error("BYYEARDAY may only appear in YEARLY rules");
          }

          this.last.second = this.setup_defaults("BYSECOND", "SECONDLY", this.dtstart.second);
          this.last.minute = this.setup_defaults("BYMINUTE", "MINUTELY", this.dtstart.minute);
          this.last.hour = this.setup_defaults("BYHOUR", "HOURLY", this.dtstart.hour);
          this.last.day = this.setup_defaults("BYMONTHDAY", "DAILY", this.dtstart.day);
          this.last.month = this.setup_defaults("BYMONTH", "MONTHLY", this.dtstart.month);

          if (this.rule.freq == "WEEKLY") {
            if ("BYDAY" in parts) {
              var bydayParts = this.ruleDayOfWeek(parts.BYDAY[0], this.rule.wkst);
              var pos = bydayParts[0];
              var dow = bydayParts[1];
              var wkdy = dow - this.last.dayOfWeek(this.rule.wkst);
              if ((this.last.dayOfWeek(this.rule.wkst) < dow && wkdy >= 0) || wkdy < 0) {
                // Initial time is after first day of BYDAY data
                this.last.day += wkdy;
              }
            } else {
              var dayName = ICAL.Recur.numericDayToIcalDay(this.dtstart.dayOfWeek());
              parts.BYDAY = [dayName];
            }
          }

          if (this.rule.freq == "YEARLY") {
            for (;;) {
              this.expand_year_days(this.last.year);
              if (this.days.length > 0) {
                break;
              }
              this.increment_year(this.rule.interval);
            }

            this._nextByYearDay();
          }

          if (this.rule.freq == "MONTHLY" && this.has_by_data("BYDAY")) {
            var tempLast = null;
            var initLast = this.last.clone();
            var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);

            // Check every weekday in BYDAY with relative dow and pos.
            for (var i in this.by_data.BYDAY) {
              /* istanbul ignore if */
              if (!this.by_data.BYDAY.hasOwnProperty(i)) {
                continue;
              }
              this.last = initLast.clone();
              var bydayParts = this.ruleDayOfWeek(this.by_data.BYDAY[i]);
              var pos = bydayParts[0];
              var dow = bydayParts[1];
              var dayOfMonth = this.last.nthWeekDay(dow, pos);

              // If |pos| >= 6, the byday is invalid for a monthly rule.
              if (pos >= 6 || pos <= -6) {
                throw new Error("Malformed values in BYDAY part");
              }

              // If a Byday with pos=+/-5 is not in the current month it
              // must be searched in the next months.
              if (dayOfMonth > daysInMonth || dayOfMonth <= 0) {
                // Skip if we have already found a "last" in this month.
                if (tempLast && tempLast.month == initLast.month) {
                  continue;
                }
                while (dayOfMonth > daysInMonth || dayOfMonth <= 0) {
                  this.increment_month();
                  daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
                  dayOfMonth = this.last.nthWeekDay(dow, pos);
                }
              }

              this.last.day = dayOfMonth;
              if (!tempLast || this.last.compare(tempLast) < 0) {
                tempLast = this.last.clone();
              }
            }
            this.last = tempLast.clone();

            //XXX: This feels like a hack, but we need to initialize
            //     the BYMONTHDAY case correctly and byDayAndMonthDay handles
            //     this case. It accepts a special flag which will avoid incrementing
            //     the initial value without the flag days that match the start time
            //     would be missed.
            if (this.has_by_data('BYMONTHDAY')) {
              this._byDayAndMonthDay(true);
            }

            if (this.last.day > daysInMonth || this.last.day == 0) {
              throw new Error("Malformed values in BYDAY part");
            }

          } else if (this.has_by_data("BYMONTHDAY")) {
            if (this.last.day < 0) {
              var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
              this.last.day = daysInMonth + this.last.day + 1;
            }
          }

        },

        /**
         * Retrieve the next occurrence from the iterator.
         * @return {ICAL.Time}
         */
        next: function icalrecur_iterator_next() {
          var before = (this.last ? this.last.clone() : null);

          if ((this.rule.count && this.occurrence_number >= this.rule.count) ||
              (this.rule.until && this.last.compare(this.rule.until) > 0)) {

            //XXX: right now this is just a flag and has no impact
            //     we can simplify the above case to check for completed later.
            this.completed = true;

            return null;
          }

          if (this.occurrence_number == 0 && this.last.compare(this.dtstart) >= 0) {
            // First of all, give the instance that was initialized
            this.occurrence_number++;
            return this.last;
          }


          var valid;
          do {
            valid = 1;

            switch (this.rule.freq) {
            case "SECONDLY":
              this.next_second();
              break;
            case "MINUTELY":
              this.next_minute();
              break;
            case "HOURLY":
              this.next_hour();
              break;
            case "DAILY":
              this.next_day();
              break;
            case "WEEKLY":
              this.next_week();
              break;
            case "MONTHLY":
              valid = this.next_month();
              break;
            case "YEARLY":
              this.next_year();
              break;

            default:
              return null;
            }
          } while (!this.check_contracting_rules() ||
                   this.last.compare(this.dtstart) < 0 ||
                   !valid);

          // TODO is this valid?
          if (this.last.compare(before) == 0) {
            throw new Error("Same occurrence found twice, protecting " +
                            "you from death by recursion");
          }

          if (this.rule.until && this.last.compare(this.rule.until) > 0) {
            this.completed = true;
            return null;
          } else {
            this.occurrence_number++;
            return this.last;
          }
        },

        next_second: function next_second() {
          return this.next_generic("BYSECOND", "SECONDLY", "second", "minute");
        },

        increment_second: function increment_second(inc) {
          return this.increment_generic(inc, "second", 60, "minute");
        },

        next_minute: function next_minute() {
          return this.next_generic("BYMINUTE", "MINUTELY",
                                   "minute", "hour", "next_second");
        },

        increment_minute: function increment_minute(inc) {
          return this.increment_generic(inc, "minute", 60, "hour");
        },

        next_hour: function next_hour() {
          return this.next_generic("BYHOUR", "HOURLY", "hour",
                                   "monthday", "next_minute");
        },

        increment_hour: function increment_hour(inc) {
          this.increment_generic(inc, "hour", 24, "monthday");
        },

        next_day: function next_day() {
          ("BYDAY" in this.by_data);
          var this_freq = (this.rule.freq == "DAILY");

          if (this.next_hour() == 0) {
            return 0;
          }

          if (this_freq) {
            this.increment_monthday(this.rule.interval);
          } else {
            this.increment_monthday(1);
          }

          return 0;
        },

        next_week: function next_week() {
          var end_of_data = 0;

          if (this.next_weekday_by_week() == 0) {
            return end_of_data;
          }

          if (this.has_by_data("BYWEEKNO")) {
            ++this.by_indices.BYWEEKNO;

            if (this.by_indices.BYWEEKNO == this.by_data.BYWEEKNO.length) {
              this.by_indices.BYWEEKNO = 0;
              end_of_data = 1;
            }

            // HACK should be first month of the year
            this.last.month = 1;
            this.last.day = 1;

            var week_no = this.by_data.BYWEEKNO[this.by_indices.BYWEEKNO];

            this.last.day += 7 * week_no;

            if (end_of_data) {
              this.increment_year(1);
            }
          } else {
            // Jump to the next week
            this.increment_monthday(7 * this.rule.interval);
          }

          return end_of_data;
        },

        /**
         * Normalize each by day rule for a given year/month.
         * Takes into account ordering and negative rules
         *
         * @private
         * @param {Number} year         Current year.
         * @param {Number} month        Current month.
         * @param {Array}  rules        Array of rules.
         *
         * @return {Array} sorted and normalized rules.
         *                 Negative rules will be expanded to their
         *                 correct positive values for easier processing.
         */
        normalizeByMonthDayRules: function(year, month, rules) {
          var daysInMonth = ICAL.Time.daysInMonth(month, year);

          // XXX: This is probably bad for performance to allocate
          //      a new array for each month we scan, if possible
          //      we should try to optimize this...
          var newRules = [];

          var ruleIdx = 0;
          var len = rules.length;
          var rule;

          for (; ruleIdx < len; ruleIdx++) {
            rule = rules[ruleIdx];

            // if this rule falls outside of given
            // month discard it.
            if (Math.abs(rule) > daysInMonth) {
              continue;
            }

            // negative case
            if (rule < 0) {
              // we add (not subtract its a negative number)
              // one from the rule because 1 === last day of month
              rule = daysInMonth + (rule + 1);
            } else if (rule === 0) {
              // skip zero its invalid.
              continue;
            }

            // only add unique items...
            if (newRules.indexOf(rule) === -1) {
              newRules.push(rule);
            }

          }

          // unique and sort
          return newRules.sort(function(a, b) { return a - b; });
        },

        /**
         * NOTES:
         * We are given a list of dates in the month (BYMONTHDAY) (23, etc..)
         * Also we are given a list of days (BYDAY) (MO, 2SU, etc..) when
         * both conditions match a given date (this.last.day) iteration stops.
         *
         * @private
         * @param {Boolean=} isInit     When given true will not increment the
         *                                current day (this.last).
         */
        _byDayAndMonthDay: function(isInit) {
          var byMonthDay; // setup in initMonth
          var byDay = this.by_data.BYDAY;

          var date;
          var dateIdx = 0;
          var dateLen; // setup in initMonth
          var dayLen = byDay.length;

          // we are not valid by default
          var dataIsValid = 0;

          var daysInMonth;
          var self = this;
          // we need a copy of this, because a DateTime gets normalized
          // automatically if the day is out of range. At some points we
          // set the last day to 0 to start counting.
          var lastDay = this.last.day;

          function initMonth() {
            daysInMonth = ICAL.Time.daysInMonth(
              self.last.month, self.last.year
            );

            byMonthDay = self.normalizeByMonthDayRules(
              self.last.year,
              self.last.month,
              self.by_data.BYMONTHDAY
            );

            dateLen = byMonthDay.length;

            // For the case of more than one occurrence in one month
            // we have to be sure to start searching after the last
            // found date or at the last BYMONTHDAY, unless we are
            // initializing the iterator because in this case we have
            // to consider the last found date too.
            while (byMonthDay[dateIdx] <= lastDay &&
                   !(isInit && byMonthDay[dateIdx] == lastDay) &&
                   dateIdx < dateLen - 1) {
              dateIdx++;
            }
          }

          function nextMonth() {
            // since the day is incremented at the start
            // of the loop below, we need to start at 0
            lastDay = 0;
            self.increment_month();
            dateIdx = 0;
            initMonth();
          }

          initMonth();

          // should come after initMonth
          if (isInit) {
            lastDay -= 1;
          }

          // Use a counter to avoid an infinite loop with malformed rules.
          // Stop checking after 4 years so we consider also a leap year.
          var monthsCounter = 48;

          while (!dataIsValid && monthsCounter) {
            monthsCounter--;
            // increment the current date. This is really
            // important otherwise we may fall into the infinite
            // loop trap. The initial date takes care of the case
            // where the current date is the date we are looking
            // for.
            date = lastDay + 1;

            if (date > daysInMonth) {
              nextMonth();
              continue;
            }

            // find next date
            var next = byMonthDay[dateIdx++];

            // this logic is dependant on the BYMONTHDAYS
            // being in order (which is done by #normalizeByMonthDayRules)
            if (next >= date) {
              // if the next month day is in the future jump to it.
              lastDay = next;
            } else {
              // in this case the 'next' monthday has past
              // we must move to the month.
              nextMonth();
              continue;
            }

            // Now we can loop through the day rules to see
            // if one matches the current month date.
            for (var dayIdx = 0; dayIdx < dayLen; dayIdx++) {
              var parts = this.ruleDayOfWeek(byDay[dayIdx]);
              var pos = parts[0];
              var dow = parts[1];

              this.last.day = lastDay;
              if (this.last.isNthWeekDay(dow, pos)) {
                // when we find the valid one we can mark
                // the conditions as met and break the loop.
                // (Because we have this condition above
                //  it will also break the parent loop).
                dataIsValid = 1;
                break;
              }
            }

            // Its completely possible that the combination
            // cannot be matched in the current month.
            // When we reach the end of possible combinations
            // in the current month we iterate to the next one.
            // since dateIdx is incremented right after getting
            // "next", we don't need dateLen -1 here.
            if (!dataIsValid && dateIdx === dateLen) {
              nextMonth();
              continue;
            }
          }

          if (monthsCounter <= 0) {
            // Checked 4 years without finding a Byday that matches
            // a Bymonthday. Maybe the rule is not correct.
            throw new Error("Malformed values in BYDAY combined with BYMONTHDAY parts");
          }


          return dataIsValid;
        },

        next_month: function next_month() {
          (this.rule.freq == "MONTHLY");
          var data_valid = 1;

          if (this.next_hour() == 0) {
            return data_valid;
          }

          if (this.has_by_data("BYDAY") && this.has_by_data("BYMONTHDAY")) {
            data_valid = this._byDayAndMonthDay();
          } else if (this.has_by_data("BYDAY")) {
            var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
            var setpos = 0;
            var setpos_total = 0;

            if (this.has_by_data("BYSETPOS")) {
              var last_day = this.last.day;
              for (var day = 1; day <= daysInMonth; day++) {
                this.last.day = day;
                if (this.is_day_in_byday(this.last)) {
                  setpos_total++;
                  if (day <= last_day) {
                    setpos++;
                  }
                }
              }
              this.last.day = last_day;
            }

            data_valid = 0;
            for (var day = this.last.day + 1; day <= daysInMonth; day++) {
              this.last.day = day;

              if (this.is_day_in_byday(this.last)) {
                if (!this.has_by_data("BYSETPOS") ||
                    this.check_set_position(++setpos) ||
                    this.check_set_position(setpos - setpos_total - 1)) {

                  data_valid = 1;
                  break;
                }
              }
            }

            if (day > daysInMonth) {
              this.last.day = 1;
              this.increment_month();

              if (this.is_day_in_byday(this.last)) {
                if (!this.has_by_data("BYSETPOS") || this.check_set_position(1)) {
                  data_valid = 1;
                }
              } else {
                data_valid = 0;
              }
            }
          } else if (this.has_by_data("BYMONTHDAY")) {
            this.by_indices.BYMONTHDAY++;

            if (this.by_indices.BYMONTHDAY >= this.by_data.BYMONTHDAY.length) {
              this.by_indices.BYMONTHDAY = 0;
              this.increment_month();
            }

            var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
            var day = this.by_data.BYMONTHDAY[this.by_indices.BYMONTHDAY];

            if (day < 0) {
              day = daysInMonth + day + 1;
            }

            if (day > daysInMonth) {
              this.last.day = 1;
              data_valid = this.is_day_in_byday(this.last);
            } else {
              this.last.day = day;
            }

          } else {
            this.increment_month();
            var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
            if (this.by_data.BYMONTHDAY[0] > daysInMonth) {
              data_valid = 0;
            } else {
              this.last.day = this.by_data.BYMONTHDAY[0];
            }
          }

          return data_valid;
        },

        next_weekday_by_week: function next_weekday_by_week() {
          var end_of_data = 0;

          if (this.next_hour() == 0) {
            return end_of_data;
          }

          if (!this.has_by_data("BYDAY")) {
            return 1;
          }

          for (;;) {
            var tt = new ICAL.Time();
            this.by_indices.BYDAY++;

            if (this.by_indices.BYDAY == Object.keys(this.by_data.BYDAY).length) {
              this.by_indices.BYDAY = 0;
              end_of_data = 1;
            }

            var coded_day = this.by_data.BYDAY[this.by_indices.BYDAY];
            var parts = this.ruleDayOfWeek(coded_day);
            var dow = parts[1];

            dow -= this.rule.wkst;

            if (dow < 0) {
              dow += 7;
            }

            tt.year = this.last.year;
            tt.month = this.last.month;
            tt.day = this.last.day;

            var startOfWeek = tt.startDoyWeek(this.rule.wkst);

            if (dow + startOfWeek < 1) {
              // The selected date is in the previous year
              if (!end_of_data) {
                continue;
              }
            }

            var next = ICAL.Time.fromDayOfYear(startOfWeek + dow,
                                                      this.last.year);

            /**
             * The normalization horrors below are due to
             * the fact that when the year/month/day changes
             * it can effect the other operations that come after.
             */
            this.last.year = next.year;
            this.last.month = next.month;
            this.last.day = next.day;

            return end_of_data;
          }
        },

        next_year: function next_year() {

          if (this.next_hour() == 0) {
            return 0;
          }

          if (++this.days_index == this.days.length) {
            this.days_index = 0;
            do {
              this.increment_year(this.rule.interval);
              this.expand_year_days(this.last.year);
            } while (this.days.length == 0);
          }

          this._nextByYearDay();

          return 1;
        },

        _nextByYearDay: function _nextByYearDay() {
            var doy = this.days[this.days_index];
            var year = this.last.year;
            if (doy < 1) {
                // Time.fromDayOfYear(doy, year) indexes relative to the
                // start of the given year. That is different from the
                // semantics of BYYEARDAY where negative indexes are an
                // offset from the end of the given year.
                doy += 1;
                year += 1;
            }
            var next = ICAL.Time.fromDayOfYear(doy, year);
            this.last.day = next.day;
            this.last.month = next.month;
        },

        /**
         * @param dow (eg: '1TU', '-1MO')
         * @param {ICAL.Time.weekDay=} aWeekStart The week start weekday
         * @return [pos, numericDow] (eg: [1, 3]) numericDow is relative to aWeekStart
         */
        ruleDayOfWeek: function ruleDayOfWeek(dow, aWeekStart) {
          var matches = dow.match(/([+-]?[0-9])?(MO|TU|WE|TH|FR|SA|SU)/);
          if (matches) {
            var pos = parseInt(matches[1] || 0, 10);
            dow = ICAL.Recur.icalDayToNumericDay(matches[2], aWeekStart);
            return [pos, dow];
          } else {
            return [0, 0];
          }
        },

        next_generic: function next_generic(aRuleType, aInterval, aDateAttr,
                                            aFollowingAttr, aPreviousIncr) {
          var has_by_rule = (aRuleType in this.by_data);
          var this_freq = (this.rule.freq == aInterval);
          var end_of_data = 0;

          if (aPreviousIncr && this[aPreviousIncr]() == 0) {
            return end_of_data;
          }

          if (has_by_rule) {
            this.by_indices[aRuleType]++;
            this.by_indices[aRuleType];
            var dta = this.by_data[aRuleType];

            if (this.by_indices[aRuleType] == dta.length) {
              this.by_indices[aRuleType] = 0;
              end_of_data = 1;
            }
            this.last[aDateAttr] = dta[this.by_indices[aRuleType]];
          } else if (this_freq) {
            this["increment_" + aDateAttr](this.rule.interval);
          }

          if (has_by_rule && end_of_data && this_freq) {
            this["increment_" + aFollowingAttr](1);
          }

          return end_of_data;
        },

        increment_monthday: function increment_monthday(inc) {
          for (var i = 0; i < inc; i++) {
            var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
            this.last.day++;

            if (this.last.day > daysInMonth) {
              this.last.day -= daysInMonth;
              this.increment_month();
            }
          }
        },

        increment_month: function increment_month() {
          this.last.day = 1;
          if (this.has_by_data("BYMONTH")) {
            this.by_indices.BYMONTH++;

            if (this.by_indices.BYMONTH == this.by_data.BYMONTH.length) {
              this.by_indices.BYMONTH = 0;
              this.increment_year(1);
            }

            this.last.month = this.by_data.BYMONTH[this.by_indices.BYMONTH];
          } else {
            if (this.rule.freq == "MONTHLY") {
              this.last.month += this.rule.interval;
            } else {
              this.last.month++;
            }

            this.last.month--;
            var years = ICAL.helpers.trunc(this.last.month / 12);
            this.last.month %= 12;
            this.last.month++;

            if (years != 0) {
              this.increment_year(years);
            }
          }
        },

        increment_year: function increment_year(inc) {
          this.last.year += inc;
        },

        increment_generic: function increment_generic(inc, aDateAttr,
                                                      aFactor, aNextIncrement) {
          this.last[aDateAttr] += inc;
          var nextunit = ICAL.helpers.trunc(this.last[aDateAttr] / aFactor);
          this.last[aDateAttr] %= aFactor;
          if (nextunit != 0) {
            this["increment_" + aNextIncrement](nextunit);
          }
        },

        has_by_data: function has_by_data(aRuleType) {
          return (aRuleType in this.rule.parts);
        },

        expand_year_days: function expand_year_days(aYear) {
          var t = new ICAL.Time();
          this.days = [];

          // We need our own copy with a few keys set
          var parts = {};
          var rules = ["BYDAY", "BYWEEKNO", "BYMONTHDAY", "BYMONTH", "BYYEARDAY"];
          for (var p in rules) {
            /* istanbul ignore else */
            if (rules.hasOwnProperty(p)) {
              var part = rules[p];
              if (part in this.rule.parts) {
                parts[part] = this.rule.parts[part];
              }
            }
          }

          if ("BYMONTH" in parts && "BYWEEKNO" in parts) {
            var valid = 1;
            var validWeeks = {};
            t.year = aYear;
            t.isDate = true;

            for (var monthIdx = 0; monthIdx < this.by_data.BYMONTH.length; monthIdx++) {
              var month = this.by_data.BYMONTH[monthIdx];
              t.month = month;
              t.day = 1;
              var first_week = t.weekNumber(this.rule.wkst);
              t.day = ICAL.Time.daysInMonth(month, aYear);
              var last_week = t.weekNumber(this.rule.wkst);
              for (monthIdx = first_week; monthIdx < last_week; monthIdx++) {
                validWeeks[monthIdx] = 1;
              }
            }

            for (var weekIdx = 0; weekIdx < this.by_data.BYWEEKNO.length && valid; weekIdx++) {
              var weekno = this.by_data.BYWEEKNO[weekIdx];
              if (weekno < 52) {
                valid &= validWeeks[weekIdx];
              } else {
                valid = 0;
              }
            }

            if (valid) {
              delete parts.BYMONTH;
            } else {
              delete parts.BYWEEKNO;
            }
          }

          var partCount = Object.keys(parts).length;

          if (partCount == 0) {
            var t1 = this.dtstart.clone();
            t1.year = this.last.year;
            this.days.push(t1.dayOfYear());
          } else if (partCount == 1 && "BYMONTH" in parts) {
            for (var monthkey in this.by_data.BYMONTH) {
              /* istanbul ignore if */
              if (!this.by_data.BYMONTH.hasOwnProperty(monthkey)) {
                continue;
              }
              var t2 = this.dtstart.clone();
              t2.year = aYear;
              t2.month = this.by_data.BYMONTH[monthkey];
              t2.isDate = true;
              this.days.push(t2.dayOfYear());
            }
          } else if (partCount == 1 && "BYMONTHDAY" in parts) {
            for (var monthdaykey in this.by_data.BYMONTHDAY) {
              /* istanbul ignore if */
              if (!this.by_data.BYMONTHDAY.hasOwnProperty(monthdaykey)) {
                continue;
              }
              var t3 = this.dtstart.clone();
              var day_ = this.by_data.BYMONTHDAY[monthdaykey];
              if (day_ < 0) {
                var daysInMonth = ICAL.Time.daysInMonth(t3.month, aYear);
                day_ = day_ + daysInMonth + 1;
              }
              t3.day = day_;
              t3.year = aYear;
              t3.isDate = true;
              this.days.push(t3.dayOfYear());
            }
          } else if (partCount == 2 &&
                     "BYMONTHDAY" in parts &&
                     "BYMONTH" in parts) {
            for (var monthkey in this.by_data.BYMONTH) {
              /* istanbul ignore if */
              if (!this.by_data.BYMONTH.hasOwnProperty(monthkey)) {
                continue;
              }
              var month_ = this.by_data.BYMONTH[monthkey];
              var daysInMonth = ICAL.Time.daysInMonth(month_, aYear);
              for (var monthdaykey in this.by_data.BYMONTHDAY) {
                /* istanbul ignore if */
                if (!this.by_data.BYMONTHDAY.hasOwnProperty(monthdaykey)) {
                  continue;
                }
                var day_ = this.by_data.BYMONTHDAY[monthdaykey];
                if (day_ < 0) {
                  day_ = day_ + daysInMonth + 1;
                }
                t.day = day_;
                t.month = month_;
                t.year = aYear;
                t.isDate = true;

                this.days.push(t.dayOfYear());
              }
            }
          } else if (partCount == 1 && "BYWEEKNO" in parts) ; else if (partCount == 2 &&
                     "BYWEEKNO" in parts &&
                     "BYMONTHDAY" in parts) ; else if (partCount == 1 && "BYDAY" in parts) {
            this.days = this.days.concat(this.expand_by_day(aYear));
          } else if (partCount == 2 && "BYDAY" in parts && "BYMONTH" in parts) {
            for (var monthkey in this.by_data.BYMONTH) {
              /* istanbul ignore if */
              if (!this.by_data.BYMONTH.hasOwnProperty(monthkey)) {
                continue;
              }
              var month = this.by_data.BYMONTH[monthkey];
              var daysInMonth = ICAL.Time.daysInMonth(month, aYear);

              t.year = aYear;
              t.month = this.by_data.BYMONTH[monthkey];
              t.day = 1;
              t.isDate = true;

              var first_dow = t.dayOfWeek();
              var doy_offset = t.dayOfYear() - 1;

              t.day = daysInMonth;
              var last_dow = t.dayOfWeek();

              if (this.has_by_data("BYSETPOS")) {
                var by_month_day = [];
                for (var day = 1; day <= daysInMonth; day++) {
                  t.day = day;
                  if (this.is_day_in_byday(t)) {
                    by_month_day.push(day);
                  }
                }

                for (var spIndex = 0; spIndex < by_month_day.length; spIndex++) {
                  if (this.check_set_position(spIndex + 1) ||
                      this.check_set_position(spIndex - by_month_day.length)) {
                    this.days.push(doy_offset + by_month_day[spIndex]);
                  }
                }
              } else {
                for (var daycodedkey in this.by_data.BYDAY) {
                  /* istanbul ignore if */
                  if (!this.by_data.BYDAY.hasOwnProperty(daycodedkey)) {
                    continue;
                  }
                  var coded_day = this.by_data.BYDAY[daycodedkey];
                  var bydayParts = this.ruleDayOfWeek(coded_day);
                  var pos = bydayParts[0];
                  var dow = bydayParts[1];
                  var month_day;

                  var first_matching_day = ((dow + 7 - first_dow) % 7) + 1;
                  var last_matching_day = daysInMonth - ((last_dow + 7 - dow) % 7);

                  if (pos == 0) {
                    for (var day = first_matching_day; day <= daysInMonth; day += 7) {
                      this.days.push(doy_offset + day);
                    }
                  } else if (pos > 0) {
                    month_day = first_matching_day + (pos - 1) * 7;

                    if (month_day <= daysInMonth) {
                      this.days.push(doy_offset + month_day);
                    }
                  } else {
                    month_day = last_matching_day + (pos + 1) * 7;

                    if (month_day > 0) {
                      this.days.push(doy_offset + month_day);
                    }
                  }
                }
              }
            }
            // Return dates in order of occurrence (1,2,3,...) instead
            // of by groups of weekdays (1,8,15,...,2,9,16,...).
            this.days.sort(function(a, b) { return a - b; }); // Comparator function allows to sort numbers.
          } else if (partCount == 2 && "BYDAY" in parts && "BYMONTHDAY" in parts) {
            var expandedDays = this.expand_by_day(aYear);

            for (var daykey in expandedDays) {
              /* istanbul ignore if */
              if (!expandedDays.hasOwnProperty(daykey)) {
                continue;
              }
              var day = expandedDays[daykey];
              var tt = ICAL.Time.fromDayOfYear(day, aYear);
              if (this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {
                this.days.push(day);
              }
            }
          } else if (partCount == 3 &&
                     "BYDAY" in parts &&
                     "BYMONTHDAY" in parts &&
                     "BYMONTH" in parts) {
            var expandedDays = this.expand_by_day(aYear);

            for (var daykey in expandedDays) {
              /* istanbul ignore if */
              if (!expandedDays.hasOwnProperty(daykey)) {
                continue;
              }
              var day = expandedDays[daykey];
              var tt = ICAL.Time.fromDayOfYear(day, aYear);

              if (this.by_data.BYMONTH.indexOf(tt.month) >= 0 &&
                  this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {
                this.days.push(day);
              }
            }
          } else if (partCount == 2 && "BYDAY" in parts && "BYWEEKNO" in parts) {
            var expandedDays = this.expand_by_day(aYear);

            for (var daykey in expandedDays) {
              /* istanbul ignore if */
              if (!expandedDays.hasOwnProperty(daykey)) {
                continue;
              }
              var day = expandedDays[daykey];
              var tt = ICAL.Time.fromDayOfYear(day, aYear);
              var weekno = tt.weekNumber(this.rule.wkst);

              if (this.by_data.BYWEEKNO.indexOf(weekno)) {
                this.days.push(day);
              }
            }
          } else if (partCount == 3 &&
                     "BYDAY" in parts &&
                     "BYWEEKNO" in parts &&
                     "BYMONTHDAY" in parts) ; else if (partCount == 1 && "BYYEARDAY" in parts) {
            this.days = this.days.concat(this.by_data.BYYEARDAY);
          } else {
            this.days = [];
          }
          return 0;
        },

        expand_by_day: function expand_by_day(aYear) {

          var days_list = [];
          var tmp = this.last.clone();

          tmp.year = aYear;
          tmp.month = 1;
          tmp.day = 1;
          tmp.isDate = true;

          var start_dow = tmp.dayOfWeek();

          tmp.month = 12;
          tmp.day = 31;
          tmp.isDate = true;

          var end_dow = tmp.dayOfWeek();
          var end_year_day = tmp.dayOfYear();

          for (var daykey in this.by_data.BYDAY) {
            /* istanbul ignore if */
            if (!this.by_data.BYDAY.hasOwnProperty(daykey)) {
              continue;
            }
            var day = this.by_data.BYDAY[daykey];
            var parts = this.ruleDayOfWeek(day);
            var pos = parts[0];
            var dow = parts[1];

            if (pos == 0) {
              var tmp_start_doy = ((dow + 7 - start_dow) % 7) + 1;

              for (var doy = tmp_start_doy; doy <= end_year_day; doy += 7) {
                days_list.push(doy);
              }

            } else if (pos > 0) {
              var first;
              if (dow >= start_dow) {
                first = dow - start_dow + 1;
              } else {
                first = dow - start_dow + 8;
              }

              days_list.push(first + (pos - 1) * 7);
            } else {
              var last;
              pos = -pos;

              if (dow <= end_dow) {
                last = end_year_day - end_dow + dow;
              } else {
                last = end_year_day - end_dow + dow - 7;
              }

              days_list.push(last - (pos - 1) * 7);
            }
          }
          return days_list;
        },

        is_day_in_byday: function is_day_in_byday(tt) {
          for (var daykey in this.by_data.BYDAY) {
            /* istanbul ignore if */
            if (!this.by_data.BYDAY.hasOwnProperty(daykey)) {
              continue;
            }
            var day = this.by_data.BYDAY[daykey];
            var parts = this.ruleDayOfWeek(day);
            var pos = parts[0];
            var dow = parts[1];
            var this_dow = tt.dayOfWeek();

            if ((pos == 0 && dow == this_dow) ||
                (tt.nthWeekDay(dow, pos) == tt.day)) {
              return 1;
            }
          }

          return 0;
        },

        /**
         * Checks if given value is in BYSETPOS.
         *
         * @private
         * @param {Numeric} aPos position to check for.
         * @return {Boolean} false unless BYSETPOS rules exist
         *                   and the given value is present in rules.
         */
        check_set_position: function check_set_position(aPos) {
          if (this.has_by_data('BYSETPOS')) {
            var idx = this.by_data.BYSETPOS.indexOf(aPos);
            // negative numbers are not false-y
            return idx !== -1;
          }
          return false;
        },

        sort_byday_rules: function icalrecur_sort_byday_rules(aRules) {
          for (var i = 0; i < aRules.length; i++) {
            for (var j = 0; j < i; j++) {
              var one = this.ruleDayOfWeek(aRules[j], this.rule.wkst)[1];
              var two = this.ruleDayOfWeek(aRules[i], this.rule.wkst)[1];

              if (one > two) {
                var tmp = aRules[i];
                aRules[i] = aRules[j];
                aRules[j] = tmp;
              }
            }
          }
        },

        check_contract_restriction: function check_contract_restriction(aRuleType, v) {
          var indexMapValue = icalrecur_iterator._indexMap[aRuleType];
          var ruleMapValue = icalrecur_iterator._expandMap[this.rule.freq][indexMapValue];
          var pass = false;

          if (aRuleType in this.by_data &&
              ruleMapValue == icalrecur_iterator.CONTRACT) {

            var ruleType = this.by_data[aRuleType];

            for (var bydatakey in ruleType) {
              /* istanbul ignore else */
              if (ruleType.hasOwnProperty(bydatakey)) {
                if (ruleType[bydatakey] == v) {
                  pass = true;
                  break;
                }
              }
            }
          } else {
            // Not a contracting byrule or has no data, test passes
            pass = true;
          }
          return pass;
        },

        check_contracting_rules: function check_contracting_rules() {
          var dow = this.last.dayOfWeek();
          var weekNo = this.last.weekNumber(this.rule.wkst);
          var doy = this.last.dayOfYear();

          return (this.check_contract_restriction("BYSECOND", this.last.second) &&
                  this.check_contract_restriction("BYMINUTE", this.last.minute) &&
                  this.check_contract_restriction("BYHOUR", this.last.hour) &&
                  this.check_contract_restriction("BYDAY", ICAL.Recur.numericDayToIcalDay(dow)) &&
                  this.check_contract_restriction("BYWEEKNO", weekNo) &&
                  this.check_contract_restriction("BYMONTHDAY", this.last.day) &&
                  this.check_contract_restriction("BYMONTH", this.last.month) &&
                  this.check_contract_restriction("BYYEARDAY", doy));
        },

        setup_defaults: function setup_defaults(aRuleType, req, deftime) {
          var indexMapValue = icalrecur_iterator._indexMap[aRuleType];
          var ruleMapValue = icalrecur_iterator._expandMap[this.rule.freq][indexMapValue];

          if (ruleMapValue != icalrecur_iterator.CONTRACT) {
            if (!(aRuleType in this.by_data)) {
              this.by_data[aRuleType] = [deftime];
            }
            if (this.rule.freq != req) {
              return this.by_data[aRuleType][0];
            }
          }
          return deftime;
        },

        /**
         * Convert iterator into a serialize-able object.  Will preserve current
         * iteration sequence to ensure the seamless continuation of the recurrence
         * rule.
         * @return {Object}
         */
        toJSON: function() {
          var result = Object.create(null);

          result.initialized = this.initialized;
          result.rule = this.rule.toJSON();
          result.dtstart = this.dtstart.toJSON();
          result.by_data = this.by_data;
          result.days = this.days;
          result.last = this.last.toJSON();
          result.by_indices = this.by_indices;
          result.occurrence_number = this.occurrence_number;

          return result;
        }
      };

      icalrecur_iterator._indexMap = {
        "BYSECOND": 0,
        "BYMINUTE": 1,
        "BYHOUR": 2,
        "BYDAY": 3,
        "BYMONTHDAY": 4,
        "BYYEARDAY": 5,
        "BYWEEKNO": 6,
        "BYMONTH": 7,
        "BYSETPOS": 8
      };

      icalrecur_iterator._expandMap = {
        "SECONDLY": [1, 1, 1, 1, 1, 1, 1, 1],
        "MINUTELY": [2, 1, 1, 1, 1, 1, 1, 1],
        "HOURLY": [2, 2, 1, 1, 1, 1, 1, 1],
        "DAILY": [2, 2, 2, 1, 1, 1, 1, 1],
        "WEEKLY": [2, 2, 2, 2, 3, 3, 1, 1],
        "MONTHLY": [2, 2, 2, 2, 2, 3, 3, 1],
        "YEARLY": [2, 2, 2, 2, 2, 2, 2, 2]
      };
      icalrecur_iterator.UNKNOWN = 0;
      icalrecur_iterator.CONTRACT = 1;
      icalrecur_iterator.EXPAND = 2;
      icalrecur_iterator.ILLEGAL = 3;

      return icalrecur_iterator;

    }());
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    /**
     * This symbol is further described later on
     * @ignore
     */
    ICAL.RecurExpansion = (function() {
      function formatTime(item) {
        return ICAL.helpers.formatClassType(item, ICAL.Time);
      }

      function compareTime(a, b) {
        return a.compare(b);
      }

      function isRecurringComponent(comp) {
        return comp.hasProperty('rdate') ||
               comp.hasProperty('rrule') ||
               comp.hasProperty('recurrence-id');
      }

      /**
       * @classdesc
       * Primary class for expanding recurring rules.  Can take multiple rrules,
       * rdates, exdate(s) and iterate (in order) over each next occurrence.
       *
       * Once initialized this class can also be serialized saved and continue
       * iteration from the last point.
       *
       * NOTE: it is intended that this class is to be used
       *       with ICAL.Event which handles recurrence exceptions.
       *
       * @example
       * // assuming event is a parsed ical component
       * var event;
       *
       * var expand = new ICAL.RecurExpansion({
       *   component: event,
       *   dtstart: event.getFirstPropertyValue('dtstart')
       * });
       *
       * // remember there are infinite rules
       * // so its a good idea to limit the scope
       * // of the iterations then resume later on.
       *
       * // next is always an ICAL.Time or null
       * var next;
       *
       * while (someCondition && (next = expand.next())) {
       *   // do something with next
       * }
       *
       * // save instance for later
       * var json = JSON.stringify(expand);
       *
       * //...
       *
       * // NOTE: if the component's properties have
       * //       changed you will need to rebuild the
       * //       class and start over. This only works
       * //       when the component's recurrence info is the same.
       * var expand = new ICAL.RecurExpansion(JSON.parse(json));
       *
       * @description
       * The options object can be filled with the specified initial values. It can
       * also contain additional members, as a result of serializing a previous
       * expansion state, as shown in the example.
       *
       * @class
       * @alias ICAL.RecurExpansion
       * @param {Object} options
       *        Recurrence expansion options
       * @param {ICAL.Time} options.dtstart
       *        Start time of the event
       * @param {ICAL.Component=} options.component
       *        Component for expansion, required if not resuming.
       */
      function RecurExpansion(options) {
        this.ruleDates = [];
        this.exDates = [];
        this.fromData(options);
      }

      RecurExpansion.prototype = {
        /**
         * True when iteration is fully completed.
         * @type {Boolean}
         */
        complete: false,

        /**
         * Array of rrule iterators.
         *
         * @type {ICAL.RecurIterator[]}
         * @private
         */
        ruleIterators: null,

        /**
         * Array of rdate instances.
         *
         * @type {ICAL.Time[]}
         * @private
         */
        ruleDates: null,

        /**
         * Array of exdate instances.
         *
         * @type {ICAL.Time[]}
         * @private
         */
        exDates: null,

        /**
         * Current position in ruleDates array.
         * @type {Number}
         * @private
         */
        ruleDateInc: 0,

        /**
         * Current position in exDates array
         * @type {Number}
         * @private
         */
        exDateInc: 0,

        /**
         * Current negative date.
         *
         * @type {ICAL.Time}
         * @private
         */
        exDate: null,

        /**
         * Current additional date.
         *
         * @type {ICAL.Time}
         * @private
         */
        ruleDate: null,

        /**
         * Start date of recurring rules.
         *
         * @type {ICAL.Time}
         */
        dtstart: null,

        /**
         * Last expanded time
         *
         * @type {ICAL.Time}
         */
        last: null,

        /**
         * Initialize the recurrence expansion from the data object. The options
         * object may also contain additional members, see the
         * {@link ICAL.RecurExpansion constructor} for more details.
         *
         * @param {Object} options
         *        Recurrence expansion options
         * @param {ICAL.Time} options.dtstart
         *        Start time of the event
         * @param {ICAL.Component=} options.component
         *        Component for expansion, required if not resuming.
         */
        fromData: function(options) {
          var start = ICAL.helpers.formatClassType(options.dtstart, ICAL.Time);

          if (!start) {
            throw new Error('.dtstart (ICAL.Time) must be given');
          } else {
            this.dtstart = start;
          }

          if (options.component) {
            this._init(options.component);
          } else {
            this.last = formatTime(options.last) || start.clone();

            if (!options.ruleIterators) {
              throw new Error('.ruleIterators or .component must be given');
            }

            this.ruleIterators = options.ruleIterators.map(function(item) {
              return ICAL.helpers.formatClassType(item, ICAL.RecurIterator);
            });

            this.ruleDateInc = options.ruleDateInc;
            this.exDateInc = options.exDateInc;

            if (options.ruleDates) {
              this.ruleDates = options.ruleDates.map(formatTime);
              this.ruleDate = this.ruleDates[this.ruleDateInc];
            }

            if (options.exDates) {
              this.exDates = options.exDates.map(formatTime);
              this.exDate = this.exDates[this.exDateInc];
            }

            if (typeof(options.complete) !== 'undefined') {
              this.complete = options.complete;
            }
          }
        },

        /**
         * Retrieve the next occurrence in the series.
         * @return {ICAL.Time}
         */
        next: function() {
          var iter;
          var next;
          var compare;

          var maxTries = 500;
          var currentTry = 0;

          while (true) {
            if (currentTry++ > maxTries) {
              throw new Error(
                'max tries have occured, rule may be impossible to forfill.'
              );
            }

            next = this.ruleDate;
            iter = this._nextRecurrenceIter(this.last);

            // no more matches
            // because we increment the rule day or rule
            // _after_ we choose a value this should be
            // the only spot where we need to worry about the
            // end of events.
            if (!next && !iter) {
              // there are no more iterators or rdates
              this.complete = true;
              break;
            }

            // no next rule day or recurrence rule is first.
            if (!next || (iter && next.compare(iter.last) > 0)) {
              // must be cloned, recur will reuse the time element.
              next = iter.last.clone();
              // move to next so we can continue
              iter.next();
            }

            // if the ruleDate is still next increment it.
            if (this.ruleDate === next) {
              this._nextRuleDay();
            }

            this.last = next;

            // check the negative rules
            if (this.exDate) {
              compare = this.exDate.compare(this.last);

              if (compare < 0) {
                this._nextExDay();
              }

              // if the current rule is excluded skip it.
              if (compare === 0) {
                this._nextExDay();
                continue;
              }
            }

            //XXX: The spec states that after we resolve the final
            //     list of dates we execute exdate this seems somewhat counter
            //     intuitive to what I have seen most servers do so for now
            //     I exclude based on the original date not the one that may
            //     have been modified by the exception.
            return this.last;
          }
        },

        /**
         * Converts object into a serialize-able format. This format can be passed
         * back into the expansion to resume iteration.
         * @return {Object}
         */
        toJSON: function() {
          function toJSON(item) {
            return item.toJSON();
          }

          var result = Object.create(null);
          result.ruleIterators = this.ruleIterators.map(toJSON);

          if (this.ruleDates) {
            result.ruleDates = this.ruleDates.map(toJSON);
          }

          if (this.exDates) {
            result.exDates = this.exDates.map(toJSON);
          }

          result.ruleDateInc = this.ruleDateInc;
          result.exDateInc = this.exDateInc;
          result.last = this.last.toJSON();
          result.dtstart = this.dtstart.toJSON();
          result.complete = this.complete;

          return result;
        },

        /**
         * Extract all dates from the properties in the given component. The
         * properties will be filtered by the property name.
         *
         * @private
         * @param {ICAL.Component} component        The component to search in
         * @param {String} propertyName             The property name to search for
         * @return {ICAL.Time[]}                    The extracted dates.
         */
        _extractDates: function(component, propertyName) {
          function handleProp(prop) {
            idx = ICAL.helpers.binsearchInsert(
              result,
              prop,
              compareTime
            );

            // ordered insert
            result.splice(idx, 0, prop);
          }

          var result = [];
          var props = component.getAllProperties(propertyName);
          var len = props.length;
          var i = 0;

          var idx;

          for (; i < len; i++) {
            props[i].getValues().forEach(handleProp);
          }

          return result;
        },

        /**
         * Initialize the recurrence expansion.
         *
         * @private
         * @param {ICAL.Component} component    The component to initialize from.
         */
        _init: function(component) {
          this.ruleIterators = [];

          this.last = this.dtstart.clone();

          // to provide api consistency non-recurring
          // events can also use the iterator though it will
          // only return a single time.
          if (!isRecurringComponent(component)) {
            this.ruleDate = this.last.clone();
            this.complete = true;
            return;
          }

          if (component.hasProperty('rdate')) {
            this.ruleDates = this._extractDates(component, 'rdate');

            // special hack for cases where first rdate is prior
            // to the start date. We only check for the first rdate.
            // This is mostly for google's crazy recurring date logic
            // (contacts birthdays).
            if ((this.ruleDates[0]) &&
                (this.ruleDates[0].compare(this.dtstart) < 0)) {

              this.ruleDateInc = 0;
              this.last = this.ruleDates[0].clone();
            } else {
              this.ruleDateInc = ICAL.helpers.binsearchInsert(
                this.ruleDates,
                this.last,
                compareTime
              );
            }

            this.ruleDate = this.ruleDates[this.ruleDateInc];
          }

          if (component.hasProperty('rrule')) {
            var rules = component.getAllProperties('rrule');
            var i = 0;
            var len = rules.length;

            var rule;
            var iter;

            for (; i < len; i++) {
              rule = rules[i].getFirstValue();
              iter = rule.iterator(this.dtstart);
              this.ruleIterators.push(iter);

              // increment to the next occurrence so future
              // calls to next return times beyond the initial iteration.
              // XXX: I find this suspicious might be a bug?
              iter.next();
            }
          }

          if (component.hasProperty('exdate')) {
            this.exDates = this._extractDates(component, 'exdate');
            // if we have a .last day we increment the index to beyond it.
            this.exDateInc = ICAL.helpers.binsearchInsert(
              this.exDates,
              this.last,
              compareTime
            );

            this.exDate = this.exDates[this.exDateInc];
          }
        },

        /**
         * Advance to the next exdate
         * @private
         */
        _nextExDay: function() {
          this.exDate = this.exDates[++this.exDateInc];
        },

        /**
         * Advance to the next rule date
         * @private
         */
        _nextRuleDay: function() {
          this.ruleDate = this.ruleDates[++this.ruleDateInc];
        },

        /**
         * Find and return the recurrence rule with the most recent event and
         * return it.
         *
         * @private
         * @return {?ICAL.RecurIterator}    Found iterator.
         */
        _nextRecurrenceIter: function() {
          var iters = this.ruleIterators;

          if (iters.length === 0) {
            return null;
          }

          var len = iters.length;
          var iter;
          var iterTime;
          var iterIdx = 0;
          var chosenIter;

          // loop through each iterator
          for (; iterIdx < len; iterIdx++) {
            iter = iters[iterIdx];
            iterTime = iter.last;

            // if iteration is complete
            // then we must exclude it from
            // the search and remove it.
            if (iter.completed) {
              len--;
              if (iterIdx !== 0) {
                iterIdx--;
              }
              iters.splice(iterIdx, 1);
              continue;
            }

            // find the most recent possible choice
            if (!chosenIter || chosenIter.last.compare(iterTime) > 0) {
              // that iterator is saved
              chosenIter = iter;
            }
          }

          // the chosen iterator is returned but not mutated
          // this iterator contains the most recent event.
          return chosenIter;
        }
      };

      return RecurExpansion;
    }());
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    /**
     * This symbol is further described later on
     * @ignore
     */
    ICAL.Event = (function() {

      /**
       * @classdesc
       * ICAL.js is organized into multiple layers. The bottom layer is a raw jCal
       * object, followed by the component/property layer. The highest level is the
       * event representation, which this class is part of. See the
       * {@tutorial layers} guide for more details.
       *
       * @class
       * @alias ICAL.Event
       * @param {ICAL.Component=} component         The ICAL.Component to base this event on
       * @param {Object} options                    Options for this event
       * @param {Boolean} options.strictExceptions
       *          When true, will verify exceptions are related by their UUID
       * @param {Array<ICAL.Component|ICAL.Event>} options.exceptions
       *          Exceptions to this event, either as components or events. If not
       *            specified exceptions will automatically be set in relation of
       *            component's parent
       */
      function Event(component, options) {
        if (!(component instanceof ICAL.Component)) {
          options = component;
          component = null;
        }

        if (component) {
          this.component = component;
        } else {
          this.component = new ICAL.Component('vevent');
        }

        this._rangeExceptionCache = Object.create(null);
        this.exceptions = Object.create(null);
        this.rangeExceptions = [];

        if (options && options.strictExceptions) {
          this.strictExceptions = options.strictExceptions;
        }

        if (options && options.exceptions) {
          options.exceptions.forEach(this.relateException, this);
        } else if (this.component.parent && !this.isRecurrenceException()) {
          this.component.parent.getAllSubcomponents('vevent').forEach(function(event) {
            if (event.hasProperty('recurrence-id')) {
              this.relateException(event);
            }
          }, this);
        }
      }

      Event.prototype = {

        THISANDFUTURE: 'THISANDFUTURE',

        /**
         * List of related event exceptions.
         *
         * @type {ICAL.Event[]}
         */
        exceptions: null,

        /**
         * When true, will verify exceptions are related by their UUID.
         *
         * @type {Boolean}
         */
        strictExceptions: false,

        /**
         * Relates a given event exception to this object.  If the given component
         * does not share the UID of this event it cannot be related and will throw
         * an exception.
         *
         * If this component is an exception it cannot have other exceptions
         * related to it.
         *
         * @param {ICAL.Component|ICAL.Event} obj       Component or event
         */
        relateException: function(obj) {
          if (this.isRecurrenceException()) {
            throw new Error('cannot relate exception to exceptions');
          }

          if (obj instanceof ICAL.Component) {
            obj = new ICAL.Event(obj);
          }

          if (this.strictExceptions && obj.uid !== this.uid) {
            throw new Error('attempted to relate unrelated exception');
          }

          var id = obj.recurrenceId.toString();

          // we don't sort or manage exceptions directly
          // here the recurrence expander handles that.
          this.exceptions[id] = obj;

          // index RANGE=THISANDFUTURE exceptions so we can
          // look them up later in getOccurrenceDetails.
          if (obj.modifiesFuture()) {
            var item = [
              obj.recurrenceId.toUnixTime(), id
            ];

            // we keep them sorted so we can find the nearest
            // value later on...
            var idx = ICAL.helpers.binsearchInsert(
              this.rangeExceptions,
              item,
              compareRangeException
            );

            this.rangeExceptions.splice(idx, 0, item);
          }
        },

        /**
         * Checks if this record is an exception and has the RANGE=THISANDFUTURE
         * value.
         *
         * @return {Boolean}        True, when exception is within range
         */
        modifiesFuture: function() {
          if (!this.component.hasProperty('recurrence-id')) {
            return false;
          }

          var range = this.component.getFirstProperty('recurrence-id').getParameter('range');
          return range === this.THISANDFUTURE;
        },

        /**
         * Finds the range exception nearest to the given date.
         *
         * @param {ICAL.Time} time usually an occurrence time of an event
         * @return {?ICAL.Event} the related event/exception or null
         */
        findRangeException: function(time) {
          if (!this.rangeExceptions.length) {
            return null;
          }

          var utc = time.toUnixTime();
          var idx = ICAL.helpers.binsearchInsert(
            this.rangeExceptions,
            [utc],
            compareRangeException
          );

          idx -= 1;

          // occurs before
          if (idx < 0) {
            return null;
          }

          var rangeItem = this.rangeExceptions[idx];

          /* istanbul ignore next: sanity check only */
          if (utc < rangeItem[0]) {
            return null;
          }

          return rangeItem[1];
        },

        /**
         * This object is returned by {@link ICAL.Event#getOccurrenceDetails getOccurrenceDetails}
         *
         * @typedef {Object} occurrenceDetails
         * @memberof ICAL.Event
         * @property {ICAL.Time} recurrenceId       The passed in recurrence id
         * @property {ICAL.Event} item              The occurrence
         * @property {ICAL.Time} startDate          The start of the occurrence
         * @property {ICAL.Time} endDate            The end of the occurrence
         */

        /**
         * Returns the occurrence details based on its start time.  If the
         * occurrence has an exception will return the details for that exception.
         *
         * NOTE: this method is intend to be used in conjunction
         *       with the {@link ICAL.Event#iterator iterator} method.
         *
         * @param {ICAL.Time} occurrence time occurrence
         * @return {ICAL.Event.occurrenceDetails} Information about the occurrence
         */
        getOccurrenceDetails: function(occurrence) {
          var id = occurrence.toString();
          var utcId = occurrence.convertToZone(ICAL.Timezone.utcTimezone).toString();
          var item;
          var result = {
            //XXX: Clone?
            recurrenceId: occurrence
          };

          if (id in this.exceptions) {
            item = result.item = this.exceptions[id];
            result.startDate = item.startDate;
            result.endDate = item.endDate;
            result.item = item;
          } else if (utcId in this.exceptions) {
            item = this.exceptions[utcId];
            result.startDate = item.startDate;
            result.endDate = item.endDate;
            result.item = item;
          } else {
            // range exceptions (RANGE=THISANDFUTURE) have a
            // lower priority then direct exceptions but
            // must be accounted for first. Their item is
            // always the first exception with the range prop.
            var rangeExceptionId = this.findRangeException(
              occurrence
            );
            var end;

            if (rangeExceptionId) {
              var exception = this.exceptions[rangeExceptionId];

              // range exception must modify standard time
              // by the difference (if any) in start/end times.
              result.item = exception;

              var startDiff = this._rangeExceptionCache[rangeExceptionId];

              if (!startDiff) {
                var original = exception.recurrenceId.clone();
                var newStart = exception.startDate.clone();

                // zones must be same otherwise subtract may be incorrect.
                original.zone = newStart.zone;
                startDiff = newStart.subtractDate(original);

                this._rangeExceptionCache[rangeExceptionId] = startDiff;
              }

              var start = occurrence.clone();
              start.zone = exception.startDate.zone;
              start.addDuration(startDiff);

              end = start.clone();
              end.addDuration(exception.duration);

              result.startDate = start;
              result.endDate = end;
            } else {
              // no range exception standard expansion
              end = occurrence.clone();
              end.addDuration(this.duration);

              result.endDate = end;
              result.startDate = occurrence;
              result.item = this;
            }
          }

          return result;
        },

        /**
         * Builds a recur expansion instance for a specific point in time (defaults
         * to startDate).
         *
         * @param {ICAL.Time} startTime     Starting point for expansion
         * @return {ICAL.RecurExpansion}    Expansion object
         */
        iterator: function(startTime) {
          return new ICAL.RecurExpansion({
            component: this.component,
            dtstart: startTime || this.startDate
          });
        },

        /**
         * Checks if the event is recurring
         *
         * @return {Boolean}        True, if event is recurring
         */
        isRecurring: function() {
          var comp = this.component;
          return comp.hasProperty('rrule') || comp.hasProperty('rdate');
        },

        /**
         * Checks if the event describes a recurrence exception. See
         * {@tutorial terminology} for details.
         *
         * @return {Boolean}    True, if the even describes a recurrence exception
         */
        isRecurrenceException: function() {
          return this.component.hasProperty('recurrence-id');
        },

        /**
         * Returns the types of recurrences this event may have.
         *
         * Returned as an object with the following possible keys:
         *
         *    - YEARLY
         *    - MONTHLY
         *    - WEEKLY
         *    - DAILY
         *    - MINUTELY
         *    - SECONDLY
         *
         * @return {Object.<ICAL.Recur.frequencyValues, Boolean>}
         *          Object of recurrence flags
         */
        getRecurrenceTypes: function() {
          var rules = this.component.getAllProperties('rrule');
          var i = 0;
          var len = rules.length;
          var result = Object.create(null);

          for (; i < len; i++) {
            var value = rules[i].getFirstValue();
            result[value.freq] = true;
          }

          return result;
        },

        /**
         * The uid of this event
         * @type {String}
         */
        get uid() {
          return this._firstProp('uid');
        },

        set uid(value) {
          this._setProp('uid', value);
        },

        /**
         * The start date
         * @type {ICAL.Time}
         */
        get startDate() {
          return this._firstProp('dtstart');
        },

        set startDate(value) {
          this._setTime('dtstart', value);
        },

        /**
         * The end date. This can be the result directly from the property, or the
         * end date calculated from start date and duration. Setting the property
         * will remove any duration properties.
         * @type {ICAL.Time}
         */
        get endDate() {
          var endDate = this._firstProp('dtend');
          if (!endDate) {
              var duration = this._firstProp('duration');
              endDate = this.startDate.clone();
              if (duration) {
                  endDate.addDuration(duration);
              } else if (endDate.isDate) {
                  endDate.day += 1;
              }
          }
          return endDate;
        },

        set endDate(value) {
          if (this.component.hasProperty('duration')) {
            this.component.removeProperty('duration');
          }
          this._setTime('dtend', value);
        },

        /**
         * The duration. This can be the result directly from the property, or the
         * duration calculated from start date and end date. Setting the property
         * will remove any `dtend` properties.
         * @type {ICAL.Duration}
         */
        get duration() {
          var duration = this._firstProp('duration');
          if (!duration) {
            return this.endDate.subtractDateTz(this.startDate);
          }
          return duration;
        },

        set duration(value) {
          if (this.component.hasProperty('dtend')) {
            this.component.removeProperty('dtend');
          }

          this._setProp('duration', value);
        },

        /**
         * The location of the event.
         * @type {String}
         */
        get location() {
          return this._firstProp('location');
        },

        set location(value) {
          return this._setProp('location', value);
        },

        /**
         * The attendees in the event
         * @type {ICAL.Property[]}
         * @readonly
         */
        get attendees() {
          //XXX: This is way lame we should have a better
          //     data structure for this later.
          return this.component.getAllProperties('attendee');
        },


        /**
         * The event summary
         * @type {String}
         */
        get summary() {
          return this._firstProp('summary');
        },

        set summary(value) {
          this._setProp('summary', value);
        },

        /**
         * The event description.
         * @type {String}
         */
        get description() {
          return this._firstProp('description');
        },

        set description(value) {
          this._setProp('description', value);
        },

        /**
         * The organizer value as an uri. In most cases this is a mailto: uri, but
         * it can also be something else, like urn:uuid:...
         * @type {String}
         */
        get organizer() {
          return this._firstProp('organizer');
        },

        set organizer(value) {
          this._setProp('organizer', value);
        },

        /**
         * The sequence value for this event. Used for scheduling
         * see {@tutorial terminology}.
         * @type {Number}
         */
        get sequence() {
          return this._firstProp('sequence');
        },

        set sequence(value) {
          this._setProp('sequence', value);
        },

        /**
         * The recurrence id for this event. See {@tutorial terminology} for details.
         * @type {ICAL.Time}
         */
        get recurrenceId() {
          return this._firstProp('recurrence-id');
        },

        set recurrenceId(value) {
          this._setTime('recurrence-id', value);
        },

        /**
         * Set/update a time property's value.
         * This will also update the TZID of the property.
         *
         * TODO: this method handles the case where we are switching
         * from a known timezone to an implied timezone (one without TZID).
         * This does _not_ handle the case of moving between a known
         *  (by TimezoneService) timezone to an unknown timezone...
         *
         * We will not add/remove/update the VTIMEZONE subcomponents
         *  leading to invalid ICAL data...
         * @private
         * @param {String} propName     The property name
         * @param {ICAL.Time} time      The time to set
         */
        _setTime: function(propName, time) {
          var prop = this.component.getFirstProperty(propName);

          if (!prop) {
            prop = new ICAL.Property(propName);
            this.component.addProperty(prop);
          }

          // utc and local don't get a tzid
          if (
            time.zone === ICAL.Timezone.localTimezone ||
            time.zone === ICAL.Timezone.utcTimezone
          ) {
            // remove the tzid
            prop.removeParameter('tzid');
          } else {
            prop.setParameter('tzid', time.zone.tzid);
          }

          prop.setValue(time);
        },

        _setProp: function(name, value) {
          this.component.updatePropertyWithValue(name, value);
        },

        _firstProp: function(name) {
          return this.component.getFirstPropertyValue(name);
        },

        /**
         * The string representation of this event.
         * @return {String}
         */
        toString: function() {
          return this.component.toString();
        }

      };

      function compareRangeException(a, b) {
        if (a[0] > b[0]) return 1;
        if (b[0] > a[0]) return -1;
        return 0;
      }

      return Event;
    }());
    /* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    /**
     * This symbol is further described later on
     * @ignore
     */
    ICAL.ComponentParser = (function() {
      /**
       * @classdesc
       * The ComponentParser is used to process a String or jCal Object,
       * firing callbacks for various found components, as well as completion.
       *
       * @example
       * var options = {
       *   // when false no events will be emitted for type
       *   parseEvent: true,
       *   parseTimezone: true
       * };
       *
       * var parser = new ICAL.ComponentParser(options);
       *
       * parser.onevent(eventComponent) {
       *   //...
       * }
       *
       * // ontimezone, etc...
       *
       * parser.oncomplete = function() {
       *
       * };
       *
       * parser.process(stringOrComponent);
       *
       * @class
       * @alias ICAL.ComponentParser
       * @param {Object=} options        Component parser options
       * @param {Boolean} options.parseEvent        Whether events should be parsed
       * @param {Boolean} options.parseTimezeone    Whether timezones should be parsed
       */
      function ComponentParser(options) {
        if (typeof(options) === 'undefined') {
          options = {};
        }

        var key;
        for (key in options) {
          /* istanbul ignore else */
          if (options.hasOwnProperty(key)) {
            this[key] = options[key];
          }
        }
      }

      ComponentParser.prototype = {

        /**
         * When true, parse events
         *
         * @type {Boolean}
         */
        parseEvent: true,

        /**
         * When true, parse timezones
         *
         * @type {Boolean}
         */
        parseTimezone: true,


        /* SAX like events here for reference */

        /**
         * Fired when parsing is complete
         * @callback
         */
        oncomplete: /* istanbul ignore next */ function() {},

        /**
         * Fired if an error occurs during parsing.
         *
         * @callback
         * @param {Error} err details of error
         */
        onerror: /* istanbul ignore next */ function(err) {},

        /**
         * Fired when a top level component (VTIMEZONE) is found
         *
         * @callback
         * @param {ICAL.Timezone} component     Timezone object
         */
        ontimezone: /* istanbul ignore next */ function(component) {},

        /**
         * Fired when a top level component (VEVENT) is found.
         *
         * @callback
         * @param {ICAL.Event} component    Top level component
         */
        onevent: /* istanbul ignore next */ function(component) {},

        /**
         * Process a string or parse ical object.  This function itself will return
         * nothing but will start the parsing process.
         *
         * Events must be registered prior to calling this method.
         *
         * @param {ICAL.Component|String|Object} ical      The component to process,
         *        either in its final form, as a jCal Object, or string representation
         */
        process: function(ical) {
          //TODO: this is sync now in the future we will have a incremental parser.
          if (typeof(ical) === 'string') {
            ical = ICAL.parse(ical);
          }

          if (!(ical instanceof ICAL.Component)) {
            ical = new ICAL.Component(ical);
          }

          var components = ical.getAllSubcomponents();
          var i = 0;
          var len = components.length;
          var component;

          for (; i < len; i++) {
            component = components[i];

            switch (component.name) {
              case 'vtimezone':
                if (this.parseTimezone) {
                  var tzid = component.getFirstPropertyValue('tzid');
                  if (tzid) {
                    this.ontimezone(new ICAL.Timezone({
                      tzid: tzid,
                      component: component
                    }));
                  }
                }
                break;
              case 'vevent':
                if (this.parseEvent) {
                  this.onevent(new ICAL.Event(component));
                }
                break;
              default:
                continue;
            }
          }

          //XXX: ideally we should do a "nextTick" here
          //     so in all cases this is actually async.
          this.oncomplete();
        }
      };

      return ComponentParser;
    }());
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var zonesCompiled = {"Africa/Abidjan":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Accra":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Addis_Ababa":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Algiers":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Asmara":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Bamako":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Bangui":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Banjul":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Bissau":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Blantyre":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Brazzaville":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Bujumbura":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Cairo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Casablanca":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20180325T020000\r\nRDATE:20180325T020000\r\nRDATE:20180617T020000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20180513T030000\r\nRDATE:20180513T030000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20190609T020000\r\nRDATE:20190609T020000\r\nRDATE:20200531T020000\r\nRDATE:20210516T020000\r\nRDATE:20220508T020000\r\nRDATE:20230430T020000\r\nRDATE:20240414T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20181028T030000\r\nRDATE:20181028T030000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20190505T030000\r\nRDATE:20190505T030000\r\nRDATE:20200419T030000\r\nRDATE:20210411T030000\r\nRDATE:20220327T030000\r\nRDATE:20230319T030000\r\nRDATE:20240310T030000\r\nEND:DAYLIGHT","Africa/Ceuta":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Africa/Conakry":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Dakar":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Dar_es_Salaam":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Djibouti":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Douala":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/El_Aaiun":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20180325T020000\r\nRDATE:20180325T020000\r\nRDATE:20180617T020000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20180513T030000\r\nRDATE:20180513T030000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20181028T030000\r\nRDATE:20181028T030000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20190505T030000\r\nRDATE:20190505T030000\r\nRDATE:20200419T030000\r\nRDATE:20210411T030000\r\nRDATE:20220327T030000\r\nRDATE:20230319T030000\r\nRDATE:20240310T030000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20190609T020000\r\nRDATE:20190609T020000\r\nRDATE:20200531T020000\r\nRDATE:20210516T020000\r\nRDATE:20220508T020000\r\nRDATE:20230430T020000\r\nRDATE:20240414T020000\r\nEND:STANDARD","Africa/Freetown":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Gaborone":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Harare":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Johannesburg":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:SAST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Juba":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Kampala":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Khartoum":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Kigali":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Kinshasa":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Lagos":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Libreville":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Lome":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Luanda":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Lubumbashi":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Lusaka":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Malabo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Maputo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Maseru":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:SAST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Mbabane":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:SAST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Mogadishu":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Monrovia":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Nairobi":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Ndjamena":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Niamey":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Nouakchott":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Ouagadougou":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Porto-Novo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Sao_Tome":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:20180101T010000\r\nRDATE:20180101T010000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:20190101T020000\r\nRDATE:20190101T020000\r\nEND:STANDARD","Africa/Tripoli":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Tunis":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Windhoek":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Adak":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-0900\r\nTZNAME:HDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-1000\r\nTZNAME:HST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Anchorage":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Anguilla":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Antigua":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Araguaina":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Buenos_Aires":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Catamarca":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Cordoba":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Jujuy":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/La_Rioja":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Mendoza":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Rio_Gallegos":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Salta":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/San_Juan":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/San_Luis":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Tucuman":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Ushuaia":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Aruba":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Asuncion":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19701004T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700322T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=4SU\r\nEND:STANDARD","America/Atikokan":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Bahia":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Bahia_Banderas":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT","America/Barbados":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Belem":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Belize":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Blanc-Sablon":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Boa_Vista":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Bogota":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Boise":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Cambridge_Bay":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Campo_Grande":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20181104T000000\r\nRDATE:20181104T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20180218T000000\r\nRDATE:20180218T000000\r\nRDATE:20190217T000000\r\nEND:STANDARD","America/Cancun":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Caracas":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Cayenne":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Cayman":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Chicago":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Chihuahua":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","America/Costa_Rica":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Creston":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Cuiaba":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20181104T000000\r\nRDATE:20181104T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20180218T000000\r\nRDATE:20180218T000000\r\nRDATE:20190217T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Curacao":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Danmarkshavn":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Dawson":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:20180311T020000\r\nRDATE:20180311T020000\r\nRDATE:20190310T020000\r\nRDATE:20200308T020000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:20181104T020000\r\nRDATE:20181104T020000\r\nRDATE:20191103T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:20201101T000000\r\nRDATE:20201101T000000\r\nEND:STANDARD","America/Dawson_Creek":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Denver":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Detroit":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Dominica":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Edmonton":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Eirunepe":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/El_Salvador":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Fort_Nelson":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Fortaleza":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Glace_Bay":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Goose_Bay":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT","America/Grand_Turk":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:20181104T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:20190310T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:20180311T020000\r\nRDATE:20180311T020000\r\nEND:DAYLIGHT","America/Grenada":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Guadeloupe":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Guatemala":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Guayaquil":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Guyana":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Halifax":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Havana":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:CST\r\nDTSTART:19701101T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:CDT\r\nDTSTART:19700308T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT","America/Hermosillo":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Indiana/Indianapolis":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Indiana/Knox":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Indiana/Marengo":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Indiana/Petersburg":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Indiana/Tell_City":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Indiana/Vevay":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Indiana/Vincennes":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Indiana/Winamac":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT","America/Inuvik":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Iqaluit":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Jamaica":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Juneau":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Kentucky/Louisville":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Kentucky/Monticello":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Kralendijk":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/La_Paz":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Lima":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Los_Angeles":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Lower_Princes":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Maceio":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Managua":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Manaus":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Marigot":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Martinique":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Matamoros":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Mazatlan":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","America/Menominee":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Merida":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","America/Metlakatla":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:20191103T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:20181104T020000\r\nRDATE:20181104T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:20190120T020000\r\nRDATE:20190120T020000\r\nEND:STANDARD","America/Mexico_City":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","America/Miquelon":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Moncton":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Monterrey":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","America/Montevideo":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Montserrat":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Nassau":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/New_York":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Nipigon":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Nome":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Noronha":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/North_Dakota/Beulah":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/North_Dakota/Center":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/North_Dakota/New_Salem":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Nuuk":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700328T220000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19701024T230000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:STANDARD","America/Ojinaga":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Panama":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Pangnirtung":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Paramaribo":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Phoenix":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Port-au-Prince":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Port_of_Spain":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Porto_Velho":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Puerto_Rico":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Punta_Arenas":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Rainy_River":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Rankin_Inlet":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Recife":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Regina":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Resolute":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT","America/Rio_Branco":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Santarem":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Santiago":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20190407T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYMONTHDAY=2,3,4,5,6,7,8;BYDAY=SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20190908T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYMONTHDAY=2,3,4,5,6,7,8;BYDAY=SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20180812T000000\r\nRDATE:20180812T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20180513T000000\r\nRDATE:20180513T000000\r\nEND:STANDARD","America/Santo_Domingo":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Sao_Paulo":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:20181104T000000\r\nRDATE:20181104T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20180218T000000\r\nRDATE:20180218T000000\r\nRDATE:20190217T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700101T000000\r\nEND:DAYLIGHT","America/Scoresbysund":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700329T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:-0100\r\nTZNAME:-01\r\nDTSTART:19701025T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","America/Sitka":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/St_Barthelemy":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/St_Johns":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0230\r\nTZOFFSETTO:-0330\r\nTZNAME:NST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0330\r\nTZOFFSETTO:-0230\r\nTZNAME:NDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT","America/St_Kitts":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/St_Lucia":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/St_Thomas":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/St_Vincent":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Swift_Current":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Tegucigalpa":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Thule":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Thunder_Bay":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Tijuana":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Toronto":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Tortola":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Vancouver":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Whitehorse":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:20180311T020000\r\nRDATE:20180311T020000\r\nRDATE:20190310T020000\r\nRDATE:20200308T020000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:20181104T020000\r\nRDATE:20181104T020000\r\nRDATE:20191103T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:20201101T000000\r\nRDATE:20201101T000000\r\nEND:STANDARD","America/Winnipeg":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Yakutat":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Yellowknife":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Antarctica/Casey":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:20181007T040000\r\nRDATE:20181007T040000\r\nRDATE:20191004T030000\r\nRDATE:20201004T000100\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:20180311T040000\r\nRDATE:20180311T040000\r\nRDATE:20190317T030000\r\nRDATE:20200308T030000\r\nEND:STANDARD","Antarctica/Davis":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Antarctica/DumontDUrville":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Antarctica/Macquarie":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Antarctica/Mawson":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Antarctica/McMurdo":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:NZDT\r\nDTSTART:19700927T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1200\r\nTZNAME:NZST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD","Antarctica/Palmer":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Antarctica/Rothera":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Antarctica/Syowa":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Antarctica/Troll":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0200\r\nTZNAME:+02\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Antarctica/Vostok":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Arctic/Longyearbyen":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Asia/Aden":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Almaty":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Amman":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700326T235959\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1TH\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701030T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1FR\r\nEND:STANDARD","Asia/Anadyr":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Aqtau":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Aqtobe":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Ashgabat":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Atyrau":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Baghdad":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Bahrain":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Baku":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Bangkok":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Barnaul":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Beirut":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Asia/Bishkek":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Brunei":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Chita":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Choibalsan":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Colombo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0530\r\nTZOFFSETTO:+0530\r\nTZNAME:+0530\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Damascus":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701030T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1FR\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700327T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1FR\r\nEND:DAYLIGHT","Asia/Dhaka":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Dili":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Dubai":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Dushanbe":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Famagusta":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:20180325T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT","Asia/Gaza":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:20200328T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:20201024T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:20180324T010000\r\nRDATE:20180324T010000\r\nRDATE:20190329T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:20181027T010000\r\nRDATE:20181027T010000\r\nRDATE:20191026T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Hebron":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:20200328T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:20201024T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:20180324T010000\r\nRDATE:20180324T010000\r\nRDATE:20190329T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:20181027T010000\r\nRDATE:20181027T010000\r\nRDATE:20191026T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Ho_Chi_Minh":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Hong_Kong":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:HKT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Hovd":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Irkutsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Istanbul":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Jakarta":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:WIB\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Jayapura":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:WIT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Jerusalem":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:IDT\r\nDTSTART:19700327T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=23,24,25,26,27,28,29;BYDAY=FR\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:IST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Asia/Kabul":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0430\r\nTZOFFSETTO:+0430\r\nTZNAME:+0430\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Kamchatka":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Karachi":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:PKT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Kathmandu":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0545\r\nTZOFFSETTO:+0545\r\nTZNAME:+0545\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Khandyga":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Kolkata":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0530\r\nTZOFFSETTO:+0530\r\nTZNAME:IST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Krasnoyarsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Kuala_Lumpur":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Kuching":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Kuwait":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Macau":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Magadan":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Makassar":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:WITA\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Manila":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:PST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Muscat":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Nicosia":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT","Asia/Novokuznetsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Novosibirsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Omsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Oral":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Phnom_Penh":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Pontianak":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:WIB\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Pyongyang":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0830\r\nTZNAME:KST\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0830\r\nTZOFFSETTO:+0900\r\nTZNAME:KST\r\nDTSTART:20180504T233000\r\nRDATE:20180504T233000\r\nEND:STANDARD","Asia/Qatar":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Qostanay":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Qyzylorda":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:20181221T000000\r\nRDATE:20181221T000000\r\nEND:STANDARD","Asia/Riyadh":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Sakhalin":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Samarkand":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Seoul":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:KST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Shanghai":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Singapore":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Srednekolymsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Taipei":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Tashkent":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Tbilisi":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Tehran":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0330\r\nTZNAME:+0330\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0330\r\nTZOFFSETTO:+0430\r\nTZNAME:+0430\r\nDTSTART:20180321T235959\r\nRDATE:20180321T235959\r\nRDATE:20190321T235959\r\nRDATE:20200320T235959\r\nRDATE:20210321T235959\r\nRDATE:20220321T235959\r\nRDATE:20230321T235959\r\nRDATE:20240320T235959\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0430\r\nTZOFFSETTO:+0330\r\nTZNAME:+0330\r\nDTSTART:20180921T235959\r\nRDATE:20180921T235959\r\nRDATE:20190921T235959\r\nRDATE:20200920T235959\r\nRDATE:20210921T235959\r\nRDATE:20220921T235959\r\nRDATE:20230921T235959\r\nRDATE:20240920T235959\r\nEND:STANDARD","Asia/Thimphu":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Tokyo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:JST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Tomsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Ulaanbaatar":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Urumqi":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Ust-Nera":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Vientiane":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Vladivostok":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Yakutsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Yangon":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0630\r\nTZOFFSETTO:+0630\r\nTZNAME:+0630\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Yekaterinburg":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Yerevan":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Atlantic/Azores":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700329T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:-0100\r\nTZNAME:-01\r\nDTSTART:19701025T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Atlantic/Bermuda":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Atlantic/Canary":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WEST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:WET\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Atlantic/Cape_Verde":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:-0100\r\nTZNAME:-01\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Atlantic/Faroe":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WEST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:WET\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Atlantic/Madeira":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WEST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:WET\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Atlantic/Reykjavik":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Atlantic/South_Georgia":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Atlantic/St_Helena":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Atlantic/Stanley":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Australia/Adelaide":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1030\r\nTZOFFSETTO:+0930\r\nTZNAME:ACST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0930\r\nTZOFFSETTO:+1030\r\nTZNAME:ACDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Australia/Brisbane":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Australia/Broken_Hill":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1030\r\nTZOFFSETTO:+0930\r\nTZNAME:ACST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0930\r\nTZOFFSETTO:+1030\r\nTZNAME:ACDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Australia/Currie":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD","Australia/Darwin":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0930\r\nTZOFFSETTO:+0930\r\nTZNAME:ACST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Australia/Eucla":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0845\r\nTZOFFSETTO:+0845\r\nTZNAME:+0845\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Australia/Hobart":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD","Australia/Lindeman":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Australia/Lord_Howe":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1030\r\nTZNAME:+1030\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1030\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Australia/Melbourne":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Australia/Perth":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:AWST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Australia/Sydney":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Europe/Amsterdam":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Andorra":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Astrakhan":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Athens":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Belgrade":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Berlin":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Bratislava":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Brussels":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Bucharest":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Budapest":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Busingen":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Chisinau":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Copenhagen":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Dublin":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:IST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:DAYLIGHT","Europe/Gibraltar":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Guernsey":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Helsinki":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Isle_of_Man":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Istanbul":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Jersey":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Kaliningrad":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Kiev":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Kirov":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Lisbon":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:WET\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WEST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT","Europe/Ljubljana":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/London":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Luxembourg":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Madrid":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Malta":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Mariehamn":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Minsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Monaco":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Moscow":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:MSK\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Nicosia":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT","Europe/Oslo":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Paris":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Podgorica":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Prague":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Riga":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Rome":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Samara":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/San_Marino":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Sarajevo":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Saratov":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Simferopol":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:MSK\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Skopje":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Sofia":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Stockholm":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Tallinn":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Tirane":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Ulyanovsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Uzhgorod":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Vaduz":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Vatican":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Vienna":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Vilnius":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Volgograd":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:20181028T020000\r\nRDATE:20181028T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Warsaw":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Zagreb":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Zaporozhye":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Zurich":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Indian/Antananarivo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Chagos":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Christmas":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Cocos":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0630\r\nTZOFFSETTO:+0630\r\nTZNAME:+0630\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Comoro":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Kerguelen":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Mahe":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Maldives":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Mauritius":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Mayotte":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Reunion":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Apia":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1400\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700405T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1400\r\nTZNAME:+14\r\nDTSTART:19700927T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT","Pacific/Auckland":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:NZDT\r\nDTSTART:19700927T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1200\r\nTZNAME:NZST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD","Pacific/Bougainville":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Chatham":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1245\r\nTZOFFSETTO:+1345\r\nTZNAME:+1345\r\nDTSTART:19700927T024500\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1345\r\nTZOFFSETTO:+1245\r\nTZNAME:+1245\r\nDTSTART:19700405T034500\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD","Pacific/Chuuk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Easter":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:-06\r\nDTSTART:20190406T220000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SA\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:20190907T220000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=1SA\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:-06\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:20180811T220000\r\nRDATE:20180811T220000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:-06\r\nDTSTART:20180512T220000\r\nRDATE:20180512T220000\r\nEND:STANDARD","Pacific/Efate":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Enderbury":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Fakaofo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Fiji":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700118T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=12,13,14,15,16,17,18;BYDAY=SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:20211114T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:20181104T020000\r\nRDATE:20181104T020000\r\nRDATE:20191110T020000\r\nRDATE:20201220T020000\r\nEND:DAYLIGHT","Pacific/Funafuti":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Galapagos":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:-06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Gambier":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0900\r\nTZNAME:-09\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Guadalcanal":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Guam":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:ChST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Honolulu":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-1000\r\nTZNAME:HST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Kiritimati":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1400\r\nTZOFFSETTO:+1400\r\nTZNAME:+14\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Kosrae":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Kwajalein":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Majuro":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Marquesas":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0930\r\nTZOFFSETTO:-0930\r\nTZNAME:-0930\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Midway":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1100\r\nTZOFFSETTO:-1100\r\nTZNAME:SST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Nauru":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Niue":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1100\r\nTZOFFSETTO:-1100\r\nTZNAME:-11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Norfolk":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:20191006T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:20200405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1130\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:20190701T000000\r\nRDATE:20190701T000000\r\nEND:STANDARD","Pacific/Noumea":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Pago_Pago":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1100\r\nTZOFFSETTO:-1100\r\nTZNAME:SST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Palau":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Pitcairn":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0800\r\nTZNAME:-08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Pohnpei":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Port_Moresby":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Rarotonga":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-1000\r\nTZNAME:-10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Saipan":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:ChST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Tahiti":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-1000\r\nTZNAME:-10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Tarawa":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Tongatapu":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Wake":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Wallis":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","AUS Central Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0930\r\nTZOFFSETTO:+0930\r\nTZNAME:ACST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","AUS Eastern Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Afghanistan Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0430\r\nTZOFFSETTO:+0430\r\nTZNAME:+0430\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Asmera":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Timbuktu":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Alaskan Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Argentina/ComodRivadavia":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Buenos_Aires":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Godthab":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700328T220000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19701024T230000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:STANDARD","America/Louisville":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Montreal":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Santa_Isabel":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Arab Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Arabian Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Arabic Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Argentina Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Calcutta":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0530\r\nTZOFFSETTO:+0530\r\nTZNAME:IST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Katmandu":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0545\r\nTZOFFSETTO:+0545\r\nTZNAME:+0545\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Rangoon":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0630\r\nTZOFFSETTO:+0630\r\nTZNAME:+0630\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Saigon":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Atlantic Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Atlantic/Faeroe":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WEST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:WET\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Atlantic/Jan_Mayen":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Azerbaijan Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Azores Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700329T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:-0100\r\nTZNAME:-01\r\nDTSTART:19701025T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Bahia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Bangladesh Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Belarus Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Canada Central Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Cape Verde Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:-0100\r\nTZNAME:-01\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Caucasus Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Cen. Australia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1030\r\nTZOFFSETTO:+0930\r\nTZNAME:ACST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0930\r\nTZOFFSETTO:+1030\r\nTZNAME:ACDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Central America Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Central Asia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Central Brazilian Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20181104T000000\r\nRDATE:20181104T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20180218T000000\r\nRDATE:20180218T000000\r\nRDATE:20190217T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Central Europe Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Central European Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Central Pacific Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Central Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Central Standard Time (Mexico)":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","China Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","E. Africa Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","E. Australia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","E. South America Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:20181104T000000\r\nRDATE:20181104T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20180218T000000\r\nRDATE:20180218T000000\r\nRDATE:20190217T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700101T000000\r\nEND:DAYLIGHT","Eastern Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Egypt Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Ekaterinburg Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Belfast":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","FLE Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Fiji Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700118T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=12,13,14,15,16,17,18;BYDAY=SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:20211114T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:20181104T020000\r\nRDATE:20181104T020000\r\nRDATE:20191110T020000\r\nRDATE:20201220T020000\r\nEND:DAYLIGHT","GMT Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","GTB Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Georgian Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Greenwich Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Hawaiian Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-1000\r\nTZNAME:HST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Iran Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0330\r\nTZNAME:+0330\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0330\r\nTZOFFSETTO:+0430\r\nTZNAME:+0430\r\nDTSTART:20180321T235959\r\nRDATE:20180321T235959\r\nRDATE:20190321T235959\r\nRDATE:20200320T235959\r\nRDATE:20210321T235959\r\nRDATE:20220321T235959\r\nRDATE:20230321T235959\r\nRDATE:20240320T235959\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0430\r\nTZOFFSETTO:+0330\r\nTZNAME:+0330\r\nDTSTART:20180921T235959\r\nRDATE:20180921T235959\r\nRDATE:20190921T235959\r\nRDATE:20200920T235959\r\nRDATE:20210921T235959\r\nRDATE:20220921T235959\r\nRDATE:20230921T235959\r\nRDATE:20240920T235959\r\nEND:STANDARD","Israel Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:IDT\r\nDTSTART:19700327T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=23,24,25,26,27,28,29;BYDAY=FR\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:IST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Jordan Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700326T235959\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1TH\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701030T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1FR\r\nEND:STANDARD","Kaliningrad Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Korea Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:KST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Libya Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Line Islands Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1400\r\nTZOFFSETTO:+1400\r\nTZNAME:+14\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Magadan Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Mauritius Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Middle East Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Montevideo Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Morocco Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20180325T020000\r\nRDATE:20180325T020000\r\nRDATE:20180617T020000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20180513T030000\r\nRDATE:20180513T030000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20190609T020000\r\nRDATE:20190609T020000\r\nRDATE:20200531T020000\r\nRDATE:20210516T020000\r\nRDATE:20220508T020000\r\nRDATE:20230430T020000\r\nRDATE:20240414T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20181028T030000\r\nRDATE:20181028T030000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20190505T030000\r\nRDATE:20190505T030000\r\nRDATE:20200419T030000\r\nRDATE:20210411T030000\r\nRDATE:20220327T030000\r\nRDATE:20230319T030000\r\nRDATE:20240310T030000\r\nEND:DAYLIGHT","Mountain Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Mountain Standard Time (Mexico)":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","N. Central Asia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Namibia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","New Zealand Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:NZDT\r\nDTSTART:19700927T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1200\r\nTZNAME:NZST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD","Newfoundland Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0230\r\nTZOFFSETTO:-0330\r\nTZNAME:NST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0330\r\nTZOFFSETTO:-0230\r\nTZNAME:NDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT","North Asia East Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","North Asia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific SA Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20190407T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYMONTHDAY=2,3,4,5,6,7,8;BYDAY=SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20190908T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYMONTHDAY=2,3,4,5,6,7,8;BYDAY=SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20180812T000000\r\nRDATE:20180812T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20180513T000000\r\nRDATE:20180513T000000\r\nEND:STANDARD","Pacific Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Pacific/Johnston":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-1000\r\nTZNAME:HST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pakistan Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:PKT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Paraguay Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19701004T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700322T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=4SU\r\nEND:STANDARD","Romance Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Russia Time Zone 10":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Russia Time Zone 11":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Russia Time Zone 3":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Russian Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:MSK\r\nDTSTART:19700101T000000\r\nEND:STANDARD","SA Eastern Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","SA Pacific Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","SA Western Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","SE Asia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Samoa Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1400\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700405T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1400\r\nTZNAME:+14\r\nDTSTART:19700927T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT","Singapore Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","South Africa Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:SAST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Sri Lanka Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0530\r\nTZOFFSETTO:+0530\r\nTZNAME:+0530\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Syria Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701030T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1FR\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700327T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1FR\r\nEND:DAYLIGHT","Taipei Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Tasmania Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD","Tokyo Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:JST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Tonga Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Turkey Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","US Eastern Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","US Mountain Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","US/Central":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","US/Eastern":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","US/Mountain":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","US/Pacific":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","US/Pacific-New":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Ulaanbaatar Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Venezuela Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Vladivostok Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","W. Australia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:AWST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","W. Central Africa Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","W. Europe Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","West Asia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","West Pacific Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Yakutsk Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD"};

    var zonesCompiled$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': zonesCompiled
    });

    var timezones = getCjsExportFromNamespace(zonesCompiled$1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};


    // Copied from https://dxr.mozilla.org/comm-central/source/calendar/timezones/zones.json
    // And compiled using node compile-zones.js
    // See also https://github.com/mozilla-comm/ical.js/issues/195


    class IcalExpander {
      constructor(opts) {
        this.maxIterations = opts.maxIterations != null ? opts.maxIterations : 1000;
        this.skipInvalidDates = opts.skipInvalidDates != null ? opts.skipInvalidDates : false;

        this.jCalData = ical.parse(opts.ics);
        this.component = new ical.Component(this.jCalData);
        this.events = this.component.getAllSubcomponents('vevent').map(vevent => new ical.Event(vevent));

        if (this.skipInvalidDates) {
          this.events = this.events.filter((evt) => {
            try {
              evt.startDate.toJSDate();
              evt.endDate.toJSDate();
              return true;
            } catch (err) {
              // skipping events with invalid time
              return false;
            }
          });
        }
      }

      between(after, before) {
        function isEventWithinRange(startTime, endTime) {
          return (!after || endTime >= after.getTime()) &&
          (!before || startTime <= before.getTime());
        }

        function getTimes(eventOrOccurrence) {
          const startTime = eventOrOccurrence.startDate.toJSDate().getTime();
          let endTime = eventOrOccurrence.endDate.toJSDate().getTime();

          // If it is an all day event, the end date is set to 00:00 of the next day
          // So we need to make it be 23:59:59 to compare correctly with the given range
          if (eventOrOccurrence.endDate.isDate && (endTime > startTime)) {
            endTime -= 1;
          }

          return { startTime, endTime };
        }

        const exceptions = [];

        this.events.forEach((event) => {
          if (event.isRecurrenceException()) exceptions.push(event);
        });

        const ret = {
          events: [],
          occurrences: [],
        };

        this.events.filter(e => !e.isRecurrenceException()).forEach((event) => {
          const exdates = [];

          event.component.getAllProperties('exdate').forEach((exdateProp) => {
            const exdate = exdateProp.getFirstValue();
            exdates.push(exdate.toJSDate().getTime());
          });

          // Recurring event is handled differently
          if (event.isRecurring()) {
            const iterator = event.iterator();

            let next;
            let i = 0;

            do {
              i += 1;
              next = iterator.next();
              if (next) {
                const occurrence = event.getOccurrenceDetails(next);

                const { startTime, endTime } = getTimes(occurrence);

                const isOccurrenceExcluded = exdates.indexOf(startTime) !== -1;

                // TODO check that within same day?
                const exception = exceptions.find(ex => ex.uid === event.uid && ex.recurrenceId.toJSDate().getTime() === occurrence.startDate.toJSDate().getTime());

                // We have passed the max date, stop
                if (before && startTime > before.getTime()) break;

                // Check that we are within our range
                if (isEventWithinRange(startTime, endTime)) {
                  if (exception) {
                    ret.events.push(exception);
                  } else if (!isOccurrenceExcluded) {
                    ret.occurrences.push(occurrence);
                  }
                }
              }
            }
            while (next && (!this.maxIterations || i < this.maxIterations));

            return;
          }

          // Non-recurring event:
          const { startTime, endTime } = getTimes(event);

          if (isEventWithinRange(startTime, endTime)) ret.events.push(event);
        });

        return ret;
      }

      before(before) {
        return this.between(undefined, before);
      }

      after(after) {
        return this.between(after);
      }

      all() {
        return this.between();
      }
    }

    function registerTimezones() {
      Object.keys(timezones).forEach((key) => {
        const icsData = timezones[key];
        const icsTimezone = `BEGIN:VTIMEZONE\r\nTZID:${key}\r\n${icsData}\r\nEND:VTIMEZONE`;
        const parsed = ical.parse(`BEGIN:VCALENDAR\nPRODID:-//tzurl.org//NONSGML Olson 2012h//EN\nVERSION:2.0\n${icsTimezone}\nEND:VCALENDAR`);
        const comp = new ical.Component(parsed);
        const vtimezone = comp.getFirstSubcomponent('vtimezone');

        ical.TimezoneService.register(key, new ical.Timezone(vtimezone));
      });
    }

    registerTimezones();

    var icalExpander = IcalExpander;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var isBetween = createCommonjsModule$1(function (module, exports) {
    !function(e,t){module.exports=t();}(commonjsGlobal,function(){return function(e,t,i){t.prototype.isBetween=function(e,t,s,f){var n=i(e),o=i(t),r="("===(f=f||"()")[0],u=")"===f[1];return (r?this.isAfter(n,s):!this.isBefore(n,s))&&(u?this.isBefore(o,s):!this.isAfter(o,s))||(r?this.isBefore(n,s):!this.isAfter(n,s))&&(u?this.isAfter(o,s):!this.isBefore(o,s))};}});
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _extends() {
      _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      return _extends.apply(this, arguments);
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var runtime_1 = createCommonjsModule(function (module) {
    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var runtime = (function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }
      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);

        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);

        return generator;
      }
      exports.wrap = wrap;

      // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.
      function tryCatch(fn, obj, arg) {
        try {
          return { type: "normal", arg: fn.call(obj, arg) };
        } catch (err) {
          return { type: "throw", arg: err };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";

      // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.
      var ContinueSentinel = {};

      // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}

      // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.
      var IteratorPrototype = {};
      IteratorPrototype[iteratorSymbol] = function () {
        return this;
      };

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      if (NativeIteratorPrototype &&
          NativeIteratorPrototype !== Op &&
          hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype =
        Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunction.displayName = define(
        GeneratorFunctionPrototype,
        toStringTagSymbol,
        "GeneratorFunction"
      );

      // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor
          ? ctor === GeneratorFunction ||
            // For the native GeneratorFunction constructor, the best we can
            // do is to check its .name property.
            (ctor.displayName || ctor.name) === "GeneratorFunction"
          : false;
      };

      exports.mark = function(genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
      };

      // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.
      exports.awrap = function(arg) {
        return { __await: arg };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;
            if (value &&
                typeof value === "object" &&
                hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function(value) {
                invoke("next", value, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function(unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function(error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function(resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise =
            // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(
              callInvokeWithMethodAndArg,
              // Avoid propagating failures to Promises returned by later
              // invocations of the iterator.
              callInvokeWithMethodAndArg
            ) : callInvokeWithMethodAndArg();
        }

        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);
      AsyncIterator.prototype[asyncIteratorSymbol] = function () {
        return this;
      };
      exports.AsyncIterator = AsyncIterator;

      // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.
      exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;

        var iter = new AsyncIterator(
          wrap(innerFn, outerFn, self, tryLocsList),
          PromiseImpl
        );

        return exports.isGeneratorFunction(outerFn)
          ? iter // If outerFn is a generator, return the full iterator.
          : iter.next().then(function(result) {
              return result.done ? result.value : iter.next();
            });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;

        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }

            // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;

            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);

            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;

            var record = tryCatch(innerFn, self, context);
            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done
                ? GenStateCompleted
                : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };

            } else if (record.type === "throw") {
              state = GenStateCompleted;
              // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.
              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      }

      // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.
      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError(
              "The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (! info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value;

          // Resume execution at the desired location (see delegateYield).
          context.next = delegate.nextLoc;

          // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.
          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }

        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        }

        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
      }

      // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.
      defineIteratorMethods(Gp);

      define(Gp, toStringTagSymbol, "Generator");

      // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.
      Gp[iteratorSymbol] = function() {
        return this;
      };

      Gp.toString = function() {
        return "[object Generator]";
      };

      function pushTryEntry(locs) {
        var entry = { tryLoc: locs[0] };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{ tryLoc: "root" }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function(object) {
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();

        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
          while (keys.length) {
            var key = keys.pop();
            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          }

          // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.
          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1, next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;

              return next;
            };

            return next.next = next;
          }
        }

        // Return an iterator with no values.
        return { next: doneResult };
      }
      exports.values = values;

      function doneResult() {
        return { value: undefined$1, done: true };
      }

      Context.prototype = {
        constructor: Context,

        reset: function(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.
          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;

          this.method = "next";
          this.arg = undefined$1;

          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" &&
                  hasOwn.call(this, name) &&
                  !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },

        stop: function() {
          this.done = true;

          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },

        dispatchException: function(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !! caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }

              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }

              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }

              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },

        abrupt: function(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev &&
                hasOwn.call(entry, "finallyLoc") &&
                this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry &&
              (type === "break" ||
               type === "continue") &&
              finallyEntry.tryLoc <= arg &&
              arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },

        complete: function(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" ||
              record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },

        finish: function(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },

        "catch": function(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }

          // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.
          throw new Error("illegal catch attempt");
        },

        delegateYield: function(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      };

      // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.
      return exports;

    }(
      // If this script is executing as a CommonJS module, use module.exports
      // as the regeneratorRuntime namespace. Otherwise create a new empty
      // object. Either way, the resulting object will be used to initialize
      // the regeneratorRuntime variable at the top of this file.
       module.exports 
    ));

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      Function("r", "regeneratorRuntime = r")(runtime);
    }
    });

    function isXmlElement(node) {
      return !!node.children;
    }
    /**
     * MMLTag - Xml tag converted to this MMLTag
     */


    var MMLTag = /*#__PURE__*/function () {
      function MMLTag(name, node, children) {
        this.name = name;
        this.node = node;
        this.attributes = this.node.attributes || {};
        this.children = children;
      }

      var _proto = MMLTag.prototype;

      _proto.getText = function getText() {
        if (this.node.type === 'text') return this.node.text;else if (isXmlElement(this.node) && this.node.children.length) return this.node.children[0].text;
        return '';
      };

      _proto.initialState = function initialState() {
        var _ref;

        var _this$attributes = this.attributes,
            name = _this$attributes.name,
            value = _this$attributes.value;
        if (name) return _ref = {}, _ref[name] = value, _ref;
        return {};
      };

      return MMLTag;
    }();

    var Card = function Card(_ref) {
      var _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className,
          children = _ref.children;
      return React__default['default'].createElement("div", {
        className: "mml-card " + className
      }, children);
    };

    var Icon = function Icon(_ref) {
      var name = _ref.name;
      return React__default['default'].createElement("i", {
        className: "mml-icon material-icons"
      }, name);
    };

    var CardHeader = function CardHeader(_ref) {
      var text = _ref.text,
          _ref$icon = _ref.icon,
          icon = _ref$icon === void 0 ? '' : _ref$icon,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className;
      return React__default['default'].createElement("div", {
        className: "mml-card-header " + className
      }, icon && React__default['default'].createElement(Icon, {
        name: icon
      }), React__default['default'].createElement("span", {
        className: "mml-card-header__text"
      }, text));
    };

    var CardBody = function CardBody(_ref) {
      var _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className,
          children = _ref.children;
      return React__default['default'].createElement("div", {
        className: "mml-card-body " + className
      }, children);
    };

    /**
     * A list of buttons
     */

    var ButtonList = function ButtonList(_ref) {
      var children = _ref.children,
          _ref$variant = _ref.variant,
          variant = _ref$variant === void 0 ? '' : _ref$variant;
      return React__default['default'].createElement("div", {
        className: "mml-btnlist " + (variant === 'floating' ? ' mml-btnlist--floating' : 'mml-btnlist--grounded')
      }, children);
    };

    /**
     * Utility to have custom svg icons outside the `material-icons` system provided by the Icon component
     * Use case internal to this library is the AddToCalendar component which needs brand icons which are not
     * included in [the default material-icons set and probably never will be](https://git.io/Jk9yH)
     */

    var SvgIcon = function SvgIcon(_ref) {
      var path = _ref.path;
      return React__default['default'].createElement("i", {
        className: "mml-icon"
      }, React__default['default'].createElement("svg", {
        className: "mml-icon__svg",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24"
      }, React__default['default'].createElement("path", {
        d: path
      })));
    };
    /** Icon path from https://materialdesignicons.com/ */


    var IconGoogle = /*#__PURE__*/React__default['default'].createElement(SvgIcon, {
      path: "M21.35 11.1h-9.17v2.73h6.5c-.33 3.8-3.5 5.44-6.5 5.44C8.36 19.27 5 16.25 5 12c0-4.1 3.2-7.27 7.2-7.27 3.1 0 4.9 1.97 4.9 1.97L19 4.72S16.56 2 12.1 2C6.42 2 2.03 6.8 2.03 12c0 5.05 4.13 10 10.22 10 5.35 0 9.25-3.67 9.25-9.1 0-1.15-.15-1.8-.15-1.8h0z"
    });
    /** Icon path from https://materialdesignicons.com/ */

    var IconMicrosoft = /*#__PURE__*/React__default['default'].createElement(SvgIcon, {
      path: "M3 12V6.75l6-1.32v6.48L3 12m17-9v8.75l-10 .15V5.2L20 3M3 13l6 .1v6.8l-6-1.15V13m17 .25V22l-10-1.9v-7l10 .15z"
    });
    /** Icon path from https://materialdesignicons.com/ */

    var IconApple = /*#__PURE__*/React__default['default'].createElement(SvgIcon, {
      path: "M18.7 19.5c-.83 1.24-1.7 2.45-3.05 2.47-1.34.03-1.77-.8-3.3-.8-1.53 0-2 .77-3.27.82-1.3.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.4c.87-1.52 2.43-2.48 4.12-2.5 1.28-.02 2.5.87 3.3.87.78 0 2.26-1.07 3.8-.9.65.03 2.47.26 3.64 1.98-.1.06-2.17 1.28-2.15 3.8.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.2-.7.85-1.83 1.5-2.95 1.42-.15-1.15.4-2.35 1.05-3.1z"
    });

    function isMobile() {
      var ua = typeof navigator !== 'undefined' ? navigator.userAgent : '';
      if (!ua) return false;
      var mobileRE = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series[46]0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i;
      if (mobileRE.test(ua)) return true;
      if (typeof navigator !== 'undefined' && navigator.maxTouchPoints > 1 && ua.indexOf('Macintosh') !== -1 && ua.indexOf('Safari') !== -1) return true;
      return false;
    } // @ts-ignore (expect-error breaks in GH actions) TODO: replace deprecated method


    var isIE = typeof window !== 'undefined' && window.navigator.msSaveOrOpenBlob && window.Blob;

    var getCurrentURL = function getCurrentURL() {
      if (typeof window !== 'undefined') return window.location.href;
      return '';
    };

    var CALENDAR_SERVICES = [{
      id: 'google',
      label: 'Google',
      Icon: IconGoogle
    }, {
      id: 'apple',
      label: 'Apple Calendar',
      Icon: IconApple
    }, {
      id: 'outlook',
      label: 'Outlook',
      Icon: IconMicrosoft
    }, {
      id: 'outlookcom',
      label: 'Outlook.com',
      Icon: IconMicrosoft
    }];
    /**
     * Format time
     *
     * Adapted from the `moment` way of [react-add-to-calendar](https://git.io/JkWol)
     * to the dayjs way
     */

    function formatTime(date, id) {
      return dayjs_min(date).format(id === 'outlookcom' ? 'YYYY-MM-DDTHH:mm:ss' : 'YYYYMMDDTHHmmss') + 'Z';
    }
    /**
     * Create query string with given parameters
     *
     * It checks that the parameter value is not falsy
     */


    function createQueryString(params) {
      if (params === void 0) {
        params = {};
      }

      return Object.keys(params).reduce(function (acc, key) {
        var value = params[key];
        if (value) acc += "&" + key + "=" + encodeURIComponent(value);
        return acc;
      }, '');
    }
    /**
     * Build calendar URL
     *
     * Resources:
     * - [SO question about Google](https://stackoverflow.com/q/22757908)
     * - [docs about outlook.com format](https://git.io/JkWp5)
     * - [addevent wrapper SaaS](https://www.addevent.com/)
     */


    function buildUrl(event, id) {
      var start = event.start,
          end = event.end,
          title = event.title,
          location = event.location,
          description = event.description;
      var startFormatted = formatTime(start, id);
      var endFormatted = formatTime(end, id);
      if (id === 'google') return "https://calendar.google.com/calendar/render?action=TEMPLATE&dates=" + startFormatted + "/" + endFormatted + createQueryString({
        location: location,
        text: title,
        details: description
      });
      if (id === 'outlookcom') return "https://outlook.live.com/owa/?rru=addevent" + createQueryString({
        startdt: startFormatted,
        enddt: endFormatted,
        subject: title,
        location: location,
        body: description,
        allday: 'false'
      }) + "&path=/calendar/view/Month";
      var url = ['BEGIN:VCALENDAR', 'VERSION:2.0', 'BEGIN:VEVENT', 'URL:' + getCurrentURL(), 'DTSTART:' + startFormatted, 'DTEND:' + endFormatted, 'SUMMARY:' + title, 'DESCRIPTION:' + description, 'LOCATION:' + location, 'END:VEVENT', 'END:VCALENDAR'].join('\n');
      if (!isIE && isMobile()) url = encodeURI('data:text/calendar;charset=utf8,' + url);
      return url;
    }
    /**
     * AddToCalendar widget that supports google, apple and outlook calendars
     */


    var AddToCalendar = function AddToCalendar(_ref2) {
      var title = _ref2.title,
          start = _ref2.start,
          end = _ref2.end,
          _ref2$className = _ref2.className,
          className = _ref2$className === void 0 ? '' : _ref2$className,
          _ref2$location = _ref2.location,
          location = _ref2$location === void 0 ? '' : _ref2$location,
          _ref2$description = _ref2.description,
          description = _ref2$description === void 0 ? '' : _ref2$description;
      var event = {
        start: start,
        end: end,
        title: title,
        location: location,
        description: description
      };

      function handleLinkClick(event) {
        event.preventDefault();
        var url = event.currentTarget.getAttribute('href');

        if (!isMobile() && (url.startsWith('data') || url.startsWith('BEGIN'))) {
          var filename = 'download.ics';
          var blob = new Blob([url], {
            type: 'text/calendar;charset=utf-8'
          });

          if (isIE) {
            // @ts-ignore (expect-error breaks in GH actions) TODO: replace deprecated method
            window.navigator.msSaveOrOpenBlob(blob, filename);
          } else {
            // many browsers do not properly support downloading data URIs
            // (even with "download" attribute in use) so this solution
            // ensures the event will download cross-browser
            var link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.setAttribute('download', filename);
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
          }
        } else {
          window.open(url, '_blank');
        }
      }

      return React__default['default'].createElement(Card, {
        className: "mml-add-to-calendar " + className
      }, React__default['default'].createElement(CardHeader, {
        icon: "date_range",
        text: "Add to My Calendar"
      }), React__default['default'].createElement(CardBody, null, React__default['default'].createElement(ButtonList, null, CALENDAR_SERVICES.map(function (_ref3) {
        var id = _ref3.id,
            label = _ref3.label,
            Icon = _ref3.Icon;
        return React__default['default'].createElement("a", {
          key: id,
          className: "mml-btn " + (Icon ? 'mml-btn--with-icon' : ''),
          onClick: handleLinkClick,
          href: buildUrl(event, id),
          target: "_blank",
          rel: "nofollow noreferrer noopener"
        }, Icon, " ", label);
      }))));
    };

    /**
     * Button can be used to open a URL, submit the form or trigger a select when clicked
     */

    var Button = function Button(_ref) {
      var _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className,
          text = _ref.text,
          name = _ref.name,
          value = _ref.value,
          _ref$url = _ref.url,
          url = _ref$url === void 0 ? '' : _ref$url,
          variant = _ref.variant,
          icon = _ref.icon;

      if (icon) {
        className += text ? ' mml-btn--with-icon' : ' mml-btn--icon';
      } else {
        className += ' mml-btn--text';
      }

      className += variant === 'floating' ? ' mml-btn--floating' : ' mml-btn--grounded';
      if (url) return React__default['default'].createElement("a", {
        className: "mml-btn " + className,
        href: dist_1(url),
        target: "_blank",
        rel: "nofollow noreferrer noopener"
      }, icon && React__default['default'].createElement(Icon, {
        name: icon
      }), text);
      return React__default['default'].createElement("button", {
        className: "mml-btn " + className,
        type: "submit",
        name: name,
        value: value,
        onClick: function onClick(event) {
          var _event$currentTarget, _event$currentTarget$;

          var input = document.createElement('input');
          input.type = 'hidden';
          input.name = name || '';
          input.value = value || '';
          (_event$currentTarget = event.currentTarget) == null ? void 0 : (_event$currentTarget$ = _event$currentTarget.closest('form')) == null ? void 0 : _event$currentTarget$.appendChild(input);
        }
      }, icon && React__default['default'].createElement(Icon, {
        name: icon
      }), text);
    };

    /**
     * A carousel is a nice mobile friendly way of letting a user select something
     *
     * Super simple scroll based carousel slightly inspired by [react-scroll-snap-slider](https://github.com/lifarl/react-scroll-snap-slider)
     */

    var Carousel = function Carousel(_ref) {
      var children = _ref.children,
          _ref$slideWidth = _ref.slideWidth,
          slideWidth = _ref$slideWidth === void 0 ? '120px' : _ref$slideWidth,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className;
      return React__default['default'].createElement("div", {
        className: "mml-carousel " + className
      }, React__default['default'].createElement("div", {
        className: "mml-carousel__track"
      }, React__default['default'].createElement("div", {
        className: "mml-carousel__slides"
      }, React.Children.map(children, function (child) {
        return React.cloneElement(child, {
          className: 'mml-carousel__slide',
          slideWidth: slideWidth
        });
      }))));
    };

    /**
     * A carousel item
     */

    var CarouselItem = function CarouselItem(_ref) {
      var children = _ref.children,
          slideWidth = _ref.slideWidth,
          _ref$width = _ref.width,
          width = _ref$width === void 0 ? '' : _ref$width,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className;
      var finalWidth = width || slideWidth;
      return React__default['default'].createElement("div", {
        className: "mml-carousel-item " + className,
        style: {
          flex: "0 0 " + finalWidth,
          minWidth: finalWidth
        }
      }, children);
    };

    /**
     * A grid column
     * TODO: Consider renaming this element
     */

    var Col = function Col(_ref) {
      var children = _ref.children,
          _ref$width = _ref.width,
          width = _ref$width === void 0 ? 12 : _ref$width,
          _ref$offset = _ref.offset,
          offset = _ref$offset === void 0 ? 0 : _ref$offset,
          _ref$align = _ref.align,
          align = _ref$align === void 0 ? 'left' : _ref$align;
      var classNames = "mml-col-" + width;
      if (offset) classNames = classNames + (" mml-offset-" + offset);
      classNames = classNames + (" mml-align-" + align);
      return React__default['default'].createElement("div", {
        className: classNames
      }, children);
    };

    var Error$1 = function Error(_ref) {
      var _ref$error = _ref.error,
          error = _ref$error === void 0 ? '' : _ref$error;
      if (!error) return null;
      return React__default['default'].createElement("span", {
        className: "mml-error"
      }, error);
    };

    var Image = function Image(_ref) {
      var src = _ref.src,
          _ref$alt = _ref.alt,
          alt = _ref$alt === void 0 ? '' : _ref$alt,
          _ref$title = _ref.title,
          title = _ref$title === void 0 ? '' : _ref$title,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className;
      return React__default['default'].createElement("img", {
        className: ("mml-image " + className).trim(),
        src: src,
        alt: alt,
        title: title
      });
    };

    /**
     * Text input element. Usually you'll want to rely on regular messages
     */

    var Input = function Input(_ref) {
      var name = _ref.name,
          label = _ref.label,
          _ref$value = _ref.value,
          value = _ref$value === void 0 ? '' : _ref$value,
          _ref$type = _ref.type,
          type = _ref$type === void 0 ? 'text' : _ref$type,
          _ref$placeholder = _ref.placeholder,
          placeholder = _ref$placeholder === void 0 ? '' : _ref$placeholder;

      var _useState = React.useState(value),
          state = _useState[0],
          setState = _useState[1];

      var id = "mml-" + name;
      return React__default['default'].createElement(React__default['default'].Fragment, null, label && React__default['default'].createElement("label", {
        className: "mml-card-header",
        htmlFor: id
      }, React__default['default'].createElement("span", {
        className: "mml-card-header__text"
      }, label)), React__default['default'].createElement("input", {
        id: id,
        className: "mml-input",
        name: name,
        value: state,
        type: type,
        placeholder: placeholder,
        onChange: function onChange(event) {
          return setState(event.target.value);
        }
      }));
    };

    var SIZE = 44;
    var Progress = function Progress(_ref) {
      var size = _ref.size,
          _ref$thickness = _ref.thickness,
          thickness = _ref$thickness === void 0 ? 3.6 : _ref$thickness,
          color = _ref.color;
      thickness = typeof thickness === 'string' ? parseFloat(thickness) : thickness; // interpret a digit only string or a number as a pixel value otherwise leave
      // it as astring, it might be a value like `2em` or `120%`

      size = typeof size === 'string' && /^\d+$/.test(size) || typeof size === 'number' ? size + 'px' : size;
      return React__default['default'].createElement("span", {
        className: "mml-progress",
        role: "progressbar",
        style: {
          width: size,
          height: size,
          color: color
        }
      }, React__default['default'].createElement("svg", {
        className: "mml-progress__svg",
        viewBox: SIZE / 2 + " " + SIZE / 2 + " " + SIZE + " " + SIZE
      }, React__default['default'].createElement("circle", {
        className: "mml-progress__circle",
        cx: SIZE,
        cy: SIZE,
        r: (SIZE - thickness) / 2,
        fill: "none",
        strokeWidth: thickness
      })));
    };

    /**
     * Loading indicator
     */

    var Loading = function Loading(_ref) {
      var _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className,
          _ref$loading = _ref.loading,
          loading = _ref$loading === void 0 ? false : _ref$loading,
          text = _ref.text,
          size = _ref.size,
          thickness = _ref.thickness,
          color = _ref.color;
      if (!loading) return null;
      return React__default['default'].createElement("div", {
        className: "mml-loading " + className
      }, React__default['default'].createElement(Progress, Object.assign({}, {
        size: size,
        thickness: thickness,
        color: color
      })), text && React__default['default'].createElement("div", {
        className: "mml-loading__text"
      }, text));
    };

    var truncate = function truncate(input, length, end) {
      if (end === void 0) {
        end = '...';
      }

      if (input.length > length) return "" + input.substring(0, length - end.length) + end;
      return input;
    };

    var matchMarkdownLinks = function matchMarkdownLinks(message) {
      var regexMdLinks = /\[([^[]+)\](\(.*\))/gm;
      var matches = message.match(regexMdLinks);
      var singleMatch = /\[([^[]+)\]\((.*)\)/;
      var links = matches ? matches.map(function (match) {
        var i = singleMatch.exec(match);
        return i && i[2];
      }) : [];
      return links;
    };

    var MDLinkRender = function MDLinkRender(props) {
      if (!props.href || !props.href.startsWith('http') && !props.href.startsWith('mailto:')) return props.children;
      return React__default['default'].createElement("a", {
        href: props.href,
        target: "_blank",
        rel: "nofollow noreferrer noopener"
      }, props.children);
    };

    var markDownRenderers = {
      link: MDLinkRender
    };
    var allowedMarkups = ['html', // @ts-ignore
    'root', 'text', 'break', 'paragraph', 'emphasis', 'strong', 'link', 'list', 'listItem', 'code', 'inlineCode', 'blockquote'];
    /**
     * MD renders a given text as markdown
     */

    var MD = function MD(_ref) {
      var text = _ref.text;
      if (!text) return null;
      var newText = text;
      var markdownLinks = matchMarkdownLinks(newText); // extract all valid links/emails within text and replace it with proper markup

      linkifyjs_1(newText).forEach(function (_ref2) {
        var type = _ref2.type,
            href = _ref2.href,
            value = _ref2.value;
        // check if message is already  markdown
        var noParsingNeeded = markdownLinks && markdownLinks.filter(function (text) {
          return (text == null ? void 0 : text.indexOf(href)) !== -1;
        });
        if (noParsingNeeded.length > 0) return;
        var displayLink = type === 'email' ? value : truncate(value.replace(/(http(s?):\/\/)?(www\.)?/, ''), 20);
        newText = newText.replace(value, "[" + displayLink + "](" + encodeURI(href) + ")");
      });
      return React__default['default'].createElement("div", {
        className: "mml-md"
      }, React__default['default'].createElement(reactMarkdown, {
        allowedTypes: allowedMarkups,
        renderers: markDownRenderers,
        source: newText,
        escapeHtml: true,
        unwrapDisallowed: true,
        transformLinkUri: function transformLinkUri(uri) {
          return uri.startsWith('app://') ? uri : reactMarkdown.uriTransformer(uri);
        }
      }));
    };

    /**
     * Mobile friendly number input
     */

    var Number$1 = function Number(_ref) {
      var name = _ref.name,
          value = _ref.value;

      var _useState = React.useState(parseInt("" + value, 10) || 0),
          state = _useState[0],
          setState = _useState[1];

      return React__default['default'].createElement("div", {
        className: "mml-number"
      }, React__default['default'].createElement("input", {
        name: name,
        value: state,
        type: "hidden"
      }), React__default['default'].createElement("span", {
        className: "mml-btn mml-btn--floating mml-btn--icon mml-number__dec",
        onClick: function onClick() {
          return setState(state - 1);
        }
      }, React__default['default'].createElement(Icon, {
        name: "remove"
      })), React__default['default'].createElement("span", {
        className: "mml-number__count"
      }, state), React__default['default'].createElement("span", {
        className: "mml-btn mml-btn--floating mml-btn--icon mml-number__inc",
        onClick: function onClick() {
          return setState(state + 1);
        }
      }, React__default['default'].createElement(Icon, {
        name: "add"
      })));
    };

    var Row = function Row(_ref) {
      var children = _ref.children;
      return React__default['default'].createElement("div", {
        className: "mml-row"
      }, children);
    };

    var ITEMS_PER_PAGE = 40;
    var VERTICAL_COMPENSATION = 3;
    var INITIAL_INDEX = ITEMS_PER_PAGE;
    var VIRTUOSO_START_INDEX = 10000;
    /**
     * DatePicker select
     */

    var DatePickerSelect = function DatePickerSelect(props) {
      var onChange = props.onChange,
          icalFilter = props.icalFilter,
          getItemData = props.getItemData,
          itemClassName = props.itemClassName,
          interval = props.interval,
          format = props.format,
          value = props.value; // Generate date items

      var generateItems = React.useCallback(function (quantity, firstIdx) {
        return Array(quantity).fill(true).map(function (_, idx) {
          return getItemData({
            interval: interval,
            format: format,
            value: value,
            idx: firstIdx + idx
          });
        }).filter(function (newItem) {
          return !icalFilter || icalFilter && icalFilter(newItem.value);
        });
      }, [interval, format, value, icalFilter, getItemData]);

      var _useState = React.useState(generateItems(ITEMS_PER_PAGE * 2, -ITEMS_PER_PAGE)),
          items = _useState[0],
          setItems = _useState[1];

      var _useState2 = React.useState(VIRTUOSO_START_INDEX),
          firstItemIndex = _useState2[0],
          setFirstItemIndex = _useState2[1];

      var initialIndexOffset = React.useRef(INITIAL_INDEX);

      var _useState3 = React.useState(null),
          selectedIdx = _useState3[0],
          setSelectedIdx = _useState3[1];

      var handleClick = React.useCallback(function (item) {
        onChange(item.value);
        var firstItemIndex = initialIndexOffset.current || 0;
        var nextFirstItemIdx = firstItemIndex - INITIAL_INDEX - ITEMS_PER_PAGE;
        var missingTopItems = nextFirstItemIdx - item.idx + VERTICAL_COMPENSATION; // prepend date items, when the selected date's index is too low we prepend
        // some date options so that it will remain vertically centered in the middle

        if (missingTopItems >= 0) {
          nextFirstItemIdx -= missingTopItems;
          initialIndexOffset.current -= firstItemIndex - missingTopItems;
          setItems(function (items) {
            return [].concat(generateItems(missingTopItems, nextFirstItemIdx), items);
          });
        }

        setSelectedIdx(item.idx);
      }, [setItems, generateItems, initialIndexOffset, onChange]);
      var appendItems = React.useCallback(function (lastItemIndex) {
        setItems(function (items) {
          return [].concat(items, generateItems(ITEMS_PER_PAGE, lastItemIndex));
        });
      }, [setItems, generateItems]); // @see https://git.io/JIUuo

      var prependItems = React.useCallback(function () {
        var firstItemIndex = initialIndexOffset.current || 0;
        var nextFirstItemIdx = firstItemIndex - INITIAL_INDEX - ITEMS_PER_PAGE;

        if (initialIndexOffset) {
          initialIndexOffset.current -= ITEMS_PER_PAGE;
        }

        setItems(function (items) {
          return [].concat(generateItems(ITEMS_PER_PAGE, nextFirstItemIdx), items);
        });
        setFirstItemIndex(firstItemIndex - ITEMS_PER_PAGE);
        return false;
      }, [setItems, generateItems, initialIndexOffset]); // on mount check if there is a selected value and save its idx in state

      React.useEffect(function () {
        if (value) {
          var initialSelectedIdx = null;

          for (var i = 0; i < items.length; i++) {
            if (items[i].isSelected(value)) {
              initialSelectedIdx = items[i].idx;
              break;
            }
          }

          setSelectedIdx(initialSelectedIdx);
        }
      }, []); // eslint-disable-line

      return React__default['default'].createElement(Sn, {
        data: items,
        firstItemIndex: firstItemIndex,
        itemContent: function itemContent(_, item) {
          return React__default['default'].createElement("div", {
            className: itemClassName + (" mml-datepicker__item " + (item.idx === selectedIdx ? 'mml-datepicker__item--selected' : '')),
            onClick: function onClick() {
              return handleClick(item);
            }
          }, item.displayValue);
        },
        endReached: appendItems,
        startReached: prependItems
      });
    };

    /**
     * Get item data
     */

    var getItemData = function getItemData(props) {
      var idx = props.idx,
          interval = props.interval,
          value = props.value,
          format = props.format;
      var newValue = idx >= 0 ? dayjs_min(value).add(idx * (interval * 24), 'hour') : dayjs_min(value).subtract(idx * (interval * 24) * -1, 'hour');
      return {
        idx: idx,
        value: newValue,
        displayValue: dayjs_min(newValue).format(format),
        isSelected: function isSelected(currentValue) {
          return dayjs_min(newValue).isSame(interval === 1 ? dayjs_min(currentValue) : dayjs_min(currentValue).add(interval, 'day'), 'date');
        }
      };
    };
    /**
     * DatePicker date
     */


    var DatePickerDate = function DatePickerDate(props) {
      return React__default['default'].createElement("div", {
        className: "mml-datepicker__select mml-datepicker__date"
      }, React__default['default'].createElement(DatePickerSelect, Object.assign({}, props, {
        itemClassName: "mml-datepicker__item--day",
        getItemData: getItemData
      })));
    };

    dayjs_min.extend(isBetween);
    /**
     * Get item data
     */

    var getItemData$1 = function getItemData(props) {
      var idx = props.idx,
          interval = props.interval,
          value = props.value,
          format = props.format;
      var newValue = idx >= 0 ? dayjs_min(value).add(idx * interval, 'minute') : dayjs_min(value).subtract(idx * -1 * interval, 'minute');
      return {
        idx: idx,
        value: newValue,
        displayValue: dayjs_min(newValue).format(format),
        isSelected: function isSelected(currentValue) {
          return dayjs_min(newValue).isBetween(currentValue, dayjs_min(currentValue).add(interval - 1, 'minute'), 'minute', '[]');
        }
      };
    };
    /**
     * DatePicker time
     */


    var DatePickerTime = function DatePickerTime(props) {
      return React__default['default'].createElement("div", {
        className: "mml-datepicker__select mml-datepicker__time"
      }, React__default['default'].createElement(DatePickerSelect, Object.assign({}, props, {
        itemClassName: "mml-datepicker__item--time",
        getItemData: getItemData$1
      })));
    };

    var DatePicker = function DatePicker(_ref) {
      var name = _ref.name,
          selected = _ref.selected,
          dateInterval = _ref.dateInterval,
          timeInterval = _ref.timeInterval,
          dateFormat = _ref.dateFormat,
          timeFormat = _ref.timeFormat,
          fullDay = _ref.fullDay,
          icalFilter = _ref.icalFilter;

      var _useState = React.useState(selected),
          date = _useState[0],
          setDate = _useState[1];

      var handleChangeDate = function handleChangeDate(value) {
        setDate(function (prevDate) {
          return prevDate.set('date', value.get('date')).set('month', value.get('month')).set('year', value.get('year'));
        });
      };

      var handleChangeTime = function handleChangeTime(value) {
        setDate(function (prevDate) {
          return prevDate.set('minute', value.get('minute')).set('hour', value.get('hour'));
        });
      };

      return React__default['default'].createElement("div", {
        className: "mml-datepicker mml-datepicker--" + (fullDay ? 'single' : 'double')
      }, React__default['default'].createElement("input", {
        name: name,
        value: date.toISOString(),
        type: "hidden"
      }), React__default['default'].createElement(DatePickerDate, {
        icalFilter: icalFilter,
        format: dateFormat,
        value: date,
        onChange: handleChangeDate,
        interval: dateInterval
      }), !fullDay && React__default['default'].createElement(DatePickerTime, {
        icalFilter: icalFilter,
        format: timeFormat,
        value: date,
        onChange: handleChangeTime,
        interval: timeInterval
      }));
    };

    var setupIcalFilter = /*#__PURE__*/function () {
      var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(icalURL, duration) {
        var response, body, icalExpander$1;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return fetch(icalURL, {
                  method: 'GET',
                  redirect: 'follow',
                  credentials: 'same-origin'
                });

              case 2:
                response = _context.sent;
                _context.next = 5;
                return response.text();

              case 5:
                body = _context.sent;

                if (response.ok) {
                  _context.next = 8;
                  break;
                }

                throw new Error(body);

              case 8:
                icalExpander$1 = new icalExpander({
                  ics: body,
                  maxIterations: 10
                });
                return _context.abrupt("return", function () {
                  return function (start) {
                    if (!start) return true;

                    var _icalExpander$between = icalExpander$1.between(start.toDate(), start.add(duration, 'minute').toDate()),
                        events = _icalExpander$between.events;

                    return !events.length;
                  };
                });

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function setupIcalFilter(_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }();

    var Scheduler = function Scheduler(_ref2) {
      var name = _ref2.name,
          selected = _ref2.selected,
          icalAvailability = _ref2.icalAvailability,
          _ref2$duration = _ref2.duration,
          duration = _ref2$duration === void 0 ? 30 : _ref2$duration,
          _ref2$dateInterval = _ref2.dateInterval,
          dateInterval = _ref2$dateInterval === void 0 ? 1 : _ref2$dateInterval,
          _ref2$timeInterval = _ref2.timeInterval,
          timeInterval = _ref2$timeInterval === void 0 ? 30 : _ref2$timeInterval,
          _ref2$dateFormat = _ref2.dateFormat,
          dateFormat = _ref2$dateFormat === void 0 ? 'ddd MMM DD' : _ref2$dateFormat,
          _ref2$timeFormat = _ref2.timeFormat,
          timeFormat = _ref2$timeFormat === void 0 ? 'hh:mm A' : _ref2$timeFormat,
          _ref2$fullDay = _ref2.fullDay,
          fullDay = _ref2$fullDay === void 0 ? false : _ref2$fullDay;

      var _useState = React.useState(false),
          loading = _useState[0],
          setLoading = _useState[1];

      var _useState2 = React.useState(''),
          error = _useState2[0],
          setError = _useState2[1];

      var _useState3 = React.useState(function () {
        return function () {
          return true;
        };
      }),
          icalFilter = _useState3[0],
          setIcalFilter = _useState3[1];

      React.useEffect(function () {
        if (!icalAvailability) return;
        setLoading(true);
        setupIcalFilter(icalAvailability, duration).then(setIcalFilter)["catch"](function (err) {
          console.warn('loading ical failed', {
            icalAvailability: icalAvailability,
            err: err
          });
          setError('iCal availability could not be loaded');
        })["finally"](function () {
          return setLoading(false);
        });
      }, [icalAvailability, duration]);
      return React__default['default'].createElement(Card, {
        className: "mml-scheduler"
      }, React__default['default'].createElement(CardHeader, {
        icon: "date_range",
        text: "Scheduler"
      }), React__default['default'].createElement(CardBody, null, error && !loading && React__default['default'].createElement(Error$1, {
        error: "Failed, error: " + error
      }), !error && loading && React__default['default'].createElement(Loading, {
        loading: true,
        text: "Loading availability"
      }), !error && !loading && React__default['default'].createElement(DatePicker, {
        name: name,
        selected: selected ? dayjs_min(selected) : dayjs_min().startOf('hour'),
        dateInterval: dateInterval,
        timeInterval: timeInterval,
        dateFormat: dateFormat,
        timeFormat: timeFormat,
        fullDay: fullDay,
        icalFilter: icalFilter
      })));
    };

    var Success = function Success(_ref) {
      var success = _ref.success;
      if (success) return React__default['default'].createElement("div", {
        className: "mml-success"
      }, success);
      return null;
    };

    /**
     * Simple paragraph text element
     */

    var Text = function Text(_ref) {
      var text = _ref.text,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className;
      return React__default['default'].createElement("div", {
        className: ("mml-text " + className).trim()
      }, text);
    };

    /**
     * The converters maps MML tags to react nodes
     * Every converter is passed the MML tag as well as the children (as React nodes)
     */

    var converters = {
      button: function button(tag) {
        return React__default['default'].createElement(Button, Object.assign({}, tag.attributes, {
          key: tag.key,
          text: tag.getText(),
          name: tag.attributes.name,
          value: tag.attributes.value
        }));
      },
      button_list: function button_list(tag, children) {
        return React__default['default'].createElement(ButtonList, Object.assign({}, tag.attributes, {
          key: tag.key
        }), children);
      },
      input: function input(tag) {
        return React__default['default'].createElement(Input, Object.assign({}, tag.attributes, {
          key: tag.key,
          name: tag.attributes.name,
          value: tag.attributes.value
        }));
      },
      add_to_calendar: function add_to_calendar(tag) {
        return React__default['default'].createElement(AddToCalendar, Object.assign({}, tag.attributes, {
          key: tag.key,
          title: tag.attributes.title,
          start: tag.attributes.start,
          end: tag.attributes.end
        }));
      },
      col: function col(tag, children) {
        return React__default['default'].createElement(Col, Object.assign({}, tag.attributes, {
          key: tag.key
        }), children);
      },
      row: function row(tag, children) {
        return React__default['default'].createElement(Row, Object.assign({}, tag.attributes, {
          key: tag.key
        }), children);
      },
      icon: function icon(tag) {
        return React__default['default'].createElement(Icon, Object.assign({}, tag.attributes, {
          key: tag.key,
          name: tag.attributes.name
        }));
      },
      image: function image(tag) {
        return React__default['default'].createElement(Image, Object.assign({}, tag.attributes, {
          key: tag.key,
          src: tag.attributes.src
        }));
      },
      md: function md(tag) {
        return React__default['default'].createElement(MD, Object.assign({}, tag.attributes, {
          key: tag.key,
          text: tag.getText()
        }));
      },
      text: function text(tag) {
        return React__default['default'].createElement(Text, Object.assign({}, tag.attributes, {
          key: tag.key,
          text: tag.getText()
        }));
      },
      scheduler: function scheduler(tag) {
        return React__default['default'].createElement(Scheduler, Object.assign({}, tag.attributes, {
          key: tag.key,
          name: tag.attributes.name,
          dateInterval: parseInt(tag.attributes.dateInterval, 10) || 1,
          timeInterval: parseInt(tag.attributes.timeInterval, 10) || 30,
          duration: parseInt(tag.attributes.duration, 10) || 30,
          selected: tag.attributes.selected,
          fullDay: tag.attributes.fullDay === 'true',
          icalAvailability: tag.attributes.icalAvailability
        }));
      },
      carousel: function carousel(tag, children) {
        return React__default['default'].createElement(Carousel, Object.assign({
          slideWidth: tag.attributes.slideWidth
        }, tag.attributes, {
          key: tag.key
        }), children);
      },
      item: function item(tag, children) {
        return React__default['default'].createElement(CarouselItem, Object.assign({}, tag.attributes, {
          key: tag.key
        }), children);
      },
      number: function number(tag) {
        return React__default['default'].createElement(Number$1, Object.assign({}, tag.attributes, {
          key: tag.key,
          name: tag.attributes.name,
          value: tag.attributes.value
        }));
      }
    };

    /**
     * Tree - The tree object for MML tags
     */

    var Tree = /*#__PURE__*/function () {
      function Tree(node, children, customConvertors) {
        this.converters = _extends({}, converters, customConvertors);
        this.node = node;
        this.children = children;
        this.reactElements = this.toReact();
        this.name = node.attributes.name;
        this.type = node.attributes.type;
      }
      /**
       * convert all nodes to react and maintain the hierarchy
       */


      var _proto = Tree.prototype;

      _proto.toReact = function toReact(parent) {
        var _this = this;

        if (parent === void 0) {
          parent = this;
        }

        var reactNodes = [];
        (parent.children || []).forEach(function (child, i) {
          var converter = _this.converters[child.name];

          if (!converter || !Object.hasOwnProperty.call(_this.converters, child.name)) {
            throw Error("Converter not found for tag " + child.name + ", Available converters are " + Object.keys(_this.converters));
          }

          var children = _this.toReact(child);

          child.key = "tag-" + child.name + "-position-" + i;
          reactNodes.push(converter(child, children));
        });
        return reactNodes;
      };

      return Tree;
    }();

    /**
     * SourceToXML - Takes an MML string and converts it to XML nodes
     *
     * @param {string} source MML tag string
     *
     * @returns {array} an Array of XML nodes
     */

    function SourceToXML(source) {
      var src$1 = source.trim(); // the wrapping MML tags are optional, for parsing simplicity we automatically add them if they are not already there

      if (!src$1.startsWith('<mml')) src$1 = "<mml>" + source + "</mml>"; // emulate HTML handling of & escaping

      var unescapedAmps = /&(?!amp;|lt;|gt;)/g;
      src$1 = src$1.replace(unescapedAmps, '&amp;'); // convert the string to XML nodes
      // this library is relatively lightweight and doesn't do a ton of validation

      return src(src$1);
    }

    function convertNodes(nodes) {
      return nodes.reduce(function (acc, node) {
        var element = node;
        var children;
        if (element.children) children = convertNodes(element.children);
        var name = element.name;

        if (node.type === 'text') {
          if (node.text.trim().length) name = 'text';else return acc; // skip empty text elements
        }

        acc.push(new MMLTag(name, node, children));
        return acc;
      }, []);
    }
    /**
     * XMLtoMMLTree - Takes an array of XML nodes and converts it into an MML Tree
     *
     * @param {type} XMLNodes an array of XML nodes
     *
     * @returns {MMLTree} The MML tree
     */


    function XMLtoMMLTree(document, customConvertors) {
      if (!document || !document.children || !document.children.length) throw new Error('bad input');
      var mmlNode = document.children[0];
      if (mmlNode.name !== 'mml') throw new Error('missing mml tag');
      return new Tree(mmlNode, convertNodes(mmlNode.children), customConvertors);
    }
    /**
     * Takes an MML string and returns an MML Tree
     *
     * @param {string} source MML tag string
     *
     *  @returns {Tree} An MML Tree
     */

    function Parse(source, customConvertors) {
      var XMLNodes = SourceToXML(source);
      return XMLtoMMLTree(XMLNodes, customConvertors);
    }

    /**
     * MML root component
     */

    var MML = function MML(_ref) {
      var source = _ref.source,
          onSubmit = _ref.onSubmit,
          converters = _ref.converters,
          _ref$theme = _ref.theme,
          theme = _ref$theme === void 0 ? '' : _ref$theme,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className,
          _ref$Loading = _ref.Loading,
          Loading$1 = _ref$Loading === void 0 ? Loading : _ref$Loading,
          _ref$Error = _ref.Error,
          Error = _ref$Error === void 0 ? Error$1 : _ref$Error,
          _ref$Success = _ref.Success,
          Success$1 = _ref$Success === void 0 ? Success : _ref$Success;

      var _useState = React.useState(''),
          error = _useState[0],
          setError = _useState[1];

      var _useState2 = React.useState({
        loading: false,
        error: '',
        success: ''
      }),
          submitState = _useState2[0],
          setSubmitState = _useState2[1];

      var tree = React.useMemo(function () {
        try {
          return Parse(source, converters);
        } catch (e) {
          console.warn('mml parsing error: ', source, e);
          setError("This chat message has invalid formatting and can't be shown");
          return null;
        }
      }, [source, converters]);
      var handleSubmit = React.useCallback( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(event) {
          var state;
          return runtime_1.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  event.preventDefault();
                  state = {};
                  if (tree != null && tree.name) state.mml_name = tree.name; // include mml_name in the data

                  new FormData(event.currentTarget).forEach(function (value, key) {
                    state[key] = value;
                  });

                  if (onSubmit) {
                    _context.next = 6;
                    break;
                  }

                  return _context.abrupt("return", console.warn('Forgot to pass onSubmit prop to <MML/>? payload:', state));

                case 6:
                  _context.prev = 6;
                  setSubmitState({
                    loading: true,
                    error: '',
                    success: ''
                  });
                  _context.next = 10;
                  return onSubmit(state);

                case 10:
                  setSubmitState({
                    loading: false,
                    error: '',
                    success: 'submitted'
                  });
                  _context.next = 16;
                  break;

                case 13:
                  _context.prev = 13;
                  _context.t0 = _context["catch"](6);
                  setSubmitState({
                    loading: false,
                    error: 'Failed to send the request. Please try again.',
                    success: ''
                  });

                case 16:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[6, 13]]);
        }));

        return function (_x) {
          return _ref2.apply(this, arguments);
        };
      }(), [onSubmit, tree]);
      return React__default['default'].createElement("div", {
        className: "mml-container " + theme + " " + className,
        "data-testid": "mml-container"
      }, error ? React__default['default'].createElement("div", {
        className: "mml-wrap"
      }, Error && React__default['default'].createElement(Error, {
        error: error
      })) : React__default['default'].createElement("form", {
        onSubmit: handleSubmit,
        className: "mml-wrap",
        "data-testid": "mml-form"
      }, tree != null && tree.type ? React__default['default'].createElement("div", {
        className: "mml-card"
      }, tree == null ? void 0 : tree.reactElements) : tree == null ? void 0 : tree.reactElements, submitState.loading && Loading$1 && React__default['default'].createElement(Loading$1, {
        loading: submitState.loading
      }), submitState.success && Success$1 && React__default['default'].createElement(Success$1, {
        success: submitState.success
      }), submitState.error && Error && React__default['default'].createElement(Error, {
        error: submitState.error
      })));
    };

    var mmlReact_esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AddToCalendar: AddToCalendar,
        Button: Button,
        ButtonList: ButtonList,
        Card: Card,
        CardBody: CardBody,
        CardHeader: CardHeader,
        Carousel: Carousel,
        CarouselItem: CarouselItem,
        Col: Col,
        Error: Error$1,
        Icon: Icon,
        Image: Image,
        Input: Input,
        Loading: Loading,
        MD: MD,
        MML: MML,
        MMLTag: MMLTag,
        Number: Number$1,
        Parse: Parse,
        Row: Row,
        Scheduler: Scheduler,
        SourceToXML: SourceToXML,
        Success: Success,
        Text: Text,
        Tree: Tree,
        XMLtoMMLTree: XMLtoMMLTree,
        converters: converters,
        truncate: truncate
    });

    exports.ActionsIcon = ActionsIcon;
    exports.Attachment = Attachment;
    exports.AttachmentActions = AttachmentActions;
    exports.Audio = Audio;
    exports.AutoCompleteTextarea = ReactTextareaAutocomplete;
    exports.Avatar = Avatar;
    exports.Card = Card$1;
    exports.Channel = Channel$1;
    exports.ChannelActionContext = ChannelActionContext;
    exports.ChannelActionProvider = ChannelActionProvider;
    exports.ChannelHeader = ChannelHeader;
    exports.ChannelList = ChannelList;
    exports.ChannelListMessenger = ChannelListMessenger;
    exports.ChannelPreview = ChannelPreview;
    exports.ChannelPreviewMessenger = ChannelPreviewMessenger;
    exports.ChannelSearch = ChannelSearch;
    exports.ChannelStateContext = ChannelStateContext;
    exports.ChannelStateProvider = ChannelStateProvider;
    exports.Chat = Chat;
    exports.ChatAutoComplete = ChatAutoComplete;
    exports.ChatContext = ChatContext;
    exports.ChatDown = ChatDown;
    exports.ChatProvider = ChatProvider;
    exports.CommandItem = CommandItem;
    exports.ComponentContext = ComponentContext;
    exports.ComponentProvider = ComponentProvider;
    exports.ConnectionStatus = ConnectionStatus;
    exports.CooldownTimer = CooldownTimer;
    exports.DateSeparator = DateSeparator;
    exports.DefaultSuggestionList = List;
    exports.DefaultSuggestionListHeader = DefaultSuggestionListHeader;
    exports.DefaultSuggestionListItem = Item$1;
    exports.DefaultTriggerProvider = DefaultTriggerProvider;
    exports.DeliveredCheckIcon = DeliveredCheckIcon;
    exports.EditMessageForm = EditMessageForm;
    exports.EmojiContext = EmojiContext;
    exports.EmojiIconLarge = EmojiIconLarge;
    exports.EmojiIconSmall = EmojiIconSmall;
    exports.EmojiPicker = EmojiPicker;
    exports.EmojiProvider = EmojiProvider;
    exports.EmoticonItem = EmoticonItem;
    exports.EmptyStateIndicator = EmptyStateIndicator;
    exports.ErrorIcon = ErrorIcon;
    exports.EventComponent = EventComponent;
    exports.FileAttachment = FileAttachment;
    exports.FileUploadIcon = FileUploadIcon;
    exports.FileUploadIconFlat = FileUploadIconFlat;
    exports.FixedHeightMessage = FixedHeightMessage;
    exports.Gallery = Gallery;
    exports.GiphyPreviewMessage = GiphyPreviewMessage;
    exports.ImageComponent = ImageComponent;
    exports.InfiniteScroll = InfiniteScroll;
    exports.LoadMoreButton = LoadMoreButton;
    exports.LoadMorePaginator = LoadMorePaginator;
    exports.LoadingChannels = LoadingChannels;
    exports.LoadingErrorIndicator = LoadingErrorIndicator;
    exports.LoadingIndicator = LoadingIndicator;
    exports.MAX_QUERY_CHANNELS_LIMIT = MAX_QUERY_CHANNELS_LIMIT;
    exports.MESSAGE_ACTIONS = MESSAGE_ACTIONS;
    exports.MML = MML$1;
    exports.Message = Message;
    exports.MessageActions = MessageActions;
    exports.MessageActionsBox = MessageActionsBox;
    exports.MessageCommerce = MessageCommerce;
    exports.MessageContext = MessageContext;
    exports.MessageDeleted = MessageDeleted;
    exports.MessageInput = MessageInput;
    exports.MessageInputContext = MessageInputContext;
    exports.MessageInputContextProvider = MessageInputContextProvider;
    exports.MessageInputFlat = MessageInputFlat;
    exports.MessageInputSmall = MessageInputSmall;
    exports.MessageList = MessageList;
    exports.MessageLivestream = MessageLivestream;
    exports.MessageNotification = MessageNotification;
    exports.MessageOptions = MessageOptions;
    exports.MessageProvider = MessageProvider;
    exports.MessageRepliesCountButton = MessageRepliesCountButton;
    exports.MessageSimple = MessageSimple;
    exports.MessageStatus = MessageStatus;
    exports.MessageTeam = MessageTeam;
    exports.MessageText = MessageText;
    exports.MessageTimestamp = MessageTimestamp;
    exports.Modal = Modal;
    exports.ModalComponent = ModalComponent;
    exports.PinIcon = PinIcon;
    exports.PinIndicator = PinIndicator;
    exports.QuotedMessagePreview = QuotedMessagePreview;
    exports.ReactionIcon = ReactionIcon;
    exports.ReactionSelector = ReactionSelector;
    exports.ReactionsList = ReactionsList;
    exports.ReplyIcon = ReplyIcon;
    exports.SUPPORTED_VIDEO_FORMATS = SUPPORTED_VIDEO_FORMATS;
    exports.SafeAnchor = SafeAnchor;
    exports.SearchInput = SearchInput;
    exports.SearchResults = SearchResults;
    exports.SendButton = SendButton;
    exports.SimpleReactionsList = SimpleReactionsList;
    exports.Streami18n = Streami18n;
    exports.Thread = Thread;
    exports.ThreadIcon = ThreadIcon;
    exports.Tooltip = Tooltip;
    exports.TranslationContext = TranslationContext;
    exports.TranslationProvider = TranslationProvider;
    exports.TypingContext = TypingContext;
    exports.TypingIndicator = TypingIndicator;
    exports.TypingProvider = TypingProvider;
    exports.UnMemoizedLoadMorePaginator = UnMemoizedLoadMorePaginator;
    exports.UploadsPreview = UploadsPreview;
    exports.UserItem = UserItem;
    exports.VirtualizedMessageList = VirtualizedMessageList;
    exports.Window = Window;
    exports.areMessagePropsEqual = areMessagePropsEqual;
    exports.areMessageUIPropsEqual = areMessageUIPropsEqual;
    exports.darkModeTheme = darkModeTheme;
    exports.deTranslations = deTranslations;
    exports.defaultDateTimeParser = defaultDateTimeParser;
    exports.defaultPinPermissions = defaultPinPermissions;
    exports.defaultScrollToItem = defaultScrollToItem;
    exports.defaultTimestampFormat = defaultTimestampFormat;
    exports.defaultTranslatorFunction = defaultTranslatorFunction;
    exports.emojiMarkdownPlugin = emojiMarkdownPlugin;
    exports.enTranslations = enTranslations;
    exports.esTranslations = esTranslations;
    exports.escapeRegExp = escapeRegExp;
    exports.frTranslations = frTranslations;
    exports.generateRandomId = generateRandomId;
    exports.getChannel = getChannel;
    exports.getDisplayImage = getDisplayImage;
    exports.getDisplayTitle = getDisplayTitle;
    exports.getGroupStyles = getGroupStyles;
    exports.getImages = getImages;
    exports.getLastReceived = getLastReceived;
    exports.getLatestMessagePreview = getLatestMessagePreview;
    exports.getMessageActions = getMessageActions;
    exports.getNonImageAttachments = getNonImageAttachments;
    exports.getReadByTooltipText = getReadByTooltipText;
    exports.getReadStates = getReadStates;
    exports.getWholeChar = getWholeChar;
    exports.handleActionWarning = handleActionWarning;
    exports.hiTranslations = hiTranslations;
    exports.insertIntro = insertIntro;
    exports.isAudioAttachment = isAudioAttachment;
    exports.isChannel = isChannel;
    exports.isDate = isDate;
    exports.isDayOrMoment = isDayOrMoment;
    exports.isFileAttachment = isFileAttachment;
    exports.isGalleryAttachmentType = isGalleryAttachmentType;
    exports.isImageAttachment = isImageAttachment;
    exports.isLanguageSupported = isLanguageSupported;
    exports.isMediaAttachment = isMediaAttachment;
    exports.isNumberOrString = isNumberOrString;
    exports.isOnlyEmojis = isOnlyEmojis;
    exports.isUserMuted = isUserMuted;
    exports.itTranslations = itTranslations;
    exports.jaTranslations = jaTranslations;
    exports.koTranslations = koTranslations;
    exports.makeDateMessageId = makeDateMessageId;
    exports.markDownRenderers = markDownRenderers$1;
    exports.matchMarkdownLinks = matchMarkdownLinks$1;
    exports.mentionsMarkdownPlugin = mentionsMarkdownPlugin;
    exports.messageCodeBlocks = messageCodeBlocks;
    exports.messageHasAttachments = messageHasAttachments;
    exports.messageHasReactions = messageHasReactions;
    exports.missingUseFlagHandlerParameterWarning = missingUseFlagHandlerParameterWarning;
    exports.missingUseMuteHandlerParamsWarning = missingUseMuteHandlerParamsWarning;
    exports.moveChannelUp = moveChannelUp;
    exports.nlTranslations = nlTranslations;
    exports.processMessages = processMessages;
    exports.ptTranslations = ptTranslations;
    exports.reactionHandlerWarning = reactionHandlerWarning;
    exports.renderAttachmentActions = renderAttachmentActions;
    exports.renderAttachmentWithinContainer = renderAttachmentWithinContainer;
    exports.renderAudio = renderAudio;
    exports.renderCard = renderCard;
    exports.renderFile = renderFile;
    exports.renderGallery = renderGallery;
    exports.renderImage = renderImage;
    exports.renderMedia = renderMedia;
    exports.renderPreviewText = renderPreviewText;
    exports.renderText = renderText;
    exports.ruTranslations = ruTranslations;
    exports.showMessageActionsBox = showMessageActionsBox;
    exports.trTranslations = trTranslations;
    exports.useActionHandler = useActionHandler;
    exports.useBreakpoint = useBreakpoint;
    exports.useChannelActionContext = useChannelActionContext;
    exports.useChannelDeletedListener = useChannelDeletedListener;
    exports.useChannelEditMessageHandler = useEditMessageHandler;
    exports.useChannelHiddenListener = useChannelHiddenListener;
    exports.useChannelMentionsHandler = useMentionsHandlers;
    exports.useChannelStateContext = useChannelStateContext;
    exports.useChannelTruncatedListener = useChannelTruncatedListener;
    exports.useChannelUpdatedListener = useChannelUpdatedListener;
    exports.useChannelVisibleListener = useChannelVisibleListener;
    exports.useChat = useChat;
    exports.useChatContext = useChatContext;
    exports.useComponentContext = useComponentContext;
    exports.useConnectionRecoveredListener = useConnectionRecoveredListener;
    exports.useCooldownTimer = useCooldownTimer;
    exports.useCustomStyles = useCustomStyles;
    exports.useDeleteHandler = useDeleteHandler;
    exports.useEditHandler = useEditHandler;
    exports.useEmojiContext = useEmojiContext;
    exports.useEnrichedMessages = useEnrichedMessages;
    exports.useFlagHandler = useFlagHandler;
    exports.useLastReadData = useLastReadData;
    exports.useMentionsHandler = useMentionsHandler;
    exports.useMessageContext = useMessageContext;
    exports.useMessageInputContext = useMessageInputContext;
    exports.useMessageInputState = useMessageInputState;
    exports.useMessageListElements = useMessageListElements;
    exports.useMessageListScrollManager = useMessageListScrollManager;
    exports.useMessageNewListener = useMessageNewListener;
    exports.useMobileNavigation = useMobileNavigation;
    exports.useMobilePress = useMobilePress;
    exports.useMuteHandler = useMuteHandler;
    exports.useNewMessageNotification = useNewMessageNotification;
    exports.useNotificationAddedToChannelListener = useNotificationAddedToChannelListener;
    exports.useNotificationMessageNewListener = useNotificationMessageNewListener;
    exports.useNotificationRemovedFromChannelListener = useNotificationRemovedFromChannelListener;
    exports.useOpenThreadHandler = useOpenThreadHandler;
    exports.usePaginatedChannels = usePaginatedChannels;
    exports.usePinHandler = usePinHandler;
    exports.usePrependedMessagesCount = usePrependedMessagesCount;
    exports.useReactionClick = useReactionClick;
    exports.useReactionHandler = useReactionHandler;
    exports.useRetryHandler = useRetryHandler;
    exports.useScrollLocationLogic = useScrollLocationLogic;
    exports.useShouldForceScrollToBottom = useShouldForceScrollToBottom;
    exports.useTranslationContext = useTranslationContext;
    exports.useTypingContext = useTypingContext;
    exports.useUserHandler = useUserHandler;
    exports.useUserPresenceChangedListener = useUserPresenceChangedListener;
    exports.useUserRole = useUserRole;
    exports.validateAndGetMessage = validateAndGetMessage;
    exports.withChannelActionContext = withChannelActionContext;
    exports.withChannelStateContext = withChannelStateContext;
    exports.withChatContext = withChatContext;
    exports.withComponentContext = withComponentContext;
    exports.withEmojiContext = withEmojiContext;
    exports.withMessageContext = withMessageContext;
    exports.withTranslationContext = withTranslationContext;
    exports.withTypingContext = withTypingContext;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

}({}, React, StreamChat));
//# sourceMappingURL=browser.full-bundle.js.map

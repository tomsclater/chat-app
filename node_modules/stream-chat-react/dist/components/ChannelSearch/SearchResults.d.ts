import React from 'react';
import { ChannelOrUserResponse } from './utils';
import type { DefaultStreamChatGenerics } from '../../types/types';
export declare type DropdownContainerProps<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = {
    results: ChannelOrUserResponse<StreamChatGenerics>[];
    SearchResultItem: React.ComponentType<SearchResultItemProps<StreamChatGenerics>>;
    selectResult: (result: ChannelOrUserResponse<StreamChatGenerics>) => Promise<void> | void;
    focusedUser?: number;
};
export declare type SearchResultItemProps<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = {
    index: number;
    result: ChannelOrUserResponse<StreamChatGenerics>;
    selectResult: (result: ChannelOrUserResponse<StreamChatGenerics>) => Promise<void> | void;
    focusedUser?: number;
};
export declare type SearchResultsProps<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = {
    results: Array<ChannelOrUserResponse<StreamChatGenerics>> | [];
    searching: boolean;
    selectResult: (result: ChannelOrUserResponse<StreamChatGenerics>) => Promise<void> | void;
    DropdownContainer?: React.ComponentType<DropdownContainerProps<StreamChatGenerics>>;
    popupResults?: boolean;
    SearchEmpty?: React.ComponentType;
    SearchLoading?: React.ComponentType;
    SearchResultItem?: React.ComponentType<SearchResultItemProps<StreamChatGenerics>>;
    SearchResultsHeader?: React.ComponentType;
};
export declare const SearchResults: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(props: SearchResultsProps<StreamChatGenerics>) => JSX.Element;
//# sourceMappingURL=SearchResults.d.ts.map
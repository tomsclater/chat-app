import React from 'react';
import type { ChannelOrUserResponse } from './utils';
import type { DefaultStreamChatGenerics } from '../../types/types';
export declare type ChannelSearchFunctionParams<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = {
    setQuery: React.Dispatch<React.SetStateAction<string>>;
    setResults: React.Dispatch<React.SetStateAction<Array<ChannelOrUserResponse<StreamChatGenerics>>>>;
    setResultsOpen: React.Dispatch<React.SetStateAction<boolean>>;
    setSearching: React.Dispatch<React.SetStateAction<boolean>>;
};
export declare type SearchInputProps<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = {
    channelSearchParams: {
        setQuery: React.Dispatch<React.SetStateAction<string>>;
        setResults: React.Dispatch<React.SetStateAction<ChannelOrUserResponse<StreamChatGenerics>[]>>;
        setResultsOpen: React.Dispatch<React.SetStateAction<boolean>>;
        setSearching: React.Dispatch<React.SetStateAction<boolean>>;
    };
    inputRef: React.RefObject<HTMLInputElement>;
    onSearch: (event: React.BaseSyntheticEvent) => void;
    query: string;
    /** Custom placeholder text to be displayed in the search input */
    placeholder?: string;
    searchFunction?: (params: ChannelSearchFunctionParams<StreamChatGenerics>, event: React.BaseSyntheticEvent) => Promise<void> | void;
};
export declare const SearchInput: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(props: SearchInputProps<StreamChatGenerics>) => JSX.Element;
//# sourceMappingURL=SearchInput.d.ts.map
import React, { useCallback } from 'react';
import { LoadingIndicator } from './LoadingIndicator';
import { Thumbnail } from './Thumbnail';
import { ThumbnailPlaceholder } from './ThumbnailPlaceholder';
import { RetryIcon } from './RetryIcon';
export var ImagePreviewer = function (_a) {
    var _b = _a.multiple, multiple = _b === void 0 ? true : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, imageUploads = _a.imageUploads, handleRemove = _a.handleRemove, handleRetry = _a.handleRetry, handleFiles = _a.handleFiles;
    var onClose = useCallback(function (id, event) {
        if (!id)
            return console.warn("image.id of closed image was \"null\", this shouldn't happen");
        handleRemove === null || handleRemove === void 0 ? void 0 : handleRemove(id, event);
    }, [handleRemove]);
    return (React.createElement("div", { className: "rfu-image-previewer" }, imageUploads === null || imageUploads === void 0 ? void 0 :
        imageUploads.map(function (image) {
            var url = image.url || image.previewUri;
            return (React.createElement("div", { key: image.id, className: "rfu-image-previewer__image" + (image.state === 'finished'
                    ? ' rfu-image-previewer__image--loaded'
                    : '') },
                image.state === 'failed' && (React.createElement("button", { type: "button", "aria-label": "Retry upload", className: "rfu-image-previewer__retry", onClick: function (event) { return handleRetry === null || handleRetry === void 0 ? void 0 : handleRetry(image.id, event); } },
                    React.createElement(RetryIcon, null))),
                url && (React.createElement(Thumbnail, { handleClose: function (event) { return onClose(image.id, event); }, image: url })),
                image.state === 'uploading' && (React.createElement(LoadingIndicator, { backgroundColor: "#ffffff19", color: "#ffffffb2" }))));
        }),
        handleFiles && !disabled && (React.createElement(ThumbnailPlaceholder, { handleFiles: handleFiles, multiple: multiple }))));
};
